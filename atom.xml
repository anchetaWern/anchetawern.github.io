<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-01-07T20:22:17+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plans for 2015]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/04/plans-for-2015/"/>
    <updated>2015-01-04T20:56:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/04/plans-for-2015</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Code]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/04/why-i-code/"/>
    <updated>2015-01-04T08:50:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/04/why-i-code</id>
    <content type="html"><![CDATA[<p>Why I code? I&rsquo;ve been thinking about this lately. Why is it that I love coding? What is it about coding that keeps me from doing it? What makes it so special? How do I maintain my love for coding even if its so frustrating most of the time. When I was younger I was into drawing. Cartoon characters, robots, sceneries, abstract art, and anything else that picked my interest. Not a week would past that I haven&rsquo;t added a new drawing in my collection. What kept me drawing back then was the sheer joy of adding a new drawing in my collection. It was sort of addictive. I couldn&rsquo;t wait to fill that old magazine with my drawings. In the end I ended up filling up about 8 old magazines with about 50 drawings each. Why did I stopped? It was around college days that I stopped drawing entirely. Mainly because of how busy it was and I really wanted to concentrate on my studies. College was my very first introduction to coding. The first programming language that I&rsquo;ve learned was c++. I easily picked up coding at first because we were just assigning variables and outputting strings. But as we dive deeper into adding actual logic in the programs that we wrote in our class, that&rsquo;s when my head started to hurt. I remember spending about 3 hours on our first project without making any progress. That was the dark ages when I didn&rsquo;t know how to ask Google for answers. Back then I never thought I&rsquo;d be doing coding as a primary source of work. I thought it was too difficult. Maybe I&rsquo;ll just do animation and stuff. But hey, Computer Programming was a major subject that I needed to pass. So it just came naturally that I needed to do something about it. That was when I started to take some of my free time and use it to practice writing some code. I took some of the exercises that we were having and tried to write it from scratch without looking at any of the notes. Once I&rsquo;ve successfully implemented it, I added some features. That was also when my Googling skills started to improve, as I needed some useful answers to the problems that I was having. Then I also discovered something that will change my life forever. Stackoverflow. I joined Stackoverflow in hopes that it will provide me some answers to the problems that I was having. Before I knew it, I have already asked about a hundred questions. Most of them with some useful answers from the community. Some were marked as a duplicate question, some were marked as non-useful or out of scope. Either way the comments and answers were really useful. Sometimes even the comments are enough.</p>

<p>Over time I got better at coding. I started to feel confident about my coding skills. I started believing that I could actually do this for a job. As I started to know more about programming and gain more experience. I realized just how much I still don&rsquo;t know. That&rsquo;s the time when I started my very first blog which I would write about some of the things that I&rsquo;ve learned in my coding adventures. At first I was writing about some VB.Net CRUD things. Because that was what they were teaching at school. I also wrote about some Java stuff when it was taught. Then came Web Development. HTML, CSS, JavaScript, PHP and MySQL. And I taught to myself. Dude! this is pretty sweet! I could write a program and have it used by many people as long as they&rsquo;re connected to the internet. That&rsquo;s when we were introduced to w3schools and htmlgoodies. These websites quickly became my best friend. They were my number one source of web stuff for a long time. But then came w3fools. Which made me realize that w3schools actually sucks. I started using MDN as my primary reference for web stuff as w3fools recommended.</p>

<p>Fast-forward to the present. I am now calling myself a web developer. Specifically a full-stack developer. Responsible for almost everything that&rsquo;s needed to release a whole website out in the open. I&rsquo;m a web developer for about 2 years now. Mainly doing some remote work. And sometimes freelancing on the side. And that leads us to the original question. Why I code? That&rsquo;s mainly because it gives you the ability to reach thousands of people and make their lives easier through the use of the app that you&rsquo;ve written. Its the joy of creating something out of nothing. The challenges that you encounter as you try to build your app. That rewarding feeling that you get when you finally implemented that feature which made your brain explode. Or that feeling that you got when you finally solved that bug that&rsquo;s been haunting you for 10 hours. Its also about the excitement that you feel whenever there&rsquo;s a shiny new toy that comes out. The shiny new toy can be any library, framework or programming language that was released recently. Finally, I code because I want to leave something to the world that will prove my existence. That I have onced lived and created this useful website or app that has been useful to many people. I&rsquo;m still far from that realization though. Like I said earlier, my side projects mainly solve a specific problem that I&rsquo;m having. And the projects that I&rsquo;m getting from the company I&rsquo;m currently working for are targeted only for a specific group of people and country. At most there will only be hundreds of people who will be able to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Year-End Review]]></title>
    <link href="http://anchetawern.github.io/blog/2014/12/29/year-end-review/"/>
    <updated>2014-12-29T17:44:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/12/29/year-end-review</id>
    <content type="html"><![CDATA[<p>This has been a very good and productive year. Lots of articles written, podcasts listened to, articles and books read, company and client projects, side-projects, travels, video games played, anime series and movies, video tutorials and talks watched. In this blog post I&rsquo;ll try to recollect some of those.</p>

<h3>Articles Written</h3>

<p>I&rsquo;m not going to list out every article I&rsquo;ve written on this blog for this year. We have the <a href="http://wern-ancheta.com/blog/archives/">archives</a> for that. So here are the articles that I consider the best from 2014. These are based from the number of responses I got from both the commenting system and social media:</p>

<ul>
<li><a href="http://wern-ancheta.com/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization/">A Whirlwind Tour of Web Developer Tools: Virtualization</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities/">A Whirlwind Tour of Web Developer Tools: Command Line Utilities</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice/">Being a dark matter developer must be nice</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">A Whirlwind Tour of Web Developer Tools: Build Tools</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/07/13/how-i-work-with-clients/">How I work with Clients</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/08/10/using-datatables-with-laravel/">Using Datatables with Laravel</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/10/25/always-scratch-your-developer-itch/">Always scratch your developer itch</a></li>
</ul>


<p>I have also started writing for Sitepoint&rsquo;s PHP Channel this year. Here are some of the articles I&rsquo;ve written:</p>

<ul>
<li><a href="http://www.sitepoint.com/database-versioning-dbv/">Database Versioning with DBV</a></li>
<li><a href="http://www.sitepoint.com/automate-php-phake-introduction/">Automate PHP with Phake</a></li>
<li><a href="http://www.sitepoint.com/create-movie-recommendation-app-prediction-io-setup/">Create a Movie Recommendation app with Prediction.IO</a></li>
<li><a href="http://www.sitepoint.com/getting-started-medoo-examples-use/">Getting Started with Medoo</a></li>
</ul>


<p>If you want to check out some of my other articles on Sitepoint, please visit <a href="http://www.sitepoint.com/author/wancheta/">my author page</a>.</p>

<h3>Podcasts Listened To</h3>

<h3>Articles Read</h3>

<p>There&rsquo;s a gazillion of them. To give you an idea how much I articles I&rsquo;ve read this year, here&rsquo;s a screenshot of session buddy, a chrome extension that I&rsquo;m using for saving sets of tabs.</p>

<p><img src="http://anchetawern.github.io/images/posts/2014_yearend_review/sessions.png" alt="sessions" /></p>

<h3>Books Read</h3>

<p>Ok I was kidding when I said I read lots of books this year. Actually I finished one. That is <a href="http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555">Thinking Fast and Slow by Daniel Kahneman</a>. I tend to read 2 to 3 books at a time, so I&rsquo;m halfway through <a href="http://www.amazon.com/This-Will-Make-You-Smarter/dp/0062109391">This Will Make You Smarter: New Scientific Concepts to Improve Your Thinking by John Brockman</a>. And recently I&rsquo;ve started reading <a href="http://www.amazon.com/Optimism-Bias-Irrationally-Positive-Brain/dp/0307473511">Optimism Bias by Tali Sharot</a>.</p>

<h3>Company and Client Projects</h3>

<p>I&rsquo;m really thankful for having a great boss who always gives me some nice and cool projects to work on. This year I worked on a total of 7 company projects. 1 of those was from the previous company that I worked for. I joined my current company in late March this year so there&rsquo;s that 1 leftover project. Here are some of the company projects that I&rsquo;m most proud of:</p>

<ul>
<li><a href="http://wern-ancheta.com/projects/wpdonations">WP-Donations</a></li>
<li><a href="http://wern-ancheta.com/projects/vmonial">Vmonial</a></li>
<li><a href="http://wern-ancheta.com/projects/blink">Blink</a></li>
<li><a href="http://wern-ancheta.com/projects/stockswitch">StockSwitch</a></li>
<li><a href="http://wern-ancheta.com/projects/stockswitch-mobile">StockSwitch Mobile</a></li>
</ul>


<p>As for the client project, I don&rsquo;t actively look for them and even if I get one, I usually reject it because of lack of experience on the technologies to be used and overall lack of interest. There&rsquo;s only one project that got through the tight screening, and that is the <a href="http://wern-ancheta.com/projects/esa/">ebay store automator</a>.</p>

<h3>Side-projects</h3>

<p>There&rsquo;s an abundance of side-projects this year. I usually do these projects to automate some of the tasks that I usually do by hand, or to get my hands dirty on a specific technology I&rsquo;ve never worked with before. Here are some of those:</p>

<ul>
<li><a href="https://github.com/anchetaWern/octo-views">octo-views</a></li>
<li><a href="https://github.com/anchetaWern/octo-iframe">octo-iframe</a></li>
<li><a href="https://github.com/anchetaWern/laravel-bootstrap-starter">laravel bootstrap starter</a></li>
<li><a href="https://github.com/anchetaWern/octo-wysiwyg">octo-wysiwyg</a></li>
<li><a href="https://github.com/anchetaWern/jekyll-contact">jekyll-contact</a></li>
<li><a href="https://github.com/anchetaWern/ahead">Ahead</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.wern.antares">Antares</a></li>
</ul>


<h3>Travels</h3>

<p>I recently got a car so I naturally got exposed more exposure to the outside world as an excuse for getting some driving experience. Here are some of the places I&rsquo;ve been to this year. I&rsquo;ve mostly visited towns inside the same province where I live:</p>

<ul>
<li>Botanical Garden, San Fernando City, La Union</li>
<li>Intake Dam, Sudipen, La Union</li>
<li>Bahay na Bato, Luna, La Union</li>
<li>Occalong Falls, Luna, La Union</li>
<li>Callao Caves, Penablanca, Cagayan</li>
<li>Aparri, Cagayan</li>
<li>Basilica Minore of Our Lady of Piat, Piat, Cagayan</li>
<li>Baluarte, Vigan City, Ilocos Sur</li>
<li>Pindangan Ruins, San Fernando City, La Union</li>
<li>Pugo Adventure, Pugo, La Union</li>
<li>Basilica Minore of Our Lady of Charity, Agoo, La Union</li>
<li>Namacpacan Church, Luna, La Union</li>
<li>Balay Anito Falls, Santol, La Union</li>
</ul>


<h3>Video Games</h3>

<p>Not really a lot. I just played a bunch of Pokemon on my Nintendo DS Lite. These days I barely even touch it since I&rsquo;ve already finished all the Pokemon games available for DS. That&rsquo;s why I&rsquo;m planning on selling it to buy the 3DS which apparently have some pretty badass Pokemon Games in Full 3D.</p>

<h3>Anime Series</h3>

<p>I&rsquo;m a big anime fan, and I&rsquo;m probably watching more than what I should be watching. At most around 40 anime series per year. But here are the only ones that I can recommend:</p>

<ul>
<li>Parasyte</li>
<li>Hamatora</li>
<li>Haikyu</li>
<li>Amagi Brilliant Park</li>
<li>Hunter x Hunter (2011 Remake)</li>
<li>Free!</li>
<li>Noragami</li>
<li>Terra Formars</li>
<li>Nanatsu no Taizai</li>
<li>Yowamushi Pedal</li>
<li>Tokyo Ghoul</li>
<li>Shingeki no Bahamut</li>
<li>Garo: The Animation</li>
<li>Terror in Resonance</li>
<li>Captain Earth</li>
<li>Log Horizon</li>
<li>Sword Art Online (Season 2)</li>
<li>Chunibyo</li>
<li>Chaika &ndash; The Coffin Princess</li>
<li>World Trigger</li>
<li>Barakamon</li>
<li>Brynhildr in the Darkness</li>
<li>Kagerou Project</li>
<li>Psycho Pass (Season 2)</li>
<li>Aldnoah.Zero</li>
<li>Akatsuki no Yona</li>
<li>Akame Ga Kill</li>
</ul>


<h3>Movies</h3>

<p>Lots of good movies this year but here&rsquo;s the best:</p>

<ul>
<li>Dawn of the Planet of the Apes</li>
<li>Captain America: Winter Soldier</li>
<li>X-men: Days of Future Past</li>
<li>Lucy</li>
<li>Divergent</li>
<li>Cloverfield</li>
</ul>


<h3>Talks</h3>

<p>I don&rsquo;t really go to conferences so I only watched talks from all over the world via Youtube. I&rsquo;ve watched a lot of them this year but I&rsquo;ll only pick this one talk:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=ctwEcZC_mmI">Our Web Development Workflow is Completely Broken</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brain Dump 0]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/22/brain-dump-0/"/>
    <updated>2014-11-22T19:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/22/brain-dump-0</id>
    <content type="html"><![CDATA[<p>Welcome to the first issue of brain dump. Brain dump is my attempt on putting the things that are always at the back of my mind into writing. Everything has its limits, and that includes the brain. Brain dump is my way of freeing up some space in my brain in hopes that I can use it on something else.</p>

<h3>Things I want to learn</h3>

<ul>
<li>Meteor.js</li>
<li>Design Patterns in PHP and JavaScript</li>
<li>Behavior Driven Development in PHP: Codeception</li>
<li>JavaScript Unit Testing</li>
<li>PostgreSQL</li>
<li>Ember.js</li>
<li>Python</li>
<li>Django</li>
<li>Ruby</li>
<li>Ruby on Rails</li>
<li>SEO</li>
<li>Web Semantics</li>
<li>How to program Arduino or Raspberry Pi</li>
<li>ARIA</li>
<li>Canvas</li>
<li>SVG</li>
<li>Agile Development</li>
<li>Unit Testing</li>
<li>Regression Testing</li>
</ul>


<h3>Books I want to read</h3>

<ul>
<li>How to Win Friends and Influence People</li>
<li>Strangers to Ourselves</li>
<li>The Willpower Instinct: How Self-Control Works</li>
<li>You Are Not So Smart</li>
<li>Sway: The Irresistible Pull of Irrational Behavior</li>
<li>Mindfulness</li>
<li>The Optimism Bias</li>
<li>The Social Animal</li>
<li>The Honest Truth About Dishonesty: How We Lie to Everyone</li>
<li>Yes! (50 Scientifically Proven Ways to be Persuasive)</li>
<li>The Design of Everyday Things</li>
<li>The Paradox of Choice: Why More is Less</li>
<li>The Compass of Pleasure</li>
<li>The Lucifer Effect: Understanding How Good People Turn Evil</li>
<li>The Pragmatic Programmer</li>
<li>Clean Code</li>
<li>Predictably Irrational</li>
<li>Social Engineer: The Art of Human Hacking</li>
<li>Made to Stick: Why Some Ideas Survive and Others Die</li>
<li>Head First Design Patterns</li>
<li>Refactoring &ndash; Improving the design of existing code</li>
<li>The Passionate Programmer</li>
<li>Ship it!</li>
<li>What Makes Your Brain Happy (and Why You Should Do the Opposite)</li>
<li>Don&rsquo;t Make Me Think</li>
<li>Incognito: The Secret Lives of the Brain</li>
<li>The Power of Habit (Why We Do What We Do)</li>
<li>The Productive Programmer</li>
<li>The Art of Choosing</li>
<li>Mistakes Were Made (But Not By Me)</li>
<li>Priceless</li>
<li>Switch: How to Change Things When Change is Hard</li>
<li>Writing Solid Code</li>
<li>Practices of an Agile Developer</li>
<li>Stumbling on Happiness</li>
<li>Man&rsquo;s Search for Meaning</li>
</ul>


<h3>Video Courses I want to watch</h3>

<ul>
<li>Codeschool &ndash; JavaScript Best Practices</li>
<li>Codeschool &ndash; Mastering Github</li>
<li>Codeschool &ndash; Design Fundamentals</li>
<li>Udemy &ndash; Life&rsquo;s Little Secrets</li>
<li>Udemy &ndash; Improve Your Mental Well Being</li>
<li>Udemy &ndash; Freelance Jumpstart</li>
<li>Udemy &ndash; Sauce of Great Writing</li>
<li>Udemy &ndash; Become a Super learner</li>
<li>Tutsplus &ndash; Automated Testing with PHP</li>
<li>Tutsplus &ndash; Artisan Commands and You</li>
<li>Tutsplus- Custom Interactive Maps with Google Maps API</li>
<li>Tutsplus &ndash; Canvas Essentials</li>
<li>Tutsplus &ndash; SVG for Web Design</li>
<li>Tutsplus &ndash; Django Unchained</li>
<li>Tutsplus &ndash; SVG Uncovered</li>
<li>Lynda &ndash; Web Semantics</li>
</ul>


<h3>Projects I want to build</h3>

<ul>
<li>Wordpress Donations Plugin &ndash; can accept bitcoins, paypal, stripe</li>
<li>Newsletter Subscription for Octopress &ndash; using Mailchimp API</li>
<li>Gilium &ndash; similar to hacker news reader; mobile app for aggregating and suggesting content</li>
<li>Dropshipster &ndash; a web application for easy dropshipping</li>
<li>Vacationr &ndash; vacation planner app + social network</li>
</ul>


<h3>Things I want to write</h3>

<ul>
<li>My web development workflow</li>
<li>My mobile development workflow</li>
<li>Getting Started Guides

<ul>
<li>Yahoo Finance API</li>
<li>Ionic</li>
<li>Shopify Theme Development</li>
<li>Twilio</li>
<li>Youtube API</li>
<li>Vimeo API</li>
<li>Facebook API</li>
<li>Twitter API</li>
<li>Linkedin API</li>
<li>Stripe API</li>
</ul>
</li>
<li>A Whirlwind Tour of Web Developer Tools

<ul>
<li>Linting</li>
<li>Testing</li>
<li>Pre-processors</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous &ndash; tools not mentioned in any of the above, but still useful</li>
</ul>
</li>
</ul>


<h3>Articles I want to read</h3>

<p>There&rsquo;s bazzilion of them. It would take forever to write it here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RabbitMQ in PHP]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php/"/>
    <updated>2014-11-16T15:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php</id>
    <content type="html"><![CDATA[<blockquote><p>This article was originally published at Binpress:<br/>http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164</p></blockquote>


<p>In this tutorial I&rsquo;m going to walk you through how you can use RabbitMQ in PHP. But first what is RabbitMQ? RabbitMQ is a message broker software. It acts as a middleman between a producer and a consumer. Producer being the data that we want to pass, and consumer being the entity that we want to pass it to. RabbitMQ uses a queue, you can think of it as a mailbox where you drop your letters. RabbitMQ then takes the letters and delivers it to its destination.</p>

<h3>Installing RabbitMQ</h3>

<p>In Ubuntu and other debian based operating system you can install RabbitMQ by executing the following commands from your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "deb http://www.rabbitmq.com/debian/ testing main"  | sudo tee  /etc/apt/sources.list.d/rabbitmq.list &gt; /dev/null
</span><span class='line'>sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
</span><span class='line'>sudo apt-key add rabbitmq-signing-key-public.asc
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install rabbitmq-server -y
</span><span class='line'>sudo service rabbitmq-server start
</span><span class='line'>sudo rabbitmq-plugins enable rabbitmq_management
</span><span class='line'>sudo service rabbitmq-server restart</span></code></pre></td></tr></table></div></figure>


<p>What the first command does is to append the rabbitmq source to the software sources list. Next we download the rabbitmq signing key using <code>wget</code>. Then add the key to Ubuntu. Next we call <code>apt-get update</code> to update the software sources list. Next we install the RabbitMQ server, start it then enable RabbitMQ management plugin. This provides an HTTP-based API management for monitoring your RabbitMQ server. Finally we restart the RabbitMQ server so that changes will take effect.
The default username and password is <code>guest</code>. And the default port in which it runs is <code>5672</code>.</p>

<p>If you&rsquo;re on another operating system, you can find how to install RabbitMQ for your specific operating system here: <a href="http://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a>.</p>

<h3>Working with RabbitMQ</h3>

<p>Once you&rsquo;re done installing RabbitMQ, we can now install the AMQP library for PHP. This implements the AMQP (Advanced Messaging Queue Protocol) protocol. As the name suggests it is a protocol used for messaging.
Start by creating a new directory, this is where we will put all the files for testing RabbitMQ. Next create a composer.json file and add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>      "videlalvaro/php-amqplib": "2.2.*"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Next, open up your terminal and <code>cd</code> into the directory you created earlier then execute <code>composer install</code> to install the AMQP library.</p>

<p>Before we move on, lets also install <a href="http://swiftmailer.org/">Swiftmailer</a>. You can do that by executing the following command from your terminal. This also adds an entry to Swiftmailer to your composer.json:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require swiftmailer/swiftmailer @stable</span></code></pre></td></tr></table></div></figure>


<p>We will be using Swiftmailer for the sample app that were going to create. What we will do is create an app that will send emails for our users. Normally emails takes a few seconds before it is sent, adding an attachment to the email also adds to that time. In the real world we don&rsquo;t really want our users to wait. What we want to do is make them believe that we have already sent the email for them by outputting to the screen that their message has been sent.
This is where RabbitMQ comes in. We will use it as some sort of a mailbox in which multiple users can just drop their messages in. RabbitMQ will then take care of sending the messages in the background.</p>

<h4>Sending Messages</h4>

<p>First lets create the form to be used for sending emails. This will accept the name and email address of the sender, the email address of the receiver and then the subject and message. Name the file <code>form.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cp">if(!empty($_GET[&#39;sent&#39;])){</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    Your message was sent!
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;mailer.php&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;from&quot;</span><span class="nt">&gt;</span>From<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;from&quot;</span> <span class="na">id=</span><span class="s">&quot;from&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;from_email&quot;</span><span class="nt">&gt;</span>From Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;from_email&quot;</span> <span class="na">id=</span><span class="s">&quot;from_email&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;to_email&quot;</span><span class="nt">&gt;</span>To Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;to_email&quot;</span> <span class="na">id=</span><span class="s">&quot;to_email&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;subject&quot;</span><span class="nt">&gt;</span>Subject<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;subject&quot;</span> <span class="na">id=</span><span class="s">&quot;subject&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>Message<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">id=</span><span class="s">&quot;message&quot;</span> <span class="na">cols=</span><span class="s">&quot;30&quot;</span> <span class="na">rows=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Send<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create the file which will push the message into the queue. Name the file <code>sender.php</code>.
Require the <code>autoload.php</code> file so that our dependencies will be automatically loaded by PHP. Then use the <code>AMQPConnection</code> and <code>AMQPMessage</code> from the AMQP library. <code>AMQPConnection</code> allows us to create a new connection to the RabbitMQ server and <code>AMQPMessage</code> allows us to create messages that we can push to the queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Connection\AMQPConnection</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Message\AMQPMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPConnection</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5672</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPMessage</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;delivery_mode&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_publish</span><span class="p">(</span><span class="nv">$msg</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;email_queue&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: form.php?sent=true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, first we create a new connection by creating a new instance of the <code>AMQPConnection</code> class. This requires the following arguments:</p>

<ul>
<li><strong>host</strong> &ndash; the host in which the RabbitMQ server is running. In this case we&rsquo;ve installed RabbitMQ on the same computer we are running the script in. So it should be <code>localhost</code>. Note that in the real world we install RabbitMQ on a another server, different from the one were using to serve our websites. So instead of <code>localhost</code> we use the public ip address of that server.</li>
<li><strong>port</strong> &ndash; the port in which the RabbitMQ server is running.</li>
<li><strong>user</strong> &ndash; the username to use for logging in to the server. By default the username is set to <code>guest</code>.</li>
<li><strong>password</strong> &ndash; the password of the user. By default the password is set to <code>guest</code>.</li>
</ul>


<p>Next we create a channel. We can do that by calling the <code>channel()</code> method from the connection that we have just declared.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare the queue to be used by calling the  <code>queue_declare</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>queue_declare</code> method takes up the following arguments:</p>

<ul>
<li><strong>queue name</strong> &ndash; a name that you want to use for the queue, you can supply anything for this.</li>
<li><strong>passive</strong> &ndash; a boolean value for specifying whether to check for an existing exchange.</li>
<li><strong>durable</strong> &ndash; a boolean value for specifying whether the RabbitMQ holds on to a queue when the server crashes.</li>
<li><strong>exclusive</strong> &ndash; a boolean value for specifying whether the queue is used by only one connection.</li>
<li><strong>auto-delete</strong> &ndash; a boolean value for specifying whether the queue is deleted when the last subscriber unsubscribes.</li>
</ul>


<p>Next we convert the POST data that we receive from the form to a JSON string. We can only pass strings as a message so we&rsquo;ll have to convert this later on into an array on the receiver&rsquo;s end.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we create a new message. This accepts 2 arguments: the data and an array of options. For the array of options we specify the <code>delivery_mode</code> to 2 which means that the message is persistent. This means that it isn&rsquo;t lost when the server crashes or an error occurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPMessage</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;delivery_mode&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we publish the message by calling the <code>basic_publish()</code> method on the channel. This accepts 3 arguments: the message, the exchange and the name of the queue. If you&rsquo;re wondering why we set the value of exchange to an empty string, that&rsquo;s because we don&rsquo;t really need it. The exchange is commonly used for pub-sub patterns. What were using here is just basic publish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_publish</span><span class="p">(</span><span class="nv">$msg</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;email_queue&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we just redirect the user to the form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: form.php?sent=true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Receiving Messages</h4>

<p>Now were ready to write the code that will receive the messages sent by users. Name the file <code>receiver.php</code>. Here&rsquo;s the full contents of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Connection\AMQPConnection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPConnection</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5672</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39; * Waiting for messages. To exit press CTRL+C&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message received&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$from</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$from_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from_email&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$to_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;to_email&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$subject</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$transporter</span> <span class="o">=</span> <span class="nx">Swift_SmtpTransport</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;smtp.gmail.com&#39;</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUsername</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_EMAIL&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_PASSWORD&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$mailer</span> <span class="o">=</span> <span class="nx">Swift_Mailer</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setSubject</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$from_email</span> <span class="o">=&gt;</span> <span class="nv">$from</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$to_email</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message was sent&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;channel&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">basic_ack</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;delivery_tag&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_qos</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_consume</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">callbacks</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, the first 5 lines of code are basically the same as the one we have on the <code>sender.php</code> file. Then we just output a message saying how we can stop the file from running. We need to run this file from the terminal so to stop it we just hit <code>CTRL + C</code>.</p>

<p>Next we declare a named function. This will be used for processing the message that we passed from the sender. The first thing it does is output that the message was received. Then we use <code>json_decode()</code> to convert the JSON string back to an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message received&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we extract the data and assign them to each of their own variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$from</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$from_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from_email&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$to_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;to_email&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$subject</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new transporter to be used by Swiftmailer. This allows us to use a gmail account for sending emails. Declaring a new instance accepts 3 arguments: the host, port and the encryption. Then we set the username and password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$transporter</span> <span class="o">=</span> <span class="nx">Swift_SmtpTransport</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;smtp.gmail.com&#39;</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUsername</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_EMAIL&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_PASSWORD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new mailer instance, and supplying the transporter as an argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mailer</span> <span class="o">=</span> <span class="nx">Swift_Mailer</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a new message, this also takes up the transporter as its argument. We then set the subject, from field, to field, and body of the message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setSubject</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$from_email</span> <span class="o">=&gt;</span> <span class="nv">$from</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$to_email</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we send the message and output that the message was sent. The last line basically tells RabbitMQ that the sending of the message has indeed been successful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot; * Message was sent&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;channel&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">basic_ack</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;delivery_tag&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Running the program</h4>

<p>You can now run the receiver by going to your terminal and executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php receiver.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once its running, go to your browser and access the <code>sender.php</code> file. Enter the details of your message and click on send. You&rsquo;re instantly greeted by a &lsquo;Your message was sent!&rsquo; text but if you immediately check your email account its not there yet. If its not there then the queue is still processing it. Check the output displayed on the terminal window where you executed the receiver. You should see a &lsquo;Message was sent&rsquo; output if the email was already sent.</p>

<h3>Conclusion</h3>

<p>RabbitMQ is a nice way for implementing messaging applications such as the one we created in this tutorial. We have barely scratch the surface with this tutorial. I recommend you check out the <a href="http://www.rabbitmq.com/getstarted.html">getting started guides</a> and the <a href="http://www.rabbitmq.com/documentation.html">documentation</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Christmas Wishlist 2014]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/08/christmas-wishlist-2014/"/>
    <updated>2014-11-08T10:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/08/christmas-wishlist-2014</id>
    <content type="html"><![CDATA[<h3>13-inch MacBook Pro with Retina display</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/macbookpro.jpg" alt="macbook pro" /></p>

<p>I have always wanted a Macbook Pro since birth. But due to its priciness I never got myself to buy one.</p>

<p>I&rsquo;d like to stick with the following hardware:</p>

<ul>
<li><strong>Processor</strong>: 3.0GHz Dual-core Intel Core i7</li>
<li><strong>Memory</strong>: 8GB 1600MHz DDR3L SDRAM</li>
<li><strong>Storage</strong>: 512GB PCIe-based Flash Storage</li>
</ul>


<h3>Google Nexus 5</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/google_nexus5.jpg" alt="Google Nexus 5" /></p>

<p>Not really a Google fanboy, I&rsquo;m just more curious about a smartphone made by Google rather than an Apple&rsquo;s iPhone or Samsung&rsquo;s Galaxy.</p>

<h3>PS Vita</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/ps_vita.jpg" alt="sony ps vita" /></p>

<p>I&rsquo;ve always been a fan of game consoles from Sony and their games are really good. Here are just some of the titles that I&rsquo;ve enjoyed playing on their PSP game console:</p>

<ul>
<li>Patapon &ndash; that&rsquo;s Patapon 1, 2 and 3</li>
<li>God Eater</li>
<li>Final Fantasy VII: Crisis Core</li>
<li>Harvest Moon &ndash; boy &amp; girl, innocent life and hero of the leaf valley</li>
<li>Ratchet and Clank</li>
<li>Naruto Ultimate Ninja Heroes &ndash; that&rsquo;s 1, 2 and 3</li>
<li>GTA: Vice City</li>
<li>Ratchet and Clank</li>
<li>Secret Agent Clank</li>
<li>Valhalla Knights</li>
</ul>


<h3>Nintendo 3ds</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/3ds.jpg" alt="Nintendo 3ds" /></p>

<p>To be honest I only really want this game console because of Pokemon. Nintendo 3ds have revolutionize the Pokemon gameplay in this console. There&rsquo;s a bunch of new stuff, and the best thing is that its 3D. So the Pokemon games created for this console won&rsquo;t really look like the Pokemon games created for Nintendo DS or Gameboy.</p>

<h3>Fitbit Flex</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/fitbit.jpg" alt="Fitbit" /></p>

<p>Fitbit is an all-in-one tracker for the body. With it you can do the following:</p>

<ul>
<li>track steps, distance and calories burned</li>
<li>monitor how long and well you sleep</li>
<li>silent wake alarm</li>
<li>logs food consumption, weight changes</li>
</ul>


<h3>Bose QuietComfort 25</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/bose.jpg" alt="Bose Noise Cancelling Headphones" /></p>

<p>I&rsquo;ve always wanted a noise cancelling headphones that I can use while working. Based on my research Bose is the best thing out there.</p>

<h3>Olympus ME-52W Noise Canceling Microphone</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/olympus_mic.jpg" alt="olympus microphone" /></p>

<p>Screencasting has always been on my TODO list. As a developer I wanted to create a Youtube Channel where I record screencasts of things I&rsquo;ve learned. The only thing that&rsquo;s stopping me is the not-so-quality sound recorder that comes with my laptop.</p>

<h3>Seagate Backup Plus 5TB Desktop External Hard Drive</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/seagate.jpg" alt="seagate external hard drive" /></p>

<p>Last thing on this list is this 5TB External Hard Drive from Seagate. I download a lot of stuff from the internet to prepare for events where there is no internet and I have nothing to do on my computer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always scratch your developer itch]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch/"/>
    <updated>2014-10-25T07:31:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch</id>
    <content type="html"><![CDATA[<p>As developers, no matter how busy we are with our lives, its important for us to always scratch our developer itches every now and then. What I mean by itches are the things that you want to do as a developer. Be it working on a side-project that you&rsquo;ve been wanting to do for months, playing with a new technology, library or a programming language. Or reading an in-depth article about a new programming technique. Or watching a video tutorial about a framework that you&rsquo;ve been wanting to learn. Or watching recorded talks from developer conferences all over the world. Or writing an article about a cool technique you&rsquo;ve discovered recently. And other things that you always have at the back of your mind but never really got to do because of lack of time.</p>

<p>Lack of time is always the reason we give to ourselves. But time is not really the problem. We can always make time for something if we really love to do it. Yes we also have lives to live. But we also need to give priority to the things that matter to us as a developer. As a developers, we have the responsibility for continuous learning. To improve our craft for the better. And this is what it means to scratch your developer itch. If you have it, you&rsquo;ll always find time to scratch it no matter how busy you may be.</p>

<p>On the contrary, we also have lives to live. Nothing is more important than our families and our lives as actual people. So giving time to that is our priority as a human being. After all life is not all about work. Life is about living it in the best way possible. And that is through spending quality time with our loved one&rsquo;s.</p>

<p>In conclusion, its really all about balance. If you can&rsquo;t find time every weekend to scratch your own developer itch, then maybe do it once or twice a month. Maybe 4-8 hours twice a month doing a side project is a good start. You can also go to work early and read up on blogs before and after the alloted time for work. Listen to podcasts while commuting. Most podcasts provide download links to each episode which you can save into your mp3 player of smartphone. Watching a 5-minute video tutorial just before going to bed. Every bit of time counts. It doesn&rsquo;t matter how little or how much, what&rsquo;s important is to give time to scratch our developer itches whenever we can. If you do, you&rsquo;ll be a happier developer. Its like the feeling you get when you were finally able to get what you&rsquo;ve been wanting to buy for a long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Sleep]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/18/on-sleep/"/>
    <updated>2014-10-18T20:26:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/18/on-sleep</id>
    <content type="html"><![CDATA[<p>As developers we tend to not give much priority to sleep. Most of the time its due to a lot of responsibilities: work, family, and side-projects. And oftentimes we even bring in our todo list in our mind when we go to bed.
As a developer myself, I tend to get less sleep than what&rsquo;s required. Sometimes not enough to fully function and be productive during the day. In this blog post I&rsquo;m going to share some of the things I&rsquo;ve learned about sleep.</p>

<h3>Stages of Sleep</h3>

<p>There are actually stages to sleep, its not just being awake or asleep. It is important that we understand this concept because its the core of what sleep is all about.</p>

<ol>
<li><strong>Stage 1</strong> &ndash; also called light sleep. This is where we drift in and out of sleep.</li>
<li><strong>Stage 2</strong> &ndash; heart rate slows down and body temperature starts decreasing in preparation for deep sleep.</li>
<li><strong>Stage 3</strong> &ndash; breathing becomes slower, blood pressure begins to drop, muscles becomes relaxed, cell growth and restoration occurs.</li>
<li><strong>Stage 4</strong> &ndash; slow brain waves are produced.</li>
<li><strong>REM</strong> &ndash; Rapid Eye Movement sleep. This is where dreams usually occur. The body becomes immobile. Energy is provided to the brain and body.</li>
</ol>


<h3>Factors Affecting Sleep</h3>

<p>There are 5 factors which affects sleep:</p>

<ul>
<li>Light</li>
<li>Consistency</li>
<li>Activeness</li>
<li>Environment</li>
<li>Consumption</li>
</ul>


<h4>Light</h4>

<p>Light affects the production of melatonin, a sleep hormone. Ample exposure to light during the day, and minimal exposure during the night 1-2 hours before sleep is recommended. The best light source is sunlight in the morning around 6-8 AM. For rainy days you can use light boxes. The main idea is that exposure to light helps produce serotonin, a neurotransmitter which affects sleep.</p>

<p>Earlier I&rsquo;ve said that light exposure should be minimized during the night. But we haven&rsquo;t really defined what light is. Light is not just the fluorescent light, its also the light which is emmitted by electronic devices such as laptops, tablets and smartphones. And if its not already obvious, the light which comes from a television is also light. As a developer I want to maximize the amount of time I spend doing something productive. And that almost always means staring at the computer screen until I actually go to bed. This is not good for sleep as it decreases melatonin production. A good alternative is to install <a href="https://justgetflux.com/">flux</a>. What it does is adjust the color temperature to adapt to the time of the day. This effectively reduces the bluelight which is bad for sleep. If you&rsquo;re using a tablet or smartphone at night, simply look for similar apps. <a href="https://play.google.com/store/apps/details?id=jp.ne.hardyinfinity.bluelightfilter.free&amp;hl=en">Blue light filter</a> is a good one for android phones.</p>

<h4>Consistency</h4>

<p>Our bodies love consistency. The idea is that you should always sleep and wake at the same time. Our bodies have something like an internal clock. And if you&rsquo;re consistent with your sleep schedule, you almost always wake up or feel sleepy at the same time of the day. You wouldn&rsquo;t even need an alarm clock to wake you up if you&rsquo;re consistent.</p>

<h4>Activeness</h4>

<p>Regular exercise is important. As developers, were basically one of the people with the most sedentary job. Our brains and fingers are the only part of the body that is moving. So to get good sleep we must make it a habit to have exercise of around 20-30 minutes a day.
Quality sleep is all about temperature oscillation. The idea is that the higher the temperature our body reaches during the day, the lower it gets during the night. And the lower the temperature means more deep sleep.
Take note that exercise a few hours before sleep is bad as it makes you active. Personally I prefer exercising in the morning as it completely removes the possibility of exercising too near before bed time. And it hits 2 birds with one stone, as I also get some morning sunlight while exercising.
Jogging, cycling and running are good types of exercise.</p>

<h4>Environment</h4>

<p>The environment also affects sleep. The temperature should neither be too hot or too cold. Around 18-23 degree celsius is a good baseline. Turning on the AC is also good. It effectively lowers the room temperature and also blocks out outside noises because of its white noise. Its a no-brainer that to get quality sleep you must always sleep somewhere where you&rsquo;re comfortable.
Sleeping position affects the quality of sleep as well, the general rule is to always sleep in a position in which you are comfortable. But its always a good idea to avoid sleeping on your stomach, as it reduces the amount of oxygen that goes to your lungs.</p>

<h4>Consumption</h4>

<p>What we eat affects our sleep as well. Here are some foods which is good and bad for sleep.</p>

<h5>Foods to consume</h5>

<ul>
<li>Cherries</li>
<li>Milk</li>
<li>Jasmine Rice</li>
<li>Banana</li>
<li>Sweet Potato</li>
<li>Turkey</li>
<li>Valerian Tea</li>
<li>Walnuts</li>
<li>Almonds</li>
<li>Cheese and Crackers</li>
<li>Lettuce</li>
<li>Tuna</li>
<li>Garlic</li>
<li>Chamomile Tea</li>
<li>Honey</li>
<li>Shrimp</li>
</ul>


<p>Basically anything else which can help produce melatonin. Or foods which has sedative properties or natural muscle relaxant.</p>

<h5>Foods to avoid</h5>

<ul>
<li>Alcohol</li>
<li>Fat</li>
<li>Dark Chocolate</li>
<li>Coffee</li>
<li>Soda</li>
<li>Spices</li>
<li>Chicken</li>
<li>Celery</li>
<li>Ice Cream</li>
</ul>


<p>Avoid anything that is high on fat content or caffeine. Its best if you can avoid caffeine entirely as it stays on your body for long periods of time once consumed. Also avoid diuretics, a subtance which promotes the production of urine.</p>

<p>The general consumption rule is don&rsquo;t eat too close to bed time. Eating around 2-4 hours before sleep is a good idea. 2 hours for light meals, 4 hours for heavy meals (dinner buffet).
Another important thing is to stay hydrated, 8-10 glasses (8 ounces) of water is recommended. You can definitely consume more if you&rsquo;re an athletic type or you sweat a lot. Always remember to not drink too much near bed time to avoid waking up to go to the bathroom. As a rule, avoid drinking too much water 1-2 hours before sleep. You can consume in small amounts (half a glass) if you want.</p>

<h5>Sleep Supplements</h5>

<p>Sleep supplements helps you fall asleep easier. Here are some sleep supplements which you can try if you&rsquo;re having trouble falling asleep:</p>

<ul>
<li>Valerian</li>
<li>Melatonin</li>
<li>Magnesium</li>
<li>Theanine</li>
<li>5-HTP</li>
<li>Antihistamines</li>
<li>Anti-depressants</li>
</ul>


<p>You can look for these supplements on Amazon or Google. Just be sure to consult your doctor before taking any of these supplements. Because some might negatively affect an existing condition that you already have.</p>

<p>As a general rule, sleep supplements should be avoided and should only be taken when you really can&rsquo;t sleep. They are just short-term fix, and they can leave chemicals in your body which can take around a week to fully expel. These chemicals might make you feel sleepy during the day which is not good for productivity.</p>

<h3>Napping</h3>

<p>You can nap around 20-30 minutes to gain a boost of productivity and avoid feeling tired or sleepy during the day. The best time to nap is around 1pm after lunch.</p>

<h3>Sleep Tracking</h3>

<p>If you want to have an idea how much sleep do you get per night. You can buy a sleep tracking device. Currently there are two brands which dominates this market: Jawbone and Fitbit. Just search for those on Amazon and pick one that feels right for you.
These devices gives you a detailed look on how much sleep you get. That includes all stages of sleep that I&rsquo;ve mentioned earlier. Its basically a wearable device (wristband) which you can then connect to an app in your smartphone.</p>

<h3>Sleep Disorders</h3>

<p>There are lots of sleep disorder out there but I&rsquo;m only going to walk through these two: Insomnia and Sleep State Misperception.</p>

<h4>Insomnia</h4>

<p>Insomnia is a sleep disorder characterized by difficulty or inability to fall asleep. It can be either primary or secondary insomnia.</p>

<ul>
<li><strong>Primary insomnia</strong> &ndash; means that your insomnia isn&rsquo;t caused by any existing medical condition.</li>
<li><strong>Secondary insomnia</strong> &ndash; means that your insomnia is a result of an existing medical condition such as asthma.</li>
</ul>


<p>If you believe you have an insomnia, its better to consult it to a doctor. A psychiatrist can help in most cases. Because oftentimes what&rsquo;s causing you to not be able to sleep is only in the mind.
If a psychiatrist cannot help you, then look for a sleep specialist.</p>

<h4>Sleep State Misperception</h4>

<p>Sleep State Misperception is the inability to perceive sleep from wakefulness. People with this condition may report having only slept for a few hours but in fact they have slept more than that.</p>

<h3>Tips and tricks on falling asleep faster</h3>

<p>Finally here are some tips and tricks on how to fall asleep faster:</p>

<ul>
<li>Exercise in morning. Brisk walking, jogging or running will do. If you have a bicycle you can also use that.</li>
<li>Take a warm bath before going to bed.</li>
<li>Read a boring book.</li>
<li>Use a todo list, don&rsquo;t try to hold things in your brain too much. As a developer, I always have things I want to do. Be it playing around a new technology, a library or a programming language. Or watching video tutorials and recorded talks from conferences all over the world. Or finally start a side-project I&rsquo;ve been wanting to do for months. Or read an article about what&rsquo;s new in the world of web development. Or write an article for my blog. The list is endless. The idea of a todo list is to put as much things outside of your brain as possible. This way you don&rsquo;t have to think about it or maintain it on your brain like a file that&rsquo;s saved in a filesystem in your computer.</li>
<li>Get into a journaling habit. A bullet list of all the things you&rsquo;ve accomplished that day will make you feel at ease and awesome about yourself.</li>
<li>Picture yourself as dead tired.</li>
<li>Relax your mind. Imagine a beautiful and relaxing scenery such as the beach or mountain top. Basically anything that you find peaceful.</li>
<li>Use air-conditioning to lower the room temperature. A cool environment will make you fall asleep faster.</li>
<li>Turn off all the lights. If you can go pitch black or near pitch black do it.</li>
<li>Hypnotize yourself. Imagine a pendulum swinging in front of your eyes back and forth.</li>
<li>Listen to relaxing music. Look for soft piano pieces by mozart and put it into your phone or mp3 player.</li>
<li>Get out of bed if you really can&rsquo;t sleep. If you still can&rsquo;t sleep 30 minutes after going to bed then its best to get out and do something that would occupy your mind. Like watching TV or reading a book. Just go back to bed once you feel sleepy again.</li>
<li>Change position. Put your pillow to where your feet is currently pointing.</li>
<li>Take some deep breaths. Inhale then count up to four then expel it around 8 counts. Then repeat again until you feel relaxed.</li>
<li>Listen to a sleep hypnosis podcast.</li>
<li>Replay all the things you did in the morning in your head.</li>
<li>Stretch like a cat, curl your toes, or rub your belly. All of this somehow triggers us to yawn, which signals our bodies that hey its now time to fall asleep.</li>
<li>Don&rsquo;t watch the clock when you can&rsquo;t sleep. This will only make it worse as it makes you more anxious and pressured to fall asleep faster. Forcing yourself to sleep is no good. Just remember that it will to you eventually.</li>
</ul>


<h3>Resources</h3>

<ul>
<li><a href="http://sleepfoundation.org/how-sleep-works/what-happens-when-you-sleep">What happens when you sleep</a></li>
<li><a href="http://www.webmd.com/sleep-disorders/features/sleep-position-and-sleep-quality">The link between sleep position and sleep quality</a></li>
<li><a href="http://www.rd.com/slideshows/foods-that-help-you-sleep/">Foods that help you sleep</a></li>
<li><a href="http://www.thebetterhealthstore.com/Newsletter/030510_Top-5-Sleep-Supplements_08.html">Sleep Supplements</a></li>
<li><a href="https://www.bulletproofexec.com/sleep-hacking-part-3-falling-asleep-fast-with-biochemistry/">Sleep Hacking</a></li>
<li><a href="http://www.webmd.com/sleep-disorders/guide/insomnia-symptoms-and-causes">Insomnia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Driving]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/12/on-driving/"/>
    <updated>2014-10-12T18:24:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/12/on-driving</id>
    <content type="html"><![CDATA[<p>Its been a month since I started to learn how to drive. In this blog post I want to touch a bit on what I learned about driving so far.</p>

<h3>Before Starting</h3>

<ul>
<li>Check the wheels if they are on good condition.</li>
<li>Make sure that both side mirrors are set.</li>
<li>Make sure that the hand brake isn&rsquo;t currently active. In most cars all you have to do is hold the brake, press the button with your thumb and then push the lever down.</li>
<li>Just before you use the ignition key to turn on the engine, fully hold down the foot brake, set the car from park (P) to drive (D), then slowly release the foot brake.</li>
<li>Always remember to start slow. Apply as little pressure to the gas pedal as possible.</li>
</ul>


<h3>Overtaking</h3>

<ul>
<li>Don&rsquo;t try to overtake if you&rsquo;re not sure if there&rsquo;s an approaching vehicle on the other lane.</li>
<li>Do not try to overtake on curves.</li>
<li>Do not try to overtake inside a town or a city.</li>
<li>Before trying to overtake a vehicle, check both side mirrors if there&rsquo;s any other vehicle also trying to overtake.</li>
<li>Use the left signal light before trying to overtake to let others know that you&rsquo;re trying to overtake. Once you&rsquo;ve succeeded, use the right signal light and then go back to your lane.</li>
<li>When another vehicle tries to overtake yours, slow down a bit.</li>
</ul>


<h3>Emergencies</h3>

<ul>
<li>When an ambulance or police car is approaching or coming from your back, keep up with your normal speed and move the car to the side of the road to let them pass.</li>
</ul>


<h3>Curves</h3>

<ul>
<li>Slow down before approaching curves to avoid possible collision.</li>
</ul>


<h3>Intersections</h3>

<ul>
<li>Always slow down before approaching intersections. Around 20-30 kph. This is to make sure you don&rsquo;t collide with other vehicles. You can never really know what approaches you in intersections so slow down.</li>
</ul>


<h3>U-turn</h3>

<ul>
<li>When going from one lane to the other make sure that u-turn is allowed.</li>
<li>If you want to give yourself more space, park your car on the side of the road first then when the road is clear, maneuver the wheel to the left. Most of the time you&rsquo;ll have to turn the wheel to the left until its limit. If it isn&rsquo;t enough, stop the car with the foot brake and then use reverse mode to move the car backwards a bit. Use the foot brake again and then turn the car to drive mode and turn the wheel to the left as much as its needed. Just before the car is completely facing in the right direction, turn the wheel to the right until its in its neutral position. Most wheels in modern cars actually go back to neutral position automatically but its safer if you don&rsquo;t rely on that. Because most of the time you&rsquo;ll want to move it to neutral position as fast as you can.</li>
</ul>


<h3>Speed</h3>

<ul>
<li>Don&rsquo;t try to go faster than what you can handle. My personal limit is 60 kph, I don&rsquo;t try to go faster than that.</li>
</ul>


<h3>Rough Road</h3>

<ul>
<li>If you actually care for your car, slow down when approaching rough roads.</li>
</ul>


<h3>Horn</h3>

<ul>
<li>Only use the horn when its absolutely necessary. Sometimes its prohibited to use it on some areas.</li>
<li>Do not use the horn to vent out your frustration. An example of this is when bicycle riders or sidewalk vendors use the road as if they were riding a car. Just give the horn a light tap, and if the bicycle rider still doesn&rsquo;t move to the side simply go pass them if the situation allows.</li>
</ul>


<h3>Stay Cool</h3>

<ul>
<li>Be sure to keep your head cool at all times. You don&rsquo;t want your driving to be affected because of your frustration.</li>
</ul>


<h3>Parking</h3>

<ul>
<li>Be sure that you are only parking your car where it is allowed.</li>
<li>Completely stop the car with the foot brake before putting the car into park mode and pulling the hand brake.</li>
<li>Be sure to leave enough space to maneuver your car later on. You don&rsquo;t want to get to close to another car to avoid scratching it.</li>
<li>If the situation allows, use reverse mode when parking your car, this means that the tail of your car goes inside and the head is outside. This makes it easier for you to go out later on.</li>
</ul>


<p>That&rsquo;s it! I&rsquo;m still a beginner at this so I&rsquo;ll be adding more things to this blog post in future as I learn more things about driving. For now I&rsquo;m going to leave you with this saying:</p>

<blockquote><p>Better late than dead.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Laravel Bootstrap Starter]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3/"/>
    <updated>2014-10-04T19:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still on side-project frenzy. This week its the <a href="https://github.com/anchetaWern/laravel-bootstrap-starter">Laravel Bootstrap Starter</a>.
I created this project to make it easier for me to setup a Laravel project faster. I&rsquo;m using Laravel in the company that I work for and every time I start a new project I have to install it via composer, configure it so that it doesn&rsquo;t show <code>/public</code> in the URL. From there I add the default controllers, add the sign up and login code, add the functionality for updating and resetting password, install node, grunt and then bower. And then install the grunt plugins that I need for front-end performance optimization. The list goes on, and just setting up a project may take a whole day. That&rsquo;s why I decided to create this project.</p>

<h3>Features</h3>

<p>Like most of the projects that I decided to do so far. It only contains the essential features:</p>

<ul>
<li>sign up and login</li>
<li>resetting passwords</li>
<li>admin (updating account information)</li>
</ul>


<h3>Future Plans</h3>

<p>As I move along with this project I&rsquo;m gonna be adding the following features:</p>

<ul>
<li><strong>social login</strong> &ndash; google, twitter, facebook, linkedin</li>
<li><strong>database backup</strong> &ndash; every project must have an automated database backup functionality. I&rsquo;m thinking of using cron for running the backup script and then upload the backup to an Amazon s3 bucket.</li>
<li><strong>generators</strong> &ndash; there are 2 projects doing this already, one is <a href="https://github.com/JeffreyWay/Laravel-4-Generators">Jeffrey Way&rsquo;s Laravel 4 Generators</a> and the other is <a href="https://github.com/wdollar/Laravel-4-Generators-Bootstrap-3">Wes Dollar&rsquo;s forked version</a>, both looks pretty good. I think I&rsquo;ll be able to get some ideas from these projects. Basically the plan here is to be able to use the terminal for generating boilerplate code which I can then build upon.</li>
<li><strong>build tool integration</strong> &ndash; I want to be able to just hit one command and it will install and configure everything that I need to get the project started. Yeoman seems to be a very good fit for this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Ahead]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead/"/>
    <updated>2014-09-28T09:20:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been in side-project frenzy these past few weeks. And this time I&rsquo;m writing again about another side-project that I&rsquo;ve been working on, its called <a href="https://github.com/anchetaWern/ahead">Ahead</a>. Ahead is an app that allows you to schedule posts to your facebook, twitter and linkedin accounts. Pretty much like Buffer. But Buffer has limits for free accounts, that&rsquo;s why I built this app so I can schedule posts without limits.</p>

<h3>How to Use</h3>

<p>You can use Ahead by going to its <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">demo website</a>. Create and account then login. Once logged in, go to the networks page and connect the accounts where you want to publish by clicking on the connect button:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/networks.png" alt="networks" /></p>

<p>Once your accounts has been connected, you can now start scheduling posts:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/schedulenew_post.png" alt="schedule new post" /></p>

<p>You can check the time in which your post will be published from the posts page. From the published column you can also see if your post has already been published or not:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/posts.png" alt="posts" /></p>

<p>If you don&rsquo;t want to select the networks in which you want to publish all the time, you can visit the settings page and then select the networks which you want to select by default:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/settings.png" alt="settings" /></p>

<p>If you don&rsquo;t want your posts to be published one hour after another you can also add custom schedules by visiting the schedules page:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/schedule.png" alt="new schedule" /></p>

<p>Just select an interval that you want and it will be available as an option when you schedule a new post. Of course you can also select a default schedule from the settings page once you&rsquo;re done creating a schedule. Currently only the following intervals are supported:</p>

<ul>
<li>every 1 hour</li>
<li>every 2 hours</li>
<li>every 3 hours</li>
<li>every 4 hours</li>
<li>every 5 hours</li>
<li>random time in the next 72 hours (3 days)</li>
<li>random time in the next 168 hours (1 week)</li>
</ul>


<h3>Future Plans</h3>

<p>Ahead is still in early stages of development. Its already quite functional but I&rsquo;m planning to add the following features in the future:</p>

<ul>
<li><strong>Publish posts without links</strong> &ndash; currently it can only publish posts with links in it. I originally envisioned this project for my personal use only and I don&rsquo;t really schedule posts without links in it.</li>
<li><strong>Add social login</strong> &ndash; currently you can only start using the app by signing up with your email.</li>
<li><strong>Email verification</strong> &ndash; currently you can use fake emails when signing up.</li>
<li><strong>Editing and deleting posts</strong> &ndash; currently you can no longer edit posts that has already been scheduled. I&rsquo;m planning to add an edit or delete feature in order for users to be able to make changes to their scheduled posts.</li>
<li><strong>Immediate publishing</strong> &ndash; currently only scheduled posts are supported.</li>
<li><strong>Add custom intervals to schedules</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Publicizr]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr/"/>
    <updated>2014-09-21T09:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I started building a project called <a href="https://github.com/anchetaWern/publicizr">Publicizr</a>. I created it for the sole purpose of easily publishing a link to my Facebook, Twitter and LinkedIn profile whenever I publish a new post on this blog.</p>

<h3>Dependencies</h3>

<p>This project depends on the following Ruby gems in order to work:</p>

<ul>
<li><a href="https://github.com/hexgnu/linkedin">linkedin</a> &ndash; used for connecting/publishing to Linkedin.</li>
<li><a href="https://github.com/sferik/twitter">twitter</a> &ndash; used for connecting/publishing to Twitter.</li>
<li><a href="https://github.com/arsduo/koala">koala</a> &ndash; used for connecting/publishing to Facebook.</li>
<li><a href="https://github.com/mperham/em-resolv-replace">em-resolv-replace</a> &ndash; used for fixing the issue with koala not being able to publish to Facebook from the localhost.</li>
</ul>


<h3>How to Install</h3>

<p>You can install Publicizr by requiring the following Ruby gems in the Gemfile used by your static blogging engine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'linkedin', '~&gt; 1.0.0'
</span><span class='line'>gem 'twitter', '~&gt; 5.11.0'
</span><span class='line'>gem 'koala', '~&gt; 1.10.1'
</span><span class='line'>gem 'em-resolv-replace', '~&gt; 1.1.3'</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added those, save the changes to the Gemfile then execute <code>bundle install</code> on your terminal.</p>

<p>Once everything is installed, look for the <code>Rakefile</code> used in your static blogging engine. For Octopress/Jekyll its located in its root directory. Next add the following on the <code>Rakefile</code>. If the <code>Rakefile</code> is requiring other gems, just put these below those gems. If not then put it on the first line of the <code>Rakefile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require "twitter"
</span><span class='line'>require "koala"
</span><span class='line'>require "linkedin"
</span><span class='line'>require "resolv-replace"</span></code></pre></td></tr></table></div></figure>


<p>Next, put these on the last line of the <code>Rakefile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>desc "Publish post to facebook, twitter and linkedin"
</span><span class='line'>task :publish, :content do |t, args|
</span><span class='line'>
</span><span class='line'>  if args.content
</span><span class='line'>    post = args.content
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    #start post to twitter
</span><span class='line'>    tweet = Twitter::REST::Client.new do |config|
</span><span class='line'>      config.consumer_key        = "{twitter-app-key}"
</span><span class='line'>      config.consumer_secret     = "{twitter-app-secret}"
</span><span class='line'>      config.access_token        = "{twitter-user-token}"
</span><span class='line'>      config.access_token_secret = "{twitter-user-secret}"
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    tweet.update(post)
</span><span class='line'>    #end post to twitter
</span><span class='line'>
</span><span class='line'>    #start post to facebook
</span><span class='line'>    @graph = Koala::Facebook::API.new("{facebook-user-token}")
</span><span class='line'>    @graph.put_wall_post(post)
</span><span class='line'>    #end post to facebook
</span><span class='line'>
</span><span class='line'>    #start post to linkedin
</span><span class='line'>    linked_in = LinkedIn::Client.new('{linkedin-app-key}', '{linkedin-app-secret}')
</span><span class='line'>    linked_in.authorize_from_access('{linkedin-user-token}', '{linkedin-user-secret}')
</span><span class='line'>
</span><span class='line'>    linked_in.add_share(:comment =&gt; post)
</span><span class='line'>    #end post to linkedin
</span><span class='line'>
</span><span class='line'>    puts "Your post has been shared!"
</span><span class='line'>
</span><span class='line'>  else
</span><span class='line'>    puts "Supply your post!"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Basically what it does is declaring a rake task that will publish whatever content you pass into it. If you don&rsquo;t need to publish to all 3 (Facebook, Twitter, LinkedIn), feel free to comment out the lines between the lines which says &lsquo;#start post to facebook&rsquo; and &lsquo;#end post to facebook&rsquo;. Just replace &lsquo;facebook&rsquo; with your social network of choice.</p>

<p>At this point the project still requires you to create your own app on each of the social networks. You can do that by visiting the following links and then look for the page for creating a new app:</p>

<ul>
<li><a href="https://developers.facebook.com/">Facebook</a></li>
<li><a href="https://dev.twitter.com/">Twitter</a></li>
<li><a href="https://developer.linkedin.com/">LinkedIn</a></li>
</ul>


<p>Once that&rsquo;s done, you also need to create an app using your language of choice (PHP, Ruby, or Python) that will allow you to retrieve user tokens. If you&rsquo;re primarily a PHP developer you can use the following libraries to ease the work that you need to do:</p>

<ul>
<li><a href="https://github.com/thephpleague/oauth2-client">thephpleagues/oauth2-client</a> &ndash; supports facebook and linkedin.</li>
<li><a href="https://github.com/themattharris/tmhOAuth">thmOAuth</a> &ndash; supports twitter.</li>
</ul>


<p>Once you&rsquo;ve acquired the applications keys and user tokens you can now replace the values which says something like <code>{twitter-app-key}</code>, <code>{twitter-app-secret}</code> on the <code>publish</code> task in your <code>Rakefile</code>. Basically anything that&rsquo;s wrapped in curly brackets, you need to replace those in order for the plugin to fully function.</p>

<h3>How to Use</h3>

<p>You can use publicizr by executing the <code>publish</code> task then supplying the content of your post as an argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake publish["new blog post: newsletters I subscribe to http://wern-ancheta.com/blog/2014/09/07/newsletters-i-subscribe-to/"]</span></code></pre></td></tr></table></div></figure>


<h3>Support</h3>

<p>Any Ruby based static blogging engine is supported. You can check out this <a href="http://blog.iwantmyname.com/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html">big list of static blogging engines</a> and look for the ones that are built using Ruby.</p>

<h3>Future Plans</h3>

<p>Publicizr is already useable but still requires a bunch of work in order to get setup and running. That&rsquo;s why I plan to add the following features in the future:</p>

<ul>
<li>automatically detect last post that was created and publish it automatically when the blog is deployed.</li>
<li>website for retrieving user access tokens which you can then paste into the rake file. This removes the need for creating your own apps and retrieving your keys from it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletters I subscribe to]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/07/newsletters-i-subscribe-to/"/>
    <updated>2014-09-07T10:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/07/newsletters-i-subscribe-to</id>
    <content type="html"><![CDATA[<p>Following last weeks post on <a href="http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to">Podcasts I listen to</a>. This time I&rsquo;ll talk about some of the newsletters I subscribe to.</p>

<h3>Ruby Weekly</h3>

<p>Ruby Weekly is an email round-up of Ruby news and articles. This newsletter is mainly about Ruby but you can also find some interesting stuff here even if you&rsquo;re not a Ruby developer. Links to articles about command line tools, databases and version control are also included in every issue.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://rubyweekly.com/">Visit Site</a></p>

<h3>JavaScript Weekly</h3>

<p>JavaScript Weekly is an email round-up of interesting JavaScript news and articles. It also has a jobs section in which you can find jobs exclusively for JavaScript developers or engineers.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://javascriptweekly.com/">Visit Site</a></p>

<h3>Webtools Weekly</h3>

<p>Web Tools Weekly is a front-end development and web design newsletter with a focus on tools. Each issue features a brief tip or tutorial, followed by a weekly round-up of various apps, scripts, plugins, and other resources to help front-end developers solve problems and be more productive.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://webtoolsweekly.com/">Visit Site</a></p>

<h3>Gamedev.js Weekly</h3>

<p>Gamedev.js Weekly is a newsletter all about HTML5 game development. I&rsquo;m not really a game developer myself so reading articles from this newsletter is just for me to have an idea how games for the browser are being developed.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://gamedevjsweekly.com/">Visit Site</a></p>

<h3>StackExchange Programmers Newsletter</h3>

<p>A curated list of interesting programming questions from the programmers.stackexchange website.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://programmers.stackexchange.com/">Visit Site</a></p>

<h3>DB Weekly</h3>

<p>A weekly round-up of database technology news and articles covering new developments, SQL, NoSQL, document databases, graph databases, and more.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://dbweekly.com/">Visit Site</a></p>

<h3>Versioning</h3>

<p>A daily newsletter by Sitepoint. If you are tired of keeping yourself updated via your twitter feed, hacker news, and a bunch of other sources then Versioning is for you. As they curate a bunch of links that web developers might find useful.</p>

<p><a href="http://www.sitepoint.com/versioning/">Visit Site</a></p>

<h3>Hacker Newsletter</h3>

<p>If you can&rsquo;t keep up with Hacker News, Hacker Newsletter is the way to go. Kale Davis curates only the most interesting stuff that you might find on Hacker News.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://www.hackernewsletter.com/">Visit Site</a></p>

<h3>Responsive Design Weekly</h3>

<p>A free, once–weekly round-up of responsive design articles, tools, tips, tutorials and inspirational links.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://responsivedesignweekly.com/">Visit Site</a></p>

<h3>Node Weekly</h3>

<p>Node Weekly is a free, once–weekly e-mail round-up of Node.js news and articles. Its still from the same guy (Peter Cooper) who brought us the awesome JavaScript Weekly Newsletter. But this is primarily focused on Node.js.</p>

<p>Schedule: Every Friday</p>

<p><a href="A%20free,%20once%E2%80%93weekly%20e-mail%20round-up%20of%20Node.js%20news%20and%20articles">Visit Site</a></p>

<h3>WPMail.me</h3>

<p>WPMail.me is a free WordPress Newsletter, once a week, with a round-up of WordPress news and articles.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://wpmail.me/">Visit Site</a></p>

<h3>PyCoder&rsquo;s Weekly</h3>

<p>A free weekly e-mail newsletter, on Fridays, for those interested in python development and various topics around python.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://pycoders.com/">Visit Site</a></p>

<h3>Python Weekly</h3>

<p>If PyCoder&rsquo;s Weekly isn&rsquo;t enough, Python Weekly has got you covered. Its a free weekly e-mail newsletter, for those interested in python development and various topics around python.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://www.pythonweekly.com/">Visit Site</a></p>

<h3>PHP Weekly</h3>

<p>As the name suggests, PHP Weekly is a newsletter featuring the best articles, tutorials, talks, news, jobs, and tools about PHP. Based on my experience so far, every issue is a fat one. And when I say fat it means that there&rsquo;s bunch of stuff in there for you to consume. You couldn&rsquo;t ask for more from this newsletter. Its the best thing there is if you want to keep yourself updated about PHP stuff.</p>

<p>Schedule: Every Thursday</p>

<p><a href="http://www.phpweekly.com/">Visit Site</a></p>

<h3>Postgres Weekly</h3>

<p>Postgres Weekly is a free, once–weekly e-mail round-up of PostgreSQL news and articles.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://postgresweekly.com/">Visit Site</a></p>

<h3>Web Design Update</h3>

<p>Web Design Update is a plain text email digest dedicated to disseminating news and information about web design and development with emphasis on elements of user experience, accessibility, web standards and more</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://lists.d.umn.edu/mailman/listinfo/webdev">Visit Site</a></p>

<h3>ng-newsletter</h3>

<p>Ng-newsletter is a weekly newsletter of the best AngularJS content on the web.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://www.ng-newsletter.com/">Visit Site</a></p>

<h3>Ember Weekly</h3>

<p>Ember Weekly is a newsletter dedicated to bring you the latest Ember.js news, tips and libraries.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://emberweekly.com/">Visit Site</a></p>

<h3>HTML5 Weekly</h3>

<p>HTML5 Weekly is a newsletter that features HTML5 and Web Platform technology roundup, CSS 3, Canvas, WebSockets, WebGL, Native Client, and more. Basically all things HTML5 and related technologies.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://html5weekly.com/">Visit Site</a></p>

<h3>Perl Weekly</h3>

<p>Perl Weekly features hand-picked news and articles about Perl.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://perlweekly.com/">Visit Site</a></p>

<h3>DevOps Weekly</h3>

<p>Devops Weekly curates the best and latest articles all about DevOps. If you&rsquo;re not familiar with DevOps, its basically a short term for Development and Operations. Its mainly focused on IT operations, tooling and collaboration.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://www.devopsweekly.com/">Visit Site</a></p>

<h3>UX Newsletter</h3>

<p>Another newsletter from Stackexchange which features the most interesting questions about User Experience in the past week.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://ux.stackexchange.com/">Visit Site</a></p>

<h3>Web Developer Reading List</h3>

<p>An all in one newsletter for web developers. It contains news on both front-end and back-end stuff.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://wdrl.info/">Visit Site</a></p>

<h3>CSS Weekly</h3>

<p>A weekly e-mail roundup of css articles, tutorials, experiments and tools curated by Zoran Jambor. There&rsquo;s not much in every issue but the quality makes up for it.</p>

<p>Schedule: Every Tuesday</p>

<p><a href="http://css-weekly.com/">Visit Site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts I listen to]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to/"/>
    <updated>2014-08-31T07:03:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to</id>
    <content type="html"><![CDATA[<p>To take a bit of a break from the usual web development tutorials that I published. This week I&rsquo;ll be talking about some of the podcasts that I usually listen to when I&rsquo;m just chilling out doing nothing. Podcasts are a really good way to <a href="http://anchetawern.github.io/blog/2012/08/16/how-to-stay-updated-as-a-developer/">keep yourself updated as a developer</a> even if you&rsquo;re not in front of a computer.</p>

<h3>Shoptalkshow</h3>

<p>A podcast where they talk about front end web design, development and UX.
Its hosted by Chris Coyier and Dave Rupert. Each week they either interview someone from the industry or have a Rapidfire show in which they answer questions submitted by their listeners.</p>

<p><a href="http://shoptalkshow.com/">Visit Site</a></p>

<h3>Ruby Rogues</h3>

<p>Not like what the name of the podcast suggests, Ruby Rogues isn&rsquo;t exclusively for Ruby stuff. I&rsquo;m not a Ruby Developer myself but I often listen to this podcast because they usually talk about general stuff that developers would want to listen to. Things like <a href="http://rubyrogues.com/171-rr-evaluating-yourself/">self-evaluation</a>, <a href="http://rubyrogues.com/164-rr-staying-sharp-with-dave-thomas/">staying sharp</a>, and <a href="http://rubyrogues.com/163-rr-education-with-coraline-ada-ehmke-and-katrina-owen/">education</a>. They also usually invite someone from the industry to be in the show so that&rsquo;s a bonus as well. At the end of each episode they have a picks section in which each of the hosts pick anything that they want to plug into the show. Such as books, games, a random article.</p>

<p><a href="http://rubyrogues.com/">Visit Site</a></p>

<h3>JavaScript Jabber</h3>

<p>Pretty much like the Ruby Rogues podcast because its created by the same guy: Charles Maxwood. They mostly invite JavaScript developers to talk about their projects. Such as Guillermo Rauch of Socket.io, Jo Liss of Broccoli.js.</p>

<p><a href="http://javascriptjabber.com/">Visit Site</a></p>

<h3>Freelancer Show</h3>

<p>Another podcast from Charles Maxwood, the Freelancer Show. As the name suggests, its a podcast about freelancing. If you&rsquo;re looking into doing freelancing on your part-time or you want to do freelancing full-time then this podcast is for you.</p>

<h3>Three Devs and a Maybe</h3>

<p>A podcast about Web Development. Though if you visit their website they usually talk about PHP stuff. If you&rsquo;re a PHP developer then this podcast should definitely be on your listening list.</p>

<p><a href="http://threedevsandamaybe.com/">Visit Site</a></p>

<h3>This Developer&rsquo;s Life</h3>

<p>A podcast about developers and their lives. Though this podcast is not ongoing anymore, most of the things that you&rsquo;ll find in here are still relevant. Its about the daily lives of developers after all. Their content is mostly on story format. And each episode has a specific theme. Things like obsession, learning, competition, getting fired and many others.</p>

<p><a href="http://thisdeveloperslife.com/">Visit Site</a></p>

<h3>The JavaScript Show</h3>

<p>Though this podcast is no longer active, they have some good stuff in here that you might want to check out. Each episode is fully dedicated to JavaScript stuff, that is both client-side and server-side. Its from the same guy (Peter Cooper) who&rsquo;s curating the contents for the JavaScript Weekly Newsletter so the JavaScript Show is basically a JavaScript Weekly in audio format.</p>

<p><a href="http://javascriptshow.com/">Visit Site</a></p>

<h3>FaceOff Show</h3>

<p>Another podcast which is no longer active but still pretty useful is the FaceOff Show. They have a total of 126 episodes before they stopped but the content is still available on their website to download or to listen to. The FaceOff Show is a holistic podcast, its basically all of the podcast mentioned above combined into one. In other words, its all thing development.</p>

<p><a href="http://faceoffshow.com/">Visit Site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon EC2]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/24/getting-started-with-amazon-ec2/"/>
    <updated>2014-08-24T19:00:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/24/getting-started-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to give you an introduction on how to setup an Amazon EC2 instance that uses the LAMP stack. This tutorial assumes that you already have an AWS account setup.</p>

<h4>Setting up the instance</h4>

<p>The first thing that you need to do is to login to your AWS account. Once logged in, click on the instances link found on the left side of the screen. Once in the instances page, click on the &lsquo;Launch Instance&rsquo; button. You will then be redirected to the page where you can select the operating system that will be used for the instance that you want to create:</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/start.png" alt="choose AMI" /></p>

<p>If you&rsquo;re using Ubuntu for your development, it would be much easier for you if you also select the Ubuntu Server, the 64-bit version if preferred. Just click on the &lsquo;select&rsquo; button beside the Ubuntu instance.</p>

<p>Next, we need to select the instance type. For starters you may want to try the t2.micro instance as its eligible for the free tier, this means that you don&rsquo;t have to pay anything when you launch this type instance.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/instance-type.png" alt="choose instance" /></p>

<p>If you&rsquo;re looking into launching an instance which exactly fits your needs, check out <a href="http://www.ec2instances.info/">ec2instances.info</a>. Note that an instance that&rsquo;s not eligible for free tier would cost you per hour so be really careful with the instance that you select.</p>

<p>Once you&rsquo;re done selecting the instance type, click on the &lsquo;Next: Configure Instance Details&rsquo;, that will redirect you to the page where you can configure details about your instance. Things like the Virtual Private Cloud, Subnet and Public IP. Usually you don&rsquo;t really have to touch these settings so just leave the default ones.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/configure-instance.png" alt="configure instance" /></p>

<p>Next click on the &lsquo;Next: Add Storage&rsquo; button. That will redirect you to the page where you can configure the size and volume type of the storage that will be used for your instance. Just input 30 for the size as free tiers are eligible for up to 30 GB. If you have selected something higher than the free tier, you can find information on how much storage size you can have at <a href="http://www.ec2instances.info/">ec2instances.info</a>. For the volume type, just use the general purpose SSD.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/add-storage.png" alt="add storage" /></p>

<p>Next click on the &lsquo;Next: Tag Instance&rsquo; button. That will redirect you to the page where you can assign a key-value pair to your instance. This allows you to tag your instance with those key-value pairs which enables you to categorize your AWS resources in different ways. We won&rsquo;t really be using tags in this tutorial so if you want to learn more about tagging your instance, check out the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">official docs</a>.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/tag-instance.png" alt="tag instance" /></p>

<p>Next click on the &lsquo;Next: Configure Security Group&rsquo; button. That will redirect you to the page where you can configure the security group used by the instance. In simple terms, security groups allows you to set the ports used by your instance and which IP addresses are allowed access to those ports. You can assign different settings for inbound and outbound rules. Inbound rules are the settings used for requests made to your server by other computers.</p>

<p>For inbound rules you would commonly have the following settings:</p>

<ul>
<li><strong>Type:</strong> SSH &ndash; this allows you to access your instance via SSH.</li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 22</li>
<li><p><strong>Source:</strong> 0.0.0.0/0 &ndash; if you got a static IP assigned to your computer, its more secure if you set that IP for this field. Otherwise just select &lsquo;Anywhere&rsquo; which allows access to any IP.</p></li>
<li><p><strong>Type:</strong> &ndash; HTTP &ndash; this allows you to access your instance from the browser.</p></li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 80</li>
<li><strong>Source:</strong> 0.0.0.0/0 &ndash; this means anyone which has access to the internet can access your instance via the DNS provided by Amazon or the public IP assigned to your instance.</li>
</ul>


<p>For outbound rules:</p>

<ul>
<li><strong>Type:</strong> &ndash; HTTP &ndash; this allows your instance to download stuff from the internet.</li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 80</li>
<li><p><strong>Destination:</strong> 0.0.0.0/0 &ndash; this means that your instance can make the request to any server.</p></li>
<li><p><strong>Type:</strong> MYSQL &ndash; this allows your instance to make a request to the MySQL server.</p></li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 3306</li>
<li><strong>Destination:</strong> 0.0.0.0/0 &ndash; this allows your instance access to any MySQL server. You can also set this to the private IP of your instance. You can only specify a single IP so if you&rsquo;re planning to access other MySQL servers aside from the one installed on your ec2 instance then just select &lsquo;Anywhere&rsquo;.</li>
</ul>


<p>That&rsquo;s pretty much it.</p>

<p>You can learn more about security groups in this page: <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a></p>

<p>Once you&rsquo;re done configuring the security group, click on &lsquo;Review and Launch&rsquo; button. You can now review the details of the instance, once you&rsquo;re done reviewing just click on the &lsquo;Launch&rsquo; button. Amazon will now prompt you to create an ssh key or use an existing key if you already have an existing one. You can use the ssh key to authenticate yourself when logging in to your instance via ssh. Keep the ssh key somewhere where you can easily find it. For me I prefer putting it in the <code>~/.ssh</code> directory.</p>

<h4>Installing Software</h4>

<p>Now that you have launch the instance you can now access it via ssh. To do that, login to your amazon account, click the &lsquo;services&rsquo; link on the upper left corner of the screen, hover on the &lsquo;All AWS Services&rsquo; link then click on &lsquo;EC2&rsquo;. That will redirect you to the ec2 dashboard page. Once you&rsquo;re there, click on the &lsquo;instances&rsquo; link. This will list out all the instances that you have created in the current region that you have selected. If nothing is listed on that page the instance that you have created might be on another region. To change the region you can click on the second link from the right. The one which looks like a place in the world. Select any of the places listed in there and your instance will be listed in any of those.
Next click on the instance listed then copy the value for the &lsquo;Public DNS&rsquo;.
Open up a terminal, <code>cd</code> into the directory where you have your ssh key then execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i amazon-aws.pem ubuntu@the-public-dns-of-your-instance</span></code></pre></td></tr></table></div></figure>


<p>Breaking the command down, <code>-i</code> allows you to specify the ssh key file. In this case the file name is <code>amazon-aws.pem</code>. Next is the username of the user you want to use to login, in this case the username is <code>ubuntu</code>. That&rsquo;s the default username for Ubuntu ec2 instances. Next is <code>@</code> followed by the public dns of your instance. If you have already assigned a domain name to your instance you can also use that.</p>

<p>Once you&rsquo;re logged in you can now start installing software. Ec2 instances doesn&rsquo;t come pre-installed with Apache, PHP and MySQL. So you would need to install it yourself. Here are some of the software that I usually install on an ec2 instance:</p>

<p>Curl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install libcurl3 php5-curl</span></code></pre></td></tr></table></div></figure>


<p>Composer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php
</span><span class='line'>sudo mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<p>Apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>PHP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5
</span><span class='line'>sudo apt-get install libapache2-mod-php5</span></code></pre></td></tr></table></div></figure>


<p>MySQL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install php5-mysql</span></code></pre></td></tr></table></div></figure>


<h4>Configuring Apache</h4>

<p>Once everything is installed you still have to configure Apache to use a different web directory. This is because the default one isn&rsquo;t really that friendly. As you have to <code>sudo</code> every time you need to save or update something from the directory. My preferred directory is one that is on the home directory. As you won&rsquo;t need any special privileges to do anything inside of it. To configure Apache to use a different directory, <code>cd</code> into the <code>/etc/apache2</code> directory then open up the <code>apache2.conf</code> file. You can open up the file using a text editor like <code>nano</code>, <code>vi</code> or <code>vim</code>. Once you&rsquo;re in that directory open up the file using the text editor of your choice:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano apache2.conf</span></code></pre></td></tr></table></div></figure>


<p>Now look for the <code>Directory</code> directives and update it to use a value similar to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory /&gt;
</span><span class='line'>        Options FollowSymLinks
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Require all denied
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>&lt;Directory /usr/share&gt;
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Require all granted
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>&lt;Directory /home/ubuntu/www&gt;
</span><span class='line'>        Options Indexes FollowSymLinks
</span><span class='line'>        AllowOverride All
</span><span class='line'>        Require all granted
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>For the configuration file above were using <code>/home/ubuntu/www</code> as the web root directory. You can change this to any directory on your <code>home</code> folder. Just be sure that the directory exists.</p>

<p>Still on the same directory, <code>cd</code> into the <code>sites-available</code> directory then open up the <code>000-default.conf</code> file. Look for the <code>DocumentRoot</code> directive and specify the path to your web root directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /home/ubuntu/www</span></code></pre></td></tr></table></div></figure>


<p>Once everything is done, restart Apache using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you have learned how to set up an ec2 instance, install software needed to host a website. You can use the free tier to quickly test out an app idea and bring it online for everyone to test out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Supervisor]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/15/getting-started-with-supervisor/"/>
    <updated>2014-08-15T19:32:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/15/getting-started-with-supervisor</id>
    <content type="html"><![CDATA[<p>Recently in my work I had this node.js script that I had to run persistently. Its basically a server that will generate images based on some JSON data that&rsquo;s passed from the client side. So I did some searching and found <a href="http://supervisord.org/">Supervisor</a>, a process control system. It allows you to run programs persistently.</p>

<h3>Installation</h3>

<p>You can install install Supervisor by executing the following command in your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install supervisor</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>Once the installation is done, you can now create the config file. This is where you specify which script you want to run, the directory in where you want to run it, and a log file in which the output is redirected.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/supervisor/conf.d/image-creator.conf</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what a config file looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[program:imagecreator]
</span><span class='line'>command=node image-creator.js
</span><span class='line'>directory=/home/ubuntu/www
</span><span class='line'>stdout_logfile=/home/ubuntu/logs/image-creator.log
</span><span class='line'>redirect_stderr=true</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down. This is where we set the name of the program. Yes the <code>program:</code> is always there, only the thing that comes after it is updated. In this case the name of the program that I gave is <code>imagecreator</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[program:imagecreator]</span></code></pre></td></tr></table></div></figure>


<p>Next is the command that you execute when you&rsquo;re running the program in the terminal. In this case were executing the script via the <code>node</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=node image-creator.js</span></code></pre></td></tr></table></div></figure>


<p>Next is the directory where the program is stored. This can also be the directory where you want to execute the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>directory=/home/ubuntu/www</span></code></pre></td></tr></table></div></figure>


<p>This is where you specify the file where you want to redirect the output of the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stdout_logfile=/home/ubuntu/logs/image-creator.log</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we specify whether to send back the <code>stderr</code> output to supervisord on its stdout file descriptor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redirect_stderr=true</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much all we need for the configuration file. You can go ahead and save it. If you want to specify more settings, check out the <a href="http://supervisord.org/configuration.html">docs on configuration</a></p>

<h3>Adding the Process</h3>

<p>Now that we have a configuration file in place we can now tell supervisor to add it to the list of processes that it currently manages. You can do that by using <code>supervisorctl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo supervisorctl</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will let you enter the supervisor program. Next execute the following commands in order:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>reread
</span><span class='line'>add imagecreator
</span><span class='line'>start imagecreator</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><code>reread</code> tells supervisor to read the configuration files that are available.</li>
<li><code>add</code> tells supervisor to add the program into the list of programs that it will manage.</li>
<li><code>start</code> tells supervisor to run the program.</li>
</ul>


<h2>Conclusion</h2>

<p>That&rsquo;s it! Supervisor is a neat little program that allows you to run programs persistently. Just be sure that errors are handled accordingly because supervisor wouldn&rsquo;t continue running your program if an error occurs while its running.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Datatables with Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel/"/>
    <updated>2014-08-10T16:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be walking you through how you can use datatables in Laravel. But first, let me give you a quick intro on what Datatabes is. <a href="http://datatables.net/">Datatables</a> is basically a jQuery plugin that allows you to add advanced interaction controls to your HTML tables. Things like search, pagination, sorting, and ordering. Datatables allows you to add those kinds of functionality into your tables with minimal code.</p>

<p>In this tutorial were going to be using a Laravel package called <a href="https://github.com/Chumper/Datatable">Chumper</a>. Chumper allows us to easily create Datatables which uses the data returned from a model as its data source.</p>

<p>First thing that you need to do is to add the following in your <code>composer.json</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"require": {
</span><span class='line'>  "chumper/datatable": "2.*",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you got other packages that you need for your project, just add it on the last part of the <code>require</code> item. Once you&rsquo;re done with that, execute <code>composer update</code> from your terminal to install Chumper.</p>

<p>Once composer finishes installing Chumper, add the service provider for Chumper into the <code>providers</code> array in your <code>app.php</code> file inside the <code>app/config</code> directory of your Laravel installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'Chumper\Datatable\DatatableServiceProvider',</span></code></pre></td></tr></table></div></figure>


<p>Still inside the <code>app.php</code> file, also add the following under the aliases array:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'Datatable' =&gt; 'Chumper\Datatable\Facades\DatatableFacade',</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now create the main configuration file by executing the following from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan config:publish chumper/datatable</span></code></pre></td></tr></table></div></figure>


<p>The main configuration file is stored under <code>app/config/packages/chumper/datatable/config.php</code> so go ahead and edit that if you want to change the default settings provided by Chumper. Things like the class or ID given to the tables generated can be configured from that file. This is particularly useful if you want to use classes or IDs to style the datatables in a specific way. Other than that the default settings can be used for most cases.</p>

<p>Now that we have configured Chumper, we can now add a route that will return the page where the datatable is displayed in your <code>routes.php</code> file. In the example below, we have the a controller called <code>AdminController</code> and were using the data returned by the <code>users</code> method as a response whenever the <code>users</code> route is accessed via the <code>GET</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;AdminController@users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we also need to add the route that will return the data into the client side. By default, Chumper uses the server for processing queries made through the datatable. This means that it only gets the actual data that is needed instead of getting all of the records in the database table that you specify. In the code below, were giving a name of <code>api.users</code> to the <code>api/users</code> route so that we can refer to it later in the controller. The <code>uses</code> keyword allows you to specify a controller action to the route. Its basically the same thing as what we did above but that&rsquo;s the way to do it if you&rsquo;re using named routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;api/users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;as&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;api.users&#39;</span><span class="p">,</span> <span class="s1">&#39;uses&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;AdminController@getUsersDataTable&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Under your controller, here&rsquo;s the method that returns the page where the datatable is displayed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">users</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$table</span> <span class="o">=</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">table</span><span class="p">()</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="s1">&#39;Last Login&#39;</span><span class="p">,</span> <span class="s1">&#39;View&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUrl</span><span class="p">(</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;api.users&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">noScript</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;admin.users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="nv">$table</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above assumes that you&rsquo;re using <a href="http://laravel.com/docs/templates">Laravel layouts</a>. If you don&rsquo;t know how to use layouts in Laravel, be sure to check out the docs. Breaking the code down, the following code allows you create the datatable. You can add columns to it by using the <code>addColumn</code> method. This method takes up the names that you want to give to the header for each field in the table. The <code>setUrl</code> method allows you to set the route that the datatable will use for processing queries made through it. Earlier we created a route and named it <code>api.users</code> so in the <code>setUrl</code> method all we have to do is to use the <code>route</code> method and then supply the name of the route which is responsible for returning the data for processing the queries. Lastly, we call the <code>noScript()</code> method to specify that we don&rsquo;t want to add the JavaScript code in the response that will be returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$table</span> <span class="o">=</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">table</span><span class="p">()</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="s1">&#39;Last Login&#39;</span><span class="p">,</span> <span class="s1">&#39;View&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">setUrl</span><span class="p">(</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;api.users&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">noScript</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the method which processes the queries made through the datatable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getUsersDataTable</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">collection</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;M j, Y h:i A&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$model</span><span class="o">-&gt;</span><span class="na">last_login</span><span class="p">));</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;/users/&#39;</span> <span class="o">.</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">.</span> <span class="s1">&#39;&quot;&gt;view&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">searchColumns</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">orderColumns</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">make</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, the code below allows you to specify the fields that you want to use for the response. These are the actual field names in your database table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we return the actual data using the <code>collection</code> method in the <code>Datatable</code> class. Well, not actually the <code>Datatable</code> class, since its just the Facade that we used earlier in the <code>app.php</code> file. The <code>collection</code> method requires the result set returned by our query to the users table earlier so we just set that as the argument. After that, we can call the <code>addColumn</code> method to update the presentation of the data returned for that specific field. In the case of the <code>last_login</code> field, its stored in the database as a time stamp which looks like this: <code>2014-07-29 11:37:39</code>. We don&rsquo;t really want to present that to the user like that so we format it using the <code>date</code> method. The first argument is the format that you want. In this case we want something like this: <code>Jul 29, 2014 11:37 AM</code>. Looking at the <a href="http://php.net/manual/en/function.date.php">official docs</a>, we know that we can do that by specifying the following: <code>M j, Y h:i A</code>. The second argument is a unix timestamp. We can convert the raw data that came from the database into a unix timestamp by using the <code>strtotime</code> method, so we do just that. Next is the <code>id</code> field. We don&rsquo;t actually want to display the users id to the user, what we want is to display a link that would lead the user to the page where more details for the user can be viewed. Thus we return an HTML anchor tag which uses the id as one of the component for the actual link.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">return</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">collection</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;M j, Y h:i A&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$model</span><span class="o">-&gt;</span><span class="na">last_login</span><span class="p">));</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;/users/&#39;</span> <span class="o">.</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">.</span> <span class="s1">&#39;&quot;&gt;view&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we can now display the datatable in our view. If you&rsquo;re using <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, it should look similar to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@section(&#39;content&#39;)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>Users<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  {{ $table-&gt;render() }}
</span><span class='line'>  {{ $table-&gt;script() }}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>@stop
</span></code></pre></td></tr></table></div></figure>


<p>And don&rsquo;t forget to include the datatables stylesheet and JavaScript file on your views. You can download datatables from <a href="http://datatables.net/">datatables.net</a> or you can just use cdnjs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/css/jquery.dataTables.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/js/jquery.dataTables.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And yes, datatables depends on jQuery so you also need to include that before including datatables.</p>

<p>Yup! as simple as that! All we have to do is to call the <code>render()</code> method to render the actual datatabase. And then we also call the <code>script()</code> method to render the JavaScript file that would do the talking to the server every time the user interacts with the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Contact plugin for Octopress]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/02/introduction-to-contact-plugin-for-octopress/"/>
    <updated>2014-08-02T21:01:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/02/introduction-to-contact-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;ll be introducing the <a href="https://github.com/anchetaWern/jekyll-contact">Contact plugin for Octopress</a>.
This plugin allows you to create contact forms with ease. Its using the <a href="http://pooleapp.com/">pooleapp.com</a> for saving the data for the forms that are submitted.</p>

<h3>Create a Pooleapp account</h3>

<p>First lets go through pooleapp. Poole is a free, hosted data store for static sites. It allows you to post data into it and then later on you can retrieve the data using a simple API.</p>

<p>You don&rsquo;t have to register to start using pooleapp but its recommended so that you can keep track of the forms that you create. Another bonus feature is that when someones submits a data to your contact form, pooleapp will immediately notify you via email.</p>

<p>Once you&rsquo;ve registered an account, you can now create a new form. Just give your form a unique name and click on the &lsquo;create form&rsquo; button. Once created, pooleapp will ask you for the email in which you want the notifications to be sent to.</p>

<h3>Installing the plugin</h3>

<p>Octopress doesn&rsquo;t really have a plugin system so we&rsquo;ll have to do things manually. First thing that you need to do is to add the <code>contact.rb</code> file into the <code>octopress/plugins</code> directory.</p>

<p>So that we can show a success message once the visitor submits his data through the contact form, we also need to add the <code>contact.js</code> file inside the <code>source/javascripts</code> directory. Basically what it does is to check for the existence of the <code>form</code> query parameter. If it exists then it makes the success message visible.</p>

<p>For the styling, add the <code>_contact.scss</code> file inside the <code>sass/partials</code> directory. Then in your <code>sass/_partials.scss</code> file, import the css for the contact form by adding the following on the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import "partials/contact";</span></code></pre></td></tr></table></div></figure>


<p>Lastly, under the <code>source/_includes/custom</code> directory, add a script tag that points out to the <code>contact.js</code> file on the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="http://anchetawern.github.io/javascripts/contact.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Using the plugin</h3>

<p>To use the plugin in any of your pages, simply use the <code>contact</code> liquid tag then supply your pooleapp API key as the first argument, and the redirect URL for when the form is submitted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% contact YOUR_POOLE_APP_API_KEY http://YOURSITE.COM/PAGE?form=ok#alert-box %}</span></code></pre></td></tr></table></div></figure>


<h3>Demo</h3>

<p>You can try out the demo on the <a href="http://wern-ancheta.com/aboutme">about me page of this blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up SSL on Apache]]></title>
    <link href="http://anchetawern.github.io/blog/2014/07/24/setting-up-ssl-on-apache/"/>
    <updated>2014-07-24T17:43:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/07/24/setting-up-ssl-on-apache</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;ll walk you through setting up SSL on Apache.
When talking about SSL the popular choice is OpenSSL, an open source toolkit for implementing Secure Sockets Layer (SSL) and Transport Layer Security (TLS). So we will be using OpenSSL for this tutorial.</p>

<h3>Install OpenSSL</h3>

<p>The first thing that you need to do is to determine the latest version of OpenSSL from the <a href="http://www.openssl.org/source/">sources page</a>. Its usually the one that has a red color. Once you find that, copy its address then use <code>wget</code> to download it to your preferred directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.openssl.org/source/openssl-1.0.1h.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Next create the directory where you want to install openssl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>Extract the archive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -xvzf openssl-1.0.1h.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Then <code>cd</code> into it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd openssl-1.0.1h</span></code></pre></td></tr></table></div></figure>


<p>Next execute the <code>config</code> command to set the installation path for openssl and check for any errors. This should be the same as the directory you created earlier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>Next execute <code>make</code> to compile the source code. If this doesn&rsquo;t work for you try adding <code>sudo</code> before the actual command.
After <code>make</code> is done and there aren&rsquo;t any errors you can now execute <code>make install</code> to install the source files in there appropriate directories.</p>

<p>Once that&rsquo;s done you can verify that openssl is successfully installed by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/openssl/bin/openssl version</span></code></pre></td></tr></table></div></figure>


<h3>Generate Keys</h3>

<p>Once you&rsquo;re done with installing openssl you can now assign it to a variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OpenSSL_HOME=/usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>And then add it to your system path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:$OpenSSL_HOME/bin</span></code></pre></td></tr></table></div></figure>


<p>Next create a private key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl genrsa 2048 &gt; privatekey.pem</span></code></pre></td></tr></table></div></figure>


<p>In the above command <code>genrsa 2048</code> tells openssl to generate an RSA key that is 2048 bits long. <a href="http://en.wikipedia.org/wiki/RSA_%28cryptosystem%29">RSA</a> is basically just an algorithm used for encryption.</p>

<p>Next create a CSR (Certificate Signing Request) using the private key that we have just generated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -key privatekey.pem -out csr.pem</span></code></pre></td></tr></table></div></figure>


<p>The command above will ask for the following:</p>

<ul>
<li><strong>Country Name</strong> &ndash; use the 2 letter abbreviation of your country name</li>
<li><strong>State or Province</strong> &ndash; (e.g California)</li>
<li><strong>Locality Name</strong> &ndash; (e.g Palm Desert)</li>
<li><strong>Organization Name</strong> &ndash; name of your company</li>
<li><strong>Organization Unit</strong> &ndash; name of website</li>
<li><strong>Common Name</strong> &ndash; domain name of website (e.g mywebsite.com)</li>
<li><strong>Email Address</strong> &ndash; your email address</li>
</ul>


<p>The information above will be used for the certificate that will be assigned to you later on so be sure to supply the correct information.</p>

<h3>Enable SSL on Apache</h3>

<p>Now that we have generated all the keys we need we can now configure apache to use those keys. First you have to enable the SSL module by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod ssl</span></code></pre></td></tr></table></div></figure>


<p>Then restart apache for changes to take effect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>Next edit the ssl configuration file for apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/apache2/sites-available/default-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>Comment out the following lines by adding a pound (#) sign before them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
</span><span class='line'>SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key</span></code></pre></td></tr></table></div></figure>


<p>Next look for the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost _default_:443&gt;</span></code></pre></td></tr></table></div></figure>


<p>And then under it set the server information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ServerAdmin admin@mywebsite.com
</span><span class='line'>ServerName mywebsite.com
</span><span class='line'>ServerAlias www.mywebsite.com
</span><span class='line'>DocumentRoot /home/www</span></code></pre></td></tr></table></div></figure>


<p>Next look for <code>SSLEngine On</code> and then under it add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile /home/wern/signed-certificate.crt 
</span><span class='line'>SSLCertificateKeyFile /home/wern/privatekey.pem </span></code></pre></td></tr></table></div></figure>


<p>The <code>SSLCertificateFile</code> is where you specify the path to your websites digital certificate. I didn&rsquo;t cover this step because there are a lot of certificate authorities out there. So far I&rsquo;ve only tried with Namecheap and its pretty easy to acquire a certificate from them. Just create an account and then log in to it. Once you&rsquo;re logged in just click on the security menu then select SSL certificates. From there just click on the button under the domain validation, add your preferred certificate to the cart and then just go through the steps. Once you have purchased a certificate just hover over your user name on the upper left side of the screen and then select manage ssl certificates. That will bring you to the page where all your certificates are listed. By default its just sitting there waiting to be configured. So all you have to do is configure it then select <code>Apache + OpenSSL</code> when it asks for your server configuration. And then it will ask for the csr. Just copy the contents of the <code>csr.pem</code> file that we generated earlier and paste it on the textarea which is asking for it. After that just click on submit and go through the steps provided by namecheap. Once everything is ok namecheap will send you the certificate via email. Just copy it and then save it on your server. The path to that file is what you need to assign to the <code>SSLCertificateFile</code> in apache.
Next is the <code>SSLCertificateKeyFile</code> that&rsquo;s the path to your private key. In our case its the <code>privatekey.pem</code> file.</p>

<p>Once that&rsquo;s done you just have to enable it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite default-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>And then restart apache so that the changes will take effect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Enjoy your new https enabled website. The next step would be to redirect all http request to https but I&rsquo;ll leave that one to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I work with Clients]]></title>
    <link href="http://anchetawern.github.io/blog/2014/07/13/how-i-work-with-clients/"/>
    <updated>2014-07-13T16:19:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/07/13/how-i-work-with-clients</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;m going to share some of the things I usually do when working with my clients.</p>

<h3>Getting Projects</h3>

<p>First off I&rsquo;m not actively looking for work as I already have a full time job so I usually let potential clients to contact me for projects. My contact details are in the <a href="http://wern-ancheta.com/aboutme/">about me page</a> and they can just contact me via my primary email or skype. I have twitter but I usually do not entertain people who contact me there. There&rsquo;s also linked in but most of my contacts are recruiters which is no good because they usually come at you for full time jobs at a physical office somewhere.</p>

<p>Now that you know how I get client work its time to proceed with the how. So first thing that happens is that I receive an email or a skype contact request with some project details in it. Something like:</p>

<blockquote><p>Hey I read your blog post on {Some blog post I&#8217;ve written before} and I think you would be able to do this project. {An overview of the project}. Is this something you&#8217;re interested in doing for us?</p></blockquote>


<p>Depending on my current work load and how interesting the project is I either decline or accept the project. If I still got a bit of time and the project is interesting I usually say yes. If its not something interesting and I got a lot of free time after work I say no. I don&rsquo;t really like doing something I don&rsquo;t enjoy just for the sake of some cash.</p>

<p>Once I decided to accept the project I send an email saying that I accept the project. Here&rsquo;s a template that I usually go with:</p>

<blockquote><p>Hi {first name of client},</p><p>Yes I&#8217;m interested in this project. However I currently have a full time job thus I won&#8217;t be able to work on this project full time. I can only do this after I&#8217;m done with my work or on some free time on weekends. If you&#8217;re ok with this then I&#8217;ll happily accept this project.</p><p>Regards,<br/>Wern</p></blockquote>


<p>As you can see above I always try to make it clear of my current occupation. Whether I currently have a job or another project that I&rsquo;m working on. If the potential client is ok with it only then that the project begins.</p>

<h3>Introductory Email</h3>

<p>On the beginning of the project I usually send an email to introduce myself and some of the guidelines and process that I follow when working on a project. Something like this:</p>

<blockquote><p>Hi {first name of client},</p><p>Thank you for understanding the situation. I can begin doing the project starting tomorrow. But first here are some guidelines that I follow when working on a project:</p><p> - First. All things that have something to do with the project should be added on Trello, a web-based project management software. I&#8217;ve already invited to it, please accept my invitation so you can familiarize yourself with it. If you have any questions, suggestions or clarifications regarding the project please add them on Trello.<br/> - Second. If you need to talk to me you can contact me on Skype but first send an email that you want to talk to me and I&#8217;ll try to look for a good time to talk. Here is my skype user name: wernancheta<br/> - Third. I may not always be available so please understand that I can&#8217;t always immediately reply to an email or a question on Trello.<br/> - Fourth. I usually put a number of features into a group. Once a specific group is satisfactorily completed I ask for a payment.<br/> - Fifth. Estimates cover up to 3 small revisions for each feature. Small revisions doesn&#8217;t take more than 10 minutes to do. Anything that will take longer than that I&#8217;ll have to charge an additional fee.</p><p>Regards,<br/>Wern</p></blockquote>


<p>This usually goes smoothly and the client says ok.</p>

<h3>Trello Workflow</h3>

<p>Next is the Trello workflow. What I do is stick with the following list:</p>

<ul>
<li><strong>To do</strong> &ndash; this is where I put in items that we have talked about with my client.</li>
<li><strong>Wont do</strong> &ndash; items that we have decided not to do. The usual reasons are that the client no longer wants the feature or it will be postponed at a later time.</li>
<li><strong>Doing</strong> &ndash; items that are from the To do list that I&rsquo;m currently working on.</li>
<li><strong>Done</strong> &ndash; items that I believe are already done. I usually manually test the items before I move them to this list. When there are issues with the items the client can just comment their issue into the specific item. Once I found out that its a real issue that needs to be worked on then I move the item back into the Doing list.</li>
<li><strong>Proposals</strong> &ndash; this contains the features that I consider necessary which the client didn&rsquo;t mention. Items from here gets moved to the To do list once I get the clients approval.</li>
<li><strong>Other Info</strong> &ndash; anything else about the project that doesn&rsquo;t belong to any of the above. Initially this is where I put a quick tutorial about how to use Trello.</li>
</ul>


<p>On each of the list I put in a README card to guide the client what each list is for.</p>

<p>Trello is great for clients who loves asking for project progress every second. Upon looking at Trello they already have an idea what still needs to be done, what I&rsquo;m currently working on and what else I have to do.</p>

<h3>Development</h3>

<p>When developing I usually push the files into <a href="https://www.openshift.com/">Openshift</a> because they offer free hosting up to 3 projects. Database is also covered so its really sweet considering the fact that its free. By using Openshift I can also ensure that my clients can&rsquo;t just run away with the source code and call it a day. If I have already established a certain amount of trust with client and they have a server where I can put the source code then I use their server instead.</p>

<h3>Payments</h3>

<p>Lastly there&rsquo;s the payments. I don&rsquo;t receive payments up front. This is how I establish trust to the client. So if the client is not some kind of heartless villain who enjoys not paying for someone&rsquo;s service I can usually expect them to pay.
What I do is group the features that I&rsquo;ll be working on into 2, 3 or 4 groups depending on the number of features. I usually arrive with 4 groups. This means that I&rsquo;ll be asking the client for payment 4 times. Once the first group is satisfactorily done without issues I email my client. I go with the following template:</p>

<blockquote><p>Hi {first name of client},</p><p>Here&#8217;s the break down for the {name of group}:</p><p>  {List of features here}</p><p>Total: {total price}</p><p>You can pay in this email with paypal: {my paypal email address}</p><p>Regards,<br/>Wern</p></blockquote>


<p>That&rsquo;s it! You might have noticed that I didn&rsquo;t mention anything about contracts. That&rsquo;s because I don&rsquo;t do contracts. I believe contracts just gives you the power to sue someone and go to court. Because I usually work remotely I don&rsquo;t think I can go to court if my client is on the other side of the world. So if they don&rsquo;t pay I&rsquo;ll just pray for their souls.</p>
]]></content>
  </entry>
  
</feed>
