<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-08-24T19:33:55+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon EC2]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/24/getting-started-with-amazon-ec2/"/>
    <updated>2014-08-24T19:00:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/24/getting-started-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to give you an introduction on how to setup an Amazon EC2 instance that uses the LAMP stack. This tutorial assumes that you already have an AWS account setup.</p>

<h4>Setting up the instance</h4>

<p>The first thing that you need to do is to login to your AWS account. Once logged in, click on the instances link found on the left side of the screen. Once in the instances page, click on the &lsquo;Launch Instance&rsquo; button. You will then be redirected to the page where you can select the operating system that will be used for the instance that you want to create:</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/start.png" alt="choose AMI" /></p>

<p>If you&rsquo;re using Ubuntu for your development, it would be much easier for you if you also select the Ubuntu Server, the 64-bit version if preferred. Just click on the &lsquo;select&rsquo; button beside the Ubuntu instance.</p>

<p>Next, we need to select the instance type. For starters you may want to try the t2.micro instance as its eligible for the free tier, this means that you don&rsquo;t have to pay anything when you launch this type instance.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/instance-type.png" alt="choose instance" /></p>

<p>If you&rsquo;re looking into launching an instance which exactly fits your needs, check out <a href="http://www.ec2instances.info/">ec2instances.info</a>. Note that an instance that&rsquo;s not eligible for free tier would cost you per hour so be really careful with the instance that you select.</p>

<p>Once you&rsquo;re done selecting the instance type, click on the &lsquo;Next: Configure Instance Details&rsquo;, that will redirect you to the page where you can configure details about your instance. Things like the Virtual Private Cloud, Subnet and Public IP. Usually you don&rsquo;t really have to touch these settings so just leave the default ones.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/configure-instance.png" alt="configure instance" /></p>

<p>Next click on the &lsquo;Next: Add Storage&rsquo; button. That will redirect you to the page where you can configure the size and volume type of the storage that will be used for your instance. Just input 30 for the size as free tiers are eligible for up to 30 GB. If you have selected something higher than the free tier, you can find information on how much storage size you can have at <a href="http://www.ec2instances.info/">ec2instances.info</a>. For the volume type, just use the general purpose SSD.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/add-storage.png" alt="add storage" /></p>

<p>Next click on the &lsquo;Next: Tag Instance&rsquo; button. That will redirect you to the page where you can assign a key-value pair to your instance. This allows you to tag your instance with those key-value pairs which enables you to categorize your AWS resources in different ways. We won&rsquo;t really be using tags in this tutorial so if you want to learn more about tagging your instance, check out the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">official docs</a>.</p>

<p><img src="http://anchetawern.github.io/images/posts/amazon_ec2/tag-instance.png" alt="tag instance" /></p>

<p>Next click on the &lsquo;Next: Configure Security Group&rsquo; button. That will redirect you to the page where you can configure the security group used by the instance. In simple terms, security groups allows you to set the ports used by your instance and which IP addresses are allowed access to those ports. You can assign different settings for inbound and outbound rules. Inbound rules are the settings used for requests made to your server by other computers.</p>

<p>For inbound rules you would commonly have the following settings:</p>

<ul>
<li><strong>Type:</strong> SSH &ndash; this allows you to access your instance via SSH.</li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 22</li>
<li><p><strong>Source:</strong> 0.0.0.0/0 &ndash; if you got a static IP assigned to your computer, its more secure if you set that IP for this field. Otherwise just select &lsquo;Anywhere&rsquo; which allows access to any IP.</p></li>
<li><p><em>Type:</em> &ndash; HTTP &ndash; this allows you to access your instance from the browser.</p></li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 80</li>
<li><strong>Source:</strong> 0.0.0.0/0 &ndash; this means anyone which has access to the internet can access your instance via the DNS provided by Amazon or the public IP assigned to your instance.</li>
</ul>


<p>For outbound rules:</p>

<ul>
<li><em>Type:</em> &ndash; HTTP &ndash; this allows your instance to download stuff from the internet.</li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 80</li>
<li><p><strong>Destination:</strong> 0.0.0.0/0 &ndash; this means that your instance can make the request to any server.</p></li>
<li><p><em>Type:</em> MYSQL &ndash; this allows your instance to make a request to the MySQL server.</p></li>
<li><strong>Protocol:</strong> TCP</li>
<li><strong>Port:</strong> 3306</li>
<li><strong>Destination:</strong> 0.0.0.0/0 &ndash; this allows your instance access to any MySQL server. You can also set this to the private IP of your instance. You can only specify a single IP so if you&rsquo;re planning to access other MySQL servers aside from the one installed on your ec2 instance then just select &lsquo;Anywhere&rsquo;.</li>
</ul>


<p>That&rsquo;s pretty much it.</p>

<p>You can learn more about security groups in this page: <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a></p>

<p>Once you&rsquo;re done configuring the security group, click on &lsquo;Review and Launch&rsquo; button. You can now review the details of the instance, once you&rsquo;re done reviewing just click on the &lsquo;Launch&rsquo; button. Amazon will now prompt you to create an ssh key or use an existing key if you already have an existing one. You can use the ssh key to authenticate yourself when logging in to your instance via ssh. Keep the ssh key somewhere where you can easily find it. For me I prefer putting it in the <code>~/.ssh</code> directory.</p>

<h4>Installing Software</h4>

<p>Now that you have launch the instance you can now access it via ssh. To do that, login to your amazon account, click the &lsquo;services&rsquo; link on the upper left corner of the screen, hover on the &lsquo;All AWS Services&rsquo; link then click on &lsquo;EC2&rsquo;. That will redirect you to the ec2 dashboard page. Once you&rsquo;re there, click on the &lsquo;instances&rsquo; link. This will list out all the instances that you have created in the current region that you have selected. If nothing is listed on that page the instance that you have created might be on another region. To change the region you can click on the second link from the right. The one which looks like a place in the world. Select any of the places listed in there and your instance will be listed in any of those.
Next click on the instance listed then copy the value for the &lsquo;Public DNS&rsquo;.
Open up a terminal, <code>cd</code> into the directory where you have your ssh key then execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i amazon-aws.pem ubuntu@the-public-dns-of-your-instance</span></code></pre></td></tr></table></div></figure>


<p>Breaking the command down, <code>-i</code> allows you to specify the ssh key file. In this case the file name is <code>amazon-aws.pem</code>. Next is the username of the user you want to use to login, in this case the username is <code>ubuntu</code>. That&rsquo;s the default username for Ubuntu ec2 instances. Next is <code>@</code> followed by the public dns of your instance. If you have already assigned a domain name to your instance you can also use that.</p>

<p>Once you&rsquo;re logged in you can now start installing software. Ec2 instances doesn&rsquo;t come pre-installed with Apache, PHP and MySQL. So you would need to install it yourself. Here are some of the software that I usually install on an ec2 instance:</p>

<p>Curl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install libcurl3 php5-curl</span></code></pre></td></tr></table></div></figure>


<p>Composer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php
</span><span class='line'>sudo mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<p>Apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>PHP:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5
</span><span class='line'>sudo apt-get install libapache2-mod-php5</span></code></pre></td></tr></table></div></figure>


<p>MySQL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install php5-mysql</span></code></pre></td></tr></table></div></figure>


<h4>Configuring Apache</h4>

<p>Once everything is installed you still have to configure Apache to use a different web directory. This is because the default one isn&rsquo;t really that friendly. As you have to <code>sudo</code> every time you need to save or update something from the directory. My preferred directory is one that is on the home directory. As you won&rsquo;t need any special privileges to do anything inside of it. To configure Apache to use a different directory, <code>cd</code> into the <code>/etc/apache2</code> directory then open up the <code>apache2.conf</code> file. You can open up the file using a text editor like <code>nano</code>, <code>vi</code> or <code>vim</code>. Once you&rsquo;re in that directory open up the file using the text editor of your choice:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano apache2.conf</span></code></pre></td></tr></table></div></figure>


<p>Now look for the <code>Directory</code> directives and update it to use a value similar to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory /&gt;
</span><span class='line'>        Options FollowSymLinks
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Require all denied
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>&lt;Directory /usr/share&gt;
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Require all granted
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>&lt;Directory /home/ubuntu/www&gt;
</span><span class='line'>        Options Indexes FollowSymLinks
</span><span class='line'>        AllowOverride All
</span><span class='line'>        Require all granted
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>For the configuration file above were using <code>/home/ubuntu/www</code> as the web root directory. You can change this to any directory on your <code>home</code> folder. Just be sure that the directory exists.</p>

<p>Still on the same directory, <code>cd</code> into the <code>sites-available</code> directory then open up the <code>000-default.conf</code> file. Look for the <code>DocumentRoot</code> directive and specify the path to your web root directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /home/ubuntu/www</span></code></pre></td></tr></table></div></figure>


<p>Once everything is done, restart Apache using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you have learned how to set up an ec2 instance, install software needed to host a website. You can use the free tier to quickly test out an app idea and bring it online for everyone to test out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Supervisor]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/15/getting-started-with-supervisor/"/>
    <updated>2014-08-15T19:32:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/15/getting-started-with-supervisor</id>
    <content type="html"><![CDATA[<p>Recently in my work I had this node.js script that I had to run persistently. Its basically a server that will generate images based on some JSON data that&rsquo;s passed from the client side. So I did some searching and found <a href="http://supervisord.org/">Supervisor</a>, a process control system. It allows you to run programs persistently.</p>

<h3>Installation</h3>

<p>You can install install Supervisor by executing the following command in your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install supervisor</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>Once the installation is done, you can now create the config file. This is where you specify which script you want to run, the directory in where you want to run it, and a log file in which the output is redirected.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/supervisor/conf.d/image-creator.conf</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what a config file looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[program:imagecreator]
</span><span class='line'>command=node image-creator.js
</span><span class='line'>directory=/home/ubuntu/www
</span><span class='line'>stdout_logfile=/home/ubuntu/logs/image-creator.log
</span><span class='line'>redirect_stderr=true</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down. This is where we set the name of the program. Yes the <code>program:</code> is always there, only the thing that comes after it is updated. In this case the name of the program that I gave is <code>imagecreator</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[program:imagecreator]</span></code></pre></td></tr></table></div></figure>


<p>Next is the command that you execute when you&rsquo;re running the program in the terminal. In this case were executing the script via the <code>node</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=node image-creator.js</span></code></pre></td></tr></table></div></figure>


<p>Next is the directory where the program is stored. This can also be the directory where you want to execute the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>directory=/home/ubuntu/www</span></code></pre></td></tr></table></div></figure>


<p>This is where you specify the file where you want to redirect the output of the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stdout_logfile=/home/ubuntu/logs/image-creator.log</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we specify whether to send back the <code>stderr</code> output to supervisord on its stdout file descriptor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redirect_stderr=true</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much all we need for the configuration file. You can go ahead and save it. If you want to specify more settings, check out the <a href="http://supervisord.org/configuration.html">docs on configuration</a></p>

<h3>Adding the Process</h3>

<p>Now that we have a configuration file in place we can now tell supervisor to add it to the list of processes that it currently manages. You can do that by using <code>supervisorctl</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo supervisorctl</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will let you enter the supervisor program. Next execute the following commands in order:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>reread
</span><span class='line'>add imagecreator
</span><span class='line'>start imagecreator</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><code>reread</code> tells supervisor to read the configuration files that are available.</li>
<li><code>add</code> tells supervisor to add the program into the list of programs that it will manage.</li>
<li><code>start</code> tells supervisor to run the program.</li>
</ul>


<h2>Conclusion</h2>

<p>That&rsquo;s it! Supervisor is a neat little program that allows you to run programs persistently. Just be sure that errors are handled accordingly because supervisor wouldn&rsquo;t continue running your program if an error occurs while its running.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Datatables with Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel/"/>
    <updated>2014-08-10T16:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be walking you through how you can use datatables in Laravel. But first, let me give you a quick intro on what Datatabes is. <a href="http://datatables.net/">Datatables</a> is basically a jQuery plugin that allows you to add advanced interaction controls to your HTML tables. Things like search, pagination, sorting, and ordering. Datatables allows you to add those kinds of functionality into your tables with minimal code.</p>

<p>In this tutorial were going to be using a Laravel package called <a href="https://github.com/Chumper/Datatable">Chumper</a>. Chumper allows us to easily create Datatables which uses the data returned from a model as its data source.</p>

<p>First thing that you need to do is to add the following in your <code>composer.json</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"require": {
</span><span class='line'>  "chumper/datatable": "2.*",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you got other packages that you need for your project, just add it on the last part of the <code>require</code> item. Once you&rsquo;re done with that, execute <code>composer update</code> from your terminal to install Chumper.</p>

<p>Once composer finishes installing Chumper, add the service provider for Chumper into the <code>providers</code> array in your <code>app.php</code> file inside the <code>app/config</code> directory of your Laravel installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'Chumper\Datatable\DatatableServiceProvider',</span></code></pre></td></tr></table></div></figure>


<p>Still inside the <code>app.php</code> file, also add the following under the aliases array:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'Datatable' =&gt; 'Chumper\Datatable\Facades\DatatableFacade',</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now create the main configuration file by executing the following from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan config:publish chumper/datatable</span></code></pre></td></tr></table></div></figure>


<p>The main configuration file is stored under <code>app/config/packages/chumper/datatable/config.php</code> so go ahead and edit that if you want to change the default settings provided by Chumper. Things like the class or ID given to the tables generated can be configured from that file. This is particularly useful if you want to use classes or IDs to style the datatables in a specific way. Other than that the default settings can be used for most cases.</p>

<p>Now that we have configured Chumper, we can now add a route that will return the page where the datatable is displayed in your <code>routes.php</code> file. In the example below, we have the a controller called <code>AdminController</code> and were using the data returned by the <code>users</code> method as a response whenever the <code>users</code> route is accessed via the <code>GET</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;AdminController@users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we also need to add the route that will return the data into the client side. By default, Chumper uses the server for processing queries made through the datatable. This means that it only gets the actual data that is needed instead of getting all of the records in the database table that you specify. In the code below, were giving a name of <code>api.users</code> to the <code>api/users</code> route so that we can refer to it later in the controller. The <code>uses</code> keyword allows you to specify a controller action to the route. Its basically the same thing as what we did above but that&rsquo;s the way to do it if you&rsquo;re using named routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;api/users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;as&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;api.users&#39;</span><span class="p">,</span> <span class="s1">&#39;uses&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;AdminController@getUsersDataTable&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Under your controller, here&rsquo;s the method that returns the page where the datatable is displayed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">users</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$table</span> <span class="o">=</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">table</span><span class="p">()</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="s1">&#39;Last Login&#39;</span><span class="p">,</span> <span class="s1">&#39;View&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUrl</span><span class="p">(</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;api.users&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">noScript</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;admin.users&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="nv">$table</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above assumes that you&rsquo;re using <a href="http://laravel.com/docs/templates">Laravel layouts</a>. If you don&rsquo;t know how to use layouts in Laravel, be sure to check out the docs. Breaking the code down, the following code allows you create the datatable. You can add columns to it by using the <code>addColumn</code> method. This method takes up the names that you want to give to the header for each field in the table. The <code>setUrl</code> method allows you to set the route that the datatable will use for processing queries made through it. Earlier we created a route and named it <code>api.users</code> so in the <code>setUrl</code> method all we have to do is to use the <code>route</code> method and then supply the name of the route which is responsible for returning the data for processing the queries. Lastly, we call the <code>noScript()</code> method to specify that we don&rsquo;t want to add the JavaScript code in the response that will be returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$table</span> <span class="o">=</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">table</span><span class="p">()</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;Name&#39;</span><span class="p">,</span> <span class="s1">&#39;Last Login&#39;</span><span class="p">,</span> <span class="s1">&#39;View&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">setUrl</span><span class="p">(</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;api.users&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="na">noScript</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the method which processes the queries made through the datatable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getUsersDataTable</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$query</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">collection</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;M j, Y h:i A&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$model</span><span class="o">-&gt;</span><span class="na">last_login</span><span class="p">));</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;/users/&#39;</span> <span class="o">.</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">.</span> <span class="s1">&#39;&quot;&gt;view&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">searchColumns</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">orderColumns</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">make</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, the code below allows you to specify the fields that you want to use for the response. These are the actual field names in your database table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we return the actual data using the <code>collection</code> method in the <code>Datatable</code> class. Well, not actually the <code>Datatable</code> class, since its just the Facade that we used earlier in the <code>app.php</code> file. The <code>collection</code> method requires the result set returned by our query to the users table earlier so we just set that as the argument. After that, we can call the <code>addColumn</code> method to update the presentation of the data returned for that specific field. In the case of the <code>last_login</code> field, its stored in the database as a time stamp which looks like this: <code>2014-07-29 11:37:39</code>. We don&rsquo;t really want to present that to the user like that so we format it using the <code>date</code> method. The first argument is the format that you want. In this case we want something like this: <code>Jul 29, 2014 11:37 AM</code>. Looking at the <a href="http://php.net/manual/en/function.date.php">official docs</a>, we know that we can do that by specifying the following: <code>M j, Y h:i A</code>. The second argument is a unix timestamp. We can convert the raw data that came from the database into a unix timestamp by using the <code>strtotime</code> method, so we do just that. Next is the <code>id</code> field. We don&rsquo;t actually want to display the users id to the user, what we want is to display a link that would lead the user to the page where more details for the user can be viewed. Thus we return an HTML anchor tag which uses the id as one of the component for the actual link.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">return</span> <span class="nx">Datatable</span><span class="o">::</span><span class="na">collection</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;last_login&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;M j, Y h:i A&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="nv">$model</span><span class="o">-&gt;</span><span class="na">last_login</span><span class="p">));</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$model</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;&lt;a href=&quot;/users/&#39;</span> <span class="o">.</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">.</span> <span class="s1">&#39;&quot;&gt;view&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we can now display the datatable in our view. If you&rsquo;re using <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, it should look similar to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@section(&#39;content&#39;)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>Users<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  {{ $table-&gt;render() }}
</span><span class='line'>  {{ $table-&gt;script() }}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>@stop
</span></code></pre></td></tr></table></div></figure>


<p>Yup! as simple as that! All we have to do is to call the <code>render()</code> method to render the actual datatabase. And then we also call the <code>script()</code> method to render the JavaScript file that would do the talking to the server every time the user interacts with the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Contact plugin for Octopress]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/02/introduction-to-contact-plugin-for-octopress/"/>
    <updated>2014-08-02T21:01:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/02/introduction-to-contact-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;ll be introducing the <a href="https://github.com/anchetaWern/jekyll-contact">Contact plugin for Octopress</a>.
This plugin allows you to create contact forms with ease. Its using the <a href="http://pooleapp.com/">pooleapp.com</a> for saving the data for the forms that are submitted.</p>

<h3>Create a Pooleapp account</h3>

<p>First lets go through pooleapp. Poole is a free, hosted data store for static sites. It allows you to post data into it and then later on you can retrieve the data using a simple API.</p>

<p>You don&rsquo;t have to register to start using pooleapp but its recommended so that you can keep track of the forms that you create. Another bonus feature is that when someones submits a data to your contact form, pooleapp will immediately notify you via email.</p>

<p>Once you&rsquo;ve registered an account, you can now create a new form. Just give your form a unique name and click on the &lsquo;create form&rsquo; button. Once created, pooleapp will ask you for the email in which you want the notifications to be sent to.</p>

<h3>Installing the plugin</h3>

<p>Octopress doesn&rsquo;t really have a plugin system so we&rsquo;ll have to do things manually. First thing that you need to do is to add the <code>contact.rb</code> file into the <code>octopress/plugins</code> directory.</p>

<p>So that we can show a success message once the visitor submits his data through the contact form, we also need to add the <code>contact.js</code> file inside the <code>source/javascripts</code> directory. Basically what it does is to check for the existence of the <code>form</code> query parameter. If it exists then it makes the success message visible.</p>

<p>For the styling, add the <code>_contact.scss</code> file inside the <code>sass/partials</code> directory. Then in your <code>sass/_partials.scss</code> file, import the css for the contact form by adding the following on the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import "partials/contact";</span></code></pre></td></tr></table></div></figure>


<p>Lastly, under the <code>source/_includes/custom</code> directory, add a script tag that points out to the <code>contact.js</code> file on the last line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="http://anchetawern.github.io/javascripts/contact.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Using the plugin</h3>

<p>To use the plugin in any of your pages, simply use the <code>contact</code> liquid tag then supply your pooleapp API key as the first argument, and the redirect URL for when the form is submitted:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% contact YOUR_POOLE_APP_API_KEY http://YOURSITE.COM/PAGE?form=ok#alert-box %}</span></code></pre></td></tr></table></div></figure>


<h3>Demo</h3>

<p>You can try out the demo on the <a href="http://wern-ancheta.com/aboutme">about me page of this blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up SSL on Apache]]></title>
    <link href="http://anchetawern.github.io/blog/2014/07/24/setting-up-ssl-on-apache/"/>
    <updated>2014-07-24T17:43:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/07/24/setting-up-ssl-on-apache</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;ll walk you through setting up SSL on Apache.
When talking about SSL the popular choice is OpenSSL, an open source toolkit for implementing Secure Sockets Layer (SSL) and Transport Layer Security (TLS). So we will be using OpenSSL for this tutorial.</p>

<h3>Install OpenSSL</h3>

<p>The first thing that you need to do is to determine the latest version of OpenSSL from the <a href="http://www.openssl.org/source/">sources page</a>. Its usually the one that has a red color. Once you find that, copy its address then use <code>wget</code> to download it to your preferred directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.openssl.org/source/openssl-1.0.1h.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Next create the directory where you want to install openssl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>Extract the archive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -xvzf openssl-1.0.1h.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Then <code>cd</code> into it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd openssl-1.0.1h</span></code></pre></td></tr></table></div></figure>


<p>Next execute the <code>config</code> command to set the installation path for openssl and check for any errors. This should be the same as the directory you created earlier:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>Next execute <code>make</code> to compile the source code. If this doesn&rsquo;t work for you try adding <code>sudo</code> before the actual command.
After <code>make</code> is done and there aren&rsquo;t any errors you can now execute <code>make install</code> to install the source files in there appropriate directories.</p>

<p>Once that&rsquo;s done you can verify that openssl is successfully installed by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/openssl/bin/openssl version</span></code></pre></td></tr></table></div></figure>


<h3>Generate Keys</h3>

<p>Once you&rsquo;re done with installing openssl you can now assign it to a variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OpenSSL_HOME=/usr/local/openssl</span></code></pre></td></tr></table></div></figure>


<p>And then add it to your system path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=$PATH:$OpenSSL_HOME/bin</span></code></pre></td></tr></table></div></figure>


<p>Next create a private key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl genrsa 2048 &gt; privatekey.pem</span></code></pre></td></tr></table></div></figure>


<p>In the above command <code>genrsa 2048</code> tells openssl to generate an RSA key that is 2048 bits long. <a href="http://en.wikipedia.org/wiki/RSA_%28cryptosystem%29">RSA</a> is basically just an algorithm used for encryption.</p>

<p>Next create a CSR (Certificate Signing Request) using the private key that we have just generated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -key privatekey.pem -out csr.pem</span></code></pre></td></tr></table></div></figure>


<p>The command above will ask for the following:</p>

<ul>
<li><strong>Country Name</strong> &ndash; use the 2 letter abbreviation of your country name</li>
<li><strong>State or Province</strong> &ndash; (e.g California)</li>
<li><strong>Locality Name</strong> &ndash; (e.g Palm Desert)</li>
<li><strong>Organization Name</strong> &ndash; name of your company</li>
<li><strong>Organization Unit</strong> &ndash; name of website</li>
<li><strong>Common Name</strong> &ndash; domain name of website (e.g mywebsite.com)</li>
<li><strong>Email Address</strong> &ndash; your email address</li>
</ul>


<p>The information above will be used for the certificate that will be assigned to you later on so be sure to supply the correct information.</p>

<h3>Enable SSL on Apache</h3>

<p>Now that we have generated all the keys we need we can now configure apache to use those keys. First you have to enable the SSL module by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod ssl</span></code></pre></td></tr></table></div></figure>


<p>Then restart apache for changes to take effect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>Next edit the ssl configuration file for apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/apache2/sites-available/default-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>Comment out the following lines by adding a pound (#) sign before them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
</span><span class='line'>SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key</span></code></pre></td></tr></table></div></figure>


<p>Next look for the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost _default_:443&gt;</span></code></pre></td></tr></table></div></figure>


<p>And then under it set the server information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ServerAdmin admin@mywebsite.com
</span><span class='line'>ServerName mywebsite.com
</span><span class='line'>ServerAlias www.mywebsite.com
</span><span class='line'>DocumentRoot /home/www</span></code></pre></td></tr></table></div></figure>


<p>Next look for <code>SSLEngine On</code> and then under it add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile /home/wern/signed-certificate.crt 
</span><span class='line'>SSLCertificateKeyFile /home/wern/privatekey.pem </span></code></pre></td></tr></table></div></figure>


<p>The <code>SSLCertificateFile</code> is where you specify the path to your websites digital certificate. I didn&rsquo;t cover this step because there are a lot of certificate authorities out there. So far I&rsquo;ve only tried with Namecheap and its pretty easy to acquire a certificate from them. Just create an account and then log in to it. Once you&rsquo;re logged in just click on the security menu then select SSL certificates. From there just click on the button under the domain validation, add your preferred certificate to the cart and then just go through the steps. Once you have purchased a certificate just hover over your user name on the upper left side of the screen and then select manage ssl certificates. That will bring you to the page where all your certificates are listed. By default its just sitting there waiting to be configured. So all you have to do is configure it then select <code>Apache + OpenSSL</code> when it asks for your server configuration. And then it will ask for the csr. Just copy the contents of the <code>csr.pem</code> file that we generated earlier and paste it on the textarea which is asking for it. After that just click on submit and go through the steps provided by namecheap. Once everything is ok namecheap will send you the certificate via email. Just copy it and then save it on your server. The path to that file is what you need to assign to the <code>SSLCertificateFile</code> in apache.
Next is the <code>SSLCertificateKeyFile</code> that&rsquo;s the path to your private key. In our case its the <code>privatekey.pem</code> file.</p>

<p>Once that&rsquo;s done you just have to enable it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite default-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>And then restart apache so that the changes will take effect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Enjoy your new https enabled website. The next step would be to redirect all http request to https but I&rsquo;ll leave that one to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I work with Clients]]></title>
    <link href="http://anchetawern.github.io/blog/2014/07/13/how-i-work-with-clients/"/>
    <updated>2014-07-13T16:19:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/07/13/how-i-work-with-clients</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;m going to share some of the things I usually do when working with my clients.</p>

<h3>Getting Projects</h3>

<p>First off I&rsquo;m not actively looking for work as I already have a full time job so I usually let potential clients to contact me for projects. My contact details are in the <a href="http://wern-ancheta.com/aboutme/">about me page</a> and they can just contact me via my primary email or skype. I have twitter but I usually do not entertain people who contact me there. There&rsquo;s also linked in but most of my contacts are recruiters which is no good because they usually come at you for full time jobs at a physical office somewhere.</p>

<p>Now that you know how I get client work its time to proceed with the how. So first thing that happens is that I receive an email or a skype contact request with some project details in it. Something like:</p>

<blockquote><p>Hey I read your blog post on {Some blog post I&#8217;ve written before} and I think you would be able to do this project. {An overview of the project}. Is this something you&#8217;re interested in doing for us?</p></blockquote>


<p>Depending on my current work load and how interesting the project is I either decline or accept the project. If I still got a bit of time and the project is interesting I usually say yes. If its not something interesting and I got a lot of free time after work I say no. I don&rsquo;t really like doing something I don&rsquo;t enjoy just for the sake of some cash.</p>

<p>Once I decided to accept the project I send an email saying that I accept the project. Here&rsquo;s a template that I usually go with:</p>

<blockquote><p>Hi {first name of client},</p><p>Yes I&#8217;m interested in this project. However I currently have a full time job thus I won&#8217;t be able to work on this project full time. I can only do this after I&#8217;m done with my work or on some free time on weekends. If you&#8217;re ok with this then I&#8217;ll happily accept this project.</p><p>Regards,<br/>Wern</p></blockquote>


<p>As you can see above I always try to make it clear of my current occupation. Whether I currently have a job or another project that I&rsquo;m working on. If the potential client is ok with it only then that the project begins.</p>

<h3>Introductory Email</h3>

<p>On the beginning of the project I usually send an email to introduce myself and some of the guidelines and process that I follow when working on a project. Something like this:</p>

<blockquote><p>Hi {first name of client},</p><p>Thank you for understanding the situation. I can begin doing the project starting tomorrow. But first here are some guidelines that I follow when working on a project:</p><p> - First. All things that have something to do with the project should be added on Trello, a web-based project management software. I&#8217;ve already invited to it, please accept my invitation so you can familiarize yourself with it. If you have any questions, suggestions or clarifications regarding the project please add them on Trello.<br/> - Second. If you need to talk to me you can contact me on Skype but first send an email that you want to talk to me and I&#8217;ll try to look for a good time to talk. Here is my skype user name: wernancheta<br/> - Third. I may not always be available so please understand that I can&#8217;t always immediately reply to an email or a question on Trello.<br/> - Fourth. I usually put a number of features into a group. Once a specific group is satisfactorily completed I ask for a payment.<br/> - Fifth. Estimates cover up to 3 small revisions for each feature. Small revisions doesn&#8217;t take more than 10 minutes to do. Anything that will take longer than that I&#8217;ll have to charge an additional fee.</p><p>Regards,<br/>Wern</p></blockquote>


<p>This usually goes smoothly and the client says ok.</p>

<h3>Trello Workflow</h3>

<p>Next is the Trello workflow. What I do is stick with the following list:</p>

<ul>
<li><strong>To do</strong> &ndash; this is where I put in items that we have talked about with my client.</li>
<li><strong>Wont do</strong> &ndash; items that we have decided not to do. The usual reasons are that the client no longer wants the feature or it will be postponed at a later time.</li>
<li><strong>Doing</strong> &ndash; items that are from the To do list that I&rsquo;m currently working on.</li>
<li><strong>Done</strong> &ndash; items that I believe are already done. I usually manually test the items before I move them to this list. When there are issues with the items the client can just comment their issue into the specific item. Once I found out that its a real issue that needs to be worked on then I move the item back into the Doing list.</li>
<li><strong>Proposals</strong> &ndash; this contains the features that I consider necessary which the client didn&rsquo;t mention. Items from here gets moved to the To do list once I get the clients approval.</li>
<li><strong>Other Info</strong> &ndash; anything else about the project that doesn&rsquo;t belong to any of the above. Initially this is where I put a quick tutorial about how to use Trello.</li>
</ul>


<p>On each of the list I put in a README card to guide the client what each list is for.</p>

<p>Trello is great for clients who loves asking for project progress every second. Upon looking at Trello they already have an idea what still needs to be done, what I&rsquo;m currently working on and what else I have to do.</p>

<h3>Development</h3>

<p>When developing I usually push the files into <a href="https://www.openshift.com/">Openshift</a> because they offer free hosting up to 3 projects. Database is also covered so its really sweet considering the fact that its free. By using Openshift I can also ensure that my clients can&rsquo;t just run away with the source code and call it a day. If I have already established a certain amount of trust with client and they have a server where I can put the source code then I use their server instead.</p>

<h3>Payments</h3>

<p>Lastly there&rsquo;s the payments. I don&rsquo;t receive payments up front. This is how I establish trust to the client. So if the client is not some kind of heartless villain who enjoys not paying for someone&rsquo;s service I can usually expect them to pay.
What I do is group the features that I&rsquo;ll be working on into 2, 3 or 4 groups depending on the number of features. I usually arrive with 4 groups. This means that I&rsquo;ll be asking the client for payment 4 times. Once the first group is satisfactorily done without issues I email my client. I go with the following template:</p>

<blockquote><p>Hi {first name of client},</p><p>Here&#8217;s the break down for the {name of group}:</p><p>  {List of features here}</p><p>Total: {total price}</p><p>You can pay in this email with paypal: {my paypal email address}</p><p>Regards,<br/>Wern</p></blockquote>


<p>That&rsquo;s it! You might have noticed that I didn&rsquo;t mention anything about contracts. That&rsquo;s because I don&rsquo;t do contracts. I believe contracts just gives you the power to sue someone and go to court. Because I usually work remotely I don&rsquo;t think I can go to court if my client is on the other side of the world. So if they don&rsquo;t pay I&rsquo;ll just pray for their souls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've been up to lately]]></title>
    <link href="http://anchetawern.github.io/blog/2014/07/06/what-ive-been-up-to-lately/"/>
    <updated>2014-07-06T17:52:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/07/06/what-ive-been-up-to-lately</id>
    <content type="html"><![CDATA[<p>You might have noticed that I no longer publish new blog posts as frequently as I have
before. That is because I&rsquo;ve been busy with other stuff lately. It all started when I joined Islick Media last March. My job at Islick Media is pretty much the same as a regular job where you work 8 hours a day, 5 days a week. Nothing out of the ordinary.</p>

<p>Then I got an unexpected project from someone who read my blog post on Amazon Product Advertising API. I was hesitant at first because I&rsquo;m already happy with my job and I am happy with my salary. After some pondering I thought that extra income would be nice so I tried to give it a shot and I emailed the person back, making it clear that I currently have a full time job and that I would only be able to do this project on my free time. The person then replied back saying that its ok. Then the rest is history. I got the project last April and until now the project is still ongoing so most of my free time goes into that.</p>

<p>Going back to the month of February I also tried emailing Sitepoint, a company dedicated to making awesome articles on web development. It was pretty much a cold email saying that I wanted to write for them. That I&rsquo;ve been writing articles about web development for a while but I&rsquo;ve only been doing it on my blog and that I wanted to try and make money doing it.
I&rsquo;ve waited but I didn&rsquo;t get a reply after a week so I thought they&rsquo;re not interested. But then after exactly a month, the managing editor of Sitepoint PHP Channel emailed me back with an apology for not getting back to me sooner. But the important part is that I got an ok. And man! that was the most awesome feeling ever! Sitepoint is one of the most popular websites which publishes resources (books, articles, courses) on web development. The fact that I get to write for them is really just awesome.</p>

<p>Lastly, I&rsquo;m also occupied with my personal project hoping that it would turn into a nice source of passive income. I can&rsquo;t tell something about the project yet but once I get it out there I&rsquo;ll be publishing a blog post about it so stay tuned for that.</p>

<p>And that&rsquo;s pretty much what I&rsquo;ve been up to lately. I don&rsquo;t think I&rsquo;ll be able to write anything lengthy on blog soon. But I&rsquo;ll try publishing some short tutorials so I still have fresh content in my blog even if I&rsquo;m busy. But basically the series on the Whirlwind tour on Web Developer Tools isn&rsquo;t going to continue soon. I&rsquo;d like to provide as much information as I could on each part of the series. But I don&rsquo;t think I have time to write lengthy posts so I&rsquo;m going to temporarily stop the series.</p>

<p>That&rsquo;s it for this blog post. At times like this I really wish the <a href="http://dragonball.wikia.com/wiki/Hyperbolic_Time_Chamber">Hyperbolic Time Chamber</a> was for real so I don&rsquo;t need to prioritize things and just do everything I want to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I learned on my third job]]></title>
    <link href="http://anchetawern.github.io/blog/2014/06/12/things-i-learned-on-my-third-job/"/>
    <updated>2014-06-12T20:51:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/06/12/things-i-learned-on-my-third-job</id>
    <content type="html"><![CDATA[<p>Its been 3 months since I joined <a href="http://islickmedia.com/">Islick Media</a>, a Web Development shop based in Palm Desert, California. Just like with my previous jobs I work for them as a remote worker. In this blog post I&rsquo;ll be sharing some of the things I&rsquo;ve learned on the job.</p>

<h3>Synxis</h3>

<p>Synxis is a reservation system. Its a pain in the neck to work with this one. Any code which has something to do with their reservation features are not accessible. At most you can only update the HTML for the header and footer part of the page. Uploading new files is also painful as you either have to install Java so you can run their image uploader or suck it up and upload files one by one.</p>

<h3>Wordpress Theme Customization API</h3>

<p>I&rsquo;ve worked with the Wordpress Theme Customization API on my first project on the company. I&rsquo;ve used it to give the users of the Wordpress theme that I&rsquo;ve created a simple way of customizing the look and feel of the theme. Things like customizing the color of links, header and background images can go a long way in making your Wordpress theme easily customizable to non-programmers.</p>

<h3>Zillow</h3>

<p>Zillow is a home and real estate marketplace dedicated to helping homeowners, home buyers, sellers, renters, real estate agents, mortgage professionals, landlords and property managers find and share vital information about homes, real estate, mortgages and home improvement.
I&rsquo;ve used their API in providing zestimates (zillow estimates) for real properties.</p>

<h3>Laravel</h3>

<p>This is not the first time that I&rsquo;ve learned about Laravel. Its some sort of a reacquaintance since I first used it in the year 2012 where it was only newly released. Fast-forward to 2014 there&rsquo;s already a bunch of stuff that has changed and improved. Some of my previous knowledge were still of use but I also had to learn new stuff and new way of doing things. I&rsquo;ve learned about the IoC container, and how to make use of external classes the laravel way. I also learned about the authentication class which makes writing the login functionality for your app a breeze.</p>

<h3>Mailing Services</h3>

<p>Mandrill and Mailgun are mailing services that I&rsquo;ve used for sending out emails for my projects. Yes you can pretty much use the built-in mailing server on the server where your app is hosted. But the main advantage of using a mailing service over the built-in mailing server is authentication. With mailing services such as Mandrill or Mailgun you get the benefit of having your email come from a reputable server. This leads to a higher rate of the emails actually making it into your customers inbox and not the spam.</p>

<h3>SPF and DKIM</h3>

<p>SPF and DKIM is a way to authenticate mailing services such as Mandrill and Mailgun to send on behalf of your server. So you can get a cool looking email like: <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x61;&#119;&#101;&#x73;&#111;&#109;&#x65;&#x6e;&#101;&#115;&#x73;&#64;&#x63;&#111;&#111;&#108;&#110;&#101;&#x73;&#x73;&#x2e;&#x63;&#111;&#109;">&#x61;&#x77;&#x65;&#115;&#x6f;&#109;&#101;&#x6e;&#x65;&#x73;&#115;&#x40;&#x63;&#x6f;&#x6f;&#x6c;&#x6e;&#101;&#x73;&#115;&#46;&#x63;&#x6f;&#109;</a> to work and actually make it to your customers inbox.</p>

<h3>Amazon EC2</h3>

<p>Short for Amazon Elastic Compute Cloud. Its basically a cloud computing platform. You can use it to host web applications and scaling is already taken care of. You can start with a fairly low performance and storage capacity server instance. And once you&rsquo;ve met a certain point where the current instance is no longer performing well. You can just upgrade your current instance and all your stuff would still be in there.</p>

<h3>Stripe</h3>

<p>Stripe is a company that provides a set of APIs for enabling businesses to accept and manage online payments. They have SDKs (Software Development Kit) available for different programming languages. Which is nice since no matter what programming language you&rsquo;re using to write your app you can use the SDK to easily talk with the Stripe API. Stripe uses credit card for payments. One time payment and subscription based payments are automatically handled for you.</p>

<h3>Twilio</h3>

<p>Twilio is a cloud communications company. They allow developers to provide SMS and Voice functionality to websites. I used twilio in my second project (Vmonial) with the company. Vmonial is an app that allows businesses to accept voice testimonials from their clients. I used the Twilio Voice API on the project. You can basically control the flow using XML files (TwiML) which uses tags like <code>&lt;Say&gt;</code>, <code>&lt;Record&gt;</code>, <code>&lt;Play&gt;</code>, <code>&lt;Gather&gt;</code> and <code>&lt;Response&gt;</code>.</p>

<h3>WHM</h3>

<p>WHM is sort of the big mama of cpanel. This is where you can manage cpanel instances, users, third party extensions, and lots of other stuff for managing a server.</p>

<h3>Elastic Search</h3>

<p>Elastic search is an open source, distributed and RESTful search engine. Its like Apache Solr which I&rsquo;ve written about a few times in this blog. Lots of people says really good things about Elastic Search that&rsquo;s why I gave it a try on my third project (Roof99) to handle the search. MySQL was not a choice since its a database and it would be terribly slow for searching. Elastic search on the other hand is a search index. Documents are stored in JSON format and querying can be done by using REST (Representational state transfer) calls.</p>

<h3>Prediction IO</h3>

<p>Prediction IO is an open source machine learning server. You can use it for creating personalized applications. With Prediction IO you can predict your users behavior, offer personalized content (E.g news, ads, jobs), help them discover things that they might like. All of this can be done by having the server silently record the users activity within your app such as viewing, liking, disliking, and rating something.</p>

<h3>Phonegap / Cordova</h3>

<p>Phonegap allows developers for creating mobile apps using web technologies (HTML, CSS, JavaScript). Installing stuff for compiling those HTML, CSS, and JavaScript files is really a pain. Sometimes you get an error that takes hours to solve. Thankfully there&rsquo;s the Phonegap build service by Adobe that allows you to upload your source files and then after a second or two you can readily download the app installers for devices that you support. This is pretty neat since all you have to do is to write HTML, CSS, and JavaScript code like you always do, upload it to Phonegap build and boom! you now have an installer for every mobile app that you support. A QR code is also generated every time you update the source code of your app. You can then just use your phone or tablet&rsquo;s QR code reader and it will directly download the installer provided you&rsquo;re connected to the internet. There&rsquo;s also hydration which allows you to easily update already installed apps. So if you upload a new version of your app on Phonegap build, and then you open up the app on the mobile device hydration will detect the updates and then it will ask you to update the app or not. So no more need to re-install the app every time a new version is uploaded. Lastly there&rsquo;s also debugging tools provided that allows you to debug the current instance of the app on your mobile device from the browser. This is all really sweet and awesome but we still need to think about performance, app permissions, and writing the code in such a way that it will be easily maintainable. There&rsquo;s also this mobile development mindset that you have to get into. What I&rsquo;m saying is that you shouldn&rsquo;t really write Phonegap apps the way you write web applications. Because the environment is different. In a browser environment clicking on the link will load up a new page but in an app what it will do is open up the browser and then navigate to that link. So basically most of the things that you need to perform in the server side will have to be done using AJAX requests. Updating the UI can be done by using templates and so on.</p>

<p>That&rsquo;s it! for now. In the coming months I&rsquo;ll be updating this post and share some more of the things I&rsquo;ve learned on my current job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Build Tools]]></title>
    <link href="http://anchetawern.github.io/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/"/>
    <updated>2014-04-27T09:45:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools</id>
    <content type="html"><![CDATA[<p>In this part seven of this series I&rsquo;m going to walk you through build tools. As usual I&rsquo;m going to summon a <a href="http://en.wikipedia.org/wiki/Build_automation">Wikipedia page</a> to do the definition for me because I really suck at defining things:</p>

<blockquote><p>Build automation is the act of scripting or automating a wide variety of tasks that software developers do in their day-to-day activities including things like compiling computer source code into binary code, packaging binary code, running tests, deployment to production systems, creating documentation and/or release notes</p></blockquote>


<p>In other words build tools makes developers life easier by automating mundane tasks. In the web development world we commonly use build tools to lint, test, minify and deploy source code.</p>

<!-- more -->


<h4>Test Project</h4>

<p>Before we move on to actually playing with the build tools first let me discuss about the test project that we will be working with. The test project is a useless project in which we will use all of the build tools that I&rsquo;m going to discuss in this tutorial.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test-proj
</span><span class='line'> - css
</span><span class='line'>   - normalize.css
</span><span class='line'>   - main.css
</span><span class='line'> - js
</span><span class='line'>   - jquery.js
</span><span class='line'>   - main.js
</span><span class='line'> - img
</span><span class='line'>   - dfrag.png
</span><span class='line'>   - hamatora.png
</span><span class='line'>   - magis.jpg
</span><span class='line'>   - spacedandy.png
</span><span class='line'> - dist
</span><span class='line'>   - css
</span><span class='line'>   - js
</span><span class='line'>   - img
</span><span class='line'>   - index.html</span></code></pre></td></tr></table></div></figure>


<p><code>test-proj</code> is our working directory. The first 3 folders (css, js, img) is pretty self-explanatory, that is where our project assets goes. The <code>dist</code> folder is where the processed files goes. And what I mean by processing is that all the css files will get minified and concatenated, the same is true with all the javascript files. Then the html will also get minified. Finally all the images will get compressed. So the idea is that the <code>dist</code> folder will have the processed version of same folders and files that are in the root of our working directory.</p>

<h4>Bash</h4>

<p>First on the list is bash. With simple bash scripts you can actually do some pretty decent web development task automation.</p>

<h5>Concatenation</h5>

<p>You can concatenate the contents of files by using the <code>cat</code> command then passing in the name of the files to concatenate and then redirect its output to a non existent file. The <code>cat</code> command is primarily used for outputting all the contents of a file from the command line. But when passing in two or more files you get the effect of outputting the contents of both files. Here&rsquo;s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat jquery.js accounting.js &gt; script.js</span></code></pre></td></tr></table></div></figure>


<p>Since the <code>script.min.js</code> file doesn&rsquo;t exist yet it will have a side-effect of creating the file which contains the contents of both <code>jquery.js</code> and <code>accounting.js</code>.</p>

<p>The above script is fine but what if you want to concatenate the contents of a specific file type within a directory? Well its also fairly simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat *.js &gt; script.js</span></code></pre></td></tr></table></div></figure>


<p>Note that the default behavior for the above command is that it will concatenate the contents of the files based on the filename so if you have <code>accounting.js</code> and <code>jquery.js</code> in the directory where you executed the command <code>accounting.js</code> comes first and then <code>jquery.js</code> is appended to it.</p>

<p>You can also add an alias on <code>.bash_aliases</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias min_js='cat *.js'</span></code></pre></td></tr></table></div></figure>


<p>Then you can just call the alias and redirect the output to a filename that you want:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>min_js &gt; script.js</span></code></pre></td></tr></table></div></figure>


<p>You can use bash with simple stuff like concatenating the contents of file. But if you want to do more automation you can use the tools the below.
We won&rsquo;t use bash with the test project that I discussed earlier I just showed an example to you so that you&rsquo;ll know that bash can be used for simple automation stuff.</p>

<h4>Apache Ant</h4>

<p>Next on the list is Apache Ant, the automation tool from the same guys who brought us Apache Web Server. Ant uses the  <code>build.xml</code> files to do its magic. So you basically specify what it needs to do in the <code>build.xml</code> file. Ant already comes with some <a href="http://ant.apache.org/manual/tasksoverview.html">default tasks</a> that you can use but you can also create custom tasks.</p>

<h5>Installing Ant</h5>

<p>To install Ant on Ubuntu and other debian based Linux distributions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install ant</span></code></pre></td></tr></table></div></figure>


<p>If you get a message similar to the following when executing an ant task:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unable to locate tools.jar</span></code></pre></td></tr></table></div></figure>


<p>You might also need to install openjdk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install openjdk-7-jdk</span></code></pre></td></tr></table></div></figure>


<p>On Windows you can <a href="https://code.google.com/p/winant/">winant</a> which is an Ant installer specifically made for Windows. If that doesn&rsquo;t work out for you you can also follow the following tutorial on <a href="http://www.nczonline.net/blog/2012/04/12/how-to-install-apache-ant-on-windows/">how to install apache ant on windows</a>.</p>

<p>If you&rsquo;re on Mac OS X ant is already installed by default. If you don&rsquo;t already have it on your version of Mac you can also have it installed using <a href="http://homebrew.sh/">homebrew</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ant</span></code></pre></td></tr></table></div></figure>


<h5>Using Apache Ant</h5>

<p>Once you&rsquo;re done installing Apache Ant you can check if its successfully installed by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ant -version</span></code></pre></td></tr></table></div></figure>


<p>At the time of writing of this tutorial its in version 1.9.2.</p>

<p>To begin using ant create a <code>build.xml</code> file in the root of the test project that we talked about earlier. Once created paste in the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">&quot;Webdev task processor&quot;</span> <span class="na">default=</span><span class="s">&quot;init&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;get_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">file=</span><span class="s">&quot;ant.properties&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>Got the configuration!<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;concat_css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${dist_dir}/css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filelist</span> <span class="na">id=</span><span class="s">&quot;files&quot;</span> <span class="na">dir=</span><span class="s">&quot;${css_dir}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;normalize.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;main.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/filelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/concat&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;concat_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${dist_dir}/js/script.js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filelist</span> <span class="na">id=</span><span class="s">&quot;files&quot;</span> <span class="na">dir=</span><span class="s">&quot;${js_dir}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;jquery.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;main.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/filelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/concat&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;java</span> <span class="na">jar=</span><span class="s">&quot;/usr/bin/yuicompressor.jar&quot;</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;-o&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/java&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>${file}<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;java</span> <span class="na">jar=</span><span class="s">&quot;/usr/bin/htmlcompressor.jar&quot;</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;-o&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/java&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>${file}<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_css&quot;</span> <span class="na">depends=</span><span class="s">&quot;concat_css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/css/style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/antcall&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_js&quot;</span> <span class="na">depends=</span><span class="s">&quot;concat_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/js/script.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/antcall&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;delete_existing&quot;</span> <span class="na">depends=</span><span class="s">&quot;get_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;create_new&quot;</span> <span class="na">depends=</span><span class="s">&quot;delete_existing&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}/css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}/js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}/img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_img&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;taskdef</span> <span class="na">name=</span><span class="s">&quot;optipng&quot;</span> <span class="na">classname=</span><span class="s">&quot;com.pensioenpage.jynx.optipng.OptiPNGTask&quot;</span> <span class="na">classpath=</span><span class="s">&quot;optipng-ant-task/build/optipng-ant-task.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;optipng</span> <span class="na">dir=</span><span class="s">&quot;img&quot;</span> <span class="na">todir=</span><span class="s">&quot;dist/img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;init&quot;</span> <span class="na">depends=</span><span class="s">&quot;get_config,delete_existing,create_new&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_js&quot;</span>  <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_html&quot;</span>  <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>Done!<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so that&rsquo;s a lot of xml, but don&rsquo;t worry since I&rsquo;ll walk you through what each line does.</p>

<p>The first line is where the xml version goes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re using html its basically the same as the doctype declaration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it does is telling ant want specific xml version we are working with.</p>

<p>Next is the project body. This is where you put all the task configuration for your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">&quot;Webdev task processor&quot;</span> <span class="na">default=</span><span class="s">&quot;init&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ant the actual tag that you use has a special meaning so using the <code>project</code> tag tells ant that we are working with a project. The <code>project</code> tag takes 2 attributes:  <code>name</code> and <code>default</code>. <code>name is basically the name that you want to give to your project.</code>default<code>is where you tell ant the name of the default task. In this case we give it a name of</code>init<code>. This means that when you execute</code>ant<code>from your working directory it will look for the</code>init` task and it will execute it.</p>

<h6>Directory Configuration</h6>

<p>Next we create an ant task. We can do this by using the <code>target</code> tag. We can give a name to task by specifying a value for the <code>name</code> attribute, note that this has to be a machine friendly name (no special characters or spaces). Inside the task  we specify the property file to be <code>ant.properties</code>. This is the file where we need to put our directory configuration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;get_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">file=</span><span class="s">&quot;ant.properties&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>Got the configuration!<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our test project the <code>ant.properties</code> file contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>css_dir = css
</span><span class='line'>js_dir = js
</span><span class='line'>dist_dir = dist
</span></code></pre></td></tr></table></div></figure>


<p>So what were actually doing is giving a specific directory an alias that we can refer to later from our <code>build.xml</code> file.</p>

<p>Finally the <code>echo</code> tag is where we can specify text to output whenever this specific task is done executing.</p>

<h6>Concatenating Files</h6>

<p>Next we create a task that will concatenate specific file types together. If you don&rsquo;t know what concatenating is its basically putting all the contents of specific files together. For css files we name the task <code>concat_css</code> and for javascript files it will be <code>concat_js</code>. Here&rsquo;s what we have for the <code>concat_js</code> task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;concat_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${dist_dir}/js/script.js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filelist</span> <span class="na">id=</span><span class="s">&quot;files&quot;</span> <span class="na">dir=</span><span class="s">&quot;${js_dir}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;jquery.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;main.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/filelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/concat&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that to ant there&rsquo;s really no special meaning to the name of the task so you can just give it any name. Just be sure to give a task a name that makes sense the moment you read it later on.</p>

<p>Ant already comes with a concatenation task so we can just refer to it from inside the task itself. The <code>concat</code> task takes up an attribute called <code>destfile</code>, this is the path to which the output file will be saved. In this case we are referring to the <code>dist_dir</code> that we declared earlier in our <code>ant.properties</code> file. You can refer to the config inside the <code>ant.properties</code> file by using the <code>$</code> and wrapping the actual config name with curly brackets <code>{}</code>. We specified our output file to be <code>script.js</code> so it will get created under our <code>dist/js</code> directory once the task is done executing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${dist_dir}/js/script.js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/concat&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then specify a list of files to work with inside the <code>concat</code> task. This will be the list of files that the concat task will process. To tell ant that we are working with a list of files you can use the <code>filelist</code> tag. You can then specify the individual files using the <code>file</code> tag and giving it a <code>name</code> attribute that is the same as the actual name of the file that you want to process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;filelist</span> <span class="na">id=</span><span class="s">&quot;files&quot;</span> <span class="na">dir=</span><span class="s">&quot;${js_dir}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;jquery.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;main.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/filelist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use a more concised alternative:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;filelist</span> <span class="na">dir=</span><span class="s">&quot;${js_dir}&quot;</span> <span class="na">files=</span><span class="s">&quot;jquery.js,main.js&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you do not care about the ordering of files when they get concatenated you can use the <code>fileset</code> tag. This allows you to specify a pattern for targetting specific file types under the directory that you specify. The example below will use all the javascript files inside the <code>js</code> directory as the input. You can also set the <code>casesensitive</code> attribute to <code>yes</code> to tell ant that you want to match for the exact pattern that you specified and it will be case sensitive. This means that it won&rsquo;t match files with the <code>.JS</code> extension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${js_dir}&quot;</span> <span class="na">casesensitive=</span><span class="s">&quot;yes&quot;</span> <span class="na">includes=</span><span class="s">&quot;*.js&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly the task for concatenating all the css files together has the same pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;concat_css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${dist_dir}/css/style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;filelist</span> <span class="na">dir=</span><span class="s">&quot;${css_dir}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;normalize.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;main.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/filelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/concat&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Minifying Files</h6>

<p>Next is the task for minifying files. What minification does is remove all the whitespaces, comments and all other unnecessary characters from code. And what I mean by unnecessary is all the stuff that the computer doesn&rsquo;t need to run your script.</p>

<p>To keep our <code>build.xml</code> file dry we will create a generalized task in which other tasks that&rsquo;s specifically made for minifying css or javascript files will call. Think of this like declaring a function. So the name of the task will be <code>minify_css_js</code> to indicate that this is a generalized task that can be used later on to minify css or javascript files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;java</span> <span class="na">jar=</span><span class="s">&quot;/usr/bin/yuicompressor.jar&quot;</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;-o&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/java&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>${file}<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside it will be a <code>java</code> tag to tell ant that we want to execute a java class. In this case we want to use <a href="http://yui.github.io/yuicompressor/">yui compressor</a>. The yui compressor has an executable jar file that you can use to minify css or javascript files so its perfect for our needs. With the <code>java</code> tag we specify 2 attributes: the <code>jar</code> in which we pass in the location of the executable jar file and the <code>fork</code> attribute takes up a boolean value, specifying <code>true</code> will tell ant to execute the jar file in another java VM separate from the one that runs ant itself.</p>

<p>Before we move on further let&rsquo;s examine how the <code>yuicompressor.jar</code> file can be executed from the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>java -jar yuicompressor.jar script.js -o script.min.js
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the above command it takes up 2 arguments the input which is <code>script.js</code> and the name of the output file which is <code>script.min.js</code>.</p>

<p>Going back to the <code>minify_css_js</code> task we now have an idea what the following line does is basically the same as what we are doing when executing the command from the terminal. So the first <code>arg</code> tag is the input file, the second <code>arg</code> tag is for specifying the output option, and the third one is for the output file. As you can see we are using the same variable for the output and input file so this means that they will have the same filename. The value for the <code>file</code> variable will be supplied from the task that will call this task so you can think of it as the arguments for a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;-o&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${file}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create the task that will minify css files. Give it a name of <code>minify_css</code>. It will take a <code>depends</code> attribute. This tells ant to execute the task that is specified as a value for this attribute first before executing this task. In this case this will tell ant to execute the <code>concat_css</code> task before executing this task. Inside it is the <code>antcall</code> tag, this tells ant to execute the task specified as the value for the <code>target</code> attribute, in this case this will execute the <code>minify_css_js</code> task that we created earlier. Inside it we can pass the arguments that the <code>minify_css_js</code> task needs to work. We can do that using the <code>param</code> tag. The value of the <code>name</code> attribute for the <code>param</code> tag should be the same as the value of the <code>value</code> attribute for the <code>arg</code> tag in the main task. And then the <code>value</code> attribute for the <code>param</code> task would be the actual file path to the minified css file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_css&quot;</span> <span class="na">depends=</span><span class="s">&quot;concat_css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/css/style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/antcall&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The task for minifying javascript file would have the same pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_js&quot;</span> <span class="na">depends=</span><span class="s">&quot;concat_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;antcall</span> <span class="na">target=</span><span class="s">&quot;minify_css_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/js/script.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/antcall&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the task for minifying the html. Its basically the same as the 2 previous tasks only this time we are directly specifying the values that we need for the input and output since we are using a different jar file (<code>htmlcompressor.jar</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;java</span> <span class="na">jar=</span><span class="s">&quot;/usr/bin/htmlcompressor.jar&quot;</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;-o&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${dist_dir}/index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/java&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo&gt;</span>${file}<span class="nt">&lt;/echo&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can download the htmlcompressor jar file from <a href="https://code.google.com/p/htmlcompressor/downloads/list">google code&rsquo;s html compressor download page</a>.</p>

<h6>Compressing Images</h6>

<p>Next is compressing images. Unlike the other tasks that we have used so far this will take a little bit of work.</p>

<p>First you have to install <a href="http://optipng.sourceforge.net/">optipng</a>.</p>

<p>In Ubuntu and other debian based Linux distribution you can install optipng by executing the following commands:</p>

<ol>
<li><code>wget --quiet http://downloads.sourceforge.net/project/optipng/OptiPNG/optipng-0.7.3/optipng-0.7.4.tar.gz</code></li>
<li><code>tar xf optipng-0.7.3.tar.gz</code></li>
<li><code>cd optipng-0.7.4</code></li>
<li><code>./configure &gt; /dev/null 2&gt;&amp;1</code></li>
<li><code>make &gt; /dev/null 2&gt;&amp;1</code></li>
<li><code>cd ..</code></li>
<li><code>cp optipng-0.7.3/src/optipng/optipng /usr/bin/</code></li>
</ol>


<p>The commands above will build optipng from source. Be sure to use the current version of optipng when executing the <code>wget</code> command. If you don&rsquo;t know what the current version is then visit the <a href="http://optipng.sourceforge.net/">official sourceforge page of the optipng project</a>.</p>

<p>For Mac OS X users you can install it with Homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>brew install optipng
</span></code></pre></td></tr></table></div></figure>


<p>And for Windows you can simply download the Windows (32-bit) build for optipng then extract the <code>zip</code> file and then include the path to the <code>optipng.exe</code> file into your <a href="http://kyokasuigetsu25.wordpress.com/2010/10/29/how-to-set-environment-variables/">environment path</a>.</p>

<p>Next clone the <a href="https://github.com/znerd/optipng-ant-task">optipng ant task project</a> using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>git clone https://github.com/znerd/optipng-ant-task.git
</span></code></pre></td></tr></table></div></figure>


<p>Note that you must have git installed on your system to execute the command above. If you don&rsquo;t have git then just download the <code>zip</code> file from <a href="https://github.com/znerd/optipng-ant-task">their github page</a> then extract it in your working directory.</p>

<p>After that <code>cd</code> into the cloned github repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd optipng-ant-task
</span></code></pre></td></tr></table></div></figure>


<p>Then execute <code>ant jar</code>. This will create the <code>optipng-ant-task.jar</code> file under the <code>build</code> directory of the <code>optipng-ant-task</code>.</p>

<p>Once that&rsquo;s successful you can then create the corresponding task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;minify_img&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;taskdef</span> <span class="na">name=</span><span class="s">&quot;optipng&quot;</span> <span class="na">classname=</span><span class="s">&quot;com.pensioenpage.jynx.optipng.OptiPNGTask&quot;</span> <span class="na">classpath=</span><span class="s">&quot;optipng-ant-task/build/optipng-ant-task.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;optipng</span> <span class="na">dir=</span><span class="s">&quot;img&quot;</span> <span class="na">todir=</span><span class="s">&quot;dist/img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing that you need to modify in the task above is the <code>dir</code> and <code>todir</code> attribute for the <code>optipng</code> tag. Those 2 attributes lets you specify the source path and destination path for the images.</p>

<p>If you have cloned or downloaded the optipng-ant-task under a different directory then you might also need to modify the value for the <code>classpath</code> attribute under the <code>taskdef</code> tag to include the actual path to the <code>optipng-ant-task.jar</code> file.</p>

<h6>Cleaning up</h6>

<p>Next is the task for cleaning up the <code>dist</code> directory. Apache ant already comes with a <code>delete</code> task so we can just call it directly by specifying the path to the directory that we want to delete in the <code>dir</code> attribute, in this case we just want to delete the <code>dist_dir</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;delete_existing&quot;</span> <span class="na">depends=</span><span class="s">&quot;get_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Recreating</h6>

<p>After we delete the <code>dist</code> directory we would also need to create it back. The sole purpose of the task for deleting the <code>dist</code> directory and creating it again is to clean up all the files that are no longer needed. This can happen quite often when we change the dependencies of our project. Of course this task will depend on the the <code>delete_existing</code> task to be executed first. Again were using a built-in ant task called <code>mkdir</code> to create the <code>css</code> and <code>js</code> directories under the <code>dist</code> dir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;create_new&quot;</span> <span class="na">depends=</span><span class="s">&quot;delete_existing&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}/css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${dist_dir}/js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Once you&rsquo;re happy with your <code>build.xml</code> file you can just call <code>ant</code> in your working directory and ant will do its thing. If you want to learn more about ant be sure to check out the resources below.</p>

<h5>Resources for learning Ant</h5>

<ul>
<li><a href="http://ant.apache.org/manual/index.html">Ant Manual</a></li>
<li><a href="http://code.tutsplus.com/tutorials/automate-your-projects-with-apache-ant--net-18595">Automate your Projects with Apache Ant</a></li>
<li><a href="http://www.julienlecomte.net/blog/2007/09/16/">Building Web Applications with Apache Ant</a></li>
</ul>


<h4>Grunt</h4>

<p>Another tool that we can use to automate mundane web development tasks is Grunt. Just like what the name sounds like Grunt is your friendly task runner that will do your bidding for you. Just tell it what specific tasks to run and it will do it for you. Here are some tasks that Grunt allows you to run:</p>

<ul>
<li><strong>linting</strong> &ndash; this allows you to determine common errors in your code or check if follows a specific coding standard.</li>
<li><strong>testing</strong> &ndash; this allows you to run tests on your code.</li>
<li><strong>compiling</strong> &ndash; this allows you to compile languages such as Coffeescript into JavaScript, LESS or SASS into CSS, Mustache or Handlebars templates into JavaScript, etc.</li>
<li><strong>minifying</strong> &ndash; this allows you to minify source code. Minifying is the process of removing unnecessary characters in a source code. Things such as whitespaces, line breaks, optional block delimiters and comments are removed by using minification.</li>
<li><strong>concatenating</strong> &ndash; this allows you to concatenate related source code into a single file. This improves performance because instead of requesting several files from the server there will be only one request made. Each requested file carries a certain amount of latency therefore minimizing the number of files requested means lesser latency this then leads to faster download times.</li>
<li><strong>image compression</strong> &ndash; this allows you to compress image sizes. Again this has something to do with improving performance.</li>
<li><strong>benchmarking</strong> &ndash; this allows you measure the performance of your website based on specific standards and best practices.</li>
<li><strong>server</strong> &ndash; this allows you to serve the files in your project so you can access it through your browser.</li>
<li><strong>watcher</strong> &ndash; watches changes in your project and automatically calls linting, minifying and concatenating tasks.</li>
</ul>


<h5>Installing Grunt</h5>

<p>Before you can install grunt you first need to have <a href="http://nodejs.org/download/">node.js</a> installed. Grunt is preferred to be installed globally so you can use it on all of your projects. That is specified by using the <code>-g</code> option. Execute the following command in your terminal to install grunt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>npm install -g grunt-cli
</span></code></pre></td></tr></table></div></figure>


<p>Note that you might need to prefix it with <code>sudo</code> or any command that allows you to run a specific command as an administrator if you get any errors when installing grunt.</p>

<h5>Package.json</h5>

<p>The <code>package.json</code> file is where we specify project details. Things such as the project name, version, author and dependencies can be added from this file. Here&rsquo;s an example <code>package.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>{
</span><span class='line'>  &quot;name&quot;: &quot;my-superawesomeproject&quot;,
</span><span class='line'>  &quot;version&quot;: &quot;0.0.1&quot;,
</span><span class='line'>  &quot;author&quot;: &quot;Hitler&quot;,
</span><span class='line'>  &quot;devDependencies&quot;: {
</span><span class='line'>    &quot;grunt&quot;: &quot;~0.4.2&quot;,
</span><span class='line'>    &quot;grunt-contrib-watch&quot;: &quot;~0.5.3&quot;,
</span><span class='line'>    &quot;grunt-contrib-htmlmin&quot;: &quot;~0.2.0&quot;,
</span><span class='line'>    &quot;grunt-contrib-jshint&quot;: &quot;~0.6.3&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Note that if you&rsquo;re reading this 1 or more years later after the first time I published this be sure to use the current version of the plugins, a simple Google search will give you the version that you need. Better yet start with an empty <code>devDependencies</code> object and install the plugins by explicitly using their name. This ensures the the latest version is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>npm install grunt grunt-contrib-htmlmin grunt-contrib-jshint grunt-contrib-watch --save-dev
</span></code></pre></td></tr></table></div></figure>


<p>Going back to <code>package.json</code> file. Breaking it down:</p>

<ul>
<li><code>name</code> &ndash; a machine-friendly name for your project.</li>
<li><code>version</code> &ndash; the version number of your project.</li>
<li><code>author</code> &ndash; you.</li>
<li><code>devDependencies</code> &ndash; the grunt tasks that you want to use in your project.</li>
</ul>


<p>Under the <code>devDependencies</code> we specified the task that we want grunt to use. The first one should be <code>grunt</code> as this is the main npm module. You can consider this the framework in which the plugins build upon. The current version as of the time of writing of this tutorial is <code>0.4.2</code> so we specified that. You can determine the grunt version installed by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>grunt --version
</span></code></pre></td></tr></table></div></figure>


<p>This will output 2 versions of grunt. One for the <code>grunt-cli</code> and one for the core grunt. The version returned for the core grunt is what you need to input in your <code>package.json</code> file.</p>

<p>Once you&rsquo;re happy with your <code>package.json</code> file simply run <code>npm install</code> on your current working directory to install all the packages that you&rsquo;ve specified under <code>devDependencies</code>.
After the installation you will have a <code>node_modules</code> folder created in the root of your working directory. It will have contents similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-09-a-whirlwind-tour-of-web-developer-tools-build-tools/node-modules.png" alt="grunt tasks" /></p>

<p>If you want to install more tasks you can visit the <a href="http://gruntjs.com/plugins">grunt plugins</a> page. You can simply refer to the name when installing. Just prefix the name that you see from the plugins page with <code>grunt</code>. And be sure that you&rsquo;re running this in your working directory and add the <code>--save-dev</code> option to let npm know that it should update the <code>package.json</code> file to include the grunt plugin under the <code>devDependencies</code> after its done with the installation. In the example below were installing the <code>contrib-uglify</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>npm install grunt-contrib-uglify --save-dev
</span></code></pre></td></tr></table></div></figure>


<h5>Gruntfile</h5>

<p>The Gruntfile is were all the magic happens. This is where you specify all the tasks that grunt needs to do. Here&rsquo;s the <code>Gruntfile.js</code> that utilizes the packages that we installed above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">jshintrc</span><span class="o">:</span> <span class="s1">&#39;.jshintrc&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;js/*.js&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">htmlmin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">removeRedundantAttributes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.html&#39;</span><span class="p">],</span>
</span><span class='line'>   <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&#39;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s1">&#39;js/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;Gruntfile.js&#39;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">html</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s1">&#39;*.html&#39;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;htmlmin&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>  
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-htmlmin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so that&rsquo;s a bunch of code I&rsquo;ve just thrown at you. But don&rsquo;t be intimidated I&rsquo;ll walk you through what it does line by line.</p>

<p>First we have the grunt wrapper. Every gruntfile should start with this particular code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//all things grunt here</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re familiar with node this is how custom functions is usually defined with node. This simply means that all of the code defined inside of it depends on the grunt module that we installed.</p>

<p>Next is the project configuration. We specify it inside the <code>initConfig</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">//project configuration here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next specify the package file that were using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to refer to the project details inside the gruntfile later on. An example would be using the package name as the filename for a JavaScript output file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;&lt;%= pkg.name %&gt;.js&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also refer to other information that&rsquo;s available in your <code>package.json</code> all through the <code>pkg</code> variable:</p>

<ul>
<li><code>pkg.author</code> &ndash; returns the author&rsquo;s name</li>
<li><code>pkg.version</code> &ndash; returns the project&rsquo;s version number</li>
</ul>


<p>Just be sure to wrap it in ruby style template tags and wrap it in quotes if you want to use these values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;&lt;%= pkg.version %&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an additional note you can also apply this technique when referring to information inside the gruntfile itself. We can see this in action later.</p>

<p>Now were ready to actually give instructions as to what each task will do.</p>

<h6>JSHint</h6>

<p>First is the <a href="https://github.com/gruntjs/grunt-contrib-jshint">jshint</a> task. This allows us to check the quality of our code against a specific coding standard. Things like always using identity (<code>===</code>) operator instead of the equality (<code>==</code>) operator when comparing values.</p>

<p>Note that information about how to use a specific task is always available on the github page for a specific task. Here&rsquo;s the one for <a href="https://github.com/gruntjs/grunt-contrib-jshint">jshint</a>. Under the <code>jshint</code> task we have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">jshintrc</span><span class="o">:</span> <span class="s1">&#39;.jshintrc&#39;</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nx">all</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;js/*.js&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a breakdown of the <code>jshint</code> configuration:</p>

<ul>
<li><code>options</code> &ndash; this is where you can specify all the options that jshint will use. In the example we just supplied <code>jshintrc</code> as the option because we want to be as portable as possible. Specifying <code>jshintrc</code> allows us to use a <code>.jshintrc</code> file as the source of configuration. Inside the <code>.jshintrc</code> file we can specify the following options:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="s2">&quot;camelcase&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;curly&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;eqeqeq&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;plusplus&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><code>camelcase</code> &ndash; force all variable names to use camelCase or UPPER_CASE with underscores.</li>
<li><code>curly</code> &ndash; requires you to always put curly braces to wrap blocks even if its optional.</li>
<li><code>eqeqeq</code> &ndash; requires you to use <code>===</code> instead of <code>==</code> annd <code>!==</code> instead of <code>!=</code> when comparing values.</li>
<li><code>plusplus</code> &ndash; requires you to use alternatives to <code>++</code> when incrementing a value.</li>
</ul>


<p>More information on the available options can be found <a href="http://www.jshint.com/docs/options/">here</a>.</p>

<p>Going back to our gruntfile under the jshint configuration we have the <code>all</code> attribute where we can specify an array of files or paths that we want to lint. In our example we want to lint <code>Gruntfile.js</code> and all the javascript files inside the <code>js</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">all</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;js/*.js&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>HTML Min</h6>

<p>Next we have the <a href="https://github.com/gruntjs/grunt-contrib-htmlmin">HTML min</a> task. This allows us to compress HTML files by removing whitespaces, line breaks, comments and other unnecessary attributes. Here&rsquo;s the configuration that we used for htmlmin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">htmlmin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">removeRedundantAttributes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.html&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><code>dist</code> &ndash; this refers to distribution or production. With htmlmin you can specify different options for <code>dev</code> or <code>dist</code>.</li>
<li><code>options</code> &ndash; these are the options for a specific environment. There are a number of options that we can use but I only chose <code>removeComments</code>,  <code>collapseWhitespace</code>, and <code>removeRedundantAttributes</code> for this particular project. This is because all the other options that are available can be dangerous. You know what I mean when you check out the <a href="https://github.com/gruntjs/grunt-contrib-htmlmin">page for htmlmin</a>.</li>
<li><code>expand</code> &ndash; allows you to use wildcards for <code>src</code> and <code>dest</code>.</li>
<li><code>src</code> &ndash; the directory in which the source HTML files are stored. In the example above were simply telling htmlmin to use all the html files in the current working directory as the source.</li>
<li><code>dest</code> &ndash; the directory in which all the files processed by htmlmin is saved.</li>
</ul>


<h6>Watch</h6>

<p>Lastly there&rsquo;s <a href="https://github.com/gruntjs/grunt-contrib-watch">watch</a>. This allows you to watch changes to specific files and automatically call up a specific grunt task when a file is updated. Here&rsquo;s the configuration for the watch task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;js/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Gruntfile.js&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">html</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;*.html&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;htmlmin&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down we can see that under the <code>watch</code> task we have defined <code>js</code> and <code>html</code>. This is a means of separating which specific tasks to run for a specific project asset. Under the <code>js</code> we can specify an array of file paths and files. In this case we have specified all the files under the <code>js</code> directory as well as the gruntfile.</p>

<p>If you remember earlier we have done the same thing with the jshint task so if you don&rsquo;t want to repeat yourself you can also do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">files</span><span class="o">:</span> <span class="s1">&#39;&lt;%= jshint.all %&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This passes whatever it is that&rsquo;s inside the <code>all</code> attribute under the <code>jshint</code> object.</p>

<p>Then under the <code>tasks</code> we can specify any number of tasks to execute targeting the files that we specified. In this case were simply going to execute the <code>jshint</code> task. By default the watch task executes the task that you specify whenever you hit <code>ctrl + s</code> on any targeted file.</p>

<p>Going back to the watch task, under the <code>html</code> we simply tell watch to target all the html files under the current working directory and the task to execute will be <code>htmlmin</code>.</p>

<p>Ok were almost done, the only thing left to do now is to let grunt know what specific tasks we want to load. We can do that using the <code>loadNpmTasks</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-htmlmin&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do it this way or install <a href="https://github.com/sindresorhus/load-grunt-tasks">load-grunt-tasks</a>. This allows you to automatically load whatever it is that&rsquo;s inside the <code>node_modules</code> directory of your current working directory.</p>

<p>You can install it by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="nx">load</span><span class="o">-</span><span class="nx">grunt</span><span class="o">-</span><span class="nx">tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done you can just require load-grunt-tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;load-grunt-tasks&#39;</span><span class="p">)(</span><span class="nx">grunt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of loading each task manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-htmlmin&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to running the tasks. After that we can just call it a day with just that and execute the watch task like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span> <span class="nx">watch</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you&rsquo;re executing the same command frequently its best practice to tell grunt to use it as a default. You can do that by executing the <code>registerTask</code> function and specifying the default inside an array. Note that you can specify more than one task as the default one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to just execute <code>grunt</code> and it will automatically run the watch task. Pretty neat!</p>

<p>You can also create aliases for specific grunt tasks using this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;hm&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;htmlmin&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;jh&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when you want to execute the htmlmin task you just have to type in <code>grunt hm</code> instead of <code>grunt htmlmin</code>. But of course if your laziness doesn&rsquo;t permit even this then you can shove your alias inside the <code>.bash_aliases</code> file in your home directory.</p>

<h5>Useful grunt plugins</h5>

<p>Here are some useful grunt plugins:</p>

<h6>General</h6>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-connect">grunt-contrib-connect</a> &ndash; starts a static web server</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> &ndash; run specific grunt tasks whenever project files are updated</li>
<li><a href="https://github.com/nDmitry/grunt-autoprefixer">grunt-autoprefixer</a> &ndash; automatically add vendor prefix to css files</li>
<li><a href="https://github.com/sindresorhus/grunt-shell">grunt-shell</a> &ndash; run shell commands</li>
</ul>


<h6>Code Quality</h6>

<ul>
<li><a href="https://github.com/yaniswang/grunt-htmlhint">grunt-htmlhint</a> &ndash; validates html files</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-csslint">grunt-contrib-csshint</a> &ndash; lint CSS files</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-jshint">grunt-contrib-jshint</a> &ndash; lint JavaScript files</li>
<li><a href="https://github.com/jsoverson/grunt-plato">grunt-plato</a> &ndash; provides static analysis report</li>
<li><a href="https://github.com/vigetlabs/grunt-complexity">grunt-complexity</a> &ndash; checks the complexity of your JavaScript code</li>
</ul>


<h6>Testing</h6>

<ul>
<li><a href="https://github.com/kmiyashiro/grunt-mocha">grunt-mocha</a></li>
<li><a href="https://github.com/gruntjs/grunt-contrib-jasmine">grunt-contrib-jasmine</a></li>
<li><a href="https://github.com/gruntjs/grunt-contrib-qunit">grunt-contrib-qunit</a></li>
</ul>


<h6>Performance Optimization</h6>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-htmlmin">grunt-contrib-htmlmin</a></li>
<li><a href="https://github.com/gruntjs/grunt-contrib-cssmin">grunt-contrib-cssmin</a> &ndash; minify css files.</li>
<li><a href="https://github.com/addyosmani/grunt-uncss">grunt-uncss</a> &ndash; removes unused css.</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-imagemin">grunt-contrib-imagemin</a> &ndash; for compressing images.</li>
<li><a href="https://github.com/sindresorhus/grunt-svgmin">grunt-svg-min</a> &ndash; minifying svg images.</li>
<li><a href="https://github.com/somerandomdude/grunt-webp">grunt-webp</a> &ndash; converts images to webp format.</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a> &ndash; minify and concatenate javascript files.</li>
<li><a href="https://github.com/gmarty/grunt-closure-compiler">grunt-closure-compiler</a> &ndash; can be used as an alternative to grunt-contrib-uglify.</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a> &ndash; concatenates files.</li>
</ul>


<h5>Resources for learning grunt</h5>

<ul>
<li><a href="http://gruntjs.com/getting-started">Official Grunt Getting Started Guide</a></li>
<li><a href="http://coding.smashingmagazine.com/2013/10/29/get-up-running-grunt/">Get Up and Running with Grunt</a></li>
<li><a href="http://www.sitepoint.com/writing-awesome-build-script-grunt/">Writing an Awesome Build Script with Grunt</a></li>
<li><a href="http://chrisawren.com/posts/Advanced-Grunt-tooling">Advanced Grunt Tooling</a></li>
</ul>


<h4>Gulp</h4>

<p>Gulp is the new kid on the block when it comes to running tasks. Its basically an alternative to Grunt. Why would you want to use it instead of Grunt? Here&rsquo;s why?</p>

<ul>
<li>with Gulp your build file is code, not config</li>
<li>You use standard libraries to do things</li>
<li>Plugins are simple and do one thing</li>
<li>Tasks are executed with maximum concurrency</li>
<li>I/O works the way you picture it</li>
</ul>


<p>That was taken from the <a href="http://slid.es/contra/gulp">Gulp slides</a> by Eric Schoffstall. To sum it up Gulp is easier on the eyes.</p>

<h5>Installing Gulp</h5>

<p>Just like Grunt Gulp can be installed using npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">gulp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This install gulp globally.</p>

<p>Now create your working directory if you haven&rsquo;t already done so. Under the root of your working directory create a <code>package.json</code> file and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;gulp-test-project&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;Nobunaga&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next install gulp locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">gulp</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now were ready to install the plugins that we will use. Execute the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">cssmin</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">imagemin</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">uglify</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<h5>gulpfile.js</h5>

<p>Once everything is installed we can now start using gulp. Just like with grunt gulp uses a file wherein all the tasks that you want to run is specified. The equivalent of <code>Gruntfile.js</code> in the gulp world is <code>gulpfile.js</code> (Yup! I know its shocking). Under the <code>gulpfile.js</code> we have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-imagemin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cssmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-cssmin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint_js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span><span class="nx">comments</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.html&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlmin</span><span class="p">(</span><span class="nx">opts</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">({</span><span class="nx">outSourceMap</span><span class="o">:</span> <span class="kc">true</span><span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;css/*.css&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">cssmin</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/css&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_img&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;img/*.png&#39;</span><span class="p">,</span> <span class="s1">&#39;img/*.jpg&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">imagemin</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/img&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint_js&#39;</span><span class="p">,</span> <span class="s1">&#39;min_js&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;*.html&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_html&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;css/*.css&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_css&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;img/&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_img&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_js&#39;</span><span class="p">,</span> <span class="s1">&#39;min_css&#39;</span><span class="p">,</span> <span class="s1">&#39;min_img&#39;</span><span class="p">,</span> <span class="s1">&#39;min_html&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup! Gulp is really easier on the eyes. It&rsquo;s like were writing code and not config files. The gulpfile has 3 parts. The first part is where we define the plugins that we want to run, the second part is where we specify the configuration for each task, and the third is where we define aliases to the tasks that we want to run.</p>

<p>Breaking it down. Here were loading the tasks using node.js style code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-imagemin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cssmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-cssmin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we define the options for each tasks:</p>

<h6>JS Hint</h6>

<p>To define what a specific task will do we use the <code>task</code> method. This takes up 2 arguments, the first is the alias for the task that we want to run. The second is the actual function to run whenever this task is called. Here were giving the JS hint task an alias of <code>lint_js</code>.</p>

<p>Then under the function we specify it to use all the <code>.js</code> files in the <code>js</code> directory as the source file. We can do this by calling the <code>src</code> method. Note the the <code>src</code> method can take up a string or an array of strings. Another thing that you have to remember is that you can only use globbing patterns and not solo paths like <code>js/</code> or just <code>js</code>. Gulp wouldn&rsquo;t know what to do with just a path you have to specify the actual file extension to target.</p>

<p>Next you call the <code>pipe</code> method to specify the actual task to call when this specific task is run.
Lastly call the <code>pipe</code> method again to set the jshint reporter to default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint_js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>HTML min</h6>

<p>Next is the HTML min task. This will remove all the whitespaces from the targeted html files and save them in your desired output folder. You can also pass in options to remove all the comments, empty and redundant attributes, cdata or quotes. It follows the same pattern as the previous task, only this time we have declared a variable <code>opts</code> that stores the options for this specific task. We have set the <code>comments</code> to <code>true</code>. This will remove all the comments from the minified HTML output. Then we call the <code>src</code> method and pass in <code>*.html</code> which targets all the html files in your working directory. Then we call the <code>pipe</code> method and pass in <code>htmlmin</code> with the options as its argument. Lastly we pipe it again and call the <code>dest</code> method passing in the path to where we want to save the output files. In this case we simply want to save in the <code>dist</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span><span class="nx">comments</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.html&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlmin</span><span class="p">(</span><span class="nx">opts</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know more about HTML min be sure to check out its <a href="https://github.com/jonathanepollack/gulp-minify-html">Github page</a>.</p>

<h6>Uglify JS</h6>

<p>Next is the Uglify task, this will minify all the targeted JavaScript files and save them in your desired output folder. Again it uses the same pattern as the previous tasks that we have seen so far. <code>src</code> is where you pass in the path of the files that you want to process and <code>dest</code> is where you pass in the destination. The first <code>pipe</code> method call is where you pass in the actual task that you want to call. Here were passing an object to the <code>uglify</code> method which sets <code>outSourceMap</code> to <code>true</code>, what this does is save the source map in the same directory which the final JavaScript file is saved. Source maps basically allows you to debug your minified code. Here&rsquo;s the uglify task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">({</span><span class="nx">outSourceMap</span><span class="o">:</span> <span class="kc">true</span><span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Image Min</h6>

<p>Next is the image min task. This time we are passing an array to the <code>src</code> method so that we can target both png&rsquo;s and jpg&rsquo;s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min_img&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;img/*.png&#39;</span><span class="p">,</span> <span class="s1">&#39;img/*.jpg&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">imagemin</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/img&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Watch</h6>

<p>Unlike grunt where we had to install the watch task separately gulp has it by default. You can use it by calling the <code>watch</code> method and passing in the files that you want to target as the first argument and the tasks that you want to run when the targeted files are updated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint_js&#39;</span><span class="p">,</span> <span class="s1">&#39;min_js&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;*.html&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_html&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;css/*.css&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_css&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;img/&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_img&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Defining aliases</h6>

<p>Lastly we define our aliases. Again we can use the <code>task</code> method for this. This time it takes the alias that we want to give to a specific task that we have already defined and then a string or an array of tasks that gulp will run when the specific alias is called. In the example below were telling gulp to use the <code>watch</code> task as its default task. This means that when we call either <code>gulp default</code> or just <code>gulp</code> from the command-line it will execute the watch task for us. On the second line we specify a minification task giving it an alias of <code>min</code>. This will simply call the tasks for minifying html, css, javascript and images:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;min&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;min_js&#39;</span><span class="p">,</span> <span class="s1">&#39;min_css&#39;</span><span class="p">,</span> <span class="s1">&#39;min_img&#39;</span><span class="p">,</span> <span class="s1">&#39;min_html&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Useful Gulp Plugins</h5>

<h6>General</h6>

<ul>
<li><a href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a> &ndash; removes files and folders</li>
<li><a href="http://github.com/wearefractal/gulp-concat">gulp-concat</a> &ndash; concatenate files</li>
<li><a href="http://github.com/lazd/gulp-replace.git">gulp-replace</a> &ndash; replaces strings</li>
</ul>


<h5>Code Quality</h5>

<ul>
<li><a href="http://github.com/wearefractal/gulp-jshint">gulp-jshint</a> &ndash; jshint plugin for gulp</li>
<li><a href="https://github.com/sindresorhus/gulp-plato">gulp-plato</a> &ndash; generate complexity analysis reports</li>
<li><a href="https://github.com/dylanb/gulp-coverage">gulp-coverage</a> &ndash; instrument and generate code coverage independent of test runner</li>
<li><a href="https://github.com/sindresorhus/gulp-jscs">gulp-jscs</a> &ndash; checks JavaScript code style with jscs</li>
<li><a href="https://github.com/bezoerb/gulp-htmlhint">gulp-htmllint</a> &ndash; checks html files</li>
</ul>


<h5>Testing</h5>

<ul>
<li><a href="https://github.com/sindresorhus/gulp-mocha">gulp-mocha</a></li>
<li><a href="https://github.com/sindresorhus/gulp-jasmine">gulp-jasmine</a></li>
<li><a href="https://github.com/jonkemp/gulp-qunit">gulp-qunit</a></li>
</ul>


<h5>Performance Optimization</h5>

<ul>
<li><a href="https://github.com/jonschlinkert/gulp-htmlmin">gulp-htmlmin</a> &ndash; minify html files</li>
<li><a href="https://github.com/chilijung/gulp-cssmin/">gulp-cssmin</a> &ndash; minifying css</li>
<li><a href="https://github.com/ben-eb/gulp-uncss">gulp-uncss</a> &ndash; remove unused css</li>
<li><a href="https://github.com/sindresorhus/gulp-imagemin">gulp-imagemin</a> &ndash; compressing image sizes</li>
<li><a href="https://github.com/ben-eb/gulp-svgmin">gulp-svgmin</a> &ndash; compressing svg images</li>
<li><a href="https://github.com/sindresorhus/gulp-webp">gulp-webp</a> &ndash; converting images to webp format</li>
<li><a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> &ndash; minify JavaScript files</li>
<li><a href="https://github.com/chilijung/gulp-jsmin/">gulp-jsmin</a> &ndash; minify JavaScript files</li>
</ul>


<h5>Resources for learning gulp</h5>

<ul>
<li><a href="http://travismaynard.com/writing/getting-started-with-gulp">Getting Started with Gulp</a></li>
</ul>


<h4>Rake</h4>

<p>Lastly there&rsquo;s Rake. Rake is a build tool for Ruby.</p>

<h5>Installing Rake</h5>

<p>Rake depends on Ruby and Ruby Gems to be installed. You can install Ruby by using <a href="http://rvm.io/">RVM</a>. You can get RVM using curl. You can install curl in Ubuntu and other debian based Linux distributions by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">curl</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Windows all you have to do is download the zip file from the <a href="http://curl.haxx.se/download.html">Curl downloads page</a>, extract it and <code>cd</code> into the extracted directory. You can then use curl from that directory.</p>

<p>For Mac OS X users you can install it with homebrew (yes you can pretty much install everything using homebrew, and yes I know you&rsquo;re probably tired of me mentioning homebrew every time we need to install something).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">brew</span> <span class="nx">install</span> <span class="nx">curl</span>
</span></code></pre></td></tr></table></div></figure>


<p>After installing curl we can then use the <code>curl</code> command to get and install rvm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">curl</span> <span class="o">-</span><span class="nx">L</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//get.rvm.io | bash -s stable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we tell rvm to install ruby 1.9.3 (you can also use a later version if you want):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rvm</span> <span class="nx">install</span> <span class="mf">1.9</span><span class="p">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then tell rvm to use the version that you just installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rvm</span> <span class="nx">use</span> <span class="mf">1.9</span><span class="p">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next install ruby gems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rvm</span> <span class="nx">rubygems</span> <span class="nx">latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly install rake:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gem</span> <span class="nx">install</span> <span class="nx">rake</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Using Rake</h5>

<p>To use rake all you have to do is create a new <code>Rakefile</code> in the root of your project and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:concat_files</span>
</span><span class='line'>
</span><span class='line'><span class="n">dist_dir</span> <span class="o">=</span> <span class="s1">&#39;dist&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:create_dir</span> <span class="o">=&gt;</span> <span class="ss">:delete_dir</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span> <span class="n">dist_dir</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dist_dir</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">dirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="s1">&#39;img&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">dirs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_name</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">dir_name</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;creating &quot;</span> <span class="o">+</span> <span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">dir_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;done creating dist directory&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:delete_dir</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/*&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_name</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">rmdir</span> <span class="n">dir_name</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">dir_name</span> <span class="o">+</span> <span class="s2">&quot; is deleted&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:concat_files</span> <span class="o">=&gt;</span> <span class="ss">:create_dir</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">js_files</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">js_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;js/&#39;</span> <span class="o">+</span> <span class="n">file</span> <span class="o">+</span> <span class="s1">&#39;.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;dist/js/script.js&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;done concatenating javascript files&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">css_files</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;normalize&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">css_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;css/&#39;</span> <span class="o">+</span> <span class="n">file</span> <span class="o">+</span> <span class="s1">&#39;.css&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;dist/css/style.css&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">){</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;done concatenating css files&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, this line allows you to use the rake gem that you installed earlier in your <code>Rakefile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the line where we specify the default task. Rake allows you to specify a default task, a default task will automatically run when you execute the <code>rake</code> command from your terminal. In this case the default task is <code>concat_files</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:concat_files</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we set the distribution directory to <code>dist</code>. This is where the files processed by rake will be saved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dist_dir</span> <span class="o">=</span> <span class="s1">&#39;dist&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we define the <code>create_dir</code> method. What this does is create the <code>dist</code> directory if it doesn&rsquo;t already exists. We use the <code>mkdir</code> method in the <code>Dir</code> class to create the <code>dist</code> directory. This takes up 2 arguments: the path to the directory that you want to create and then the file permissions. If you&rsquo;re not familiar with file permissions in Unix systems <code>0700</code> basically means that the creator of the directory will have write(4), read(2), and execute(1) permissions.
Next we declare an array that contains the names of the folders that we want to create inside the <code>dist</code> directory. We simply loop over this array using the <code>each</code> method and then call the <code>mkdir</code> method to create those. Once its created it will output to the terminal the name of the directory that was created. Finally we also output that the <code>dist</code> directory has been created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:create_dir</span> <span class="o">=&gt;</span> <span class="ss">:delete_dir</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span> <span class="n">dist_dir</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dist_dir</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">dirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="s1">&#39;img&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">dirs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_name</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">dir_name</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;creating &quot;</span> <span class="o">+</span> <span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">dir_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;done creating dist directory&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we move on to the next task you might be wondering what the fat arrow (<code>=&gt;</code>) does and why did we place <code>:delete_dir</code> after it. Well the answer is that this lets us specify a task that the task that were defining depends on. So this basically means that the <code>create_dir</code> task depends on the <code>delete_dir</code> task. This means that rake will execute the <code>delete_dir</code> task first before executing the <code>create_dir</code> task.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:create_dir</span> <span class="o">=&gt;</span> <span class="ss">:delete_dir</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then use this knowledge to specify the order of execution of different tasks. For example if we have task A, task B, task C, and task D. And we want them to execute in the following order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span>
</span><span class='line'><span class="n">B</span>
</span><span class='line'><span class="n">C</span>
</span><span class='line'><span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>Converting our requirements to code it will look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:D</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:D</span> <span class="o">=&gt;</span> <span class="ss">:C</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is task D</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:C</span> <span class="o">=&gt;</span> <span class="ss">:B</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is task C</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:B</span> <span class="o">=&gt;</span> <span class="ss">:A</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is task B</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:A</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is task A</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the code above we have specified the default task to the <code>D</code> task, but the <code>D</code> task depends on <code>C</code> task and the <code>C</code> task depends on <code>B</code> task, finally <code>B</code> task depends on <code>A</code> task. So this means that <code>A</code> task ends up executed first and then <code>B</code> and so on. You can see from the screenshot below that indeed the tasks were executed in the order that we wanted:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-09-a-whirlwind-tour-of-web-developer-tools-build-tools/rake-output.png" alt="rake output" /></p>

<p>Going back to our original <code>Rakefile</code> let&rsquo;s now go through what the <code>delete_dir</code> task does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:delete_dir</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="n">dist_dir</span> <span class="o">+</span> <span class="s1">&#39;/*&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_name</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Dir</span><span class="o">.</span><span class="n">rmdir</span> <span class="n">dir_name</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">dir_name</span> <span class="o">+</span> <span class="s2">&quot; is deleted&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is very straightforward. What were doing in the above code is looping through all the directories in the <code>dist</code> directory and then delete them using the <code>rmdir</code> method in the <code>Dir</code> class. The <code>rmdir</code> method takes up a single argument which is the name of the directory that you want to delete. Once its deleted the directory in the current iteration of the loop it just outputs into the terminal that the directory is deleted.</p>

<p>Lastly let&rsquo;s go through the <code>concat_files</code> method. What this does is concatenate the contents of the files that you specify. So all the javascript files gets concatenated and all the css files gets concatenated. This method depends on the <code>create_dir</code> method to be executed first. The first thing that were doing in this task is declaring the <code>out</code> variable and instantiate it with an empty string value. Next we define the filenames of the javascript files that we want to concatenate in order. Here we have declared <code>jquery</code> and then <code>main</code> which means that the contents of the <code>jquery</code> file will come first and then the contents of the <code>main</code> file will get appended after it.
Next we loop over these files then use the <code>read</code> method in the <code>File</code> class to get the contents of the file. The <code>read</code> method takes up the path to the file as its argument. We simply append its contents to the <code>out</code> variable that we declared initially. Next we call the <code>open</code> command in the <code>File</code> class and pass in the path to the main javascript file where we want to put all the contents of all the javascript files that we defined in the <code>js_files</code> array. The <code>open</code> command has a side effect of creating the file if it doesn&rsquo;t already exists so were taking advantage of that side effect in this method. Next we just call the <code>write</code> method from the file and pass in the <code>out</code> variable. Lastly we just output in the terminal that concatenating the javascript files is already done.</p>

<p>For the concatenation of css files were basically doing the same thing only this time were reading from all the css files and putting all of its contents in the <code>style.css</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:concat_files</span> <span class="o">=&gt;</span> <span class="ss">:create_dir</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">js_files</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">js_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;js/&#39;</span> <span class="o">+</span> <span class="n">file</span> <span class="o">+</span> <span class="s1">&#39;.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;dist/js/script.js&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;done concatenating javascript files&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">css_files</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;normalize&#39;</span><span class="p">,</span> <span class="s1">&#39;main&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">css_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">+=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;css/&#39;</span> <span class="o">+</span> <span class="n">file</span> <span class="o">+</span> <span class="s1">&#39;.css&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;dist/css/style.css&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">){</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;done concatenating css files&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Useful resources for task automation</h5>

<p>If you would like to use Ruby for your task automation needs you don&rsquo;t really need to be writing code from scratch like what we have done above. Most of the boring tasks that we need to do as web developers are already taken care by some brilliant people so all you have to do is install the software that they wrote and use it on your own projects. Here are some resources for task automation in ruby:</p>

<ul>
<li><a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline</a></li>
<li><a href="https://github.com/rquinlivan/jshint-gem">JSHint Gem</a></li>
<li><a href="http://mintdigital.github.io/asset_hat/">Asset Hat</a></li>
<li><a href="https://github.com/mcollina/rake-minify">Rake Minify</a></li>
</ul>


<h3>Conclusion</h3>

<p>Build tools are very important tools to have in our web development arsenal. They make boring, repetitive or unsexy manual tasks easier to handle. After all computers were originally made to make tasks easier so we as developers have to take advantage of that.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://gruntjs.com/">Grunt JS</a></li>
<li><a href="http://gulpjs.com/">Gulp JS</a></li>
<li><a href="http://rake.rubyforge.org/">Rake</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Source Control]]></title>
    <link href="http://anchetawern.github.io/blog/2014/04/20/a-whirlwind-tour-of-web-developer-tools-source-control/"/>
    <updated>2014-04-20T13:26:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/04/20/a-whirlwind-tour-of-web-developer-tools-source-control</id>
    <content type="html"><![CDATA[<p>This is part seven of the series A Whirlwind Tour of Web Developer Tools. In this part I&rsquo;m going to walk you through source control. Source control is also known as Version Control or Revision Control. Which ever term you have heard of before it means the same thing. Like I did with the previous parts of this series I bring you the definition of source control from <a href="http://en.wikipedia.org/wiki/Revision_control">Wikipedia</a> since they really do a great job at defining things:</p>

<blockquote><p>Revision control, also known as version control and source control (and an aspect of software configuration management), is the management of changes to documents, computer programs, large web sites, and other collections of information. Changes are usually identified by a number or letter code, termed the &#8220;revision number&#8221;, &#8220;revision level&#8221;, or simply &#8220;revision&#8221;. For example, an initial set of files is &#8220;revision 1&#8221;. When the first change is made, the resulting set is &#8220;revision 2&#8221;, and so on. Each revision is associated with a timestamp and the person making the change. Revisions can be compared, restored, and with some types of files, merged.</p></blockquote>


<p>In simple terms version control is a way in which we can manage changes to a specific document. In the context of Web Development, the documents that we need to manage are the source files of the websites or web applications that we are building. Things like html files, stylesheets, script files, images, and other assets.</p>

<!-- more -->


<h3>Terms</h3>

<p>Before we dive in, here are some terms that you might encounter in this guide:</p>

<ul>
<li><strong>Branch</strong> &ndash; a branch is a copy of your repository that is separate from the main branch. Its commonly used for isolation so that you can work with new features, issues, or bug fixes without affecting the whole project.</li>
<li><strong>Master</strong> &ndash; the main branch. This is the branch that you will work with by default after initializing a repository.</li>
<li><strong>Repository</strong> &ndash; also called repo. This refers to a server which keeps a history of all the changes made by the developers.</li>
<li><strong>Commit</strong> &ndash; permanently saving your changes. Commits are written into history and can be easily reverted if needed.</li>
<li><strong>Conflict</strong> &ndash; this happens when two or more developers makes changes to the same file.</li>
<li><strong>Push</strong> &ndash; the act of commiting your changes into the repository.</li>
<li><strong>Pull</strong> &ndash; the act of getting the changes of other developers and merging it into your own copy of the project.</li>
<li><strong>Centralized Version Control</strong> &ndash; a version control setup wherein there&rsquo;s only a single repository wherein developers will push their changes.</li>
<li><strong>Distributed Version Control</strong> &ndash; a version control setup wherein every developer has their own repository.</li>
</ul>


<h3>Benefits of using source control</h3>

<p>Using version control in each of your projects whether big or small, solo or team work has benefits into your overall development workflow. Here are some:</p>

<ul>
<li><strong>Branching</strong> &ndash; you can use branches to experiment on features without affecting the rest of the code base. This means that you can go crazy with new features and experiment like mad with your code. Branches are like sandboxes which you can easily delete or merge into your code base later on. Changes in branches won&rsquo;t affect the rest of your code base so you can pretty much do anything without worrying of breaking anything.</li>
<li><strong>Easy Merging of Changes</strong> &ndash; you can easily merge your changes to the rest of the team. This means that your co-workers can merge your changes to their current copy of the whole project and you can also merge their changes with ease. Gone are the days of manually copying all of the files that you have updated and giving it to your team mates for them to merge it on their copy of the whole project.</li>
<li><strong>Tracking of Changes</strong> &ndash; changes in the source code can be easily tracked with source control. Questions like who made the changes, what has been changed can be easily answered.</li>
<li><strong>Reverting Changes</strong> &ndash; you can also easily revert changes that you&rsquo;ve made in case it breaks your app.</li>
<li><strong>Integration with other tools</strong> &ndash; you can also integrate your source control software with bug-tracking tools. This makes it easier to associate a specific commit with a bug or issue.</li>
<li><strong>Backup</strong> &ndash; source code can be also backed up to a remote server somewhere in the cloud by using source control. So in case your computer explodes you can just use a new one and get the source from the remote server. You can then continue your work as usual.</li>
</ul>


<h3>What goes into source control</h3>

<p>Lets begin by identifying what needs to go into source control.</p>

<ul>
<li><strong>Source files</strong> &ndash; this includes the html, css and javascript files that are mainly used by your app. This also includes the libraries in which your app depends on. Things like twitter bootstrap, jquery or underscore.js. Although there are already tools which we can use to specify which libraries our app depends on (see package managers) and it can be easily installed in the deployment server later on using configuration files (<code>package.json</code>, <code>bower.json</code>) . Its still preferred that you include the source for these dependencies in case tools such as bower or npm can&rsquo;t be used in the deployment server.</li>
<li><strong>Static content (images, videos, and other assets)</strong> &ndash; this is exclusive to static content that is necessary for the website or web app to function the first time that it is launch. This doesn&rsquo;t include user uploaded files or any other files that is subject to change or deletion by someone other than the developers of the app.</li>
<li><strong>Configuration files</strong> &ndash; if you have gone over part 6 (package managers) of this series this includes files such as the <code>component.json</code>, <code>bower.json</code>, and <code>package.json</code>. Or other files that contains the information on the dependencies of your app. If you&rsquo;re working on the back-end, this includes database configuration files.</li>
</ul>


<h3>Best Practices</h3>

<p>Here are some best practices that you need to consider when using any version control software. Note that you can apply these practices on whatever version control software that you&rsquo;re using. I&rsquo;m going to discuss how to implement each of these on the version control software that were going to go over with later on.</p>

<ul>
<li>Every commit must represent only a single logical change in your code base.</li>
<li>Use bug-tracking software together with version control. Tools such as <a href="https://quickstart.atlassian.com/download/jira/get-started/bug-tracking/set-up">Jira&rsquo;s Bug Tracking</a> is useful for this. If you&rsquo;re using Bitbucket there&rsquo;s also a built-in bug-tracking in it. All you have to do is to create an issue and then on your commit message later on simply include the issue number. An example would be something like <code>solved issue #36</code>. This will automatically close the corresponding issue in the bug-tracking software and the commit message is also linked to the specific issue. This means that the details for that specific issue can easily be seen using this feature.</li>
<li>Keep your commit messages short but include a comment where you specify the details of the changes that you&rsquo;ve made.</li>
<li>Backup your repository regularly. Even if you&rsquo;re keeping a history of all your changes using source control you can still lose your data due to unfortunate events. <a href="https://github.com/">Github</a> and <a href="https://bitbucket.org/">Bitbucket</a> really makes this easy.</li>
<li>Always use the present tense in your commit messages. The important thing that you have to remember is be consistent to whatever convention your team agrees to use. Here are some examples:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add foo.txt
</span><span class='line'>
</span><span class='line'>rename foo.txt to bar.txt
</span><span class='line'>
</span><span class='line'>fix issue with the carousel script
</span><span class='line'>
</span><span class='line'>update code for getting user details</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Commit only work that is done. This means that you have at least tested a specific feature of functionality once and made sure that it actually works before you commit.</li>
<li>Use branches on every new/experimental feature, bug fixes or anything that requires a couple of commits before it can be considered done. You might also want to create a separate branch for development, testing and production. Using this model means that you have to create a development branch right off the bat and then start commiting to it while you&rsquo;re still developing your app. Once you&rsquo;re done with the development you then start commiting your changes to the testing branch. The testing branch is basically for commiting bug fixes to bugs that are found on the testing stage of your app. And then finally any bugs or issues that is found on the production of your app you commit it in the production branch.</li>
<li>Use tags for any minor or major release of your app so that it will be easy to find later on.</li>
<li>Don&rsquo;t commit changes in code formatting. This includes changes in whitespaces or tab sizes.</li>
<li>Commit only your own changes. This can&rsquo;t be emphasized enough. This is useful so that the team can trace who actually made the change.</li>
<li>Merge others changes often. This allows you to work with the latest version of the whole project.</li>
<li>Push your changes often. This allows you to avoid conflicts from happening often.</li>
<li>Your team must have a central repository to use even if you&rsquo;re using a distributed version control system. This is can be a private bitbucket or github repository or a private server where your team can push and pull in changes.</li>
</ul>


<h3>Source Control Software</h3>

<h4>Git</h4>

<p>Git is a distributed revision control system. It was initially developed by Linus Torvalds for Linux Kernel Development in 2005.</p>

<h5>Installing Git</h5>

<p>You can install git by downloading the installer applicable to the current operating system that you&rsquo;re using. Downloads are available from the <a href="http://git-scm.com/downloads">git download page</a>. You can also use the package manager that is available in your current operating system. In ubuntu or other debian-based operating system you have the <code>apt</code> command at your disposal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:pdoes/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install git-core</span></code></pre></td></tr></table></div></figure>


<p>For Mac users you can install <a href="http://brew.sh/">brew</a> then install git using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install git</span></code></pre></td></tr></table></div></figure>


<p>For Windows users you can just download the Windows installer for Git in their downloads page.</p>

<h5>Setting Up Git</h5>

<p>For first time use you have to setup git. This involves setting your name and email:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "Yoh Asakura"
</span><span class='line'>git config --global user.email yoh-asakura@gmail.com</span></code></pre></td></tr></table></div></figure>


<p>Its recommended that you also setup the default text editor that git will use for writing commit messages or resolving conflicts. I definitely recommend vim for this since you won&rsquo;t need to go away from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global core.editor vim</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re going to push on a remote repository later on you might also want to set git to cache your password. By default git caches your password for 3600 seconds so you have to explicitly specify the timeout value to something higher. This is assuming that you don&rsquo;t frequently change your password:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global credential.helper 'cache --timeout=99999999'</span></code></pre></td></tr></table></div></figure>


<p>I keep on blabbering about password but what the heck is this password? Well the password is basically the password that you use when you are pushing your changes to a remote repository. Pushing to a repository requires specific privileges which can only be met by supplying a password. This password is linked with a public and private ssh key pair. The public key is uploaded in the remote repository and the private one stays in the machine that you&rsquo;re currently using. This is then checked every time you push your changes to the remote repository.</p>

<p>While were at the topic of ssh keys it might be useful if you also setup your ssh keys now so you won&rsquo;t have any trouble with it later. You can generate an ssh key by using the following command (needless to say you should change the sample email in here with that of your own email):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "yoh-asakura@gmail.com"
</span><span class='line'>ssh-add id_rsa
</span><span class='line'>#enter your password</span></code></pre></td></tr></table></div></figure>


<p>The commands above will generate an <code>id_rsa</code> and <code>id_rsa.pub</code> file after you have inputted a password. The one with the <code>.pub</code> extension is the one that should be uploaded to the remote repository. If there&rsquo;s an interface that allows you to add public ssh keys then you can also just copy the contents of the <code>id_rsa.pub</code> file and paste it in there. Github, Bitbucket and Openshift all allow you to do this from their website.</p>

<p>Those are the absolute necessary configurations that you can set right after installing git. If you want to configure other stuff then you can check out this <a href="http://git-scm.com/book/en/Customizing-Git-Git-Configuration">guide on how to configure git</a></p>

<h5>Initializing a Git Repo</h5>

<p>To start working with git you first have to initialize a project to use git. You can do that with the <code>git init</code> command. This is the first thing that you need to do if you want your project to use git.</p>

<h5>Getting the status of a repo</h5>

<p>Git allows you to view the changes in your project since the last commit by using the <code>git status</code> command:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-status.png" alt="git status" /></p>

<h5>Adding files into the staging area</h5>

<p>With git there&rsquo;s the concept of the staging area. Its basically a place where you can prepare files to be commited, an index of files to be put in your next commit. You can add files to the staging area by using the <code>git add</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add file-a.txt</span></code></pre></td></tr></table></div></figure>


<p>Note that every time you make a change to a specific file you have to add it to the staging area. So unless you&rsquo;re already happy with the changes to a specific file don&rsquo;t add it to the staging area to avoid having to add it again when you make some changes.</p>

<p>Going back to our imaginary project you can now see that <code>file-a.txt</code> has been added to the staging area when you execute <code>git status</code>. Files that are added to the staging area is indicated with a green text color:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-add.png" alt="git add" /></p>

<p>Currently <code>file-a.txt</code> contains the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dog
</span><span class='line'>cat
</span><span class='line'>mouse
</span><span class='line'>snake
</span><span class='line'>gorilla
</span><span class='line'>dinosaur
</span><span class='line'>lizard</span></code></pre></td></tr></table></div></figure>


<p>If however you add a new item on the end of the list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dog
</span><span class='line'>cat
</span><span class='line'>mouse
</span><span class='line'>snake
</span><span class='line'>gorilla
</span><span class='line'>dinosaur
</span><span class='line'>lizard
</span><span class='line'>monkey</span></code></pre></td></tr></table></div></figure>


<p>And executing <code>git status</code> again you will see that git also informs you of that change:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/changed-on-staging.png" alt="changed on staging" /></p>

<h5>Determine the exact change</h5>

<p>If you want to know what exactly has been changed you can make use of the <code>git diff</code> command followed by the file that you want to check:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git diff file-a.txt</span></code></pre></td></tr></table></div></figure>


<p>This results in the following output:
<img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-diff.png" alt="git diff" /></p>

<p>The change is indicated with a green color. As you can see <code>monkey</code> is added at the end of the line. Text that has been added is indicated by the <code>+</code> sign.</p>

<p>Next let&rsquo;s change the <code>lizard</code> into <code>bird</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dog
</span><span class='line'>cat
</span><span class='line'>mouse
</span><span class='line'>snake
</span><span class='line'>gorilla
</span><span class='line'>dinosaur
</span><span class='line'>bird
</span><span class='line'>monkey</span></code></pre></td></tr></table></div></figure>


<p>Executing <code>git diff</code> on the file again we see that git also makes it clear what the specific change was:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-diff2.png" alt="git diff 2" /></p>

<p>The <code>lizard</code> has been removed and that is indicated with a red text color and a <code>-</code> sign before the text that was removed. And then the addition of the <code>bird</code> is indicated with a <code>+</code> sign with a green text color.</p>

<p>If you make more than one change to a file git will also indicate every change using these conventions.</p>

<h5>Commiting Changes</h5>

<p>Once you&rsquo;re happy with the changes that you&rsquo;ve made you can now commit your changes using the <code>git commit</code> command. But before you do that make sure that all the changes that you want to commit are added to the staging area. You can do that by executing <code>git status</code>. If there aren&rsquo;t any changes that has not been added to the staging area then you&rsquo;re good to go. If not then add the specific file to the staging area using <code>git add</code>. Once that&rsquo;s done you can then <code>commit</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "add animals"</span></code></pre></td></tr></table></div></figure>


<p>Git will give the following output after you commit:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-commit.png" alt="git commit" /></p>

<p>Note that the above method for commiting isn&rsquo;t best practice since you are limited to only a few words and you can&rsquo;t even have a new line. The best practice when writing commit message is to go all out and write as much detail as you deem necessary. You can do that by not supplying the <code>-m</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to write a long commit message using the default text editor that you supplied to be used by git. If you remember earlier we have set vim as a default text editor. Executing the command above will open it up:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/long-commit.png" alt="long commit with vim" /></p>

<p>You can then go to insert mode by pressing <code>i</code> and then write your long commit message. Go wild write a whole novel if you want. Once you&rsquo;re satisfied exit insert mode by pressing <code>esc</code> then type <code>:wq</code> to save the commit message and exit vim.</p>

<h5>Branching</h5>

<p>After some time you would want to experiment with some new features. This is where branching comes into play. It allows you to move away from the master branch and do work from there without affecting the master branch.</p>

<p>To create a new branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch {branch_name}</span></code></pre></td></tr></table></div></figure>


<p>This will create a branch with the branch name that you supplied. You won&rsquo;t get any form of feedback when you do this but you&rsquo;ll know that a branch with the name that you supplied has been created by executing <code>git branch</code>. This will list out all the branches in your project. It also indicates the current branch you are at. In this case were still at the <code>master</code> branch:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/new-branch.png" alt="new branch" /></p>

<p>In order to switch to the newly created branch you can use the <code>checkout</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout {branch_name}</span></code></pre></td></tr></table></div></figure>


<p>Git will then give you a feedback that you have switched to the new branch:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-checkout.png" alt="git checkout" /></p>

<p>From the new branch you can then work on your experimental features. But for our example we will simply create a new text file (<code>file-b.txt</code>) and add some animals in it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>narwhal
</span><span class='line'>macaque
</span><span class='line'>philippine crocodile
</span><span class='line'>rhino
</span><span class='line'>angonoka
</span><span class='line'>aye-aye
</span><span class='line'>armadillo
</span><span class='line'>babirusa
</span><span class='line'>gobi jerboa
</span><span class='line'>hirola</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s created add the file into staging area and commit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add file-b.txt
</span><span class='line'>git commit -m "add new animals"</span></code></pre></td></tr></table></div></figure>


<p>Now switch back into the <code>master</code> branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Open up a new file system explorer window:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/checkout-master.png" alt="checkout master" /></p>

<p>As you can see from the above screenshot <code>file-b.txt</code> is no longer there. That is because we have switched back to the <code>master</code> branch which isn&rsquo;t aware that we have added and commited a new file. Only the <code>new-animals</code> branch is aware of it.</p>

<p>If you switch back to the <code>new-animals</code> branch you will see that <code>file-b.txt</code> exists again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout new-animals</span></code></pre></td></tr></table></div></figure>


<p>Now before we try to merge our changes back into the <code>master</code> branch let&rsquo;s create a scenario wherein there will be a conflict. A conflict happens when 2 files with different contents but with the same file name has been commited either on the same branch or a different branch.</p>

<p>On the <code>new-animals</code> branch create a new file and name it <code>file-c.txt</code> then put the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kangaroo
</span><span class='line'>whale
</span><span class='line'>rabbit</span></code></pre></td></tr></table></div></figure>


<p>Add and commit the new file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add file-c.txt
</span><span class='line'>git commit -m "add final animals"</span></code></pre></td></tr></table></div></figure>


<p>Switch back to the <code>master</code> branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Create the same file (<code>file-c.txt</code>). This time put a different content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hyena
</span><span class='line'>dragon
</span><span class='line'>horse</span></code></pre></td></tr></table></div></figure>


<p>Add and commit the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add file-c.txt
</span><span class='line'>git commit -m "add some animals"</span></code></pre></td></tr></table></div></figure>


<p>Now lets merge the changes from the <code>new-animals</code> branch into the <code>master</code> branch using the <code>merge</code> command. Merging works by first switching to the <code>master</code> branch and then calling the <code>merge</code> command with the name of the branch that you want to merge. In this case its the <code>new-animals</code> branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge new-animals</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will result in a conflict since the same file was modified with different contents on both branches. As you can see from the screenshot below git tells you that there&rsquo;s a merge conflict on <code>file-c.txt</code> and that the automatic merge failed:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/merge-conflict.png" alt="merge conflict" /></p>

<p>Opening <code>file-c.txt</code> we see the following contents. <code>HEAD</code> refers to the contents of <code>file-c.txt</code> in the <code>master</code> branch while <code>new-animals</code> refers to its contents in the <code>new-animals</code> branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
</span><span class='line'>hyena
</span><span class='line'>dragon
</span><span class='line'>horse
</span><span class='line'>=======
</span><span class='line'>kangaroo
</span><span class='line'>whale
</span><span class='line'>rabbit
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt;&gt; new-animals</span></code></pre></td></tr></table></div></figure>


<p>Now this is a matter of deciding which changes will go into the next commit. For this specific conflict we&rsquo;ll go ahead and use the changes in the <code>master</code> branch so we delete everything that belongs to the <code>new-animals</code> branch and also the comments added by git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hyena
</span><span class='line'>dragon
</span><span class='line'>horse</span></code></pre></td></tr></table></div></figure>


<p>Finally we just add and commit the file as usual:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add file-c.txt
</span><span class='line'>git commit -m "fix conflict with animals"</span></code></pre></td></tr></table></div></figure>


<h5>Working With Remote Repositories</h5>

<p>Git is a distributed version control system which means that every developer working on a project has a copy of the whole or part of the repository. When working with projects its important to have a remote repository wherein developers can push their changes and pull the changes made by other developers in the team. It will also serve as a backup in case one of the computers which keeps a copy of a repository explodes.</p>

<p>In this section were going to create a remote repository using Bitbucket. If you do not have a Bitbucket account yet go ahead and <a href="https://bitbucket.org/">sign up</a>, its free.</p>

<p>Once you have registered and verified your account create a new repository by clicking on the &lsquo;create&rsquo; button on the top side of the bitbucket website. This will give you the following interface:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/new-repo.png" alt="new repository" /></p>

<p>Input the name of the repository, check &lsquo;private repository&rsquo; for the access level. The &lsquo;repository type&rsquo; will be &lsquo;Git&rsquo;. Also check the &lsquo;Issue tracking&rsquo; and &lsquo;Wiki&rsquo; for the &lsquo;project management&rsquo;. Finally click on &lsquo;Create Repository&rsquo;.</p>

<p>Once the repository is created it will give you the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/created-repo.png" alt="created repo" /></p>

<p>Since we already have an existing project to work with, click on the &lsquo;I have an existing project to push up&rsquo; link. It will then show you the commands that you need to execute in order to get your existing repository up on Bitbucket:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/repo-details.png" alt="repo details" /></p>

<p>First you have to navigate to the root of your project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /path/to/my/repo</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>remote add</code> command to add the remote repository that you just created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin git@bitbucket.org:{your bitbucket username}/animals.git</span></code></pre></td></tr></table></div></figure>


<p>Push up everything into the remote repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push -u origin -all</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will then give you the following output:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/git-push.png" alt="git push" /></p>

<p>Note that you will need to have your public key copied over to bitbucket for this to work. You can do that by going to &lsquo;manage account&rsquo; then select &lsquo;SSH keys&rsquo;. From there you can just click on the &lsquo;add key&rsquo; button and bitbucket will prompt you to enter your public ssh key:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/add-sshkey.png" alt="add ssh key" /></p>

<p>If you can remember earlier we created an ssh key. The <code>id_rsa.pub</code> is the public key and that&rsquo;s the one whose contents you need to copy into the textarea to input the key in bitbucket.</p>

<p>Once you have successfully pushed your repo into bitbucket you will now be able to view the source. Simply refresh the page and click on the &lsquo;source&rsquo; tab:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/source.png" alt="source" /></p>

<p>Under the &lsquo;overview&rsquo; tab you can also see your recent activity with regards to that repo:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/overview.png" alt="overview" /></p>

<p>Now every time you make a change from your local copy of the repository and commited those changes you can just use the <code>git push</code> command to push those changes into this remote repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>If its your first time pushing to the remote repository you will need to specify the <code>origin</code> in this case we&rsquo;ll simply use <code>master</code> which refers to the <code>master</code> branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>Next create a new file (<code>file-d.txt</code>) from bitbucket and add the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dodo
</span><span class='line'>great auk
</span><span class='line'>tasmanian tiger
</span><span class='line'>sabertooth
</span><span class='line'>quagga</span></code></pre></td></tr></table></div></figure>


<p>The commit message will be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add extinct animals</span></code></pre></td></tr></table></div></figure>


<p>Now we have 4 files in our remote repository. We can pull the new file from the remote repo by using the <code>pull</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! We have barely scratch the surface with what you can do with git. Be sure to check out the resources below to learn more about it.</p>

<h5>Resources for Learning Git</h5>

<ul>
<li><a href="http://rogerdudler.github.io/git-guide/">Git the Simple Guide</a></li>
<li><a href="http://gitready.com/">Git Ready</a></li>
<li><a href="http://gitimmersion.com/">Git Immersion</a></li>
<li><a href="http://try.github.io/">Try Git</a></li>
<li><a href="http://git-scm.com/book">Pro Git</a></li>
</ul>


<h4>Mercurial</h4>

<p>Mercurial just like git is a distributed version control system. Its also cross-platform which means that you can install it on any of the major operating systems available today.</p>

<h5>Installing Mercurial</h5>

<p>You can download any of the available installers from the <a href="http://mercurial.selenic.com/downloads/">mercurial downloads page</a>. Alternatively you can make use of the package manager that&rsquo;s available in the current operating system that you&rsquo;re using. For Linux distributions with <code>apt-get</code> you can install it with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mercurial</span></code></pre></td></tr></table></div></figure>


<p>For Mac OS users you can also use homebrew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install mercurial</span></code></pre></td></tr></table></div></figure>


<p>For Windows users you can install it with <a href="https://chocolatey.org/">chocolatey</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst hg</span></code></pre></td></tr></table></div></figure>


<h5>Configuring Mercurial</h5>

<p>Before you start using mercurial its important that you first supply your credentials. By default mercurial uses the current user of the computer that you&rsquo;re using as the user. But if you want to be more specific you can use the <code>.hgrc</code> file to supply your username.</p>

<p>To configure mercurial, create an <code>.hgrc</code> in the root of your home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch ~/.hgrc</span></code></pre></td></tr></table></div></figure>


<p>The <code>touch</code> command creates a file inside the directory that you specify. If you are on Windows you may need to install <a href="http://unxutils.sourceforge.net/">unixutils</a> in order to get the <code>touch</code> command available.</p>

<p>Also note that the location of the <code>.hgrc</code> file might be different for you so check out <a href="http://www.selenic.com/mercurial/hgrc.5.html">Mercurial&rsquo;s page about the hgrc file</a>.</p>

<p>Put the following contents in your <code>.hgrc</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ui]
</span><span class='line'>username = Firstname Lastname &lt;youremail@provider.com&gt; </span></code></pre></td></tr></table></div></figure>


<p>This means under the <code>ui</code> section set the <code>username</code> to be equal to your name followed by your email address.</p>

<h5>Initializing a Mercurial Project</h5>

<p>Just like with git you use the <code>init</code> command to initialize a project to use mercurial:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg init</span></code></pre></td></tr></table></div></figure>


<p>This will create an <code>.hg</code> directory under the root of your projects directory. This directory is where all the magic happens. You can think of it as the database that mercurial uses specifically for your project that maintains a record of all the changes that you have made.</p>

<h5>Adding files to be tracked</h5>

<p>You can add files to be tracked by mercurial using the the <code>hg add</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg add anime-list.txt</span></code></pre></td></tr></table></div></figure>


<p>If you want to add all the files on the current working directory you simply execute the <code>hg add</code> command without specifying a filename.</p>

<h5>Removing files</h5>

<p>If you don&rsquo;t want mercurial to track a specific file you can use the <code>hg remove</code> command. Note that this deletes the file that you specify:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg remove unwanted-file.txt</span></code></pre></td></tr></table></div></figure>


<h5>Revert</h5>

<p>If you have accidentally executed the <code>hg remove</code> command you can simply use <code>hg revert</code> to revert that specific change. Note that you must have already made atleast one commit to that specific file since the <code>revert</code> command simply reverts back to the previous commit where the file hasn&rsquo;t been deleted yet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg revert unwanted-file.txt</span></code></pre></td></tr></table></div></figure>


<h5>Commiting files</h5>

<p>Once you&rsquo;re happy with your changes you can now use the <code>hg commit</code> command to have mercurial take a snapshot of the files that you have added. Note that unlike git there&rsquo;s no staging area in mercurial where you have to execute the <code>git add</code> command in order to add untracked files or modified files. In mercurial once the file has been added using the <code>hg add</code> command  for the first time you won&rsquo;t have to execute it again after you have modified a specific file. Therefore if you modify a specific file that has already been added using <code>hg add</code> before and made changes to it, executing the <code>hg commit</code> command will commit the changes to the file into history.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg commit -m "add anime list"</span></code></pre></td></tr></table></div></figure>


<h5>Getting the status of a repo</h5>

<p>You can get the status of a mercurial repository by using the <code>hg status</code> command. This will return a list of files that are prefixed differently based on the status of the file. Here&rsquo;s a breakdown of the convention that mercurial uses:</p>

<ul>
<li><code>?</code> &ndash; untracked files, these are the files that were created in your projects directory but hasn&rsquo;t been added to be tracked by mercurial yet.</li>
<li><code>A</code> &ndash; tracked files, these are the files added using the <code>hg add</code> command.</li>
<li><code>!</code> &ndash; missing files, these are files that has been added using the <code>hg add</code> command but is missing from the directory where it was saved when the <code>hg add</code> command was used. This can be either due to deletion but not using the <code>hg remove</code> command.</li>
<li><code>M</code> &ndash; modified files, these are the files which has been modified since the last commit.</li>
</ul>


<p>Note that mercurial doesn&rsquo;t list out files which are already commited.</p>

<h5>Diffing</h5>

<p>If you want to know what exactly has been changed in a specific file you can use the <code>hg diff</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg diff anime-list.txt</span></code></pre></td></tr></table></div></figure>


<p>This returns the following output:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/hgdiff.png" alt="hg diff" /></p>

<p>As you can see from the above screenshot it has the same convention as git. Lines that has been added is indicated with a <code>+</code> sign before the actual line. And lines that has been deleted is indicated with a <code>-</code> sign.</p>

<h5>Branching</h5>

<p>You can create a new branch by using the <code>hg branch</code> command followed by the name of the branch that you want to create:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg branch new-anime</span></code></pre></td></tr></table></div></figure>


<p>To switch into the new branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg update new-anime</span></code></pre></td></tr></table></div></figure>


<p>Note that the branching workflow in mercurial is the same as that of git. First you create a new branch then you switch to it, then you make changes and once you&rsquo;re happy with your changes simply switch back to the <code>default</code> branch (<code>hg update default</code>) then use <code>hg merge {branch name}</code> to merge the changes in the branch that you created to the default branch.
But unlike git with mercurial you&rsquo;ll need to commit the action of merging into history in order to commit it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg commit -m "merged changes from experimental branch"</span></code></pre></td></tr></table></div></figure>


<h5>Pushing to a remote server</h5>

<p>You can push your changes to a remote server by using the <code>hg push</code> command. For example if you want to push your changes to a bitbucket repository named <code>animals-hg</code>. Note that you first have to create your ssh key pair in order for this to work. We&rsquo;ve already done that under the Git section on setting up git. Go back to that section if you haven&rsquo;t already set that up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg push ssh://hg@bitbucket.org/{username}/animals-hg</span></code></pre></td></tr></table></div></figure>


<p>This will push all the changes that you have commited into the remote server. But supplying the server information every time you need to push to a remote repository is not really  a good idea. Mercurial doesn&rsquo;t really have a command that lets you add a remote repository to push into for a specific repository so what you can do is place those in the <code>.hgrc</code> file. Under the <code>[paths]</code> section specify the alias that you want to use and set it equal to the server information.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[paths]
</span><span class='line'>animals = ssh://hg@bitbucket.org/{username}/animals-hg
</span><span class='line'>books = ssh://hg@bitbucket.org/{username}/books-hg</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done you can just use the alias when pushing. So for example when you&rsquo;re pushing to the <code>animals</code> repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg push animals</span></code></pre></td></tr></table></div></figure>


<h5>Pulling changes</h5>

<p>If you want to pull in the changes from a remote server execute the <code>hg pull</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg pull ssh://hg@bitbucket.org/{username}/animals-hg</span></code></pre></td></tr></table></div></figure>


<p>Note that unlike git the <code>hg pull</code> command won&rsquo;t automatically update your working directory. You will need to execute <code>hg update</code> followed by your current branch name in order to update your working directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg update {current branch name}</span></code></pre></td></tr></table></div></figure>


<p>You can also use the aliases under the paths section that you specified earlier under the <code>.hgrc</code> file to pull the latest changes from. So if you want to pull from <code>ssh://hg@bitbucket.org/{username}/animals-hg</code> you would just use <code>hg pull animals</code> instead of the full path to the repository.</p>

<h5>Resources for learning mercurial</h5>

<ul>
<li><a href="http://hginit.com/">HG Init</a></li>
<li><a href="https://wiki.alliedmods.net/Mercurial_Tutorial">Mercurial Tutorial</a></li>
<li><a href="http://hgbook.red-bean.com/read/">Mercurial: The Definitive Guide</a></li>
</ul>


<h4>SVN</h4>

<p>Subversion is an open-source version control system which allows you to manage files and directories and changes made to them. The main difference of SVN with Git and Mercurial is that it is a centralized version control system. This means that the people working on a project can only commit their changes to a single central repository.</p>

<h5>Installing SVN</h5>

<p>You can visit the <a href="http://subversion.apache.org/packages.html">packages</a> page and follow the installation instructions for your operating system.</p>

<p>For Ubuntu and other debian-based operating system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install subversion</span></code></pre></td></tr></table></div></figure>


<p>For Windows users lots of people recommends using <a href="http://tortoisesvn.net/downloads.html">tortoise svn</a> but that&rsquo;s a GUI tool for SVN. I recommend using the command line before using a GUI so that you can understand the concepts easily. But if you want to try that out the <a href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/index.html">tortoise svn documentation</a> and this <a href="http://codetunnel.com/tortoisesvn-basics-tutorial/">tortoise svn basics tutorial</a> is a good place to start learning. But if you want to learn the command line way of doing things then you can download the <a href="http://www.collab.net/downloads/subversion">Subversion 1.8.8 installer</a> and install it on your system.</p>

<h5>Setting up a central server</h5>

<p>Unlike Git and Mercurial where a central server or repository is optional with SVN we have to setup a central server where we make our commits. Luckily there&rsquo;s <a href="https://code.google.com/">Google Code</a>, a free project hosting platform by Google.</p>

<p>First thing that you need to do is to <a href="https://code.google.com/hosting/createProject">create a new project</a>. Just supply dummy details such as the one below:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/google-code.png" alt="create svn project on google code" /></p>

<p>Once you&rsquo;re done setting up a new project. Go to the project page to get the actual URL of the central repository. For the project that we just created it will look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://testingsubversionsvn.googlecode.com/svn/trunk/ testingsubversionsvn</span></code></pre></td></tr></table></div></figure>


<p>Do note that google only allows unique names for projects. So you have to pick out a unique name for the test project that you create since the one above can no longer be used.</p>

<p>To get the changes from the repository you use the <code>svn checkout</code> command followed by the URL of the central repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn checkout https://testingsubversionsvn.googlecode.com/svn/trunk/ testingsubversionsvn --username {your email}@{provider}.com</span></code></pre></td></tr></table></div></figure>


<p>The command above will create a <code>testingsubversionsvn</code> folder in your current working directory. That will be your working directory so you have to <code>cd</code> on it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd testingsubversionsvn</span></code></pre></td></tr></table></div></figure>


<h5>Adding files</h5>

<p>Just like with git and mercurial you also have to explicitly let svn know what specific files to track. You can do that with the <code>svn add</code> command. So for example if you created <code>file-a.txt</code> on your project directory and you want svn to track changes to it. You simply do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn add file-a.txt</span></code></pre></td></tr></table></div></figure>


<h5>Commiting changes to the central repo</h5>

<p>This is where things gets different. With git and mercurial you can commit changes into your own copy of the repository and just &lsquo;push&rsquo; them later on to the central repository. With svn you have to commit your changes to just the central repository. So you need to be connected to the internet if you want to commit your changes if your central repository is somewhere in the cloud.
To commit changes you can use the <code>svn commit</code> command followed by the name of the file and then the commit message specified by using the <code>-m</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn commit file-a.txt -m "add file-a.txt"</span></code></pre></td></tr></table></div></figure>


<p>If you are commiting to the google code project that we created earlier you will have to supply your username and the password generated by google. The username is basically the value that you supplied to the <code>--username</code> option when you pulled in the contents of the central repository earlier. By default its the gmail email address that you used when you created the a project at google code but with its first letter capitalized.
The password can be seen by clicking on the &lsquo;source&rsquo; tab > &lsquo;checkout&rsquo; then click the googlecode.com link.</p>

<h5>Pulling changes from the central repo</h5>

<p>To pull in changes from the central repository the <code>svn update</code> command is used. This would update your current working directory of all the changes from the central repo.</p>

<h5>Getting repo status</h5>

<p>You can get the status of a repo by using the <code>svn status</code> command. Note that the convention used by svn is the same with that of mercurial:</p>

<ul>
<li><code>M</code> &ndash; modified files</li>
<li><code>?</code> &ndash; untracked files</li>
<li><code>A</code> &ndash; tracked files</li>
<li><code>!</code> &ndash; missing files</li>
</ul>


<h5>Diffing in SVN</h5>

<p>To get a report on what has changed on a file use the <code>svn diff</code> command followed by the name of the file that you want to diff:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn diff file-b.txt</span></code></pre></td></tr></table></div></figure>


<p>This will give a result similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-03-a-whirlwind-tour-of-web-developer-tools-source-control/svn-diffing.png" alt="svn diffing" /></p>

<p>As you can see there&rsquo;s nothing new here. The conventions used are the same. So the <code>+</code> symbol is added as a prefix on lines which has been added since the last commit and <code>-</code> symbol is added as a prefix on lines which has been removed since the last commit. The only additional thing that we get is the revision number. This indicates the current revision number in the working directory. This means that as you modify different files the revision number will keep on increasing.</p>

<h5>Resources for learning SVN</h5>

<ul>
<li><a href="http://svnbook.red-bean.com/en/1.7/">SVN Book</a></li>
<li><a href="http://codetunnel.com/tortoisesvn-basics-tutorial/">Tortoise SVN Basics</a></li>
</ul>


<h4>Database Version Control</h4>

<p>Lastly there&rsquo;s version control for database. Its not just source code and other project assets that needs version control. The database used by your project is also updated from time to time to reflect the ever changing project requirements. In this section I&rsquo;m going to walk you through DBV, which is a database version control system for MySQL.</p>

<h5>DBV</h5>

<p>DBV is a database version control system written in PHP for MySQL database. I have written about it in a recent Sitepoint article: <a href="www.sitepoint.com/database-versioning-dbv/">database versioning with DBV</a> so be sure to check it out if you&rsquo;re interested.</p>

<h5>Other Database Version Control Systems</h5>

<ul>
<li><a href="http://www.red-gate.com/products/sql-development/sql-source-control/">SQL Source Control</a> -for MS SQL database</li>
<li><a href="http://www.liquibase.org/">Liquibase</a> &ndash; supports many database servers (MySQL, PostgreSQL, Oracle, Sql Server)</li>
<li><a href="https://github.com/flyway/flyway">Flyway</a> &ndash; for Java projects</li>
<li><a href="http://guides.rubyonrails.org/migrations.html">Active Record Migrations</a> &ndash; for rails projects</li>
<li><a href="http://off-scale.com/">Off-scale</a> &ndash; for MySQL database</li>
<li><a href="http://www.doctrine-project.org/projects/migrations.html">Doctrine Migrations</a> &ndash; for PHP projects</li>
</ul>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this blog post you&rsquo;ve learned some of the basics of version control systems and how you can use them in your daily development workflow. Version control systems is an invaluable tool to keep in your web development toolset. It allows you to not only keep track of the changes to your projects source code but also to easily collaborate easily with other developers in your team.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.smashingmagazine.com/2008/09/18/the-top-7-open-source-version-control-systems/">7 Version Control Systems Reviewed</a></li>
<li><a href="http://www.troyhunt.com/2011/05/10-commandments-of-good-source-control.html">The 10 commandments of good Source control management</a></li>
<li><a href="https://homes.cs.washington.edu/~mernst/advice/version-control.html">Version Control Concepts and Best Practices</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A Successful Git Branching Model</a></li>
<li><a href="http://www.ericsink.com/scm/source_control.html">Source Control How To</a></li>
<li><a href="http://betterexplained.com/articles/a-visual-guide-to-version-control">A Visual Guide to Version Control</a></li>
<li><a href="http://www.nimkar.net/index.php/9-release-management/3-database-versioning-the-ignored-aspect-of-version-control">Database Versioning: the ignored aspect of version control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Package Managers]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers/"/>
    <updated>2014-03-30T02:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers</id>
    <content type="html"><![CDATA[<p>In this part of the series I&rsquo;ll walk you through package managers. I believe the definition available at <a href="http://en.wikipedia.org/wiki/Package_management_system">Wikipedia</a> really gives a good overview on what package managers are:</p>

<blockquote><p>In software, a package management system, also called package manager, is a collection of software tools to automate the process of installing, upgrading, configuring, and removing software packages for a computer&#8217;s operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites.</p></blockquote>


<p>In simple terms package managers make it easy to install and modify software. In this blog post we&rsquo;ll be walking through some of the package managers available for Linux, Mac and Windows. And also package managers for easily installing front-end dependencies like jQuery or Twitter Bootstrap.</p>

<!-- more -->


<h4>Advanced Package Tool</h4>

<p>First on the list is the Advanced Package Tool. It is the package manager used in Ubuntu and other Debian based Linux Distributions. You can use it to install new software, upgrade existing software or updating the package list index.</p>

<h5>Searching for Packages</h5>

<p>You can search for packages using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-cache search package_name</span></code></pre></td></tr></table></div></figure>


<p>The <code>package_name</code> here doesn&rsquo;t have to be exact as the package manager itself will list out all possible matches and not exact one&rsquo;s.  So for example if you&rsquo;re trying to install filezilla:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/apt-cache-searchfilezilla.png" alt="apt-cache search" /></p>

<p>An alternative for doing a search is directly addressing a specific package from the terminal. So if you want to use install <code>php</code> you simply execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php</span></code></pre></td></tr></table></div></figure>


<p>If the package which adds this specific command to your system path is not installed yet. Apt will make a suggestion on which package to install along with the command on how to install it.</p>

<h5>Installing Packages</h5>

<p>To install a package all you have to do is execute <code>sudo apt-get install</code> followed by the name of the package that you want to install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install filezilla</span></code></pre></td></tr></table></div></figure>


<h5>List Package Dependencies</h5>

<p>Dependencies are the packages that needs to be installed before you can use the package that you want to install. These are installed by default so you won&rsquo;t really need to install them manually. If you want to know the dependencies of a specific package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-cache depends package_name</span></code></pre></td></tr></table></div></figure>


<h5>Removing Packages</h5>

<p>To remove installed packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get remove filezilla</span></code></pre></td></tr></table></div></figure>


<p>If you also want to remove the configuration files for a specific package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get remove --purge package_name</span></code></pre></td></tr></table></div></figure>


<h5>Updating Package List</h5>

<p>To download the package lists from the repositories and updates those to get information on the most recent versions of packages and their dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<h5>Upgrading Installed Packages</h5>

<p>To upgrade all existing packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get upgrade</span></code></pre></td></tr></table></div></figure>


<p>To upgrade a specific package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get upgrade package_name</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will list out all the available upgrades to the package. Just select <code>y</code> to confirm the installation of the upgrades when its being asked.</p>

<h5>Alternatives</h5>

<p>If you are using a Linux distribution that is not Debian based. You might want to use the following:</p>

<ul>
<li>zypper</li>
<li>yum</li>
<li>urpmi</li>
<li>rpm</li>
<li>dpkg</li>
</ul>


<p>They basically have the same idea with <code>apt</code>. And most of them even have almost the same commands in order to accomplish something. All you have to do is substitute. So for example if you have <code>yum</code> installed on your system and you want to install filezilla, you simply use the <code>yum install</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install filezilla</span></code></pre></td></tr></table></div></figure>


<h4>Chocolatey</h4>

<p>Chocolatey is a package manager for Windows. Its pretty much the equivalent of <code>apt-get</code> in Windows.</p>

<p>To install chocolatey, open up the command line and execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin</span></code></pre></td></tr></table></div></figure>


<p>What this does is to download the chocolatey installer and copies it into the Windows path so it can be called from anywhere.</p>

<p>Here&rsquo;s a list of all the available <a href="https://chocolatey.org/packages">chocolatey packages</a>.
As you can see, chocolatey is built with programmers in mind so there are packages for easily installing git, nodejs, ruby, python, phantomjs, vim and any other developer tool that you can think of. For your convenience, I&rsquo;ve compiled some development tools and their corresponding install command below:</p>

<p><strong>Sublime Text 2</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst sublimetext2</span></code></pre></td></tr></table></div></figure>


<p><strong>Fiddler</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst fiddler</span></code></pre></td></tr></table></div></figure>


<p><strong>Node JS</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst nodejs</span></code></pre></td></tr></table></div></figure>


<p><strong>Console2</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst Console2</span></code></pre></td></tr></table></div></figure>


<p><strong>Putty</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst putty</span></code></pre></td></tr></table></div></figure>


<p><strong>Git</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst git.install</span></code></pre></td></tr></table></div></figure>


<p><strong>Ruby</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst ruby</span></code></pre></td></tr></table></div></figure>


<p><strong>Python</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst python</span></code></pre></td></tr></table></div></figure>


<p><strong>Vim</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst vim</span></code></pre></td></tr></table></div></figure>


<p><strong>Mercurial</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst hg</span></code></pre></td></tr></table></div></figure>


<p><strong>Curl</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst curl</span></code></pre></td></tr></table></div></figure>


<p><strong>Wget</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst Wget</span></code></pre></td></tr></table></div></figure>


<p><strong>Yeoman</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst Yeoman</span></code></pre></td></tr></table></div></figure>


<p><strong>Easy Install</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst easy.install</span></code></pre></td></tr></table></div></figure>


<p><strong>Cygwin</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst Cygwin</span></code></pre></td></tr></table></div></figure>


<p><strong>Expresso</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst expresso</span></code></pre></td></tr></table></div></figure>


<p><strong>Vagrant</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst vagrant</span></code></pre></td></tr></table></div></figure>


<p><strong>MySQL</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst mysql</span></code></pre></td></tr></table></div></figure>


<p><strong>PHP</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst php</span></code></pre></td></tr></table></div></figure>


<p><strong>Everything</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst Everything</span></code></pre></td></tr></table></div></figure>


<h4>Homebrew</h4>

<p>Homebrew is a package manager for Mac OS. You can install it by executing the following command from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>Note that the command above uses ruby. Ruby is already pre-installed on Mac OS so you can just execute it without installing Ruby.</p>

<p>Once homebrew is installed you can then start installing packages by using the <code>brew</code> command. So for example if you want to install git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install git</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">list of homebrew packages</a> that you can install. Note that you will have to omit the <code>.rb</code> extension. So when installing the <code>wget.rb</code> package you only have to execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install wget</span></code></pre></td></tr></table></div></figure>


<h4>NPM</h4>

<p>NPM is the package manager that comes with Node. Its commonly used for installing JavaScript tools that runs on the command line such as Grunt, Bower and Yeoman. Or JavaScript libraries or frameworks that you can use on your project such as Express, Underscore and Socket.IO.</p>

<h5>Installing Node</h5>

<p>Like I said earlier NPM comes with Node so you have to install Node before you can use NPM.
The first choice for installing Node would be to <a href="http://nodejs.org/download/">download the installer</a> that was built for the operating system that you&rsquo;re using. If that doesn&rsquo;t work you can try any of the methods below:</p>

<p>In Linux you can install Node from the terminal by executing the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-software-properties python g++ make
</span><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<p>For Windows, you can install <a href="https://chocolatey.org/">chocolatey</a> then install Node by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst nodejs</span></code></pre></td></tr></table></div></figure>


<p>For Mac OS, you install <a href="http://brew.sh/">homebrew</a> then install Node by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node</span></code></pre></td></tr></table></div></figure>


<p>If all else fails, be sure to do a google search on each error that pops out and follow through any solution that you might find.</p>

<h5>Installing NVM</h5>

<p>Another option would be to install Node using NVM (Node Version Manager). A bash script that allows you to install and manage multiple versions of Node. Note that the following method requires Git to be installed, so if you don&rsquo;t have it already installed on your machine you can download the available installers from the <a href="http://git-scm.com/downloads">Git Download Page</a>. After downloading check out the <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">guide on how to install git</a>.</p>

<p>Going back to installing nvm. You can do that by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>The command above copies nvm binaries into your system path so you can just call <code>nvm</code> from any directory after the installation is done.</p>

<p>You can install any version of Node by using the <code>nvm install</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install 0.10</span></code></pre></td></tr></table></div></figure>


<p>Once the installation is done you can then tell nvm to use the specific version that you installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm use 0.10</span></code></pre></td></tr></table></div></figure>


<h5>Using NPM</h5>

<p><strong>Installing Packages Locally</strong></p>

<p>Once that&rsquo;s done you can now install packages via npm by using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install package_name</span></code></pre></td></tr></table></div></figure>


<p>This installs the package under the <code>node_modules</code> folder in your working directory.</p>

<p>You can install packages using the above method but the preferred method is to create a <code>package.json</code> file in which you specify all the dependencies of your current project. This allows you to easily install and manage the dependencies of your project using only the <code>npm install</code> command. Here&rsquo;s an example <code>package.json</code> file which depends on <code>express</code> and <code>jade</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "super-awesome-app",
</span><span class='line'>    "version": "0.0.1",
</span><span class='line'>    "private": true,
</span><span class='line'>    "dependencies": {
</span><span class='line'>      "express": "&gt;=3.0.0",
</span><span class='line'>      "jade": "&gt;=1.1.5"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><code>name</code> &ndash; the name of your app, note that this should be a machine friendly name.</li>
<li><code>version</code> &ndash; the version of your app</li>
<li><code>private</code> &ndash; supplying a value of <code>true</code> tells npm that your app is private, therefore it shouldn&rsquo;t be listed in the npm registry.</li>
<li><code>dependencies</code> &ndash; an object containing the name and version of packages in which your app depends. You can use the <a href="https://www.npmjs.org/">npm website</a> to search for packages that you can install.</li>
</ul>


<p>Once you have a valid <code>package.json</code> in the root of your project directory. You can just execute <code>npm install</code> from the root of your project directory. This will install all your dependencies under the <code>node_modules</code> folder:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/node-modules.png" alt="node modules" /></p>

<p>The packages will be installed in their own folders. There&rsquo;s also the <code>.bin</code> folder where the executable file for each packages can be called.</p>

<p><strong>Installing Packages Globally</strong></p>

<p>If you want to install a specific package globally, simply add the <code>-g</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g package_name</span></code></pre></td></tr></table></div></figure>


<p>This will install the package under the <code>/usr/local/lib/node_modules</code> directory or the <code>node_modules</code> directory of wherever node is installed.</p>

<p><strong>Searching for Packages</strong></p>

<p>You can also search for packages using the <code>npm search</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm search grunt</span></code></pre></td></tr></table></div></figure>


<p>This might take a while the first time you execute it since it will be downloading an index of all the packages that are available in the npm repository. But if you&rsquo;re on Google Fiber there&rsquo;s no problem.</p>

<p><strong>Uninstalling Packages</strong></p>

<p>You can uninstall packages using the <code>uninstall</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm uninstall moment</span></code></pre></td></tr></table></div></figure>


<p>Be sure to add the <code>-g</code> option if you installed the package globally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm uninstall grunt -g</span></code></pre></td></tr></table></div></figure>


<h4>Bower</h4>

<p>Bower is the package manager for front-end dependencies of your app. Its specifically useful for easily installing libraries such as jQuery or Twitter Bootstrap. It is loader agnostic, which means that you can use any module loader such as AMD or CommonJS.</p>

<p>Bower is available from npm so you can install it via nvm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g bower</span></code></pre></td></tr></table></div></figure>


<p>A global install is recommended for bower so that you can use it from any project.</p>

<h5>Installing Packages</h5>

<p>Once bower is installed you can then start installing packages in your working directory by using the <code>bower install</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install package_name</span></code></pre></td></tr></table></div></figure>


<p>The command above will install the latest version by default. If you want to install a specific version you do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install package_name#version_number</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not sure about the name of a specific package that you&rsquo;re trying to install you can visit the <a href="http://bower.io/search/">bower website</a> and search for it.</p>

<p>The command above will install the package under the <code>bower_components</code> folder by default. But if you want it to install somewhere else you can do so by creating a <code>.bowerrc</code> file. So for example if you want bower to install your apps dependencies under the <code>libraries</code> folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "directory": "libraries"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Again there&rsquo;s more than one way to go with things. With bower you can also install your apps dependencies by creating a <code>bower.json</code> file where you will specify its dependencies. Note that this is very similar to that of the <code>package.json</code> file that we used earlier with npm, the only difference is that were requiring front-end dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "my-super-awesome-app",
</span><span class='line'>  "version": "0.0.1",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "bootstrap": "~3.1.1",
</span><span class='line'>    "moment": "~2.0.0",
</span><span class='line'>    "jquery": "~1.10.2"
</span><span class='line'>  },
</span><span class='line'>  "private": true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>Listing Installed Packages</h5>

<p>You can also list out packages that are currently installed by using the <code>list</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower list</span></code></pre></td></tr></table></div></figure>


<p>This will list out all the packages and their dependencies:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/bower-packages.png" alt="bower list" /></p>

<p>Inspecting the screenshot above you can see that bootstrap depends on jquery.
And sure enough when we open up the <code>bower.json</code> file inside the <code>bootstrap</code> directory we can see that <code>jquery</code> is listed under the <code>dependencies</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "bootstrap",
</span><span class='line'>  "version": "3.1.1",
</span><span class='line'>  "main": [
</span><span class='line'>    "./dist/css/bootstrap.css",
</span><span class='line'>    "./dist/js/bootstrap.js",
</span><span class='line'>    "./dist/fonts/glyphicons-halflings-regular.eot",
</span><span class='line'>    "./dist/fonts/glyphicons-halflings-regular.svg",
</span><span class='line'>    "./dist/fonts/glyphicons-halflings-regular.ttf",
</span><span class='line'>    "./dist/fonts/glyphicons-halflings-regular.woff"
</span><span class='line'>  ],
</span><span class='line'>  "ignore": [
</span><span class='line'>    "**/.*",
</span><span class='line'>    "_config.yml",
</span><span class='line'>    "CNAME",
</span><span class='line'>    "composer.json",
</span><span class='line'>    "CONTRIBUTING.md",
</span><span class='line'>    "docs",
</span><span class='line'>    "js/tests"
</span><span class='line'>  ],
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "jquery": "&gt;= 1.9.0"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Bower automatically installs the dependencies of each of your dependencies. Pretty neat!
Since we have specified <code>jquery</code> as a dependency under the <code>bower.json</code> file of our project bower already knows that it should install that version of jquery (<code>1.10.2</code>) instead of the one specified under the <code>bower.json</code> file under the <code>bootstrap</code> directory.</p>

<h5>Updating Packages</h5>

<p>You can also update installed packages using the <code>update</code> command. Be sure to update the <code>bower.json</code> file to use a later version of your apps dependencies and then execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower update</span></code></pre></td></tr></table></div></figure>


<p>This will update all the installed packages in your project directory. You can also update specific packages by specifying the package name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower update bootstrap</span></code></pre></td></tr></table></div></figure>


<h5>Uninstalling Packages</h5>

<p>You can also uninstall packages by using the <code>uninstall</code> command. This can take one or more packages. In the example below were uninstalling both <code>bootstrap</code> and <code>moment</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower uninstall bootstrap moment</span></code></pre></td></tr></table></div></figure>


<h4>Jam</h4>

<p>Another front-end dependency package manager is Jam. What&rsquo;s nice about Jam is that it was built with asynchronous module loading in mind. It uses AMD (Asynchronous Module Definition) for loading up the dependencies of your app asynchronously.</p>

<p>Just like Bower you can install Jam using npm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g jam</span></code></pre></td></tr></table></div></figure>


<p><strong>Installing Packages</strong></p>

<p>You can install packages using the <code>install</code> command followed by the name of the package that you want to install:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jam install jquery</span></code></pre></td></tr></table></div></figure>


<p>This will install your dependencies on the <code>jam</code> directory. Notice that a <code>require.config.js</code> and <code>require.js</code> file is also created. This is because Jam uses <a href="http://requirejs.org/">requireJS</a> to asynchronously load your dependencies. This means that you can load your dependencies by requiring them instead of using script tags and specifying the source.</p>

<p>The <code>require.js</code> file created by Jam is customized based on the packages that you have installed on your project directory. You&rsquo;ll have to include it first before trying to require your dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="jam/require.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>  require(['jquery'], function ($) {
</span><span class='line'>    $('body').text('Zup world!');
</span><span class='line'>  });
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Do note that installing a package using the method above isn&rsquo;t recommended since you will most likely have to install other packages as your project grows. The recommended method is creating a <code>package.json</code> file where you specify all your apps dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "jam": {
</span><span class='line'>    "packageDir": "public/vendor",
</span><span class='line'>    "baseUrl": "public",
</span><span class='line'>    "dependencies": {
</span><span class='line'>      "bootstrap" : "~2.3.2",
</span><span class='line'>      "jquery" : "~2.0.0",
</span><span class='line'>      "moment" : "~1.7.2",
</span><span class='line'>        "underscore" : "~1.3.3"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>packageDir</code> is where packages are installed.
The <code>baseUrl</code> is the directory in which to make relative package paths from.
The <code>dependencies</code> is where you specify the name and version of a package to install.
Once you&rsquo;re ready to install just execute the <code>jam install</code> command in the root of your project directory.</p>

<p>If at a later time you decide to add another dependency you can just add it to the <code>package.json</code> file. In the example below were adding <code>knockout</code> version <code>2.2.0</code> as a dependency:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "jam": {
</span><span class='line'>    "packageDir": "public/vendor",
</span><span class='line'>    "baseUrl": "public",
</span><span class='line'>    "dependencies": {
</span><span class='line'>      "bootstrap" : "~2.3.2",
</span><span class='line'>      "jquery" : "~2.0.0",
</span><span class='line'>      "moment" : "~1.7.2",
</span><span class='line'>  "underscore" : "~1.3.3",
</span><span class='line'>        "knockout" : "~2.2.0"
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added the new dependency simply execute the <code>jam install</code> command again. Jam will also update the <code>require.js</code> and <code>require.config.js</code> file to include your new dependency.</p>

<p><strong>Require.js File</strong></p>

<p>Inspecting the <code>require.js</code> file we can see that the following code has been added near the bottom of the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var jam = {
</span><span class='line'>    "packages": [
</span><span class='line'>        {
</span><span class='line'>            "name": "jquery",
</span><span class='line'>            "location": "jam/jquery",
</span><span class='line'>            "main": "dist/jquery.js"
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "version": "0.2.17",
</span><span class='line'>    "shim": {}
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>if (typeof require !== "undefined" && require.config) {
</span><span class='line'>    require.config({
</span><span class='line'>    "packages": [
</span><span class='line'>        {
</span><span class='line'>            "name": "jquery",
</span><span class='line'>            "location": "jam/jquery",
</span><span class='line'>            "main": "dist/jquery.js"
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "shim": {}
</span><span class='line'>});
</span><span class='line'>}
</span><span class='line'>else {
</span><span class='line'>    var require = {
</span><span class='line'>    "packages": [
</span><span class='line'>        {
</span><span class='line'>            "name": "jquery",
</span><span class='line'>            "location": "jam/jquery",
</span><span class='line'>            "main": "dist/jquery.js"
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "shim": {}
</span><span class='line'>};
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>if (typeof exports !== "undefined" && typeof module !== "undefined") {
</span><span class='line'>    module.exports = jam;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see it contains the name, location and the main file of the packages that you installed. So that when you require them later on on your script it knows exactly where to find them and which file to load. If you&rsquo;re new to the concept of module loading be sure to check out the following resources:</p>

<ul>
<li><a href="http://www.sitepoint.com/understanding-requirejs-for-effective-javascript-module-loading/">Understanding RequireJS for Effective Module Loading</a></li>
<li><a href="http://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a></li>
</ul>


<p><strong>Searching for Packages</strong></p>

<p>You can search for jam packages using the <code>search</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jam search package_name</span></code></pre></td></tr></table></div></figure>


<p>You can also use the <a href="http://jamjs.org/packages/#/">jam packages page</a> to look for packages to install.</p>

<p><strong>Uninstalling Packages</strong></p>

<p>You can uninstall packages by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jam remove jquery</span></code></pre></td></tr></table></div></figure>


<p>This will also update the <code>require.config.js</code> and <code>require.js</code> file. Note that this won&rsquo;t update your <code>package.json</code> file so you have to remove the specific dependency in that file as well if you don&rsquo;t want it to get installed when you execute the <code>jam install</code> command later on. Also note that if the specific package that you are trying to remove is a dependency of another package jam won&rsquo;t remove it. Here&rsquo;s an example of removing a package in which another package is dependent on:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/remove-error.png" alt="jam remove error" /></p>

<p><strong>Compiling Scripts</strong></p>

<p>Jam also allows you to compile your script and its dependencies using the <code>compile</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jam compile -i script -o main</span></code></pre></td></tr></table></div></figure>


<p>Breaking the command down, we used the <code>-i</code> option to specify the input file. The input file is basically the main JavaScript file used by our app. Here&rsquo;s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require(['jquery'], function ($) {
</span><span class='line'>  $('body').text('zup world!');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The <code>-o</code> is where we specify the output. By default jam saves the output file on the directory where the <code>compile</code> command is called.</p>

<p>The <code>compile</code> command assumes that you have a <code>package.json</code> file where you specified the <code>baseUrl</code>. In the <code>package.json</code> file that we used earlier the <code>baseUrl</code> is set to <code>public</code>. This means that jam will look into the <code>public</code> directory for the <code>script.js</code> file. Note that we didn&rsquo;t have to specify the extension (<code>.js</code>) in the example since jam already assumes that the extension is <code>.js</code>.</p>

<h4>Browserify</h4>

<p>Unlike npm, bower or jam browserify is not really considered a full-fledged package manager since it doesn&rsquo;t allow you to install or manage packages. However it allows you to write node.js-style modules in the front-end.</p>

<p>Browserify is also preffered to be installed globally since you can use it on multiple projects:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g browserify</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done installing you can then install the packages in which your app depends on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install jquery</span></code></pre></td></tr></table></div></figure>


<p>Then you can use the package that you just installed by requiring it into your main JavaScript file (<code>js/main.js</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var $ = require('jquery');
</span><span class='line'>$(function(){
</span><span class='line'>  $('body').text('zup world from browserify!');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Note that you won&rsquo;t be able to run this on the browser just yet. You first have to compile it using browserify. Execute the following command on the root of your apps directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>browserify js/main.js -o dist/js/main.js</span></code></pre></td></tr></table></div></figure>


<p>The command above assumes that you have your main JavaScript file inside the <code>js</code> directory which is under the root directory of your app. The <code>-o</code> option allows you to specify the output file. In this case the output file is under <code>dist/js/main.js</code>. This will be the file that you&rsquo;re going to link into the page where you plan to run the script (<code>index.html</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="dist/js/main.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>When you run this file in the browser you will see the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zup world from browserify!</span></code></pre></td></tr></table></div></figure>


<p>If you want to minify the output of browserify you can also install uglify js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g uglify-js</span></code></pre></td></tr></table></div></figure>


<p>Then pipe browserify&rsquo;s output to <code>uglify-js</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>browserify js/main.js | uglify-js &gt; dist/js/main.js</span></code></pre></td></tr></table></div></figure>


<p>Note that in the above command we didn&rsquo;t supply the <code>-o</code> option so that browserify will simply return the output as a string. We then piped it to the <code>uglify-js</code> command and specifying the output file from there.</p>

<p>Browserify is a good alternative to RequireJS for managing the front-end dependencies of your app.</p>

<h4>Component</h4>

<p>Lastly there&rsquo;s component, a package manager that allows you to write modular commonjs components.</p>

<p>To install component:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g component</span></code></pre></td></tr></table></div></figure>


<p><strong>Searching for Components</strong></p>

<p>You can then find a list of components that you can install from this <a href="https://github.com/component/component/wiki/Components">page</a>. Or use the <code>search</code> command to search for existing components that matches your query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>component search jquery</span></code></pre></td></tr></table></div></figure>


<p><strong>Installing a Component</strong></p>

<p>Writing an app using component requires a <code>component.json</code> file to be created in the root of the app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "component-tester",
</span><span class='line'>  "description": "testing component",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "component/datepicker": "*"
</span><span class='line'>  },
</span><span class='line'>  "main": "main.js",
</span><span class='line'>  "scripts": [
</span><span class='line'>    "main.js"
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>component.json</code> file looks similar to the <code>package.json</code> and <code>bower.json</code> file that we&rsquo;ve seen so far. Remember that the <code>name</code> should be a machine-friendly name. There&rsquo;s also a bit difference in the name of the dependencies. The convention used by component is <code>author/component</code> in order to avoid naming collisions. In the example above we only have one dependency which is the <code>component/datepicker</code>. This allows us to add a datepicker on text fields.
We also have to specify the main JavaScript file (<code>main.js</code>). There&rsquo;s also the <code>scripts</code> where we specify the other scripts that is used by the app. In this case we only have the main JavaScript file so its the only file that we put in.</p>

<p>Once you&rsquo;re done building the <code>component.json</code> file execute the <code>install</code> command to install your dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>component install</span></code></pre></td></tr></table></div></figure>


<p>This will install your dependencies under the <code>components</code> directory:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/components.png" alt="components directory" /></p>

<p>As you can see from the screenshot above component creates a bunch of folders under the components directory. When you open up the folders you will see that there&rsquo;s a <code>component.json</code> file in each of them. Here&rsquo;s the contents of the <code>component.json</code> file under the <code>component/aurora</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "aurora",
</span><span class='line'>  "repo": "component/aurora",
</span><span class='line'>  "description": "Aurora theme for Calendar, Popover, and Tip",
</span><span class='line'>  "version": "0.0.1",
</span><span class='line'>  "keywords": [
</span><span class='line'>    "aurora",
</span><span class='line'>    "theme",
</span><span class='line'>    "bundle"
</span><span class='line'>  ],
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "component/aurora-popover": "*",
</span><span class='line'>    "component/aurora-calendar": "*"
</span><span class='line'>  },
</span><span class='line'>  "development": {}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see it also specifies its on dependency. There&rsquo;s also an additional <code>repo</code> property, this is the Github repository in which the component is hosted. To access it from the browser all you have to do is prefix it with github.com/{repo}.</p>

<p>Checking out each of the dependencies you can see that they&rsquo;re also installed on your <code>components</code> directory each with their own assets (stylesheets, scripts and images).</p>

<p>And that is the philosophy behind component. Splitting up packages into multiple distinct modules. This encourages code-reuse. This means that you will be able to easily import and add various dependencies in your app. But only those that are really needed. This means that a component can comprise of many different components that represent a single module.</p>

<p>Going back to our example. In the <code>main.js</code> file put in the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var picker = require('datepicker');
</span><span class='line'>var el = document.querySelector('[name=date]');
</span><span class='line'>picker(el);</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What this does is requiring the <code>datepicker</code> component that we installed earlier and transforms all the elements which has a <code>name</code> of <code>date</code> into a date picker.</p>

<p>Once you&rsquo;re done with that execute the <code>build</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>component build</span></code></pre></td></tr></table></div></figure>


<p>This will tell component to build the components that you installed. In simple terms this brings in all the components together in a single file. One main file for each file type. By default component saves these files into the <code>build</code> directory of your app. So the main stylesheet will be named <code>build.css</code> and the main script file will be named <code>build.js</code>. You can then use it from any page in your app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>component test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;build/build.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;date&quot;</span> <span class="na">id=</span><span class="s">&quot;birthday&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Pick a date&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;build/build.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;component-tester&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the code above we&rsquo;re calling up what&rsquo;s in our main JavaScript file (<code>main.js</code>) by requiring it into the page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>require(&#39;component-tester&#39;);
</span></code></pre></td></tr></table></div></figure>


<p>The name here is basically the name that you used in your <code>component.json</code> file earlier.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this blog post we&rsquo;ve gone over some of the package managers that we can use to easily install and manage software. We&rsquo;ve also gone over some of the front-end package managers. We have barely scratch the surface in this blog post. The next step would be to find a way in which these package managers will fit into your current workflow. Or you can also look at how to automate the building of the final script so you won&rsquo;t have to manually build the dependencies together with the main script of your app.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer">Package Managers: An Introductory Guide For The Uninitiated Front-End Developer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zillow API]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api/"/>
    <updated>2014-03-20T14:01:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to have a quick look at the Zillow API. But before we move on with actually writing some code lets first define what Zillow is. Taken from the <a href="http://www.zillow.com/corp/About.htm">Zillow about page</a> itself:</p>

<blockquote><p>Zillow is a home and real estate marketplace dedicated to helping homeowners, home buyers, sellers, renters, real estate agents, mortgage professionals, landlords and property managers find and share vital information about homes, real estate, mortgages and home improvement.</p></blockquote>


<p>To sum it up Zillow is a place where you can find useful information on real estate properties that are up for sale or rent.</p>

<!-- more -->


<h4>Getting a Zillow Web Service ID</h4>

<p>In order to start making requests to the Zillow API you must first register an account with them. Registering with zillow is free, all you have to do is visit the <a href="http://www.zillow.com/">zillow homepage</a> and click on the join link. After that just enter all the information that is being asked. Once registered go to the <a href="http://www.zillow.com/webservice/Registration.htm">API registration page</a> and enter the necessary information:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-20-getting-started-with-zillow-api/api-signup.png" alt="zillow api registration" /></p>

<p>Just check the specific API that you will need for your project, agree to the terms of use then click on the submit button. Zillow will also ask about a sample URL where you will use the API, if you do not have a specific URL in mind you can just place <code>http://localhost</code> or some other URL which you can use for testing purposes.</p>

<p>Once that&rsquo;s done zillow will email you the API details. All you need here is the value for the Zillow Web Services Identification (ZWSID).</p>

<h4>GetSearchResults API</h4>

<p>Now that we have a zillow web service ID its time to test out some of the API methods that are available. First on the list is the <code>GetSearchResults API</code> which you can use to find real estate information for a specific address. Note that an address must be posted first by an owner or an agent in the <a href="http://www.zillow.com/for-sale-by-owner/">Zillow site</a> before it can be viewed.</p>

<p>The URL for requesting search results is <code>http://www.zillow.com/webservice/GetSearchResults.htm</code>.</p>

<p>It requires 3 url encoded arguments to be passed in:</p>

<ul>
<li><strong>zws-id</strong> &ndash; the zillow web service id</li>
<li><strong>address</strong> &ndash; the address of the property to search (e.g. 3799 S Las Vegas Blvd, Las Vegas, NV 89109, United States)</li>
<li><strong>citystatezip</strong> &ndash; the city + state combination or the zip code of the address that you specified in the <code>address</code> field.</li>
</ul>


<p>A successful request will return an XML file containing all the search results. Here&rsquo;s a JSON string representation of the XML file that will be returned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">request:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">address:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>      <span class="err">citystatezip:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="err">message:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">text:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>      <span class="err">code:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="err">response:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">results:</span> <span class="err">{</span>
</span><span class='line'>          <span class="err">result:</span> <span class="err">[</span>
</span><span class='line'>              <span class="err">{</span>
</span><span class='line'>                  <span class="err">zpid:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                  <span class="err">link:</span> <span class="err">{</span>
</span><span class='line'>                      <span class="err">homedetails:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">graphsanddata:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">comparables:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>                  <span class="err">address:</span> <span class="p">{</span>
</span><span class='line'>                      <span class="err">street:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">zipcode:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">city:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">state:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">latitude:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">longitude:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>                  <span class="err">zestimate:</span> <span class="p">{</span>
</span><span class='line'>                      <span class="err">amount:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">last-updated:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">oneWeekChange:</span> <span class="err">{</span>
</span><span class='line'>                          <span class="err">@attributes:</span> <span class="err">{</span>
</span><span class='line'>                              <span class="err">deprecated:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>                      <span class="err">},</span>
</span><span class='line'>                      <span class="err">valueChange:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                      <span class="err">valuationRange:</span> <span class="p">{</span>
</span><span class='line'>                          <span class="err">low:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                          <span class="err">high:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                      <span class="p">}</span><span class="err">,</span>
</span><span class='line'>                      <span class="err">percentile:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                  <span class="err">},</span>
</span><span class='line'>                  <span class="err">localRealEstate:</span> <span class="p">{</span>
</span><span class='line'>                      <span class="err">region:</span> <span class="err">{</span>
</span><span class='line'>                          <span class="err">@attributes:</span> <span class="err">{</span>
</span><span class='line'>                              <span class="err">id:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                              <span class="err">type:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                              <span class="err">name:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                          <span class="p">}</span><span class="err">,</span>
</span><span class='line'>                          <span class="err">links:</span> <span class="p">{</span>
</span><span class='line'>                              <span class="err">overview:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                              <span class="err">forSaleByOwner:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                              <span class="err">forSale:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>                      <span class="err">}</span>
</span><span class='line'>                  <span class="err">}</span>
</span><span class='line'>              <span class="err">}</span>
</span><span class='line'>          <span class="err">]</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And no the results doesn&rsquo;t exactly return empty strings for the values of each of the properties. I just did it that way so you can focus on the actual properties that are returned.</p>

<p>Here&rsquo;s an example PHP code that makes a request to the zillow API using <code>file_get_contents</code>. You can also use <code>curl</code> to have the benefit of error handling but to keep things simple lets stick with <code>file_get_contents</code> for this tutorial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$zillow_id</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span><span class="p">;</span> <span class="c1">//the zillow web service ID that you got from your email</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;address&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$citystate</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;citystate&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$address</span> <span class="o">=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$search</span><span class="p">);</span>
</span><span class='line'><span class="nv">$citystatezip</span> <span class="o">=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$citystate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s2">&quot;http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=</span><span class="si">$zillow_id</span><span class="s2">&amp;address=</span><span class="si">$address</span><span class="s2">&amp;citystatezip=</span><span class="si">$citystatezip</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the request is completed you can just access individual properties using the arrow notation. In the example below were accessing the <code>zpid</code> property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$data</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">results</span><span class="o">-&gt;</span><span class="na">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">zpid</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But what happens when we enter an address which doesn&rsquo;t exist in the zillow database? For that you can check the value for the <code>message.code</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$code</span> <span class="o">=</span> <span class="nv">$data</span><span class="o">-&gt;</span><span class="na">message</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This contains a 1-3 digit number. <code>0</code> basically means that the request was successful and that there are results that are returned. <code>507</code> or <code>508</code> means that there&rsquo;s no exact match for the inputted address. There are a bunch of other error codes which you can use so check out the messages and codes section in the <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">search results api page</a> for more information.</p>

<p>For more information regarding the search results API check out <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">this page</a></p>

<h4>GetZestimate API</h4>

<p>Another API Method that we can use is the <code>GetZestimate</code>. This returns information regarding the zestimate of a specific property. A Zestimate is Zillow&rsquo;s estimated market value, computed using a proprietary formula. You can use the <code>GetZestimate</code> method by making a request to this URL: <code>http://www.zillow.com/webservice/GetZestimate.htm</code>.</p>

<p>The <code>GetZestimate</code> method only requires 2 arguments: the <code>zws-id</code> and the <code>zpid</code>. Of this 2 arguments the <code>zpid</code> is of interest since we didn&rsquo;t use it in the previous method. The <code>zpid</code> is basically a unique ID assigned by zillow to a specific property.</p>

<p>If you might have noticed earlier the <code>SearchResults</code> method already returns some zestimate data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">zestimate:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">amount:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>    <span class="err">last-updated:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>    <span class="err">oneWeekChange:</span> <span class="err">{</span>
</span><span class='line'>        <span class="err">@attributes:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">deprecated:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="err">},</span>
</span><span class='line'>    <span class="err">valueChange:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>    <span class="err">valuationRange:</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">low:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>        <span class="err">high:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">percentile:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pretty much use this one if you don&rsquo;t need detailed information about a specific zestimate of a property. But if need more detailed information the <code>GetZestimate</code> method is the one that you need to use. Here&rsquo;s the JSON string representation of the result that it returns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">request:</span> <span class="err">{</span>
</span><span class='line'>        <span class="err">zpid:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">message:</span> <span class="p">{</span>
</span><span class='line'>       <span class="err">text:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>       <span class="err">code:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">response:</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">zpid:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>        <span class="err">links:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">homedetails:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">graphsanddata:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">mapthishome:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">comparables:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>        <span class="p">}</span><span class="err">,</span>
</span><span class='line'>        <span class="err">address:</span> <span class="p">{</span>
</span><span class='line'>            <span class="err">street:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">zipcode:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">city:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">state:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">latitude:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">longitude:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>        <span class="p">}</span><span class="err">,</span>
</span><span class='line'>        <span class="err">zestimate:</span> <span class="p">{</span>
</span><span class='line'>            <span class="err">amount:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">last-update:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">oneWeekChange:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">valueChange:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">valuationRange:</span> <span class="err">{</span>
</span><span class='line'>                <span class="err">low:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                <span class="err">high:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>            <span class="p">}</span><span class="err">,</span>
</span><span class='line'>            <span class="err">percentile:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>        <span class="err">},</span>
</span><span class='line'>        <span class="err">localRealEstate:</span> <span class="p">{</span>
</span><span class='line'>            <span class="err">region:</span> <span class="err">{</span>
</span><span class='line'>                <span class="err">links:</span> <span class="err">{</span>
</span><span class='line'>                    <span class="err">overview:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                    <span class="err">forSaleByOwner:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>                    <span class="err">forSale</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="err">}</span>
</span><span class='line'>        <span class="err">},</span>
</span><span class='line'>        <span class="err">regions:</span> <span class="p">{</span>
</span><span class='line'>            <span class="err">zipcode-id:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">city-id:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">county-id:</span> <span class="err">&#39;&#39;,</span>
</span><span class='line'>            <span class="err">state-id:</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The one caveat about the <code>GetZestimate</code> method is that it cannot be used without having information on the <code>zpid</code>. And you can only get the <code>zpid</code> with the <code>GetSearchResults</code> method so the <code>GetZestimate</code> method is always used in tandem with the <code>GetSearchResults</code> method unless you&rsquo;re saving <code>zpid</code>&rsquo;s in your database.</p>

<p>If you want to know more about the <code>GetZestimate</code> method check out the <a href="http://www.zillow.com/howto/api/GetZestimate.htm">documentation</a></p>

<h4>GetChart</h4>

<p>The last method that I&rsquo;m going to talk about in this tutorial is the <code>GetChart</code> method. You can use the <code>GetChart</code> method to get a URL to an image which shows the historical zestimates for a specific property. You can make a request to this method by using this URL: <code>http://www.zillow.com/webservice/GetChart.htm</code></p>

<p>The <code>GetChart</code> method requires the following argument to be passed in:</p>

<ul>
<li><code>zws-id</code></li>
<li><code>zpid</code> &ndash; the unique ID assigned by zillow to the specific property</li>
<li><code>unit-type</code> &ndash; you can either use <code>dollar</code> or <code>percent</code> as the value. This is basically use for specifying whether to display the dollar changed or the percent changed of a specific property</li>
<li><code>height</code> &ndash; the height of the image to return in pixels</li>
<li><code>width</code> &ndash; the width of the image to return in pixels</li>
</ul>


<p>Here&rsquo;s a sample image that this method returns:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-03-20-getting-started-with-zillow-api/historical-zestimate.gif" alt="historical zestimate" /></p>

<p>You can pretty much guess the <code>unit-type</code> that was used for this image. Yep that&rsquo;s right its in dollars. So the image above is basically showing that the value for the specific property went up from 96,000 dollars to 104,000 dollars over a period of about one year. You can actually specify this value by passing in the <code>chartDuration</code> argument. Then you can have values like <code>1year</code>, <code>2years</code> or <code>10years</code>. If you don&rsquo;t specify anything it defaults to &lsquo;1year&rsquo;.</p>

<p>For more information regarding the <code>GetChart</code> method check out its <a href="http://www.zillow.com/howto/api/GetChart.htm">documentation</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! Like with any other getting started guide we&rsquo;ve only scratched the surface with this tutorial. There&rsquo;s a lot more that you can do with Zillow API so be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.zillow.com/howto/api/APIOverview.htm">Zillow API Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a dark matter developer must be nice]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice/"/>
    <updated>2014-03-12T11:45:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice</id>
    <content type="html"><![CDATA[<p>It must be nice to be a dark matter developer. But before I go ahead and start going through why its nice to be a dark matter developer let&rsquo;s make sure that were all on the same boat. First what are dark matter developers?</p>

<ul>
<li>they don&rsquo;t read blogs</li>
<li>they don&rsquo;t write blogs</li>
<li>they don&rsquo;t follow Paul Irish on Twitter</li>
<li>they don&rsquo;t release code on Github</li>
<li>they only learn what their boss told them to learn</li>
<li>they don&rsquo;t know what hacker news is</li>
<li>they don&rsquo;t discuss tech outside of work</li>
<li>they don&rsquo;t go to conferences</li>
<li>they only use stackoverflow to seek answers</li>
<li>they don&rsquo;t listen to podcasts</li>
<li>they don&rsquo;t need to update themselves of the cutting edge</li>
<li>they don&rsquo;t experiment on different technologies</li>
<li>they don&rsquo;t learn on their free time</li>
<li>they don&rsquo;t subscribe to newsletters</li>
</ul>


<p>I&rsquo;m not saying that this is true for all dark matter developers. But most of the items above are definitely true for some developers even if they don&rsquo;t necessarily consider themselves DMD&rsquo;s.</p>

<!-- more -->


<h4>Ok so why?</h4>

<ul>
<li>they have lots of time in their hands for the really important things in life (family, friends, hobbies, etc.)</li>
<li>they don&rsquo;t need to filter through all the noise in tech (twitter news feed, newsletters, podcasts etc)</li>
<li>they get their job done</li>
</ul>


<p>Let me dive into it a little bit.</p>

<h4>They have lots of time in their hands</h4>

<p>DMD&rsquo;s are free to use all of their free time with the things they want to do. They can just indulge in their hobbies, spend some quality time with their families or just watch season 1-9 of Supernatural or God of Thrones with no care in the world. DMD&rsquo;s also don&rsquo;t need to care about the time they spend doing these activities so they can totally immerse themselves and enjoy their time. They don&rsquo;t need to worry whether they are already outdated. To them programming is just a job. And surely they don&rsquo;t want to code outside their job. I believe its a good thing. Because they can spend all their free time without ever worrying if they will get left behind.</p>

<h4>They don&rsquo;t need to filter through all the noise in tech</h4>

<p>DMD&rsquo;s don&rsquo;t care about all the crap that&rsquo;s happening in the tech scene. They don&rsquo;t know what Shoptalk Show, Ruby Rogues or JavaScript Jabber is. They don&rsquo;t know Paul Irish, Ilya Grigorik, Addy Osmani, Steve Souders, Nicole Sullivan, Peter Cooper, or Jeffrey Way is. They haven&rsquo;t subscribed to JavaScript Weekly, HTML5 Weekly, Web Design Weekly or StatusCode. They only know what they need to know or what they need to know in order to get their job done. They&rsquo;re only consuming the minimal information needed to survive as a developer. Again I believe its a good thing. Sometimes most of the information from these sources are really unimportant.</p>

<h4>They get their job done</h4>

<p>Lastly they get their job done and they do it well. Sure they might still be using Dreamweaver (or maybe notepad) in building websites but they get the job done. They might be cranking out procedural code here and there but they&rsquo;re getting the job done. They might not know what TDD or BDD is. They might not know what linting or static code analysis is but they get the job done. They might not be using the tools (Sublime Test, Chrome Dev Tools, Grunt, SASS, CoffeeScript, Backbone, Angular, Node) that all the cool kids in town are using but they get the job done. They might not be using Frameworks but their code is fast as hell. They might not be writing tests for their code but their program works. They get their job done without ever worrying if their practices are already outdated. Or the tools that they are using can still be improved in order for them to be more productive. I believe there&rsquo;s a beauty in this because they can just focus on the task at hand like painters or artists.</p>

<h4>Closing Thoughts</h4>

<p>Of course with anything there are downsides but I just wanted to focus on the positive side of being a Dark Matter Developer in this post. Cheers to all the Dark Matter Developer&rsquo;s out there! Even if you might not read this because you&rsquo;re always busy getting things done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Command Line Utilities]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities/"/>
    <updated>2014-03-08T14:45:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities</id>
    <content type="html"><![CDATA[<p>In this part five of the series A Whirlwind Tour of Web Developer Tools I&rsquo;ll walk you through some of the tools that you can use in the command line.  But before we dive in to some of the tools lets first define what a command line is. According to <a href="http://en.wikipedia.org/wiki/Command-line_interface">Wikipedia</a>:</p>

<blockquote><p>A command-line interface (CLI), also known as command-line user interface, console user interface, and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines).</p></blockquote>


<p>So the command line is basically an interface where you can type in a bunch of commands to interact with the computer.</p>

<!--more-->


<h3>Command Line Basics</h3>

<p>Before we jump into the tools its important that we first understand the basics of using the command line. To access the command line in Linux press <code>ctrl + alt + t</code> on your keyboard. For Mac just look for the terminal from your menu. And for Windows just press <code>window + r</code> and then type in <code>cmd</code> then press <code>enter</code>.</p>

<h4>Commonly used Commands</h4>

<p>Here are some of the commands that you&rsquo;ll commonly used on a day to day basis:</p>

<ul>
<li><strong>cd</strong> &ndash; change directory</li>
<li><strong>mkdir</strong> &ndash; create a new directory</li>
<li><strong>rmdir</strong> &ndash; delete an existing directory</li>
<li><strong>touch</strong> &ndash; create an empty file</li>
<li><strong>pushd</strong> &ndash; push directory</li>
<li><strong>popd</strong> &ndash; pop directory</li>
<li><strong>ls</strong> &ndash; list files in a specific directory</li>
<li><strong>grep</strong> &ndash; find specific text inside files</li>
<li><strong>man</strong> &ndash; read a manual page</li>
<li><strong>apropos</strong> &ndash; lists outs commands that does a specific action</li>
<li><strong>cat</strong> &ndash; print out all the contents of a file</li>
<li><strong>less</strong> &ndash; view the contents of a file (with pagination)</li>
<li><strong>sudo</strong> &ndash; execute command as super user</li>
<li><strong>chmod</strong> &ndash; modify the file permissions</li>
<li><strong>chown</strong> &ndash; change file ownership</li>
<li><strong>find</strong> &ndash; find files from a specific directory</li>
<li><strong>pwd</strong> &ndash; print working directory</li>
<li><strong>history</strong> &ndash; returns a list of the commands that you have previously executed</li>
<li><strong>tar</strong> &ndash; creates a tar archive from a list of files</li>
</ul>


<p>If you are on Windows some commands might not be available to you. The solution would be to either switch to Linux, I definitely recommend Linux Mint or Ubuntu if you&rsquo;re planning to switch. Or if you want to stick with Windows you can install <a href="http://www.cygwin.com/">Cygwin</a> or the <a href="http://unxutils.sourceforge.net/">GNU utilities</a> for Windows.</p>

<p>I won&rsquo;t go ahead and provide you with a tutorial on how to use the commands above. There&rsquo;s tons of tutorials out there so use Google to your advantage. You also have the <code>man</code> command to help you out. Here&rsquo;s how to use the <code>man</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man cd</span></code></pre></td></tr></table></div></figure>


<p>This will output all the information related to the <code>cd</code> command and how to use it.
The <code>man</code> command is useful if you already know the name of the command. But in case you do not already know you also have access to the <code>apropos</code> command which lists out commands that matches a specific action. Here&rsquo;s how to use it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apropos delete</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above produces an output similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/apropos.png" alt="apropos" /></p>

<p>As you can see you can pretty much scan through the results and determine the command that you need to use based on the description provided.  So if you want to delete a file you can just call the <code>unlink</code> command.</p>

<h4>Aliases</h4>

<p>Once you&rsquo;ve gotten comfortable with the default commands you can start using shortcuts in order to make typing commands faster and easier. You can add aliases by creating a <code>.bash_aliases</code> file inside your home directory then add contents similar to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias subl='/usr/bin/subl'
</span><span class='line'>alias c='clear'
</span><span class='line'>alias install='sudo apt-get install'
</span><span class='line'>alias cp='cp -iv'
</span><span class='line'>alias mv='mv -iv'
</span><span class='line'>alias md='mkdir'
</span><span class='line'>alias t='touch'
</span><span class='line'>alias rm='rm -i'
</span><span class='line'>alias la='ls -alh'
</span><span class='line'>alias web-dir='cd ~/web_files'
</span><span class='line'>alias e='exit'
</span><span class='line'>alias s='sudo'
</span><span class='line'>alias a='echo "------------Your aliases------------";alias'
</span><span class='line'>alias ni='sudo npm install'
</span><span class='line'>alias snemo='sudo nemo'
</span><span class='line'>alias gi='git init'
</span><span class='line'>alias ga='git add'
</span><span class='line'>alias gc='git commit -m'
</span><span class='line'>alias gca='git commit --amend -m'
</span><span class='line'>alias gu='git push'
</span><span class='line'>alias gd='git pull'
</span><span class='line'>alias gs='git status'
</span><span class='line'>alias gl='git log'</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the example above to add an alias simply put <code>alias</code> followed by the alias that you want to use, then <code>=</code> and followed by the path to the executable wrapped in quotes. If you do not know the path to the executable file you can use the <code>which</code> command followed by the command that you usually use. For example for the <code>less</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>which less</span></code></pre></td></tr></table></div></figure>


<p>It will then output the path to the executable file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/less</span></code></pre></td></tr></table></div></figure>


<p>This is the path that you can add in the specific alias.</p>

<h3>Command Line Tools</h3>

<h4>Wget</h4>

<p>Useful for pulling files from a server. For example you can use this to download a specific library or asset for your project into your current working directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.10/angular.min.js</span></code></pre></td></tr></table></div></figure>


<p>The command above will pull the file from the URL that you specified and copy it into the directory where your current terminal window is opened.</p>

<h4>Curl</h4>

<p>Curl is used for making HTTP request. I&rsquo;d like to describe it as a browser but for the command line. You can do all sorts of stuff with Curl. For example you can use it to request a specific page from the web:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://anchetawern.github.io</span></code></pre></td></tr></table></div></figure>


<h5>Basic HTTP Authentication</h5>

<p>If the page uses basic HTTP authentication you can also specify a user name and a password. In the example below I am using Curl to request my recently bookmarked links from the delicious API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -u username:password  https://api.del.icio.us/v1/posts/recent</span></code></pre></td></tr></table></div></figure>


<h5>Saving the Results to a File</h5>

<p>This will return an XML string. If you want to copy the result to a file you can simply redirect the output to a file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -u username:password  https://api.del.icio.us/v1/posts/recent &gt; recent-bookmarks.xml</span></code></pre></td></tr></table></div></figure>


<h5>Getting Header Information</h5>

<p>If you only want to get the header information from a specific request you can add the <code>-I</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -I http://google.com</span></code></pre></td></tr></table></div></figure>


<p>This will output a result similar to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Location: http://www.google.com/
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Fri, 21 Feb 2014 10:16:19 GMT
</span><span class='line'>Expires: Sun, 23 Mar 2014 10:16:19 GMT
</span><span class='line'>Cache-Control: public, max-age=2592000
</span><span class='line'>Server: gws
</span><span class='line'>Content-Length: 219
</span><span class='line'>X-XSS-Protection: 1; mode=block
</span><span class='line'>X-Frame-Options: SAMEORIGIN
</span><span class='line'>Alternate-Protocol: 80:quic</span></code></pre></td></tr></table></div></figure>


<p>This is the same as the one that you see under the network tab in Chrome Developer Tools under the headers section.</p>

<h5>Interacting with Forms</h5>

<p>You can also perform actions on forms. So for example if you have the following form from a web page somewhere:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;form.php&quot;</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can fill up the form and perform the action as if you&rsquo;re in a browser by simply getting the required inputs and supplying them from your command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>curl http://localhost/tester/curl/form.php?query=dogs
</span></code></pre></td></tr></table></div></figure>


<p>For forms which has its method set to <code>POST</code>. You can also make the request using curl. All you have to do is add a <code>--data</code> option followed by the name-value pair. With the name being the name assigned to the input and the value is the value that you want to supply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>curl --data &quot;query=cats&quot; http://loca/form.php?query=cats
</span></code></pre></td></tr></table></div></figure>


<h5>Spoofing the HTTP referrer</h5>

<p>You can also spoof the http-referrer when making a request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>curl --referer http://somesite.com http://anothersite.com
</span></code></pre></td></tr></table></div></figure>


<p>This reminds us that using the HTTP referrer as a means of checking whether to perform a specific action or not is really useless as it can be easily spoofed.</p>

<h5>Follow Redirects</h5>

<p>Curl also allows you to follow redirects. So for example if you&rsquo;re accessing a page which has a redirect like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: anotherfile.php&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;zup yo!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Simply using the following command will result in the execution of the <code>echo</code> statement below the redirect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl http://localhost/tester/curl/file.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you add the <code>--location</code> option curl will follow the page that is specified in the redirect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl --location http://localhost/tester/curl/file.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the output of the command above will be the contents of the <code>anotherfile.php</code>.</p>

<h5>Cookies</h5>

<p>You can also supply cookie information on the requests that you make. So for example you are requesting a page which uses cookies as a means of determining if a user is logged in or not (note: you shouldn&rsquo;t use this kind of code in production):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT id FROM tbl_users WHERE name = &#39;</span><span class="si">$name</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">num_rows</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;logged in!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;sorry user does not exist&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To request from the page above just add the <code>--cookie</code> option followed by the cookies that the page needs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl --cookie &quot;name=fred&quot; http://localhost/tester/curl/cookie.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to specify more than one cookie simply separate them with a semi-colon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl --cookie &quot;name=fred;age=22&quot; http://localhost/tester/curl/cookie.php</span>
</span></code></pre></td></tr></table></div></figure>


<h4>jq</h4>

<p>If you normally work with web API&rsquo;s in your job, you might find the jq utility useful. What this does is formatting JSON strings, it also adds syntax highlighting so they become more readable.  To install jq all you have to do is download the <code>jq</code> file from the <a href="http://stedolan.github.io/jq/download/">downloads page</a> and then move it into your <code>bin</code> folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">mv ~/Downloads/jq /bin/jq</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that you can start using jq to process JSON strings that comes from curl requests by simply piping it to the <code>jq</code> command. For example, we are making a request to the following file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$names</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Gon&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Freecs&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;nen_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;enhancement&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;abilities&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;rock&#39;</span><span class="p">,</span> <span class="s1">&#39;paper&#39;</span><span class="p">,</span> <span class="s1">&#39;scissors&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Killua&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Zoldyc&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;nen_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;transmutation&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;abilities&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;lightning bolt&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;thunderbolt&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;godspeed&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Kurapika&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;nen_type&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;conjuration&#39;</span><span class="p">,</span> <span class="s1">&#39;specialization&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="s1">&#39;abilities&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;holy chain&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;dowsing chain&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;chain jail&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;judgement chain&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;emperor time&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Isaac&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Netero&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;nen_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;enhancement&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;abilities&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;100-Type Guanyin Bodhisattva&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;First Hand&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;Third Hand&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;Ninety-Ninth Hand&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Neferpitou&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;nen_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;specialization&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;abilities&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;Terpsichora&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;Doctor Blythe&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;Puppeteering&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$names</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally we would do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl http://localhost/tester/curl/json.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this returns a result that looks like this:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/json-string.png" alt="json string" /></p>

<p>Piping the result to <code>jq</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl http://localhost/tester/curl/json.php | jq &quot;.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a result similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/jq.png" alt="jq formatted" /></p>

<p>Pretty sweet! But you can do much more than that, check out the <a href="http://stedolan.github.io/jq/manual/">manual page</a> for the jq project for more information.</p>

<h4>Vim</h4>

<p>Vim is a text-editor that is based on Vi, which is a text-editor that&rsquo;s pre-installed on common Linux distributions. But hey you might say that the main topic of this blog post is command-line tools why are we suddenly talking about text-editors here? Well its because Vim is tightly coupled with the terminal. It&rsquo;s like a terminal-text editor crossbreed. You can both execute commands and write code with it.</p>

<p>You can download Vim from the <a href="http://www.vim.org/download.php">Vim downloads page</a> simply select the version that&rsquo;s applicable to the operating system that you&rsquo;re currently using. But if you&rsquo;re on Linux mint, Ubuntu or other Linux distributions that uses <code>apt-get</code> then you simply execute the following command from the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sudo apt-get install vim</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are lots of tutorials in the web that can help you with learning vim (I&rsquo;ll link to them later). But for now I&rsquo;m going to give you a quick tutorial to get you started.</p>

<p>First thing that you need to know is how to open up files with vim. You can do it by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vim file_that_you_want_to_edit.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also open up more than one file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vim file1.txt file2.txt file3.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then switch between the files while on command mode. First list out the files that are currently opened in vim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">:ls</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give you an output of the list of files with an id that you can use to refer to them when switching:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/ls.png" alt="list of files" /></p>

<p>To switch to <code>file2.txt</code> you can use the <code>:b</code> command followed by its id:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">:b2</span>
</span></code></pre></td></tr></table></div></figure>


<p>An alternative would be to use the file name itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">:b file2.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can also just switch to the next file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">:bn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or switch to the previous file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">:bp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second thing that you need to know is that vim has 3 modes:</p>

<ul>
<li><strong>command</strong> &ndash; used for telling vim to do things. This is the default mode that vim is in when you open it. If you are on another mode other than the command mode you can press on <code>esc</code> to go back to the command mode.</li>
<li><strong>insert</strong> &ndash; used for inserting things on the current file that you&rsquo;re working on. This is basically the text editor mode. You can only get to this mode when you are currently on the command mode. To get to this mode press the <code>i</code> key.</li>
<li><strong>visual</strong> &ndash; used for selecting text. Just like the insert mode you can only get to this mode when you are in command mode. To get to this mode press the <code>v</code> key.</li>
</ul>


<p><strong>Basic Commands</strong></p>

<p>Here are some of the basic commands that you would commonly use when working with a file. Note that you can only type in these commands while you are in command mode.</p>

<ul>
<li><code>:w</code> &ndash; save file</li>
<li><code>:wq</code> &ndash; save file and quit</li>
<li><code>:q!</code> &ndash; quit vim without saving the changes</li>
<li><code>u</code> &ndash; undo last action</li>
<li><code>ctrl + r</code> &ndash; redo</li>
<li><code>x</code> &ndash; delete character under the cursor</li>
<li><code>dd</code> &ndash; delete current line</li>
<li><code>D</code> &ndash; delete to the end of the line. The main difference between this and the <code>dd</code> command is that the <code>dd</code> command deletes even the line breaks but the <code>D</code> command simply deletes to the end of the line leaving the line break behind.</li>
</ul>


<p><strong>Basic Navigation</strong></p>

<p>You can navigate a file while you&rsquo;re in the command mode or insert mode by pressing the arrow keys. You can also use the following keys for navigating but only when you are in command mode:</p>

<ul>
<li><code>h</code> &ndash; left</li>
<li><code>l</code> &ndash; right</li>
<li><code>j</code> &ndash; down</li>
<li><code>k</code> &ndash; up</li>
<li><code>0</code> &ndash; move to the beginning of the line</li>
<li><code>$</code> &ndash; move to the end of the line</li>
<li><code>w</code> &ndash; move forward by one word</li>
<li><code>b</code> &ndash; move backward by one word</li>
<li><code>gg</code> &ndash; move to the top of the screen</li>
<li><code>G</code> &ndash; move to the bottom of the screen</li>
<li><code>line_numberH</code> &ndash; move to a specific line number</li>
</ul>


<p><strong>Searching Text</strong></p>

<p>You can search for a specific text while you are in command mode by pressing the <code>/</code> key and entering the text that you want to search for and then press enter to execute the command. Vim will then highlight each instance of the text. You can move to the next instance by pressing the <code>n</code> key or <code>N</code> to go back to the previous instance.</p>

<p><strong>Modifying Text</strong></p>

<p>You can modify text by switching to insert mode. You can switch to insert mode by first going to command mode (<code>esc</code> key) then press the <code>i</code> key.  Once you are on insert mode you can now start typing text just like you do with a normal text editor. While inside this mode and you want to select specific text to copy press the <code>esc</code> key to go back to command mode and then press the <code>v</code> key to switch to visual mode. From the visual mode you can then start selecting the text. To copy the text switch to the command mode then press the <code>y</code> key. To paste the copied text press the <code>p</code> key. You can do the same thing when you want to cut and paste. Simply use the <code>d</code> key instead of the <code>y</code> key.</p>

<p><strong>Vim Configuration</strong></p>

<p>You can use the <code>.vimrc</code> file to configure vim settings. It doesn&rsquo;t exist by default so you have to create it under the home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">touch ~/.vimrc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of the most common configuration that you would want to add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">syntax on</span>
</span><span class='line'><span class="x">set number</span>
</span><span class='line'><span class="x">set wrap</span>
</span><span class='line'><span class="x">set tabstop=2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a description of what each option does:</p>

<ul>
<li><strong>syntax on</strong> &ndash; this enables syntax highlighting</li>
<li><strong>set number</strong> &ndash; this enables line numbers</li>
<li><strong>set wrap</strong> &ndash; this tells vim to word wrap visually</li>
<li><strong>set tabstop</strong> &ndash; you can use this to specify the tab size. In the example above I&rsquo;ve set it to <code>2</code> so when you press tab vim will insert 2 spaces</li>
</ul>


<p><strong>Resources for learning Vim</strong></p>

<p>Be sure to check out the resources below to learn more about Vim. Learning Vim is really a painful process since you have to memorize a whole bunch of commands and practice it like you&rsquo;re practicing how to play the piano. Learning Vim is not that easy, lots of practice is required before you can get productive with using it. You can easily get away with just using a text-editor when writing code but if you want some productivity boost then take the time to really learn Vim even if it is painful. Here are some resources for learning Vim:</p>

<ul>
<li><a href="http://www.danielmiessler.com/study/vim/">Vim Tutorial and Primer</a></li>
<li><a href="http://vim.wikia.com/wiki/Vim_Tips_Wiki">Vim Wikia Page</a></li>
<li><a href="http://vimcasts.org/">Vimcasts</a> &ndash; screencasts on Vim</li>
<li><a href="http://code.tutsplus.com/articles/25-vim-tutorials-screencasts-and-resources--net-14631">25 Vim Tutorials, Screencasts and Resources</a></li>
<li><a href="http://www.openvim.com/tutorial.html">Vim Interactive Tutorial</a></li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Learning Vim Progressively</a></li>
<li><a href="http://www.cs.swarthmore.edu/help/vim/home.html">Vim Tips and Tricks</a></li>
<li><strong>Vimtutor</strong> &ndash; not really a website, this is the vim guide that comes with installing vim. You can access it by executing <code>vimtutor</code> from your terminal</li>
</ul>


<h4>Siege</h4>

<p>Siege is an HTTP load testing and benchmarking utility. You can mainly use this tool to stress test your web project with a bunch of requests to see how it holds up. Execute the following command to install siege:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sudo apt-get install siege</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it you can execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">siege -b -t60S -c30 http://url-of-the-web-project-that-you-want-to-test</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-b</code> option tells siege to run the tests without delay. By default siege runs the test with a one second delay between each requests. Adding the <code>-b</code> option makes sure that the requests are made concurrently.</p>

<p>The <code>-t60S</code> option tells siege to run the tests in 60 seconds (60S). If you want to run it for 30 minutes you can do <code>30M</code>. Or <code>1H</code> for an hour.</p>

<p>The <code>-c30</code> option tells siege to have 30 concurrent connections.</p>

<p>The last part of the command is the url that you want to test. If you only want to test out one url you can directly specify it in the command. But if you want to test out more than one url then you can create a new text file with the urls that you want to test out (one url per line) and then add the <code>-f</code> option followed by the path to the text file that you created to tell siege that you want to make use of a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">siege -b -t60S -c30 ~/test/urls.text</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an example usage of siege:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/siege.png" alt="siege" /></p>

<p>Interpreting the results above:</p>

<ul>
<li><strong>transactions</strong> &ndash; the total number of hits to the server.</li>
<li><strong>availability</strong> &ndash; This is the availability of your web project to users. Ideally you would want the availability to be 100%. Anything below it would mean that some users accessing your web project won&rsquo;t be able to access it because of the load.</li>
<li><strong>elapsed time</strong> &ndash; this is the time you specified in your options when you executed siege. It wouldn&rsquo;t be perfect though, as you can see from the results above we only got 59.37 seconds but we specified 60 seconds.</li>
<li><strong>data transferred</strong> &ndash; the size of transferred data for each request</li>
<li><strong>response time</strong> &ndash; the average response time for each request</li>
<li><strong>transaction rate</strong> &ndash; the number of hits to the server per second</li>
<li><strong>throughput</strong> &ndash; the average number of bytes transferred every second from the server to all the simulated users</li>
<li><strong>concurrency</strong> &ndash; the average number of simultaneous connections</li>
<li><strong>successful transactions</strong> &ndash; the number of successful transactions</li>
<li><strong>failed transactions</strong> &ndash; the number of failed transactions</li>
<li><strong>longest transaction</strong> &ndash; the total number of seconds the longest transaction took to finish</li>
<li><strong>shortest transaction</strong> &ndash; the total number of seconds the shortest transaction took to finish</li>
</ul>


<h4>Sed</h4>

<p>Sed is a tool for automatically modifying files. You can basically use this for writing scripts that does search and replace on multiple files. A common use case for developers would be for writing scripts that automatically formats source code according to a specific <a href="http://en.wikipedia.org/wiki/Coding_conventions">coding standard</a>.</p>

<p>Yes you can do this sort of task using the built-in search and replace utility on text-editors like Sublime Text. But if you want something that lets you specify a lot of options and offers a lot of flexibility then sed is the tool for the job.
Sed is pre-installed on most Linux distributions and also on Mac OS so you won&rsquo;t really have to do any installation. For windows users there&rsquo;s also <a href="http://gnuwin32.sourceforge.net/packages/sed.htm">Sed for Windows</a> which you can install.</p>

<p>Here&rsquo;s an example on how to use sed. For example you have the following file (<code>sed-test.php</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$superStars</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$rockStars</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$keyboardNinjas</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And you want to modify all variable declarations to be all in lowercase. You would do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sed &#39;s/\$\([A-Za-z]*\([\$A-Za-z_,\s]*\)\)/$\L\1/&#39; sed-test.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sed will then output the following result in the terminal screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$superstars</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$rockstars</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$keyboardninjas</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To save the changes to the same file you need to do a little bit of a trick since sed doesn&rsquo;t have the functionality to commit the changes to the input file. The trick would be to temporarily save the results to a new file (<code>sed-test.new.php</code>) and then use <code>mv</code> to rename the new file (<code>sed-test.new.php</code>) to the old file name (<code>sed-test.php</code>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sed &#39;s/\$\([A-Za-z]*\([\$A-Za-z_,\s]*\)\)/$\L\1/&#39; sed-test.php &gt; sed-test.new.php</span>
</span><span class='line'><span class="x">mv sed-test.new.php sed-test.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to learn more about sed check out the following resources:
&ndash; <a href="http://www.grymoire.com/Unix/Sed.html">Sed &ndash; An Introduction and Tutorial</a>
&ndash; <a href="http://sed.sourceforge.net/local/docs/An_introduction_to_sed.html">Getting Started with Sed</a></p>

<p>You can also check out the following related tools:</p>

<ul>
<li><a href="http://www.tutorialspoint.com/unix_commands/tr.htm">tr</a></li>
<li><a href="http://www.grymoire.com/Unix/Awk.html">awk</a></li>
</ul>


<h4>Ruby Gems</h4>

<p>There&rsquo;s also lots of command line tools in the Ruby world. And you can have access to those tools by installing Ruby.</p>

<p>In Linux and in Mac OS you can install Ruby by using RVM (Ruby Version Manager). First make sure that all the packages are up to date by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sudo apt-get update</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will get RVM by using Curl so we also have to install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sudo apt-get install curl</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once curl is installed, download rvm using curl and then pipe it to <code>bash</code> so we can use it immediately right after the download is finished:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">curl -L https://get.rvm.io | bash -s stable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install Ruby version <code>1.9.3</code> using rvm. For this step you don&rsquo;t really have to stick with version <code>1.9.3</code>. If there is already a later and stable version available you can use that as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">rvm install 1.9.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tell rvm to use Ruby version <code>1.9.3</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">rvm use 1.9.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then install the latest version of <code>rubygems</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">rvm rubygems latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Windows users you can just use the <a href="http://rubyinstaller.org/">ruby installer for Windows</a>.</p>

<p>Once ruby gems is installed you can now install gems like there&rsquo;s no tomorrow. Here&rsquo;s a starting point: <a href="http://www.awesomecommandlineapps.com/gems.html">Ruby Gems for Command-line Apps</a>. On the next section there&rsquo;s a gem called <code>tmuxinator</code> that you can install to manage tmux projects easily.</p>

<h4>Tmux</h4>

<p>Tmux or terminal multiplexer is an application that allows you to multiplex several terminal windows. It basically makes it easier to work on several related terminal windows. In Linux you can install tmux from the terminal by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">sudo apt-get install tmux</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Mac OS you can install tmux through brew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">brew install tmux</span>
</span></code></pre></td></tr></table></div></figure>


<p>And on Windows tmux is not really directly supported. You first have to install <a href="http://cygwin.org/">cygwin</a> and then add <a href="http://sourceforge.net/mailarchive/message.php?msg_id=30850840">this patch</a> to install tmux. Or if you don&rsquo;t want to go through all the trouble you can install <a href="http://sourceforge.net/projects/console/files/">console2</a> which is a tmux alternative for Windows.</p>

<p>Once you&rsquo;re done installing tmux you can now go ahead and play with it. To start tmux first create a new named session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmux new -s name_of_session</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new tmux session with the name that you supplied:
<img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux.png" alt="tmux session" /></p>

<p>You can then execute commands just like you do with a normal terminal window.
If you want to create a new window press <code>ctrl + b</code> then release and then press <code>c</code>. This will create a new window under the current session:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-new-window.png" alt="tmux new window" /></p>

<p>As you can see from the screenshot above we now have two windows (see the text highlighted in green on the lower part of the terminal window on the left side). One is named <code>0:bash</code> and the other is <code>1:bash*</code>. The one with the <code>*</code> is the current window.</p>

<p>You can rename the current window by pressing <code>ctrl + b</code> then release and then <code>,</code>. This will prompt you to enter a new name for the window. You can just press enter once you&rsquo;re done renaming it:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-rename-window.png" alt="tmux rename window" /></p>

<p>To switch between the windows you can either press <code>ctrl + b</code> then release and then the index of the window that you want to switch to. You can determine the index by looking at the lower left part of the terminal screen. So if you have only two windows opened the index can either be 0 or 1. You can also press <code>ctrl + b</code> then release and then <code>p</code> for previous or <code>n</code> for next window.</p>

<p>You can also further divide each window into multiple panes by pressing <code>ctrl + b</code> then release and then the <code>%</code> key to divide the current window vertically or the <code>"</code> key to divide it horizontally. This will give you a screen similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-panes.png" alt="tmux panes" /></p>

<p>You can then switch between those panes by pressing <code>ctrl + b</code> then release and then the <code>o</code> key.</p>

<p>What&rsquo;s good about tmux is that it allows you to keep multiple terminal sessions and you&rsquo;ll be able to access them even after restarting your computer. To list out available sessions you can execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmux ls</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will list out all the sessions that you created using the <code>tmux new - s</code> command or simply <code>tmux</code>. You can then open up the specific session by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmux attach -t name_of_session</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you no longer want to work with a particular session you can just do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmux kill-session -t name_of_session</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or if you want to kill all sessions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmux kill-server</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also this ruby gem called <a href="http://rubygems.org/gems/tmuxinator">tmuxinator</a> which allows you to create and manage complex tmux sessions easily. You can install it via ruby gems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">gem install tmuxinator</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or if you&rsquo;re like me and you installed Ruby via RVM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">rvmsudo gem install tmuxinator</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then create project-based tmux sessions. To create a new project you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmuxinator open name_of_project</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a <code>name_of_project.yml</code> file under the <code>~/.tmuxinator</code> directory. You can then open up this file and modify the default configuration. For me I simply deleted the commented lines (except for the first one which is the path to the current file) and then specified the project path. In my case its the <code>octopress</code> directory under the home directory. Then under the <code>windows</code> the <code>layout</code> is <code>main-vertical</code>, this means that the panes that I will specify would be divided vertically.  There would be 2 panes, one is empty so I can just type in whatever commands I wish to execute and the other is <code>rake preview</code> which is the command for previewing an octopress blog locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x"># ~/.tmuxinator/blog.yml</span>
</span><span class='line'>
</span><span class='line'><span class="x">name: blog</span>
</span><span class='line'><span class="x">root: ~/octopress</span>
</span><span class='line'>
</span><span class='line'><span class="x">windows:</span>
</span><span class='line'><span class="x">  - editor:</span>
</span><span class='line'><span class="x">      layout: main-vertical</span>
</span><span class='line'><span class="x">      panes:</span>
</span><span class='line'><span class="x">        - #empty</span>
</span><span class='line'><span class="x">        - rake preview</span>
</span></code></pre></td></tr></table></div></figure>


<p>To open up the project at a later time you execute the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmuxinator start name_of_project</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you do not know the name of a specific project, you can list out all projects using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmuxinator list</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you no longer wish to work with a project in the future:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">tmuxinator delete name_of_project</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SSH</h4>

<p>SSH can be used to login to remote servers. SSH is pre-installed on both Linux and Mac OS. But for Windows you can use the alternative which is <a href="http://sshwindows.sourceforge.net/">open SSH</a> since SSH isn&rsquo;t installed on Windows by default.</p>

<h5>Logging in to remote server</h5>

<p>Once you have SSH installed you can now login to a remote server by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">ssh username@hostname</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the username is the <code>username</code> given to you by your web host. While the <code>hostname</code> can be a domain name, public dns or an IP address. For <a href="https://www.openshift.com/">Openshift</a> its something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">xxxxxxxxxxxxxxxxxxxxxxxxxxxx@somesite-username.rhcloud.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>x</code> is a random string of number and letters.</p>

<p>Executing the <code>ssh</code> command with the correct username and hostname combination will prompt you to enter your password. Again, the password here is the password given to you by your web host.</p>

<h5>SSH Keys</h5>

<p>You can also make use of SSH keys to authenticate yourself to a remote server. This will allow you to login without entering your password.</p>

<p>To setup an ssh key navigate to the <code>.ssh</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">cd ~/.ssh</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t have already one, create it by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">mkdir ~/.ssh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done with that, check if you already have a private and public key pair in the <code>~/.ssh</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">ls</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would look something like <code>id_rsa</code> and <code>id_rsa.pub</code>.
If you don&rsquo;t already have those 2 files generate it by executing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">ssh-keygen -t rsa -C &quot;your_email@provider.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the <code>id_rsa</code> and <code>id_rsa.pub</code> files using your email address as the label. You can also use other information as the label.</p>

<p>Next copy the public key (<code>id_rsa.pub</code>) into the remote server by using secure copy (<code>scp</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">scp -p id_rsa.pub username@hostname</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now open up a new terminal window and login to the remote server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">ssh username@hostname</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if the <code>id_rsa.pub</code> has indeed been copied by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">ls -al id_rsa.pub</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it returns &ldquo;there&rsquo;s no such file or directory&rdquo; return to the other terminal window (local machine) and execute the <code>scp</code> command again.</p>

<p>Once that&rsquo;s done the next step is to copy all the contents of the <code>id_rsa.pub</code> file into the <code>authorized_keys</code> file inside the <code>.~/ssh</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">cat id_rsa.pub &gt; ~/.ssh/authorized_keys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next update the <code>/etc/ssh/sshd_config</code> file using either <code>vi</code> or <code>nanoc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vi /etc/ssh/sshd_config</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uncomment the line where it says <code># AuthorizedKeysFile</code>, to uncomment all you have to do is remove the <code>#</code> symbol right before it. Vi is basically like vim so the key strokes that you use are pretty much the same. So first you place the cursor right above the <code>#</code> symbol then press <code>x</code> to delete the <code>#</code> symbol. And then press the <code>esc</code> key to go back to command mode and then type in <code>:wq</code> to save and quit editing the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">AuthorizedKeysFile %h/.ssh/authorized_keys</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just make sure the path that its pointing to is the same path as the file that we updated earlier.
The <code>%h</code> refers to the host so its basically the same as saying <code>~/.ssh/authorized_keys</code>.</p>

<p>Once all of that is done you can now test it out by logging in once again. Note that for the first time after the update is done it will still ask you the password. But for the next one&rsquo;s it will no longer ask you the password.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! The command line is a must-use tool for every developer. In this blog post we&rsquo;ve covered the essentials of using the command line along with some tools that can help you become more productive when it comes to using it.
There&rsquo;s a lot more command line tools that I haven&rsquo;t covered in this blog post. I believe those tools deserves a blog post of their own so I&rsquo;ll be covering each of those in a future part of this series. For now I recommend that you check out the resources below for more command-line ninja skills.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://cli.learncodethehardway.org/book/">Command Line Crash Course</a></li>
<li><a href="http://kkovacs.eu/cool-but-obscure-unix-tools/">Cool but Obscure Unix Tools</a></li>
<li><a href="http://www.commandlinefu.com/commands/browse">Command Line Fu</a></li>
<li><a href="http://coding.smashingmagazine.com/2012/10/29/powerful-command-line-tools-developers">Powerful Command Line Tools for Developers</a></li>
<li><a href="http://community.linuxmint.com/tutorial/view/244">Linux Terminal Command Reference</a></li>
<li><a href="http://ss64.com/osx/">Mac OS Command Reference</a></li>
<li><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds.mspx?mfr=true">Windows Command Reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Web Servers]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers/"/>
    <updated>2014-03-01T08:35:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers</id>
    <content type="html"><![CDATA[<p>In this part four of the series A Whirlwind Tour of Web Developer Tools I&rsquo;m going to walk you through web servers. Web servers are computers that commonly delivers web pages. But when talking about web development web server refers to the software used for serving up the web pages. In this blog post I&rsquo;m going to talk about 4 web servers that you can use in serving up your web projects.</p>

<!--more-->


<h3>Python Simple HTTP Server</h3>

<p>First on the list is the simple http server that is built-in to python. So in order to use this you would need to have Python installed. Python already comes pre-installed in Ubuntu and other Linux distributions so you already have the simple http server by default. For Mac OS X its also pre-installed. But for Windows you would need to get an installer from the <a href="http://python.org/download/">Python website</a>.
You can use it by opening up a terminal from any directory that you want to serve and execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m SimpleHTTPServer</span></code></pre></td></tr></table></div></figure>


<p>To test it out you can create a new <code>index.html</code> file on the directory where you executed the command above and access <a href="http://localhost:8000">http://localhost:8000</a> from your browser.</p>

<p>Note that the simple http server will simply list out all the files in that directory if you do not have an <code>index.html</code> file:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_webservers/simplehttpserver.png" alt="simple http server" /></p>

<p>You can also implement your own web server by creating a new python file (<code>server.py</code>) and putting the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">SimpleHTTPServer</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">SocketServer</span>
</span><span class='line'>
</span><span class='line'><span class="n">PORT</span> <span class="o">=</span> <span class="mi">1234</span>
</span><span class='line'>
</span><span class='line'><span class="n">Handler</span> <span class="o">=</span> <span class="n">SimpleHTTPServer</span><span class="o">.</span><span class="n">SimpleHTTPRequestHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">httpd</span> <span class="o">=</span> <span class="n">SocketServer</span><span class="o">.</span><span class="n">TCPServer</span><span class="p">((</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">PORT</span><span class="p">),</span> <span class="n">Handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;serving at port&quot;</span><span class="p">,</span> <span class="n">PORT</span>
</span><span class='line'><span class="n">httpd</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then execute the <code>server.py</code> file from the terminal to start the server. Note that the file must be inside the same directory that you want to serve.</p>

<h4>PHP Server</h4>

<p>There is also the built-in server for PHP version 5.4.0 and above. This comes with PHP so you need to install it first before you can start using it. You can install PHP by executing the following command from your terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">php5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done installing it you can now start using the server by navigating to the directory that you want to serve and executing the following command from the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">php</span> <span class="o">-</span><span class="n">S</span> <span class="n">localhost</span><span class="p">:</span><span class="mi">8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will serve up the current directory under port 8000 of your local machine so to access it from the browser you can open up the following url: <a href="http://localhost:8000">http://localhost:8000</a>.</p>

<p>Note that if you do not have a default file (either <code>index.html</code> or <code>index.php</code> file) in the directory that you are serving the PHP server is going to return a 404 not found:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_webservers/php-server.png" alt="php-server" /></p>

<p>The advantage of using the PHP server over simple http server is that you can actually create some php files in the directory that you are serving, write some code in it and the server will also be able to interpret it for you.</p>

<h3>Apache</h3>

<p>Next is the Apache HTTP Server from the Apache Foundation. You can install it by executing the following command from the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">apache2</span>
</span><span class='line'><span class="n">sudo</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">apache2</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Windows users there is this thing called <a href="http://www.wampserver.com/en/">WAMP</a> which you can install. Apache is packaged with it along with MySQL and PHP so you can start playing with it immediately without doing a lot of configuration. You can also have them installed separately but you will have to do some configuration before you can start playing with it. I&rsquo;ve written a tutorial about it before: <a href="http://kyokasuigetsu25.wordpress.com/2012/04/12/how-to-install-and-configure-apache-php-and-mysql/">How to install and configure apache, php, and mysql</a> so check that out if you do not want to use packaged versions.</p>

<p>For MAC OS there&rsquo;s <a href="http://www.mamp.info/en/index.html">MAMP</a>.</p>

<p>There&rsquo;s also <a href="http://www.apachefriends.org/index.html">XAMPP</a> which is a cross-platform solution for easily setting up Apache, PHP, and MySQL on your machine.</p>

<p>If you&rsquo;re a beginner I definitely recommend using either WAMP, MAMP or XAMPP as it can be sometimes frustrating to configure everything on your own.</p>

<p>Ok back to the main topic of this section which is Apache. If you&rsquo;re on Linux and you have installed Apache separately you might want to <a href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">configure the default web directory</a> since the default web directory that is used by Apache isn&rsquo;t writeable if you do not access the file explorer as a super user. This becomes a problem when accessing the web directory from the browser as Apache throws you a forbidden error. If you haven&rsquo;t catch it the first time you can go ahead and use the following tutorial: <a href="[configure%20the%20default%20web%20directory](http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">fixing the forbidden error in Apache</a>) to properly configure Apache. Once you&rsquo;re done with that you can go back to this blog post.</p>

<p>After configuring the default web directory used by Apache you can now put some test files on the web directory. Something like <code>index.html</code> and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Hello World from Apache!<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you go to <a href="http://localhost">http://localhost</a> you can now see the <code>index.html</code> being served by Apache. Apache serves everything on port 80 by default so we didn&rsquo;t have to add the port when we access it from the browser. This is because the browser knows by default that web pages are served at port 80. If you already have PHP installed you can also serve php files. Apache already knows how to serve those by default so there&rsquo;s no need for further configuration.</p>

<h3>Nginx</h3>

<p>Lastly there&rsquo;s Nginx one of the HTTP servers that&rsquo;s gaining market share lately. You can install it by executing the following command from your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo apt-get install nginx
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re on Windows there&rsquo;s a guide from the Nginx website on <a href="http://nginx.org/en/docs/windows.html">how to install Nginx on Windows</a>.</p>

<p>For Mac you can install it via homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>brew install nginx
</span></code></pre></td></tr></table></div></figure>


<p>Once Nginx is installed you can run it by executing <code>sudo nginx</code>. Note that if you already have Apache installed you would have a problem starting Nginx up. Most likely you would get an error similar to the one below:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_webservers/nginx-port.png" alt="nginx port error" /></p>

<p>This is Nginx telling you that port 80 is already in use. We learned earlier that Apache uses port 80 by default so running another server which serves web pages at port 80 will lead to that issue.
What we need to do is to configure Nginx to listen to another port. And you can do that by navigating to the following path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cd /etc/nginx/sites-available
</span></code></pre></td></tr></table></div></figure>


<p>Then open up the <code>default</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo gedit default
</span></code></pre></td></tr></table></div></figure>


<p>From there scroll down to the line which is similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>  listen 80 default_server;
</span><span class='line'>  listen [::]:80 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>  root /usr/share/nginx/html;
</span><span class='line'>  index index.html index.htm;
</span></code></pre></td></tr></table></div></figure>


<p>There are 2 things that you can do from here. First replace the 2 instances of <code>80</code> which is the default port used by Nginx to something like <code>6789</code>. Then you can also change the default web directory. Nginx uses <code>/usr/share/nginx/html</code> as its default, you can change it to something like <code>/home/your_user_name/nginx_web_files</code>. After updating the <code>default</code> file it should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>server {
</span><span class='line'>  listen 6789 default_server;
</span><span class='line'>  listen [::]:6789 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>  root /home/your_user_name/nginx_web_files;
</span><span class='line'>  index index.html index.htm;
</span></code></pre></td></tr></table></div></figure>


<p>After that save the file and restart Nginx using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<p>You can now go ahead and create a sample <code>index.html</code> file in your chosen web directory and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>hello world from nginx!<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To access it from your browser go to <a href="http://localhost:6789">http://localhost:6789</a>.</p>

<h4>Configuring PHP in Nginx</h4>

<p>Not unlike Apache, Nginx doesn&rsquo;t work with PHP by default so if you try serving up a PHP file Nginx won&rsquo;t understand it and it will give you a bad gateway error.</p>

<p>In order to make PHP work with Nginx you first have to install the <code>php5-fpm</code> package via the terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo apt-get install php5-fpm
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done you can now update the <code>default</code> file under the <code>/etc/nginx/sites-availble</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo gedit default
</span></code></pre></td></tr></table></div></figure>


<p>Scroll down to the line where you have something similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>#location ~ \.php$ {
</span><span class='line'># fastcgi_split_path_info ^(.+\.php)(/.+)$;
</span><span class='line'># NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini
</span><span class='line'>#
</span><span class='line'># # With php5-cgi alone:
</span><span class='line'># fastcgi_pass 127.0.0.1:9000;
</span><span class='line'># # With php5-fpm:
</span><span class='line'># #fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'># fastcgi_index index.php;
</span><span class='line'># include fastcgi_params;
</span><span class='line'>#}
</span></code></pre></td></tr></table></div></figure>


<p>Then uncomment the lines that are necessary to make PHP work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>location ~ \.php$ {
</span><span class='line'>fastcgi_split_path_info ^(.+\.php)(/.+)$;
</span><span class='line'># NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini
</span><span class='line'>#
</span><span class='line'># # With php5-cgi alone:
</span><span class='line'>  fastcgi_pass 127.0.0.1:9000;
</span><span class='line'># # With php5-fpm:
</span><span class='line'># #fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>  fastcgi_index index.php;
</span><span class='line'>  include fastcgi_params;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Save the changes and restart php5-fpm and Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>sudo service php5-fpm restart
</span><span class='line'>nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<p>You can now request a PHP file from Nginx.</p>

<h3>Conclusion</h3>

<p>You&rsquo;ve learned how to serve up web pages using the following http servers:</p>

<ul>
<li>SimpleHTTPServer</li>
<li>PHP Server</li>
<li>Apache HTTP Server</li>
<li>Nginx</li>
</ul>


<p>Web Servers are flexible by default. They can serve up different types of content and they can also serve up interpreted language such as PHP. You can pretty much live with the just the defaults but if your web project is something that&rsquo;s used by many people across the world then its important that you configure your web server to accommodate the needs of every user. And that is to be able to access your website fast and securely.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.python.org/2/library/simplehttpserver.html">Simple HTTP Server</a></li>
<li><a href="http://www.php.net/manual/en/features.commandline.webserver.php">PHP Built-in Web Server</a></li>
<li><a href="http://httpd.apache.org/docs/">Apache HTTP Server</a></li>
<li><a href="http://nginx.org/en/docs/">Nginx</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Virtualization]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization/"/>
    <updated>2014-02-23T08:16:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization</id>
    <content type="html"><![CDATA[<p>In this third part of the series <a href="http://anchetawern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/">A Whirlwind Tour of Web Developer Tools</a> I&rsquo;ll walk you through virtualization.
But before we dive in let&rsquo;s first define what virtualization is. According to Wikipedia:</p>

<blockquote><p>Virtualization is the act of creating a virtual (rather than actual) version of something, including but not limited to a virtual computer hardware platform, operating system, storage device, or computer network resources.</p></blockquote>


<p></p>

<p>In simple terms virtualization is creating a virtual copy of something. Virtual meaning that its not actually real but you can actually do things just like you do with the real thing.</p>

<!--more-->


<p>The first thing that comes to mind when you say virtualization in the world of computing is Virtualbox, VMWare and other virtualization software. And that&rsquo;s exactly what I&rsquo;m going to talk about in this blog post but of course in relation to web development.</p>

<h3>VirtualBox</h3>

<p>Virtualbox is a free cross-platform virtualization platform. Cross-platform meaning you can run it on every major operating system (Windows, Linux, Mac). And yeah if you haven&rsquo;t catch it the first time its free so you can use it however you want without paying for it.
Virtualbox allows you to run a copy of the operating system that you don&rsquo;t currently have on your machine. For example if you&rsquo;re currently using Ubuntu then you can run Windows or Mac on Virtualbox. And the same is true with whatever operating system you have currently installed physically.</p>

<p>This blog post isn&rsquo;t going to be a whole tutorial about Virtualbox. There&rsquo;s already a bunch of information about that in the <a href="https://www.virtualbox.org/manual/ch01.html">official documentation</a> so use that if you don&rsquo;t know how to use Virtualbox yet. But one thing to keep in mind when using Virtualbox is that you should acquire an installer of the operating system that you want virtualize using Virtualbox just like you do when you want to install it on your machine.</p>

<h3>Emulation Software</h3>

<p>One subject that&rsquo;s related to Virtualization is Emulation. They&rsquo;re sort of similar but they&rsquo;re not. Basically the main difference is the environment (hardware) where the software runs. When you say emulation the environment doesn&rsquo;t necessarily have to be the same to that of the original piece of software that you&rsquo;re trying to run. For example when playing an <a href="http://en.wikipedia.org/wiki/Nintendo_DS">NDS</a> game in your computer. That is possible through the use of an emulator. Your computer doesn&rsquo;t have the same hardware to that of an NDS but the emulator software makes it as if the game is running on an actual NDS hardware.</p>

<p>Whereas Virtualization is running a piece of software, in this case the operating system in the same type of environment.</p>

<p>So why did I just go over the difference between Emulation and Virtualization? That&rsquo;s because emulation is another piece of this whole blog post. You can also use emulation software as a substitute if Virtualization isn&rsquo;t feasible in your case.</p>

<p>Emulation software allows you to run software that you can only run on a specific operating system. For example if you only want to test out the website that you created in Internet Explorer and you&rsquo;re currently running Linux then you can use an emulation software instead of installing a copy of the Windows operating system on Virtualbox. Again I won&rsquo;t be walking you through how to install an emulation software. Instead I&rsquo;ll just provide you with some links to get you started:</p>

<ul>
<li><a href="http://www.winehq.org/">Wine</a> &ndash; windows software emulator for Linux, BSD, Solaris and Mac OS X.</li>
<li><a href="http://www.codeweavers.com/products/crossover-mac/">Crossover</a> &ndash; windows software emulator for Mac.</li>
<li><a href="http://winebottler.kronenberg.org/">Winebottler</a> &ndash; run windows-based programs on Mac.</li>
<li><a href="http://www.cygwin.com/">Cygwin</a> &ndash; provides a unix-like environment and command-line interface for Windows.</li>
<li><a href="http://www.finkproject.org/">Fink</a> &ndash; run unix-based software on Mac.</li>
</ul>


<h3>Vagrant</h3>

<p>Using Virtualbox or emulation software for testing the websites that you have created is nice but what if you need to test it out on a machine with exactly the same environment? Developers are known for making the excuse &ldquo;It works on my machine&rdquo; when the application that they have developed suddenly stops working or acts weird. With Vagrant you can now say goodbye to that excuse. What Vagrant allows you to do is create a virtual copy of a specific operating system and access and modify its files right from the host operating system (the operating system that you&rsquo;re currently running).
It also allows you to install software into the virtual operating system directly from your terminal through the use of <code>ssh</code>.
But what is the advantage of this over using Virtualbox? Its true that you can do any of the things that I&rsquo;ve mentioned above without using Vagrant. But the main advantage I think is the performance. Vagrant allows you to perform the installation of software and manipulating of files right from your host operating system so its a lot faster than booting up your virtual machine and doing your modifications from there. That is especially true if your machine doesn&rsquo;t have the most badass processor, solid state drive, and a bazillion of memory.</p>

<h4>Installing Vagrant</h4>

<p>Vagrant depends on Virtualbox in order to work so you need to have Virtualbox installed before installing Vagrant. The current version of Vagrant at the time of writing of this post is 1.4.3 and its only compatible with version 4.2.16 of Virtualbox. This poses some trouble for Linux users since the official repository for Virtualbox only serves the latest version of Virtualbox which is 4.3.6. For Windows and Mac users there&rsquo;s no problem since you can just download an older version of Virtualbox from <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_4_2">this page</a> and install it using the installer. For Linux users the installers for old versions are also available from that page and you can also try installing Virtualbox using those installers. But as for my personal experience I didn&rsquo;t have any luck with any of those installers. I get an error whenever I try to install it. Thankfully I found a good tutorial on <a href="http://linuxg.net/how-to-install-virtualbox-4-2-16-on-ubuntu-linux-mint-debian-and-fedora/">how to install Virtualbox 4.2.16</a> on some of the most popular Linux distributions. If you didn&rsquo;t have any luck with the installers provided from the Virtualbox site then you might as well try that link.</p>

<p>Once you&rsquo;re done installing Virtualbox you can now download the Vagrant installer from the <a href="http://www.vagrantup.com/downloads">Vagrant downloads page</a> just select the installer that applies for you then install it. The installer will automatically add <code>vagrant</code> to your system path so you can simply use the <code>vagrant</code> command from your terminal without having to specify the path.</p>

<h3>Using Vagrant</h3>

<p>After installing Vagrant you should already have access to the <code>vagrant</code> command from your terminal. You can execute the following command to test out if Vagrant was successfully installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant --version</span></code></pre></td></tr></table></div></figure>


<p>If it returns something like <code>vagrant version 1.2.2</code> then Vagrant was successfully installed on your machine.</p>

<p>The next step is a pretty long wait if you do not have a fast internet connection and the server that is serving the vagrant box files are busy. As for me it took a whole afternoon (around 6-8 hours) for the vagrant box to be fully downloaded.</p>

<p>But before we move on I believe a little background on what a vagrant box is is necessary. Basically vagrant boxes are virtual copies of an operating system. Pretty much like the <code>.vdi</code> or <code>.vmdk</code> file that&rsquo;s being created by Virtualbox or VMWare when you create a virtual machine.</p>

<h4>Adding Vagrant Boxes</h4>

<p>Vagrant boxes can be downloaded from <a href="http://www.vagrantbox.es/">vagrantbox.es</a>. You can add a box to Vagrant by executing the following command from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add box_name url_from_vagrantboxes</span></code></pre></td></tr></table></div></figure>


<p>Where <code>box_name</code> is any machine friendly title (use underscores or dashes instead of spaces) that you want to use to refer to your box later on. And the <code>url_from_vagrantboxes</code> is the URL that you get from the vagrantboxes site. For this tutorial were going to work with the Ubuntu precise 32 box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add precise32 http://files.vagrantup.com/precise32.box</span></code></pre></td></tr></table></div></figure>


<p>After executing the command above you might want to go out a bit or watch a whole season of your favorite TV show unless your download speed is blazingly fast.</p>

<h4>Vagrant Box Configuration File</h4>

<p>Once that&rsquo;s done you can now start using the box as a template for the machine that you need to build. First create your working directory and open up a terminal and execute the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant init</span></code></pre></td></tr></table></div></figure>


<p>This will create a vagrant init file. This file will contain the configuration for the box that you&rsquo;re going to build. The <code>Vagrantfile</code> generated by using <code>vagrant init</code> will just contain comments and some sample configuration. You can read through those comments if you want. But to avoid confusion simply create your own vagrant configuration file by creating a new file and putting the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant.configure("2") do |config|
</span><span class='line'>  config.vm.box = "precise32" #the box_name that you used earlier
</span><span class='line'>  config.vm.box_url = "http://files.vagrantup.com/precise32.box"
</span><span class='line'>  config.vm.network :forwarded_port, guest: 80, host: 8080
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Just name the file <code>Vagrantfile</code> so it can be recognized by vagrant when you execute any vagrant commands. Note that for the value for the <code>config.vm.box</code> it should be the <code>box_name</code> that you used earlier when you executed the <code>vagrant box add</code> command. If you&rsquo;re not sure what the name of your box is then simply execute <code>vagrant box list</code> to list all the boxes that&rsquo;s currently available on your machine. The <code>config.vm.box_url</code> is the url in which vagrant will download the box if it hasn&rsquo;t already been installed in your machine. We already installed the box earlier so vagrant will simply ignore this option. The last setting is the <code>config.vm.network</code> this simply tells vagrant to forward port 80 from the guest machine to port 8080 on the host machine. I&rsquo;ll explain more on this later.</p>

<p>Now you can execute <code>vagrant up</code> to initialize the box. You can see something similar to the following when vagrant has successfully brought up the box:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_virtualization/vagrant-up.png" alt="vagrant up" /></p>

<p>Once this is executed for the first time you will notice that vagrant automatically creates a virtual machine on virtualbox:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_virtualization/vagrant-box.png" alt="virtual machine" /></p>

<p>You can perfectly access this machine from virtualbox if you want to do anything manually from the guest operating system.</p>

<h4>Logging in to the box</h4>

<p>Next execute <code>vagrant ssh</code>. This will allow you to login to the box. After executing that you will see something similar to the following:</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_virtualization/vagrant-login.png" alt="vagrant ssh" /></p>

<h4>Installing Software</h4>

<p>Now you can run wild and go crazy. Install all the applications that you need to install. As for me I&rsquo;m primarily working on a LAMP (Linux, Apache, MySQL, PHP) stack so I&rsquo;m going to install PHP, MySQL, and Apache on this box. But first we need to download the package lists from the software repositories and update the existing ones to get information on the latest versions of packages and their dependencies. You can do that by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get update</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done we can now install the things that we need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "Y" | apt-get install -y apache2 
</span><span class='line'>echo "Y" | apt-get install curl
</span><span class='line'>echo "Y" | apt-get install libcurl3 php5-curl
</span><span class='line'>echo "Y" | apt-get install php5
</span><span class='line'>echo "Y" | apt-get install libapache2-mod-php5
</span><span class='line'>echo "Y" | apt-get install mysql-server
</span><span class='line'>echo "Y" | apt-get install php5-mysql</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>echo "Y"</code> here simply means that we supply <code>Y</code> as the answer if ever the installer asks for a response on whether to install the software or not. <code>Y</code> means yes in this case.</p>

<h4>Linking Up Directories</h4>

<p>Once those are done delete the <code>/var/www</code> directory and all of its contents and create a soft link between the the <code>/vagrant</code> directory and the <code>/var/www</code> directory.  You can do that by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf /var/www
</span><span class='line'>ln -fs /vagrant /var/www</span></code></pre></td></tr></table></div></figure>


<p>You may ask we just deleted the <code>/var/www</code> directory and all of its contents so why are we creating a link to something that&rsquo;s already deleted? Good question! Making a soft link to a non-existent directory has the side-effect of creating that directory. We deleted it so we become the owner of that directory.</p>

<p>Once that&rsquo;s done you can now treat your working directory as if its the <code>/var/www</code> directory in your box. Don&rsquo;t believe me? You can go ahead and create a new file in your working directory (open up a new terminal since the current terminal is referring to your box):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch newfile.txt </span></code></pre></td></tr></table></div></figure>


<p>Now go back to the terminal window in which you have logged in to your box using <code>vagrant ssh</code>. Go back two directories and enter the <code>vagrant</code> directory (this assumes that you&rsquo;re currently in the directory that&rsquo;s listing the <code>postinstall.sh</code> file when you execute the <code>ls</code> command) :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ../../vagrant</span></code></pre></td></tr></table></div></figure>


<p>Now execute the <code>ls</code> command to list out all the files in that directory. You&rsquo;ll see that your <code>newfile.txt</code> is listed. Yes you can go ahead on go crazy and create a whole bunch of files through your host operating system in your working directory. Once you&rsquo;re satisfied come back to this blog post. I&rsquo;ll wait.</p>

<h4>Port-Forwarding</h4>

<p>Now if you remember earlier on the <code>Vagrantfile</code> that you created we have this particular line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.network :forwarded_port, guest: 80, host: 8080</span></code></pre></td></tr></table></div></figure>


<p>What this does is forwarding the port 80 of the guest (your box) to port 8080 of your host operating system. As you might already know port 80 is the default port used by Apache so if we access <code>http://localhost:8080</code> from the browser in the host OS it will actually give us what&rsquo;s in <code>http://localhost:80</code> in the box.
You can test it out by creating an <code>index.php</code> file on your working directory (host OS) and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;hello world from vagrant box&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now access <code>http://localhost:8080</code> from your browser and it will output &lsquo;hello world from vagrant box&rsquo;.</p>

<h4>Logging out of the box</h4>

<p>Once you&rsquo;re done playing with Vagrant you can now execute <code>exit</code> to logout from the box. After that you can either execute <code>vagrant halt</code> to shutdown the box or <code>vagrant suspend</code> to save the state of the machine, its like doing a hibernate so the box won&rsquo;t have to do a full boot when you access the box again. To work with your box again the <code>vagrant resume</code> command is used when you do <code>vagrant suspend</code> and the <code>vagrant up</code> is used when you do a <code>vagrant halt</code>. An important thing to remember is that you should do a <code>vagrant suspend</code> whenever you do not have any changes in your <code>Vagrantfile</code>. This makes it faster to get your guest machine running. However if you have some changes to your <code>Vagrantfile</code> you should do a <code>vagrant halt</code> for the changes to take effect when you do a <code>vagrant up</code>.</p>

<h4>Packaging the box</h4>

<p>Another useful thing that you could do is packaging up the box so that you can share it with your team if you have any. This ensures that you have the same configuration with the rest of your team. This allows you to avoid any incompatibility issues like missing software or a different configuration of the <code>php.ini</code> file if you&rsquo;re primarily working with PHP.</p>

<p>To package up a box, navigate to your working directory and then execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vagrant package --output package.box --vagrantfile Vagrantfile</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the command above will power of the box so you&rsquo;ll have to do <code>vagrant up</code> the next time you want to use the box even if you used <code>vagrant suspend</code> the last time you used it. The command above will also take a bit of time to finish depending on the amount of customization that you have done on the box. You may also end up with a larger <code>.box</code> file than the one that you previously downloaded from vagrantbox.es since all the software that you installed on the box will also be in the <code>.box</code> file that will be generated by vagrant.</p>

<p>Once vagrant is done you will have a <code>package.box</code> file under your working directory. You can then share this file along with the <code>Vagrantfile</code> to the rest of your team so that they can make use of the box. Another team member can just create his working directory and then copy the <code>package.box</code> file to that directory and then execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vagrant box add box_name package.box</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to change the <code>box_name</code> to a more recognizable name. You can also tell your team mate to just name it to be the same as the name of the box that you originally created so they won&rsquo;t need to update the <code>Vagrantfile</code> to use the new box name.</p>

<p>Once that&rsquo;s done they can just use <code>vagrant up</code> to boot up the box.</p>

<h4>Destroying the Box</h4>

<p>If you want to delete a box (note that box in this case refers to the virtual machine that is generated when you executed <code>vagrant up</code>)  you can execute the following from your working directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vagrant destroy</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will delete the virtual machine and free up all the resources (hard disk space, memory, etc.) that it consumed when you created it.</p>

<h4>Removing the Box</h4>

<p>If you want to delete a box (note that box in this case refers to the box that is created when you executed <code>vagrant box add</code>, in other words the box where your box originated from) execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">vagrant box remove box_name provider</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the <code>box_name</code> refers to the name that you used when you created the box using <code>vagrant box add box_name</code>. And the provider refers to the virtualization software. If you do not know the box name and the provider simply execute <code>vagrant box list</code>. This will list out all the vagrant boxes installed on your machine. The one enclosed in parenthesis is the provider. In our case its virtualbox.</p>

<h3>Conclusion</h3>

<p>Virtualization is a great way to experiment on different technologies if you want to avoid messing up your current system configuration. Its also a good way to test out your web projects on different machines without having to install it physically on your current machine.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://www.virtualbox.org/">Virtualbox</a></li>
<li><a href="http://docs.vagrantup.com/v2/">Vagrant Documentation</a></li>
<li><a href="http://www.vagrantbox.es/">Vagrant Boxes</a></li>
<li><a href="http://rove.io/">Rove</a> &ndash; you can use this for easily creating Vagrant files</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Octo-wysiwyg]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/20/introduction-to-octo-wysiwyg/"/>
    <updated>2014-02-20T05:30:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/20/introduction-to-octo-wysiwyg</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve quit my job recently so lots of time freed up for me to learn something and work on personal projects that I&rsquo;ve been thinking of doing since last year. And so the past couple of weeks I&rsquo;ve been busy working on a personal project and learning more on tooling to improve my productivity as a developer.</p>

<!--more-->


<p>Enough about my life story. This blog post is about the project that I was working on recently, and that is Octo-wysiwyg. The first project that I finally got started among the many others that have been buried in the todo list for ages.</p>

<p>Octo-wysiwyg is an app for easily creating posts in Octopress. Yes Octopress is pretty much complete and you can easily create posts by opening up a terminal and using the <code>rake new_post['title of your blog post']</code> command. But after that you usually have to search for the newly created file in the <code>octopress/source/_posts</code> folder and open it up on a text-editor before you can begin writing. That&rsquo;s ok but you have to go through those  steps every time you want to write something. And also you don&rsquo;t get a live HTML preview of the things that you&rsquo;re writing since you are on a text-editor. You can probably use sites like <a href="http://markable.in/editor/">markable.in</a> or <a href="http://dillinger.io/">dillinger.io</a> if you only want a live preview but after that you would need to paste what you have written into the original markdown file that was generated by Octopress.</p>

<p>Enter Octo-wysiwyg, this app allows you to easily create posts by adding keyboard shortcuts to generate common markdown syntax like headings, images, blockquotes, and code blocks.</p>

<h3>Installation</h3>

<p>Copy it anywhere on your file system. Then update the <code>config.rb</code> to include the proper file paths.</p>

<p>This app depends on the following ruby gems so you also have to install it before you can start using the app:</p>

<ul>
<li>sinatra</li>
<li>redcarpet</li>
<li>data_uri</li>
<li>stringex</li>
</ul>


<h3>Using the App</h3>

<p>Execute the following command from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby /path/to/octo-wysiwyg/octo-wysiwyg.rb</span></code></pre></td></tr></table></div></figure>


<p>Or if you want to use <a href="http://rubygems.org/gems/shotgun">shotgun</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shotgun /path/to/octo-wysiwyg/octo-wysiwyg.rb</span></code></pre></td></tr></table></div></figure>


<p>Then access it from the browser when using Sinatra:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:4567</span></code></pre></td></tr></table></div></figure>


<p>Or shotgun:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:9393</span></code></pre></td></tr></table></div></figure>


<h3>Creating a New Post</h3>

<p>You can create a new post by accessing <code>http://localhost:9393/new</code> from your browser. The port number assumes that you&rsquo;re using the shotgun ruby gem. If you&rsquo;re using sinatra use <code>4567</code> as the port. This will give you the following UI:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-20-introduction-to-octo-wysiwyg/newpost.png" alt="new post" /></p>

<p>All you have to do is input the title of your post and click the &lsquo;create post&rsquo; button or press enter.</p>

<h3>Updating Existing Posts</h3>

<p>There are two ways to update existing posts. You can either do it from the edit page (<a href="http://localhost:9393/edit">http://localhost:9393/edit</a>) or from the list page (<a href="http://localhost:9393/list">http://localhost:9393/list</a>). If you do it from the edit page you will have to browse for a markdown file from the <code>octopress/source/_posts</code> folder and click on &lsquo;upload&rsquo;.
If you do it from the list page, you can simply select from the list of posts by clicking on the link:</p>

<p><img src="http://anchetawern.github.io/images/posts/2014-02-20-introduction-to-octo-wysiwyg/posts.png" alt="list of posts" /></p>

<p>Once you&rsquo;ve selected a post you will be redirected to the edit page which looks something like this:
<img src="http://anchetawern.github.io/images/posts/2014-02-20-introduction-to-octo-wysiwyg/octowysiwyg.png" alt="edit page" /></p>

<p>Note that the posts are arranged based on the date that the post was first published.</p>

<h3>Deleting Posts</h3>

<p>You cannot delete existing posts. However, you can set the post to <code>publish: false</code>. This will prevent the post from getting published on your blog the next time you deploy using <code>rake gen_deploy</code>.</p>

<h3>Keyboard Shortcuts</h3>

<p>You can use the following keyboard shortcuts to easily generate markdown syntax:</p>

<ul>
<li><code>ctrl + s</code> &ndash; save post</li>
<li><code>ctrl + 1</code> to <code>ctrl + 6</code> &ndash; headings 1 to 6</li>
<li><code>f1</code> &ndash; code block</li>
<li><code>f2</code> &ndash; read more link</li>
<li><code>ctrl + b</code> &ndash; bold</li>
<li><code>ctrl + i</code> &ndash; italic</li>
<li><code>ctrl + q</code> &ndash; blockquote</li>
<li><code>ctrl + g</code> &ndash; insert markdown image tag</li>
<li><code>ctrl + u</code> &ndash; upload image &ndash; this will prompt you to upload an image, the uploaded image will be automatically added on the current document and the uploaded image will be copied over to the octopress image directory that you selected</li>
</ul>


<h3>Demo</h3>

<p>A demo of the app is available <a href="http://ruby-wern.rhcloud.com/list">here</a> though I&rsquo;ve disabled the upload feature to prevent usage abuse.</p>

<h3>Future Plans</h3>

<p>As people usually say, start with something simple and then iterate afterwards. I&rsquo;m pretty much satisfied with the current features of this app now. The proof is that I&rsquo;m currently using it to write this blog post. However I want to make use of my remaining free time to work on another project so I&rsquo;m going to suspend the development of this project for now. Here are some of the features that I plan to add in the future:</p>

<ul>
<li>emmet-like syntax for generating html and css code</li>
<li>creating pages</li>
<li>line numbers for markdown</li>
</ul>


<h3>Contribute</h3>

<p>If you want to contribute to this project, or you noticed some issues, or you want to throw in some ideas for the next version please visit the <a href="https://github.com/anchetaWern/octo-wysiwyg">octo-wysiwyg github page</a> I&rsquo;d really appreciate i</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A whirlwind Tour of Web Developer Tools: Text Editors]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors/"/>
    <updated>2014-02-15T11:00:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors</id>
    <content type="html"><![CDATA[<p>This is part two of the series A Whirlwind Tour of Web Developer Tools. This time I&rsquo;ll be talking about text editors and related tools.</p>

<p>Text editors are used by web developers to write code. Text editors are not the same thing as word processors because anything written on a text editor is saved as a plain text file and it normally uses a simple character set such as ASCII to represent different characters (letters, numbers, etc). On the other hand word processors saves formatted text which enables tables, symbols and other form of graphical information to be represented without having to use any form of markup like HTML.</p>

<!--more-->


<h4>Sublime Text</h4>

<p>When you say text editor the first thing that comes to mind these days is <a href="http://www.sublimetext.com/">Sublime Text</a>. It&rsquo;s like the sexiest text editor these days. So this whole blog post is primarily going to be about Sublime Text and some of the plugins that I found useful.</p>

<h5>Plugins</h5>

<p>In order to install plugins for Sublime Text you first have to install <a href="https://sublime.wbond.net/">package control</a> which is a package manager for Sublime Text that allows you to easily install plugins. To install package manager copy the following code in the Sublime Text console which can be accessed by pressing <code>ctrl + back tick</code> on your keyboard. After that restart the editor to finish the installation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')</span></code></pre></td></tr></table></div></figure>


<p>Note that the code above is for Sublime Text 2, if you&rsquo;re using Sublime Text 3 then use the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)</span></code></pre></td></tr></table></div></figure>


<p>After restarting sublime text you can now press <code>ctrl + shift + p</code>, select &lsquo;install package&rsquo; and press <code>enter</code>, this will load all the available plugins from the plugin repository. From there you can just search for the plugin that you want to install.</p>

<p>And now for the plugins:</p>

<ul>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCS</a> &ndash; a PHP code quality tool.</li>
<li><a href="http://emmet.io/">Emmet</a> &ndash; previously known as Zen Coding. If that doesn&rsquo;t ring a bell then Emmet is basically a tool for improving productivity by implementing shortcuts for generating code that you would normally write out by hand. All you have to do is to write something like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html:5</span></code></pre></td></tr></table></div></figure>


<p>And right after pressing <code>tab</code> you get a whole bunch of code written out for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">Sidebar Enhancements</a> &ndash; allows you to create a new file and it will immediately ask you the filename, duplicating or copying files and folders from the sidebar, and a bunch of other good stuff that the default sublime text sidebar doesn&rsquo;t allow you to do.</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a> &ndash; allows for easier visualization of where the ending bracket is.</li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a> &ndash; keeps a history of clipboard items so you can just paste them in later.</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">Docblockr</a> &ndash; pretty much like emmet but only for document blocks. Useful for writing comments.</li>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a> &ndash; allows for easy alignment of code. All you have to do is press <code>ctrl + alt + a</code> on your keyboard.</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-for-ST2">Sublime Linter</a> &ndash; inline linting for a bunch of languages (PHP, HTML, CSS, Ruby, etc). If you don&rsquo;t know what linting is, its basically a process of analyzing code to determine potential errors. In most cases its used by web developers to check their code quality against a specific coding standard. For example, when coding in JavaScript its not usually required to put semi-colons but if you&rsquo;re using Sublime linter it will remind you to put those semi-colons in if you forget it. If you have unused variables in your code the linter will also complain and it will tell you that variable <code>z</code> isn&rsquo;t actually used in your code.</li>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime">EditorConfig</a> &ndash; tool for implementing coding conventions. You can use this to specify whether to use tabs or spaces for specific file types (<code>.js</code>, <code>.css</code>) or whether to use double quotes or single quotes for the quote type. You can do all that by installing the editorconfig plugin for the text editor that you&rsquo;re using. Then create a <code>.editorconfig</code> file in the root of your project directory or any directory in your project if you want to use different rules for different directories. Here&rsquo;s a sample <code>.editorconfig</code> file:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root = true
</span><span class='line'>
</span><span class='line'>[*]
</span><span class='line'>end_of_line = lf
</span><span class='line'>insert_final_newline = false
</span><span class='line'>charset = utf-8
</span><span class='line'>trim_trailing_whitespace = true
</span><span class='line'>quote_type = double
</span><span class='line'>
</span><span class='line'>[*.php]
</span><span class='line'>indent_style = space
</span><span class='line'>indent_size = 4
</span><span class='line'>
</span><span class='line'>[*.py]
</span><span class='line'>indent_style = space
</span><span class='line'>indent_size = 4
</span><span class='line'>
</span><span class='line'>[*.js]
</span><span class='line'>indent_style = space
</span><span class='line'>indent_size = 2
</span><span class='line'>
</span><span class='line'>[*.css]
</span><span class='line'>indent_style = space
</span><span class='line'>indent_size = 5
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the sample above you can specify a whole bunch of settings. You can also have different rules for different file types.</p>

<h4>IDE</h4>

<p>There&rsquo;s also this thing called the IDE or Integrated Development Environment which is basically text editors on steroids. They have huge install size since they allow you to do more than just writing code. IDE&rsquo;s packs a bunch of features which you would not normally find in a text editor such as compiling code. Some IDE&rsquo;s such as Visual Studio also allows you to build the GUI of applications by simply dragging and dropping GUI elements (text boxes, buttons, etc.) from a toolbox. Other features include code completion (intellisense), debugger, integrated services (allows viewing and manipulating the database right from the IDE).</p>

<h3>Conclusion</h3>

<p>Text editors and IDEs are the main weapons of every web developer. Without it they won&rsquo;t be able to produce any code. So its important to learn the ins and outs of the text-editor or IDE that you are using to maximize your productivity when using it. Be sure to check out the resources below for more Sublime Text awesomeness.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.hongkiat.com/blog/sublime-text-tips/">Sublime Text Tips and Tricks</a></li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Perfect Workflow in Sublime Text 2</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">Popular Sublime Text Plugins</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">Compariosn of Text Editors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Comparison of Integrated Development Environments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: In-Browser Tools]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/"/>
    <updated>2014-02-09T12:30:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools</id>
    <content type="html"><![CDATA[<p>In this series of blog posts I&rsquo;m going to give you an overview of some of the tools that are commonly used by web developers to get their work done. You can expect some examples on how to install and use each tool but I won&rsquo;t be going too deep. The main purpose is to simply give you an idea on what tools are available, how to use them and encourage you to integrate them into your workflow. Note that the tools that will be mentioned in this blog post aren&rsquo;t platform specific so you can use them whether you&rsquo;re developing in Windows, Linux or Mac. Over the coming weeks I&rsquo;m going to walk you through the following:</p>

<ul>
<li>In-Browser Tools</li>
<li>Text Editor</li>
<li>Virtualization</li>
<li>Web Servers</li>
<li>Command Line Utilities</li>
<li>Package Managers</li>
<li>Source Control</li>
<li>Build Tools</li>
<li>Linting</li>
<li>Testing</li>
<li>Language Compilers</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end Frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous</li>
</ul>


<!-- more -->


<h3>In-Browser Tools</h3>

<p>First on the list is the browser tools. Browser tools are a set of tools that live on the browser which can help you in inspecting and debugging web applications.</p>

<h4>Chrome Developer Tools</h4>

<p>One of the most popular browser tool today is the Chrome Developer Tools. You can access it by pressing <code>Ctrl + Shift + I</code> or <code>Cmd + Opt + I</code> on your keyboard. By default this opens up the last panel that you have accessed.</p>

<ul>
<li><strong>Elements</strong> &ndash; allows DOM inspection and modification, changes are reflected on the page as you update.</li>
<li><strong>Network</strong> &ndash; this is where you can view all of the HTTP requests made by your web project. The size and time it took to download each requested file are also viewable so the network panel is mostly used for evaluating the performance of your web project in terms of the HTTP requests that are made.</li>
<li><strong>Sources</strong> &ndash; used for viewing and updating the source files used by your web project. If you selected a JavaScript file it will also allow you to debug it.</li>
<li><strong>Timeline</strong> &ndash; used for evaluating the performance of your web project in terms of frames and memory consumed</li>
<li><strong>Profiles</strong> &ndash; used for profiling JavaScript performance</li>
<li><strong>Resources</strong> &ndash; kind of similar with the sources panel, but it doesn&rsquo;t allow you to edit the source files. It also allows you to view and modify cookie and local storage information.</li>
<li><strong>Audits</strong> &ndash; evaluates the web page performance in terms of network utilization and css and JavaScript performance.</li>
<li><strong>Console</strong> &ndash; allows you to run JavaScript code and inspect JavaScript objects.</li>
</ul>


<h4>Useful Extensions and Plugins</h4>

<ul>
<li><strong>Web Developer</strong> &ndash; packs various extensions and tools to help in testing web pages <a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">[firefox]</a></li>
<li><strong>Tincr</strong> &ndash; allows live reloading of web pages as you make changes to the source file. The saving of changes is also bi-directional which means that if you edit the file in the sources panel of the Chrome Developer Tools the changes will also get saved to the source file. Pretty sweet! <a href="https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih?hl=en">[chrome]</a></li>
<li><strong>Pagespeed Insights</strong> &ndash; used for evaluating the performance of web pages based on industry best practices. It will give you some suggestions on how you can improve the performance of your website based on its evaluation. <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">[chrome]</a></li>
<li><strong>YSlow</strong> &ndash; the same as Pagespeed Insights. <a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">[firefox]</a></li>
</ul>


<h4>Firefox Developer Tools</h4>

<p>Pretty much the same with the Chrome Developer Tools. It also allows you to inspect and modify a web page, debug JavaScript code, monitor and inspect HTTP requests as they happen. During my testing I found out that most of the features are the same, the only tool that is not present by default in the Chrome Developer Tools is the 3d view for web pages.</p>

<p><img src="http://anchetawern.github.io/images/posts/whirlwind_tour_web_developer_tools/3dview.png" alt="3d view" /></p>

<h4>Firebug</h4>

<p>The in-browser tool that started it all. It was already around before Chrome Dev Tools and Firefox Dev Tools came out. Most of the features are also the same with that of Chrome Dev Tools and Firefox Dev Tools.</p>

<h3>Conclusion</h3>

<p>In-browser tools are a nice way to easily design and test websites. They allow you to do almost everything right from the browser itself. The main benefit of this is instant feedback. You get to see what effect your changes have on the website right after making the change. Tools like tincr even make it possible to commit your changes to your source files so you won&rsquo;t have to go back to the text-editor and commit your changes.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks">Chrome Developer Tools Tools Tips and Tricks</a></li>
<li><a href="https://getfirebug.com/faq/">Firebug</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Tools">Firefox Developer Tools</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the Forbidden Error in Apache]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/"/>
    <updated>2014-02-05T11:33:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache</id>
    <content type="html"><![CDATA[<p>Every time I reformat my machine I always seem to be stuck with the forbidden error in Apache when changing the default web directory. But that ends today since I&rsquo;m going to share the solution that works for me.</p>

<!-- more -->


<p>First you have to edit the <code>apache2.conf</code> file which is stored in the following directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/apache2</span></code></pre></td></tr></table></div></figure>


<p>Open up the file with elevated privileges by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit apache2.conf</span></code></pre></td></tr></table></div></figure>


<p>Then look for the default web directory which is in most cases is <code>/var/www</code>. When you look at the file it looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory /var/www&gt;
</span><span class='line'>  ...
</span><span class='line'>  ...
</span><span class='line'>  ...
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now change it to your preferred location. For me its in the <code>web_files</code> directory inside <code>/home/wern</code>. Also change the directives to follow symbolic links and use multiviews, also set the <code>AllowOverride</code> option to <code>All</code> so <code>.htaccess</code> files can override the default options. Then set the <code>Order</code> option to <code>allow,deny</code> so that the allow directives would be evaluated first before the deny directives. Lastly, set to <code>allow from all</code> option to allow access from all hosts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory /home/wern/web_files&gt;
</span><span class='line'>  Options FollowSymLinks MultiViews
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next edit the the <code>000-default.conf</code> file inside the <code>etc/apache2/sites-available</code> directory and add the same directives that we added on the <code>apache2.conf</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /home/wern/web_files
</span><span class='line'>&lt;Directory /&gt;
</span><span class='line'>    Options FollowSymLinks
</span><span class='line'>    AllowOverride None
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>&lt;Directory /home/wern/web_files&gt;
</span><span class='line'>    Options FollowSymLinks
</span><span class='line'>    AllowOverride All
</span><span class='line'>    order allow,deny
</span><span class='line'>    allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next enable the Apache <code>userdir</code> module by executing the following command in the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo  a2enmod userdir</span></code></pre></td></tr></table></div></figure>


<p>Make the necessary changes on the <code>/etc/apache2/mods-enabled/userdir.conf</code> file by changing the directory path to your desired web directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mod_userdir.c&gt;
</span><span class='line'>  UserDir web_files
</span><span class='line'>  UserDir disabled root
</span><span class='line'>
</span><span class='line'>  &lt;Directory /home/wern/web_files&gt;
</span><span class='line'>      AllowOverride FileInfo AuthConfig Limit Indexes
</span><span class='line'>      Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
</span><span class='line'>      &lt;Limit GET POST OPTIONS&gt;
</span><span class='line'>          Require all granted
</span><span class='line'>      &lt;/Limit&gt;
</span><span class='line'>      &lt;LimitExcept GET POST OPTIONS&gt;
</span><span class='line'>          Require all denied
</span><span class='line'>      &lt;/LimitExcept&gt;
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>&lt;/IfModule&gt;
</span><span class='line'>
</span><span class='line'># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span></code></pre></td></tr></table></div></figure>


<p>Finally, open up the <code>/etc/apache2/mods-enabled/php5.conf</code> file and comment out the following lines by adding the pound sign (#) right before each line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#&lt;IfModule mod_userdir.c&gt;
</span><span class='line'>#    &lt;Directory /home/*/public_html&gt;
</span><span class='line'>#        php_admin_value engine Off
</span><span class='line'>#    &lt;/Directory&gt;
</span><span class='line'>#&lt;/IfModule&gt;</span></code></pre></td></tr></table></div></figure>


<p>To apply your changes to the current Apache instance simply restart the service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>If this doesn&rsquo;t work make sure that your file permissions are ok, then restart Apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod -R 755 /home/wern/web_files</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
