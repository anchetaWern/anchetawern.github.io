<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-07-21T17:14:23+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Linux Development Environment]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/07/13/my-linux-development-environment/"/>
    <updated>2013-07-13T21:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/07/13/my-linux-development-environment</id>
    <content type="html"><![CDATA[<p>A few months ago I shared some of the <a href="http://anchetawern.github.io/blog/2013/05/19/my-windows-development-environment/">development tools that I use in Windows</a>. This time I&rsquo;m going to share some of the tools that I use for developing in Linux.</p>

<h2>Curl</h2>

<p>Curl is a command line tool for getting resources from the internet. I commonly use it for installing other command line tools such as <code>composer</code> and testing access for different API&rsquo;s directly from the command line.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install libcurl3 php5-curl</span></code></pre></td></tr></table></div></figure>


<h3>Sample Usage</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<h2>Node JS</h2>

<p>Node JS is basically server-side JavaScript. I don&rsquo;t currently use Node.js for my projects but I use it for installing NPM packages such as <code>grunt</code> and <code>bower</code>. NPM is short for Node Package Manager just like <code>apt-get</code> for Ubuntu you can use it for installing different command line tools. What&rsquo;s cool is that you don&rsquo;t really have to be using Node JS in order to make use of the awesomeness that&rsquo;s offered by NPM since most of the packages that are available from NPM aren&rsquo;t necessarily tools that are exclusive to be used for developing Node JS applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-software-properties python g++ make
</span><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<h3>Sample Usage</h3>

<p>You can install packages from the terminal using the <code>npm install</code> command. You can use the <code>-g</code> option to install the package globally, meaning you can directly use the commands available for the specific package that you installed from any terminal Window.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g grunt-cli</span></code></pre></td></tr></table></div></figure>


<h2>Ruby</h2>

<p>I&rsquo;m not really into Ruby (not yet). I mainly install it because its required by Octopress which is the platform that I use for blogging.</p>

<h3>How to Install</h3>

<p>The easiest way to install Ruby is by using <a href="https://rvm.io/">RVM</a>, a command line tool that was specifically created to install, manage and work with multiple ruby environments.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>If RVM doesn&rsquo;t work for you you can also try <a href="https://github.com/scottmuc/yari">YARI</a> (short for Yet Another Ruby Installer).</p>

<h2>Composer</h2>

<p>Composer is a package manager for PHP. Much like <code>PEAR</code> but <code>PEAR</code> is already old school so composer is the way to go if you want to easily install PHP packages directly from the command line.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php
</span><span class='line'>sudo mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<h2>Git</h2>

<p>Git is a distributed version control system. I mainly use it for maintaining sane snapshots of the applications that I develop. But its also useful for cloning existing tools directly into your machine.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:pdoes/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install git-core</span></code></pre></td></tr></table></div></figure>


<h2>Apache</h2>

<p>Apache is the Web server that I use for serving the PHP applications that I create.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<h2>PHP</h2>

<p>PHP is the main language that I use for developing web applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5
</span><span class='line'>sudo apt-get install libapache2-mod-php5</span></code></pre></td></tr></table></div></figure>


<h2>MySQL</h2>

<p>MySQL is the database management system that I use with PHP developing dynamic applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install php5-mysql</span></code></pre></td></tr></table></div></figure>


<h2>Octopress</h2>

<p>Octopress is the platform that I use for blogging. But aside from that it also installs a bunch of tools that I use for developing web applications (haml, sass, compass, etc.) so I&rsquo;m hitting 2 birds with one stone when I install Octopress.</p>

<h3>How to Install</h3>

<p>Octopress requires <code>Ruby 1.9.3</code> so you must install that one first. After that you can execute the following commands to install Octopress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>Sublime Text</h2>

<p>Sublime Text is the text editor that I use since its very extensible because of the <a href="http://wbond.net/sublime_packages/package_control">package control</a>.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo pt-get install sublime-text</span></code></pre></td></tr></table></div></figure>


<h3>Sublime Text Plugins</h3>

<ul>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a></li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a></li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees Color Schemes</a></li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">DocBlockr</a></li>
<li><a href="http://emmet.io/">Emmet</a></li>
<li><a href="https://github.com/welovewordpress/SublimePhpTidy">PHPTidy</a></li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">SidebarEnhancements</a></li>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCs</a></li>
</ul>


<h2>Koala</h2>

<p>Koala is a tool for automatically compiling and minifying less, sass, coffeescript, and compass files.</p>

<h3>How to Install</h3>

<p>You can install it by downloading directly from the website: <a href="http://koala-app.com/">koala-app</a>.
If you&rsquo;re having an issue with launching the app you can install <code>libudev 0</code>:</p>

<ul>
<li><a href="https://launchpad.net/ubuntu/+source/udev/175-0ubuntu19/+build/4325790/+files/libudev0_175-0ubuntu19_i386.deb">libudev 0 for 32bit</a></li>
<li><a href="https://launchpad.net/ubuntu/+source/udev/175-0ubuntu19/+build/4325788/+files/libudev0_175-0ubuntu19_amd64.deb">libudev 0 for 64bit</a></li>
</ul>


<h2>Chromium</h2>

<p>Chromium is the alternative for Google&rsquo;s Chrome browser in Linux. What&rsquo;s great about it is that it still has the Chrome Developers tools and you can also install some of the extensions that you already install on Chrome. You can install Chromium directly from the Ubuntu Software Center.
Here are some of the extensions that I usually install on Chromium to aid in my development:</p>

<ul>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp?hl=en">Axure RP Extension</a></strong> &ndash; useful for viewing RP Prototypes directly from the browser</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">PageSpeed Insights</a></strong> &ndash; an extension from Google which gives you some suggestions regarding what you can do to improve the performance of the website that you&rsquo;re developing.</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko?hl=en">Session Buddy</a></strong> &ndash; I usually use this to create a snapshot of my current browser session so that I can always go back to them at a later time.</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm?hl=en">Web Developer</a></strong> &ndash; this extension adds a bunch of web developer tools to Chromium such as tools for validating HTML and CSS, displaying ARIA roles (useful for website accessibility purposes), and displaying the current browser size (useful for targeting a specific breakpoint when you&rsquo;re doing responsive design).</p></li>
</ul>


<h2>Filezilla</h2>

<p>Filezilla is an FTP client that I use for accessing the files for the websites that I work on. You can install it directly from the Ubuntu Software Center.</p>

<h2>Everpad</h2>

<p>My Evernote client of choice for Ubuntu. This is where I write all my todos for each day. Once I&rsquo;m done with a specific task I put a strikethrough in the list item to indicate that its already done.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:nvbn-rm/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install everpad</span></code></pre></td></tr></table></div></figure>


<h3>Apt-Fast</h3>

<p>I use <code>apt-fast</code> as a replacement for <code>apt-get</code> for downloading and installing packages in Ubuntu. <code>apt-fast</code> is like <code>apt-get</code> on roller blades in that its very fast in downloading packages. You can use it by simply replacing the usual <code>apt-get</code> with <code>apt-fast</code>.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:apt-fast/stable
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apt-fast</span></code></pre></td></tr></table></div></figure>


<h2>Virtualbox</h2>

<p>Virtualbox is an open-source OS virtualization application which you can use to install and use different Operating Systems right inside Ubuntu. Its very useful for when you need to use an application that&rsquo;s not available on Ubuntu (E.g. IE 9 and 10). You can install Virtualbox via the Ubuntu Software Center.</p>

<h2>Skype</h2>

<p>Skype is the instant messaging application that I use for collaborating with co-employees since I&rsquo;m working remotely. As of the time of writing Skype is available for Ubuntu 10.04 32-bit on the <a href="http://www.skype.com/en/download-skype/skype-for-computer/">Skype website</a> but you can also install it on higher versions of Ubuntu.</p>

<h2>Dropbox</h2>

<p>Dropbox is the application that I use for easily sharing files. I mostly use it for work when I have to share a screenshot or a text file. I use it over Skype file sharing because the receiver doesn&rsquo;t have to download the file on their machine just to view it. With Dropbox I can simply share the link via Skype and the receiver can simply open it up on their browser. You can install Dropbox directly from the Ubuntu Software Center.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spatial search with Apache Solr and Google Maps]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps/"/>
    <updated>2013-07-03T21:33:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how to setup spatial search in Apache Solr then were going to create an application which uses Spatial searching with the use of Google Maps.</p>

<h2>What is Spatial Searching?</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Geomatics">Wikipedia</a>:</p>

<blockquote><p>Geospatial technology or geomatics engineering is the discipline of gathering, storing, processing, and delivering geographic information, or spatially referenced information.</p></blockquote>


<p>For the purposes of this tutorial were going to use Spatial search to find the locations which are near the place that we specify.</p>

<h2>Configure schema.xml File</h2>

<p>First you need to configure the <code>schema.xml</code> to include a special field type called location. This field type is specifically used for geospatial searching. Depending on the Solr version that you&rsquo;re running on your machine it may or may not already be included on the default <code>schema.xml</code> file. But in case its not already included, here&rsquo;s what you have to add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.LatLonType&quot;</span> <span class="na">subFieldType=</span><span class="s">&quot;tdouble&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can create a dynamic field that would use that specific field type by simply supplying the value for the <code>type</code> attribute to be <code>location</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;locm_*&quot;</span> <span class="na">type=</span><span class="s">&quot;location&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that you can now declare fields which will use the dynamic field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;locm_places&quot;</span><span class="nt">&gt;</span>12.3456,-987.65<span class="nt">&lt;/field&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the example above, you can use dynamic fields by using the its name as the prefix for any field. In this case the prefix that we used is <code>locm_</code>. On the dynamic field declaration earlier we used the star <code>*</code> to tell to Solr that any field which uses the strings before the star will be using the attributes for this dynamic field.</p>

<h2>Geocoding</h2>

<p>We need actual coordinates as our data-source for the project that were going to build later on so were going to use the Google Geocoding API to convert places into coordinates. I&rsquo;m just going to use some places in my town as an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$places</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;San Fernando (La Union) Fire Station, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;San Fernando (La Union) PNR&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Catbangen Central School, Gualberto Street, San Fernando City, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Don Mariano Marcos Memorial State University, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;TESDA Regional Training Center, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Lorma Colleges, San Fernando City, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;marcos building san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;CICOSAT Medical Hospital, MacArthur Highway, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Gifted Learning Center, Gov. Nisce Street, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Union Christian College, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;High Altitude Discotheque, Aguila Road, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Bethany Hospital, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sea and sky college san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Chowking, Gov. Luna Street, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;saint williams cathedral san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ilocanos norte community school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zaragosa elementary school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;bacnotan national highschool&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;busel-busel elementary school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;luna public cemetery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;paratong elementary school&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If you want you can also use places in your town. Just make sure you check it with the Google Geocoding API first so that you know that it actually returns something. You can just paste the following URL in your browser&rsquo;s address bar and replace <code>SOME_PLACE_THAT_YOU_KNOW</code> with an actual place that you know, well-known and highly accessible places in your town is a great choice since there will be a greater chance that its already been geocoded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://maps.googleapis.com/maps/api/geocode/json?address=SOME_PLACE_THAT_YOU_KNOW&amp;sensor=false</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>It&#8217;s important that you set the sensor to false since were not actually using a device with a location sensor (GPS locator) in this application.</p></blockquote>


<p>Next we use the Google Geocoding API to convert the places that we specified earlier into a coordinate (latitude and longitude). Here were simply extracting the data returned from the Google Geocoding API for each of the places then storing it in a variable called <code>$data</code>. Then we convert it back to a JSON string using the <code>json_encode()</code> method.</p>

<blockquote><p>Id is a required attribute for documents indexed in Solr so we have to generate a unique ID for each of the places that were going to add. Also remember to use dynamic fields that are already available from the schema.xml file in Solr. In this case were using the dynamic field ss_* which has a data type of string to store the name of the place, and the dynamic field locm_* to store the coordinates of the place.</p></blockquote>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://maps.googleapis.com/maps/api/geocode/json?address=place&amp;sensor=false&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$id_prefix</span> <span class="o">=</span> <span class="s1">&#39;SUPER&#39;</span><span class="p">;</span> <span class="c1">//it&#39;s a good idea to prefix your Solr ID&#39;s just to make sure it won&#39;t have the same id as something that already exists</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$places</span> <span class="k">as</span> <span class="nv">$i</span> <span class="o">=&gt;</span> <span class="nv">$place</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$request_url</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;place&#39;</span><span class="p">,</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$place</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$url</span><span class="p">);</span> <span class="c1">//replace the place string in the url with the urlencoded address</span>
</span><span class='line'>  <span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$request_url</span><span class="p">);</span> <span class="c1">//make the actual request to the google geocoding api</span>
</span><span class='line'>  <span class="nv">$results</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span> <span class="c1">//google geocoding api returns a JSON string so we have to use json_decode() to convert it to an array</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$data</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$id_prefix</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ss_place&#39;</span> <span class="o">=&gt;</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">address_components</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">short_name</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;locm_lat&#39;</span> <span class="o">=&gt;</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">geometry</span><span class="o">-&gt;</span><span class="na">location</span><span class="o">-&gt;</span><span class="na">lat</span> <span class="o">.</span> <span class="s1">&#39;,&#39;</span> <span class="o">.</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">geometry</span><span class="o">-&gt;</span><span class="na">location</span><span class="o">-&gt;</span><span class="na">lng</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$doc</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span> <span class="c1">//convert the data to a json string</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next make the request to the Solr server to update the index using <code>curl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$solr_update_url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/update/json&#39;</span><span class="p">;</span> <span class="c1">//the url for updating the solr index using a json document</span>
</span><span class='line'><span class="nv">$solr_commit_url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/update?commit=true&#39;</span><span class="p">;</span> <span class="c1">//the url for commiting the updates</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//specify that we want to return the response so we can store it in a variable</span>
</span><span class='line'>    <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Content-type:application/json&quot;</span><span class="p">),</span> <span class="c1">//header type</span>
</span><span class='line'>    <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="nv">$solr_update_url</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CURLOPT_POST</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//specify that we want to post a data</span>
</span><span class='line'>    <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nv">$doc</span><span class="p">,</span> <span class="c1">//the data that we want to post</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$update_response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//commit the changes to SOLR</span>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="nv">$solr_commit_url</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$commit_response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Building the Application</h2>

<p>Now for the fun part, let&rsquo;s start building the application. You&rsquo;re going to need to download and link up the following resources if you want to follow along:</p>

<ul>
<li>jQuery</li>
<li>jQuery UI (Use the custom builder to only include the dependencies of jQuery UI slider and the Slider itself)</li>
<li>Google Maps API Key (you&rsquo;re going to need a Google Account, just access the <a href="http://code.google.com/apis/console">Google Console</a> and activate the Google Maps API)</li>
</ul>


<p>The application that were going to build is simple, were just going to need a text field in which the user will input the base location, then a slider to adjust the distance. The markers that points out the nearby places which matches the current distance will automatically be updated once the user moves the slider.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;jquery-ui/css/ui-lightness/jquery-ui-1.10.3.custom.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&quot;http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&amp;sensor=false&amp;libraries=places&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>Location:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;location&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;slider&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-canvas&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--the container of the map--&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jquery-ui/js/jquery-ui-1.10.3.custom.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then on the <code>style.css</code> file sprinkle some css that will make the presentation slightly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#map-canvas</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">90</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#slider</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then on the <code>script.js</code> file add the code that will set the default map options. Were just going to make everything global so we can access them from anywhere.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">loc</span><span class="p">;</span> <span class="c1">//this will store information about the current base location selected by the user</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">markers_array</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">//this will store an array of the markers that were created</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the map options</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">map_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">center</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="mf">16.61096000671</span><span class="p">,</span> <span class="mf">120.31346130371</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">zoom</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span> <span class="c1">//set zoom level to 17 </span>
</span><span class='line'>    <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span> <span class="c1">//set map type to road map</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//layout the map in the page</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map-canvas&quot;</span><span class="p">),</span> <span class="nx">map_options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">homeLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="mf">18.35827827454</span><span class="p">,</span> <span class="mf">121.63744354248</span><span class="p">);</span> <span class="c1">//set the base coordinate</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the marker for the base coordinate</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">homeMarker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">position</span><span class="o">:</span> <span class="nx">homeLatlng</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">draggable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//get the text field which the user will use to search for a base location</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;location&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">places</span><span class="p">.</span><span class="nx">Autocomplete</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span> <span class="c1">//google maps autocomplete</span>
</span><span class='line'>
</span><span class='line'><span class="nx">autocomplete</span><span class="p">.</span><span class="nx">bindTo</span><span class="p">(</span><span class="s1">&#39;bounds&#39;</span><span class="p">,</span> <span class="nx">map</span><span class="p">);</span> <span class="c1">//bind the selected place in the autocomplete text field to the map</span>
</span><span class='line'>      
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> executed when a place is selected from the search bar</span>
</span><span class='line'><span class="cm"> this will automatically adjust the map settings to display the place that was entered in the text field</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">autocomplete</span><span class="p">,</span> <span class="s1">&#39;place_changed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">place</span> <span class="o">=</span> <span class="nx">autocomplete</span><span class="p">.</span><span class="nx">getPlace</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//if the selected location has a geometry then show it on the map</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">fitBounds</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">);</span> <span class="c1">//automatically adjust the display on the viewport</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setCenter</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span> <span class="c1">//if the location doesn&#39;t have a geometry, use the location</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setZoom</span><span class="p">(</span><span class="mi">17</span><span class="p">);</span> <span class="c1">//set the zoom level to 17</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">homeMarker</span><span class="p">.</span><span class="nx">setMap</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span> <span class="c1">//place the marker in the map</span>
</span><span class='line'>    <span class="nx">homeMarker</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span> <span class="c1">//set the position of the marker based on the selected location</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//update the global variable which stores the current location</span>
</span><span class='line'>    <span class="nx">loc</span> <span class="o">=</span> <span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a method to clear the markers, this will be used to clear the markers every time the distance is updated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clear_markers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">markers_array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">markers_array</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setMap</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the code for when the user moves the slider, were going to bind it to a text field so the actual value is visible to the user. The value will have a unit of kilometers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#slider&quot;</span><span class="p">).</span><span class="nx">slider</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">slide</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">clear_markers</span><span class="p">();</span> <span class="c1">//clear all the markers that are currently in the map</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="c1">//the selected distance</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get the latitude and longitude from the location that we updated  earlier</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">coordinate</span> <span class="o">=</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">lat</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">lng</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//create the object which will store the data that were going to pass through solr</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;coordinate&#39;</span> <span class="o">:</span> <span class="nx">coordinate</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;distance&#39;</span> <span class="o">:</span> <span class="nx">distance</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#distance&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">distance</span><span class="p">);</span> <span class="c1">//update the text field which shows the current distance</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//make the request</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://my.dev/tester/geocoding/get_nearby_places.php&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span> <span class="c1">//convert the JSON string to a JavaScript object</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">results</span><span class="p">.</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">places</span> <span class="o">=</span> <span class="nx">results</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">docs</span><span class="p">;</span> <span class="c1">//the actual places that were returned by solr</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">place_count</span> <span class="o">=</span> <span class="nx">places</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">markers</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//loop through all the places that were returned</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">place_count</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">coordinate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">places</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;locm_lat&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span> <span class="c1">//convert the string to an array</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">coordinate</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">coordinate</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//create the marker which points out the nearby places</span>
</span><span class='line'>          <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">position</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//push the marker to the array which stores the markers so we can clear them later</span>
</span><span class='line'>          <span class="c1">//when user moves the slider again</span>
</span><span class='line'>          <span class="nx">markers_array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">marker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, add the code which will make the query to the Solr server to get the places which are near to the selected location. What were doing here is constructing the URL needed to make the request to the solr server, then getting the actual response that was returned and then outputting it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//the url for querying solr, 8080 is the port where solr is running</span>
</span><span class='line'><span class="nv">$url</span>  <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&amp;fq=&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the string that we need to replace in the query</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;BASE_COORDINATE&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;DISTANCE&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the string that were going to use as a query</span>
</span><span class='line'><span class="nv">$replace</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;coordinate&#39;</span><span class="p">],</span> <span class="c1">//the latitude and longitude pair (eg. 123.111,456.233)</span>
</span><span class='line'>  <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="c1">//the selected distance</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//replace the placeholder text with the input supplied by the user then encode the part of the url which has the query</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">.=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="nv">$search</span><span class="p">,</span> <span class="nv">$replace</span><span class="p">,</span> <span class="s1">&#39;{!geofilt pt=BASE_COORDINATE sfield=locm_lat d=DISTANCE}&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;wt=json&#39;</span><span class="p">;</span> <span class="c1">//set the response type to json</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span> <span class="c1">//get the json string returned from the query</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$response</span><span class="p">;</span> <span class="c1">//output the json string</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The output will look like this:</p>

<p><img src="http://anchetaWern.github.io/images/posts/spatial_search_with_apache_solr_and_google_maps/output.PNG" alt="asana" /></p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial, you&rsquo;ve learned how to use Solr&rsquo;s spatial search with Google Maps.
You can further improve the application that we just built. For example, you can make a distinction to the marker for the selected location by giving it a different color or icon since the marker for that is currently the same with the markers for locations which are near the selected location. You can also add filters, for example only show nearby restaurants to the location that you selected.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://wiki.apache.org/solr/SpatialSearch">Solr Spatial Search</a></li>
<li><a href="https://developers.google.com/maps/">Google Maps API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Apache Solr]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/06/15/getting-started-with-solr/"/>
    <updated>2013-06-15T12:35:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/06/15/getting-started-with-solr</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;ll be looking at Apache Solr.
Apache Solr is a search server. Its features include blazing fast searches, faceted search, handling of files such as PDF and Word.</p>

<h2>Installing Solr</h2>

<p>If you&rsquo;re on Windows you can install Solr by getting the installer from <a href="http://bitnami.com/stacks">BitNami</a>.
Just search for Solr, download the installer and install it on your machine.</p>

<h2>Solr Manager</h2>

<p>After the installation is complete you can now access the Solr Manager where you can Start, Stop or Restart the server.
If its not started yet click on the start button.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/solr_manager.PNG" alt="solr manager" /></p>

<h2>Solr Admin</h2>

<p>To test if Solr is working, access the Solr admin page from your browser. For me its at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8080/solr/#/</span></code></pre></td></tr></table></div></figure>


<p>The port depends on what port you have selected when you installed Solr.
If you&rsquo;re using Virtual hosts you can also access the Solr admin page using it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://my.dev:8080/solr</span></code></pre></td></tr></table></div></figure>


<p>The Solr admin page currently looks like this. I&rsquo;m running version 4.3.0. It might look a little bit different if you have installed a different version:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/solr_admin.PNG" alt="solr admin" /></p>

<p>There&rsquo;s not really much that you can do with the Solr admin page.
The only parts that you might want to look at is the Logging and Core Selector.</p>

<p>The logging is where you can find warnings and errors with regards to the whole runtime of the Server.
The core selector is where you can select the collection that you want to manage.
Upon installation Solr already creates a default collection called <code>collection1</code>.
Any documents that you add will be automatically added to this collection.
That said, you can think of collections as drawers in which you store your documents.
In database terms they are like your database and the documents that you store on it are like the tables in a database.
Throughout this tutorial we&rsquo;ll only be working with the <code>collection1</code> collection.</p>

<h3>Overview</h3>

<p>Once you have selected a collection you can see an overview of it by clicking on the overview tab:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/overview.PNG" alt="collection overview" /></p>

<p>Information like the date the collection was last modified, number of documents, maximum number of documents, deleted documents can be seen from this page.</p>

<h3>Query</h3>

<p>The query tab is where you can play with some queries to manipulate the current collection. The default query is the select query which simply returns results which matches your query.
There&rsquo;s also the update query which is mainly used to update the contents of documents.</p>

<blockquote><p>Note that when using the select query in Solr you don&#8217;t usually specify the document in which the results that you&#8217;re looking for is stored. Solr simply knows where to find what you&#8217;re looking for without telling it where to find something.</p></blockquote>


<p>To use the query builder you simply need to specify what you&rsquo;re looking for.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/query_json.PNG" alt="query json" /></p>

<p>Here are some of the parameters that you can specify:</p>

<ul>
<li><strong>request handler</strong> &ndash; the action that you want Solr to do. The most common ones are <code>select</code> and <code>update</code>.
You can also create your own request handlers but that would be best discuss on another article.</li>
<li><strong>q</strong> &ndash; your query. Its common format is:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>field name:"query"</span></code></pre></td></tr></table></div></figure>


<p>So imagine we have added a document into Solr which composed of book names and their authors. If you want to get all the books whose title begins with the word &lsquo;national&rsquo; then here&rsquo;s what your query would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>q=book_title:"national*"</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>fq</strong> &ndash; short for filter query. If you want to filter the results returned by your query you can make use of this parameter. For example, if you want to select only the books which has a price within the range of 19 to 90 you do something like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fq=price:[19 TO 90]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>sort</strong> &ndash; sort is how you would like the results to be sorted. So if you want to sort the results by price in ascending order, that is books with lower price comes first and books with higher prices comes later. You do something like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sort=price asc</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>fl</strong> &ndash; short for fields. This is the parameter where you can specify the fields that you want to return. So for example if you only want to return the book title and the price of the book you do something like:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fl=book_title,price</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>wt</strong> &ndash; short for writer type, but that doesn&rsquo;t make any sense so we&rsquo;ll go by the name response type. This allows you to specify the way the results will be formatted. In solr you can have one of the following:</p>

<ul>
<li>json</li>
<li>xml</li>
<li>php</li>
<li>ruby</li>
<li>python</li>
<li>csv</li>
</ul>
</li>
</ul>


<p>The default one used by Solr is <code>xml</code>. But the most commonly used is <code>json</code> since you can simply convert it to a data readable by php, ruby, python, javascript or probably any language that you can think of.</p>

<h3>Schema</h3>

<p>The schema tab is where the <code>schema.xml</code> file can be previewed in a nicely formatted way (with all the syntax highlighting goodness). The <code>schema.xml</code> file simply describes the fields for each collection. If you have worked with MySql database for a while this is like the <code>information_schema</code> database which shows you all the information you want to know about each of the databases, tables and fields in MySql.
But for the <code>schema.xml</code> file it only contains information about a specific collection. So each collection have its own <code>schema.xml</code> file. The <code>schema.xml</code> file is stored in the following directory for <code>collection1</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\solr\collection1\schema.xml</span></code></pre></td></tr></table></div></figure>


<p>The <code>schema.xml</code> file contains a lot of information regarding the data stored in a collection. You can add new fields and field types into this file so that Solr will know what type of data the specific documents will store.
Fields in Solr comes in 2 forms:</p>

<ul>
<li><strong>Fields</strong> &ndash; allows you to specify field names that will directly match what field names you include in the documents that you want to add to Solr. Here&rsquo;s how to define a field that will store book titles:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fields commonly has 5 attributes which you can specify:</p>

<ul>
<li><p><strong>name</strong> &ndash; the name that you want to give to the field. This would be the same as the naming conventions for every database system or programming language that you can think of. So numbers and symbols can&rsquo;t be used as the start of a field name. Only alphanumeric characters and underscores are allowed for the field name.</p></li>
<li><p><strong>type</strong> &ndash; the type of data that the field will store. Common data types are: <code>float</code>, <code>long</code>, <code>short</code>, <code>double</code>, <code>string</code>, <code>date</code> and <code>text</code>.</p></li>
<li><p><strong>indexed</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. If you do not want the specific field to be searched you can use <code>false</code>. Using <code>false</code> simply means that using the specific field in a query won&rsquo;t return anything since it can&rsquo;t be searched on.</p></li>
<li><p><strong>stored</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. Use <code>false</code> if you do not want the field to be retrievable.</p></li>
<li><p><strong>multivalued</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. You use <code>true</code> if the field contains more than one value. For example a tag for a specific blog post. A blog post can have many tags so the tag field should have its <code>multivalued</code> attribute set to <code>true</code>.</p></li>
<li><p><strong>Dynamic Fields</strong> &ndash; allows you to specify a common data type, indexed, and stored value for fields which has a specific suffix. Here&rsquo;s how to define a dynamic field for fields which has integer and string data types:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_i&quot;</span>  <span class="na">type=</span><span class="s">&quot;int&quot;</span>    <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_s&quot;</span>  <span class="na">type=</span><span class="s">&quot;string&quot;</span>  <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also add copy fields which are used for copying one document to another when a document is added in the Solr index. It can be used to index the same field in a different way or adding multiple fields to the same field for faster indexing. Copy fields has 2 attributes, the <code>source</code> and the <code>destination</code>. The <code>source</code> is the field which you want to add a copy field to. And the destination can either have a value of a data type or an existing field.</p>

<p>Here&rsquo;s how to add a copy field into the <code>book_title</code> field to store a copy of the field with a data type of text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;book_title&quot;</span> <span class="na">dest=</span><span class="s">&quot;text&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dynamic fields can also be used as the value for destination. So for example you have a field called <code>author</code> which has a data type of <code>text_general</code>. You add a copy field to it using the dynamic field which has a suffix of <code>_s</code>. So the value for destination would be the name of the field plus the suffix used in the dynamic field. The copy field would now be stored as a string since it will simply inherit the data type of the dynamic field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_s&quot;</span>  <span class="na">type=</span><span class="s">&quot;string&quot;</span>  <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;author&quot;</span> <span class="na">dest=</span><span class="s">&quot;author_s&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding Documents</h2>

<p>By default Solr doesn&rsquo;t have any documents that you can work on. You&rsquo;ll have to manually add them.
There are 2 ways in which you can add documents. Either by using <code>post.sh</code> or <code>curl</code>.</p>

<p>There are some sample documents stored in the following directory in Windows once you install Solr:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\exampledocs
</span></code></pre></td></tr></table></div></figure>


<p>Examine each of those files to see what&rsquo;s common with them. Solr expects a specific format in which the documents will be. For xml files it should adhere with this format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;add&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span><span class="nt">&gt;</span>123<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span><span class="nt">&gt;</span>Don&#39;t Make me think<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;price&quot;</span><span class="nt">&gt;</span>39<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'><span class="nt">&lt;/add&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see from the markup above that you have to use <code>add</code> tags as a wrapper. This will tell Solr that the documents inside of it will be added to the index.
And each row in that document will be wrapped in <code>doc</code> tags. Each field will be wrapped in <code>field</code> tags.
Each field will have an attribute called <code>name</code> in which you specify the name of the field in which the value specified belongs.</p>

<blockquote><p>Note that documents has a required field called id. Your document won&#8217;t be indexed by Solr if it doesn&#8217;t have an `id` field. This uniquely identifies the row. If you have examined the sample documents you will see that each of them has an id field. Also note that the fields that you used in the documents that you want to add to Solr has fields which are already added to the schema.xml file otherwise the document won&#8217;t be added.</p></blockquote>


<p>To add those documents into the Solr index open the command line and navigate to the directory where the documents are stored:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd c:\BitNami\solr-4.3.0-0\apache-solr\exampledocs
</span></code></pre></td></tr></table></div></figure>


<p>Then run the following command to add all of the xml documents to the Solr index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>post.sh *.xml
</span></code></pre></td></tr></table></div></figure>


<p>If you want to add a specific xml file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>post.sh books.xml
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Note that only xml documents can be added using post.sh. You can try using the curl method if you want to add a json document or any other type of document to the solr index.</p></blockquote>


<p>If you don&rsquo;t see any sort of errors once the command finished executing then you&rsquo;re good to go.
If not then you might need to add the fields used in each of those documents in the <code>schema.xml</code> file which you can find in the following directory if you&rsquo;re on Windows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\solr\collection1\conf
</span></code></pre></td></tr></table></div></figure>


<p>To add a field you simply add a line like this in your <code>schema.xml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell Solr that the <code>book_title</code> field can be used in any of the documents that you will add to the Solr index.</p>

<blockquote><p>Note that you have to stop the Solr service from running when you&#8217;re editing the schema.xml file.<br/>Once you&#8217;re done with the changes you can simply start the service again so that the changes that you have in the schema.xml file will be reflected to the current instance of the service.</p></blockquote>


<h2>Manipulating the Data</h2>

<p>You can access the data from Solr server by going to the browser and visiting the following address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>http://localhost:8080/solr/select?q=*:*
</span></code></pre></td></tr></table></div></figure>


<p>The host will normally be <code>localhost</code> if you&rsquo;re using Solr on your machine. The port depends on the port that you selected when you installed Solr. I&rsquo;ve already discussed earlier how you can query the Solr server. So what I&rsquo;ll discuss in this section is how to access and manipulate the data coming from Solr using PHP and JavaScript.</p>

<h3>Getting Data using JavaScript</h3>

<p>You can use an ajax request to request for the data from the Solr server. The easiest way to perform an ajax request is by using the jQuery library. In the example below were specifying the value for the request url to be the same as the url that were using to access the data directly from the browser. Were also specifying the type as <code>GET</code>, this means that we will perform a <code>GET</code> request to the server. The value used for the <code>dataType</code> is <code>jsonp</code> since the Solr server is running on a different port from the apache server on the local machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do some magic with the data</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Getting Data using PHP</h3>

<p>You can get the data using PHP by using the <code>file_get_contents</code> method. Then you can convert the json string returned using the <code>json_decode</code> method. After that you can just loop through the data like a normal PHP array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$contents</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating the Data using PHP</h3>

<p>You can update the data in Solr by updating the contents of the document that you want to update and then re-indexing it again using the <code>post.sh</code> utility. But you can also update the documents using PHP.</p>

<p>First get the data that you want to update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$contents</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nv">$docs</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;response&#39;</span><span class="p">][</span><span class="s1">&#39;docs&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next do the updates. In the example below were adding a new field called course into the document. We also have to unset the version since Solr will be the one to update this attribute. Then we simply copy the current row into the <code>$new_docs</code> variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$new_docs</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$docs</span> <span class="k">as</span> <span class="nv">$d</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$id</span> <span class="o">=</span> <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$course</span> <span class="o">=</span> <span class="nx">get_course</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;course&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$course</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">unset</span><span class="p">(</span><span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;_version_&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$new_docs</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we use <code>curl</code> to update the document in Solr. Solr allows you to update documents using the <code>update</code> path and the format in which the data passed is formatted. In this case its in json format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$json_doc</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$new_docs</span><span class="p">);</span> <span class="c1">//convert the array to a json string</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//curl will return something instead of directly outputting</span>
</span><span class='line'>    <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Content-type:application/json&quot;</span><span class="p">),</span> <span class="c1">//specify content type as json</span>
</span><span class='line'>    <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:8080/solr/update/json&#39;</span><span class="p">,</span> <span class="c1">//the request url</span>
</span><span class='line'>    <span class="nx">CURLOPT_POST</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//set the request type to POST</span>
</span><span class='line'>    <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nv">$json_doc</span><span class="p">,</span> <span class="c1">//the data that we want to pass in</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span> <span class="c1">//execute, you can assign a variable to this to check if the request suceeded or not</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The data has already been updated but it hasn&rsquo;t been committed yet. So we have to make a separate request to commit the recent changes. That is by using the parameter <code>commit</code> and specifying its value as <code>true</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//commit the changes</span>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:8080/solr/update?commit=true&#39;</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you check the results returned from the browser you&rsquo;ll see that the data has already been updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://localhost:8080/solr/select?q=*:*</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>That&rsquo;s it! We have only scratched the surface in this introduction to Solr.
Be sure to check out the resources below if you want to learn more about Solr.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://bitnami.com/stacks">BitNami</a></li>
<li><a href="http://wiki.apache.org/solr/FrontPage">SolrWiki</a></li>
<li><a href="http://www.solrtutorial.com/">SolrTutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Wordpress Plugin Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/26/getting-started-with-wordpress-plugin-development/"/>
    <updated>2013-05-26T16:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/26/getting-started-with-wordpress-plugin-development</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through process of creating Wordpress plugins.
First I&rsquo;m going to talk about some of the basic concepts in Wordpress plugin development like the actions, hooks, and API&rsquo;s that makes up Wordpress. Then were going to build a plugin where we apply some of the concepts and best practices in developing Wordpress plugins.</p>

<!--More-->


<h3>Prerequisites</h3>

<p>In order to fully benefit from this tutorial you should have a basic knowledge on PHP.
As Wordpress is running on PHP and most of the code that we will be writing will be on PHP.
A little bit of knowledge on HTML, CSS and JavaScript is also helpful but not required for this tutorial.</p>

<h3>Folder Structure</h3>

<p>Download Wordpress from <a href="http://wordpress.org/download/">Wordpress.org</a> and extract its contents on the web accessible folder. It&rsquo;s usually the <code>public_html</code>, <code>www</code> or <code>htdocs</code> folder in your server.
Here&rsquo;s how the folder structure looks like:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_wordpress_plugin_development/folder_structure.PNG" alt="wordpress folder structure" /></p>

<p>That&rsquo;s a lot of files and folders but there are only a few of those that we will have to touch:</p>

<ul>
<li><strong>wp-content</strong> &ndash; this is where the plugin and theme files are stored.</li>
<li><strong>wp-config.php</strong> &ndash; the Wordpress configuration file where you can specify things like the database settings, character set, authentication unique keys and salts, language and many others. You can see all the possible settings from this page: <a href="http://codex.wordpress.org/Editing_wp-config.php">Editing wp-config.php</a>.</li>
</ul>


<p>And under the <code>wp-content</code> folder:</p>

<ul>
<li><strong>languages</strong> &ndash; this is where the site-wide language files are stored. They&rsquo;re usually in <code>.mo</code> files.</li>
<li><strong>themes</strong> &ndash; this is where the theme files are stored. Every theme has its own folder.</li>
<li><strong>plugins</strong> &ndash; this is where the plugin files are stored. Like the theme files each plugin also has its own folder.</li>
<li><strong>uploads</strong> &ndash; this is where the files that were uploaded by the users goes.</li>
</ul>


<p>If you don&rsquo;t know how to install Wordpress check out the guide at Wordpress codex: <a href="http://codex.wordpress.org/Installing_WordPress">Installing Wordpress</a></p>

<h3>Things to Remember</h3>

<p>Here are some of the things that you have to remember when creating Wordpress plugins.</p>

<h4>Enable WP-DEBUG</h4>

<p>First you have to enable <code>wp_debug</code> since its not enabled by default.
Open up the <code>wp-config.php</code> file which you can find on the Wordpress root directory and add the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//enable error reporting in Wordpress
</span><span class='line'>define('WP_DEBUG', true);</span></code></pre></td></tr></table></div></figure>


<p>When <code>wp_debug</code> is enabled the error reporting is set to <code>E_ALL</code> which means that all PHP warnings, notices and errors are outputted on the screen. By default Wordpress doesn&rsquo;t display these errors mainly because every Wordpress installation is production-ready. And you would never really want your users to see those errors.</p>

<h4>Use Wordpress functions</h4>

<p>Always use some of the built-in Wordpress functions when writing plugins or themes.
This is the trap where most beginners fall. And I admit that I also fell to this trap when I was just starting to get my way through wordpress.
Beginners often do things like they normally do in PHP. For example instead of using the <code>wp_remote_get()</code> function they use <code>curl</code> or <code>file_get_contents()</code>.
Instead of using <code>$wpdb</code> they use <code>MySqli</code> or a third-party library to access the database. There&rsquo;s a lot of functions built into Wordpress that allows you to do almost anything so be sure to check out the <a href="http://codex.wordpress.org/Function_Reference">function reference</a> first before you write a single line of code that uses PHP functions.</p>

<h4>Use Tools</h4>

<p>Aside from the text-editor there are also other tools that you can use for developing Wordpress plugins and web development in general. Here are some of the tools that I recommend:</p>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a> &ndash; general web development tool.</li>
<li><a href="http://wordpress.org/extend/plugins/debugger/">Wordpress Debugger</a> &ndash; debugging plugin for Wordpress.</li>
<li><a href="http://wordpress.org/extend/plugins/cron-view/">Cron View</a> &ndash; allows you to view the tasks scheduled in wp-cron.</li>
<li><a href="https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate">Wordpress Plugin Boilerplate</a> &ndash; template for building Wordpress plugins.</li>
<li><a href="http://www.sublimetext.com/">Sublime Text Editor</a></li>
</ul>


<h4>Use Best Practices</h4>

<p>You have to develop Wordpress plugins using some of the best practices that are favored by the community in general. This will make your code more readable, more maintainable, more consistent and more secure.</p>

<ul>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/css">CSS Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/javascript">JavaScript Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/html">HTML Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/php">PHP Coding Standards</a></li>
<li><a href="http://www.sitepoint.com/10-must-know-skills-for-a-wordpress-plugin-developer/">10 Must Know Skills for a Wordpress plugin Developer</a></li>
</ul>


<p>I recommended reading through some of the standards above then decide for yourself which to follow and apply to your own projects. At the end of the day you should only follow what specific coding style feels right for you.</p>

<p>Here are some of the coding standards that I specifically apply to my own projects:</p>

<h5>HTML</h5>

<ul>
<li>Use HTML5 when creating Wordpress plugins and themes. To use HTML5 all you have to do is specify the HTML5 doctype <code>&lt;!DOCTYPE html&gt;</code>.</li>
</ul>


<p>Then you can start using some of the HTML5 elements and attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;nav&gt;&lt;/nav&gt;</span>
</span><span class='line'><span class="nt">&lt;/header&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;aside&gt;&lt;/aside&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;article&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-id=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-name=</span><span class="s">&quot;lee&quot;</span> <span class="na">data-age=</span><span class="s">&quot;18&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;footer&gt;&lt;/footer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Single-space before closing self-closing tags.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Comments when closing elements. Text-editors can already highlight the closing tags for a specific element if you click on its opening tag but its always nice to have visual on which tags closes what.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;story-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;details&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--/#person--&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span><span class="c">&lt;!--/.story-container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>CSS</h5>

<ul>
<li>Single space after the property.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>New line for each selector.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.dragon</span><span class="o">,</span>
</span><span class='line'><span class="nc">.pig</span><span class="o">,</span>
</span><span class='line'><span class="nc">.rat</span><span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Avoiding slow selectors. Always remember that css is read by the browser from left to right.
For example we are selecting all the anchor tags in our container:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#container</span> <span class="nt">a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">brown</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Converting this css selector to plain english we get: select the element with an id of <code>container</code> and then select all the anchor tags within it.</p>

<p>But this is how the browser reads it: select all the anchor tags and then filter it down to just the tags that are within the element with the id of <code>container</code>.</p>

<p>Just by reading it in plain english we know that the latter takes more time.</p>

<p>Go through this article: <a href="http://csswizardry.com/2011/09/writing-efficient-css-selectors/">Writing efficient css selectors</a> and learn how to write faster css selectors.</p>

<h5>JavaScript</h5>

<ul>
<li><p>Use jQuery, Mootools or any other library that makes it easier for you to write code that will work across different browsers.</p></li>
<li><p>Don&rsquo;t use reserved words when naming variables. This is true for other programming languages as well. If you&rsquo;re not certain that the variable that you&rsquo;re going to use is a reserved word then just do a quick google search or check out this <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words">list of reserved words</a> from the Mozilla Developer Network.</p></li>
<li><p>Use <code>var</code> when declaring every variable. I prefer doing it this way:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fname</span> <span class="o">=</span> <span class="s1">&#39;gon&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lname</span> <span class="o">=</span> <span class="s1">&#39;freecs&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fname</span> <span class="o">=</span> <span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="nx">lname</span> <span class="o">=</span> <span class="s1">&#39;freecs&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Always use semi-colons where appropriate. Some developers prefer to ommit the semi-colons because of this automatic semi-colon insertion thing on the browser. This makes semi-colons kinda not required for some instances because the browser already does it for you.</p></li>
<li><p>Use bracket notation when declaring arrays.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span> <span class="s1">&#39;kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;ponzo&#39;</span><span class="p">,</span> <span class="s1">&#39;hisoka&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the curly bracket notation when declaring objects.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;fname&#39;</span> <span class="o">:</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lname&#39;</span> <span class="o">:</span> <span class="s1">&#39;zoldyc&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;nen_type&#39;</span> <span class="o">:</span> <span class="s1">&#39;transmutation&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;abilities&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;lightning palm&#39;</span><span class="p">,</span> <span class="s1">&#39;thunderbolt&#39;</span><span class="p">,</span> <span class="s1">&#39;godspeed&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Always wrap the properties of an object in single-quotes. They&rsquo;re not really required if the property doesn&rsquo;t use dashes or any other fancy character but its always nice to have consistency.</p></li>
<li><p>Always use the bracket notation to access values from objects and arrays.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;fname&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;lname&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dot notation looks a bit easier to write but its limited to just strings without special characters.
You can&rsquo;t also use the dot notation to access array indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">fname</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">lname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//this is not possible </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always use <code>break</code> when using <code>switch</code> statements:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span> <span class="s1">&#39;kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;ponzo&#39;</span><span class="p">,</span> <span class="s1">&#39;hisoka&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span><span class="p">(</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;gon&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;kurapika&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;hisoka&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases you may want to use a fallthrough like the one below to continue execution on the next case if a single case has been met. But you normally wouldn&rsquo;t want to do that. Mainly becase of maintenance issues later on. You will ask yourself: &ldquo;did I forgot the break here or I really intended this one to fall through?&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">switch</span><span class="p">(</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;gon&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;kurapika&#39;</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;hisoka&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <code>for</code> loops instead of <code>for in</code> loops.
Mainly because its faster (atleast according to benchmarks). And there&rsquo;s really very little use case for <code>for in</code> loops. Everything you can do with <code>for in</code> loops you can actually do by just using a <code>for</code> loop.
Take the following example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">cnt</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">cnt</span><span class="p">;</span> <span class="nx">d</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="s1">&#39;fname&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">names</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="s1">&#39;lname&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can always do the example above by using a <code>for in</code>. It also looks cleaner and more concise.
But I always prefer <code>for</code> loops because its more performant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">names</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="s1">&#39;fname&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">names</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="s1">&#39;lname&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Cache DOM selections when you atleast want to use those selections in 2 or more places.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>PHP</h5>

<ul>
<li>PHP tags should always be written like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;hello world!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And not this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;hello world!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always include opening and closing curly braces when using <code>if</code> statements even if you don&rsquo;t think that there will be other things to add inside your <code>if</code> statements later on.
So I always favor this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The second version looks much more cleaner but see what happens when you add another line after the else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You would expect that the second line will only be outputted when the animal is a cat. But the actual output would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">its a dog</span>
</span><span class='line'><span class="x">duh!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ommitting the curly braces only works when there&rsquo;s only a single line of code inside of it.
PHP actually interprets the code this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Variables should be named in a smart and concise way. You don&rsquo;t want variable names that are too long like <code>$first_prime_number</code>. Each variable should directly communicate what the value it stores is all about like <code>$amazon_id</code> or <code>$flickr_key</code>.</p></li>
<li><p>Always start a new line if the line of code gets longer than the length of the whole text-editor when in its full size. I always prefer this:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;SELECT username FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span>
</span><span class='line'>          <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span> <span class="s2">&quot;SELECT username FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always use prepared statements when accessing the database.
This will improve the database security for your plugin.
Prepared statements prevents <a href="http://en.wikipedia.org/wiki/SQL_injection">sql injection</a> which is basically the use of clever techniques to get the data out of your database by manipulating sql code.</li>
</ul>


<p>Using <a href="http://en.wikipedia.org/wiki/Prepared_statement">prepared statements</a> in wordpress is easy. You just have to use the <code>$wpdb-&gt;prepare()</code> method to create a prepared statement. What makes it secure is that the query is compiled first along with the placeholders and then later on the parameters are assigned to the compiled query. Lastly it will be executed. Yes I know I haven&rsquo;t explained that really well but if you&rsquo;ve used templating engines like Smarty, handlebars, or mustache before the idea of prepared statements is pretty much similar. First the template is compiled, in the case of prepared statements its the query along with the placeholders. Once its compiled the parameters for that query are assigned to the template. Lasty its executed to produce the actual results of that specific query.
Anyway here&rsquo;s an example on how to use a prepared statement in wordpress:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span><span class="p">){</span>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_row</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;SELECT fname, lname FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span>
</span><span class='line'>          <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$row</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use code formatting tools whenever you feel lazy implementing a specific coding convention. I personally use <a href="https://github.com/welovewordpress/SublimePhpTidy">Sublime PHP tidy</a> to format the code to make it compliant to the Wordpress coding standards because some of the coding standards just doesn&rsquo;t feel right for me.
For example this specific block of code is preferred by the Wordpress community:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>While I prefer this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>See the difference? I believe there&rsquo;s too much spaces in the first one and I&rsquo;m too lazy to press the spacebar everytime I need to add those spaces. That&rsquo;s why its always nice to have tools like Sublime PHP Tidy to do the formatting for you. Another nice plugin is the <a href="https://github.com/wbond/sublime_alignment">Sublime Alignment</a> which just allows you to select a block of code and have it aligned like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$name</span>  <span class="o">=</span> <span class="s1">&#39;Eren&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$lname</span> <span class="o">=</span> <span class="s1">&#39;Jaeger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Namespace all your classes, functions and variables.
This is because other plugins might be using the same variable names or function names.
This will lead to conflicts in the code and may cause errors since the default values are already overriden something that is not supposed to be the correct value.
Namespacing is a good precaution to prevent this from happening.
If you&rsquo;re writing your code in a procedural way then you should namespace all the variables and functions.
If you&rsquo;re writing your code in an object-oriented way then you should be fine with just namespacing the class since the class already encapsulates everything within.</li>
</ul>


<p>You can namespace your methods and variables by simply prefixing it with your name and the name of the plugin.
For the plugin that were trying to create it will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">nrue_zam_get_users</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But you can also have just the plugin name if you think the name of your plugin is unique enough and you have already done a google search for that specific plugin name. If it doesn&rsquo;t exists yet then you&rsquo;re good to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_users</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re writing your plugin in an object-oriented way there&rsquo;s no need to namespace variables and methods that are inside the class. You just need to be sure that your plugin name is unique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">zam</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">get_users</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h5>Data Validation</h5>

<p>Always remember to use data validation techniques in both the client and the server side.
You need client side because you don&rsquo;t want the user to wait for a whole page refresh before he&rsquo;s informed that the data that he inputted is actually invalid. You also need server-side because some malicious users might try to compromise the site or even innocent users which didn&rsquo;t format their input very well.
Wordpress has actually got our back covered because of the built-in data validation methods that they have:</p>

<ul>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_html">esc_html</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_attr">esc_attr</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_js">esc_js</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_url">esc_url</a></li>
<li><a href="http://codex.wordpress.org/Class_Reference/wpdb#Protect_Queries_Against_SQL_Injection_Attacks">$wpdb->prepare</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_sql">esc_sql</a></li>
</ul>


<p>Be sure to check out each of these methods and know what they can do for you.
There&rsquo;s a lot more methods which you can use to validate data in Wordpress. Read the following article at Wordpress codex for more information: <a href="http://codex.wordpress.org/Data_Validation">Data Validation</a></p>

<h3>Important Concepts</h3>

<p>There are only 3 important concepts that you have to remember when working with Wordpress: API&rsquo;s, Filters and Actions.</p>

<h3>API&rsquo;s</h3>

<p>Wordpress is composed of many different API&rsquo;s. But you&rsquo;ll only have to tap into the API&rsquo;s that corresponds to what you want to do with your plugin. If you need your plugin to have an options page then look into the <a href="http://codex.wordpress.org/Options_API">options API</a> and <a href="http://codex.wordpress.org/Settings_API">Settings API</a>. If you want your users to publish posts easily then you could use the <a href="http://codex.wordpress.org/Shortcode_API">shortcodes API</a>. If you want your plugin to have its on widget then you can use the <a href="http://codex.wordpress.org/Widgets_API">Widgets API</a>.
Here&rsquo;s a list of all the API&rsquo;s that you could use in Wordpress: <a href="http://codex.wordpress.org/WordPress_APIs">Wordpress API&rsquo;s</a></p>

<h4>Filters</h4>

<p>These are built-in Wordpress functions which you could hook into to modify the content displayed in your site.
For example if you want to modify the content of a blog post you just add a filter to the content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_filter</span><span class="p">(</span><span class="s1">&#39;the_content&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$content</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//you&#39;re awesome code goes here</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So for example if the blog entry that was published has this content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://google.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you want to turn it into a link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can just add a filter to the content and use regular expressions to find the url&rsquo;s in the content and wrap it in anchor tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_filter</span><span class="p">(</span><span class="s1">&#39;the_content&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$content</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$content</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
</span><span class='line'>                  <span class="s2">&quot;#((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|</span><span class="se">\&quot;</span><span class="s2">|&#39;|:|\&lt;|$|\.\s)#ie&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s2">&quot;&#39;&lt;a href=</span><span class="se">\&quot;</span><span class="s2">$1</span><span class="se">\&quot;</span><span class="s2"> target=</span><span class="se">\&quot;</span><span class="s2">_blank</span><span class="se">\&quot;</span><span class="s2">&gt;$3&lt;/a&gt;$4&#39;&quot;</span><span class="p">,</span> <span class="nv">$content</span>
</span><span class='line'>              <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Actions</h4>

<p>These are built-in Wordpress functions which you could hook into to respond to some events or to execute some functions when a certain event in Wordpress happens. Some of the most commonly used actions are:</p>

<ul>
<li><strong>admin_init</strong> &ndash; you could hook into this action to execute some code for when the admin page is initialized.
The most common use case is when initializing the options page for your plugin:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>widgets_init</strong> &ndash; you could hook into this action to register the widgets for your plugin or unregistering widgets that won&rsquo;t look good in the Wordpress theme that you&rsquo;ve created.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;widgets_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">register_widget</span><span class="p">(</span><span class="s2">&quot;zam_tweets_widget&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>wp_ajax</strong> &ndash; you could hook into this action to register a method that would respond to ajax calls.
Unlike other actions you can register multiple methods that would respond to specific ajax calls.
You just have to prefix the name you want to give to the method that will respond to the ajax call with either <code>wp_ajax</code> or <code>wp_ajax_nopriv</code>. <code>wp_ajax</code> only responds to users which are logged in while <code>wp_ajax_nopriv</code> only responds to ajax calls which are public or anonymous. This means that it responds only to users of your site that aren&rsquo;t logged in. So if you want your method to be accessible to both logged in and anonymous users then you need to hook to both <code>wp_ajax</code> and <code>wp_ajax_nopriv</code> just like in the example below:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;wp_ajax_nopriv_get_tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_get_tweets&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;wp_ajax_get_tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_get_tweets&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>custom action hooks</strong> &ndash; you can also have custom action hooks which is commonly used in scheduled tasks. This can be defined by using a custom hook name which should be namespaced by the plugin name. Then supplying a callback function that will be executed once the scheduled task is executed.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">wp_schedule_event</span><span class="p">(</span><span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1200</span><span class="p">,</span> <span class="s1">&#39;daily&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_save_search_images&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;zam_save_search_images&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$data</span> <span class="o">=</span> <span class="nx">ecom_save_images</span><span class="p">();</span>
</span><span class='line'>  <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;asin_file&#39;</span><span class="p">],</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>About the Plugin</h3>

<p>Before we dive into creating the plugin I&rsquo;ll tell you what the plugin that were going to build is all about.
The plugin will fetch the tweets of a specific user given that the tweets are not set to private. It will have an options page and a widget.
The options page is where the admin will input the twitter ID of the person in which to fetch tweets from.
And the widget is going to display the tweets in the public area of the website.
The plugin will also have a feature of publishing tweets based on a page number supplied by the user and a random index generated by the plugin.</p>

<h3>Creating the Plugin</h3>

<p>You can create a new plugin by creating a new folder under the <code>wp-content/plugin</code> directory.
In our case the name of the plugin that were going to create is <code>Zam</code> so were going to name the folder <code>zam</code>.
And inside it create a file and name it <code>zam.php</code>.
Open the <code>zam.php</code> file and tell Wordpress the details of your plugin.
You can do that by putting the following information inside a PHP multi-line commment right after your first opening PHP tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Plugin Name: Zam</span>
</span><span class='line'><span class="cm">Plugin URI: http://zam-wp-plugin.io</span>
</span><span class='line'><span class="cm">Version: 1.0</span>
</span><span class='line'><span class="cm">Author: Nrue</span>
</span><span class='line'><span class="cm">Description: </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Standard plugin information includes the plugin name, plugin url or the address where your plugin can be downloaded, the version of your plugin, the author and the description. But you can also add other information like the Author URI and the license that you want to use. You can check out <a href="http://www.tldrlegal.com/">tldrlegal.com</a> and search any license that you can use (E.g GPL, Apache2, MIT) and read on some of the benefits of using that particular license. Once you&rsquo;ve selected something just put on the name of the license as the value for the <code>License</code> attribute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">License: Apache2</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once you&rsquo;ve set that up you can already see your plugin from the list of installed plugins in the admin page:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_wordpress_plugin_development/zam_plugin.PNG" alt="installed plugins" /></p>

<p>You can activate it by clicking on the <code>activate</code> link. But we won&rsquo;t do that for now since the plugin really does nothing at the moment.</p>

<p>Now that we have checked that wordpress is already aware with our plugin were ready to build the plugin.
First start of by creating a class and its constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Important:<br/>The constructor is where we initialize the data to be used by the plugin.<br/>It is also where we call all the hooks and actions.</p></blockquote>


<p>Next declare the variables that were going to use throughout the class:</p>

<p> <code>
 &lt;?php
private $protocol;
private $settings;
private $twitter_id;
 ?&gt;
</code></p>

<p>The protocol stores the protocol used by the server. It can either be http or https.
The settings stores the settings for the plugin.<br/>
The twitter id stores the twitter id of the user. This can be extracted from the settings but its better to store it in its own variable.</p>

<p>Going back to our constructor now we can initialize the data that the plugin will be using throughout the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">=</span> <span class="nx">is_SSL</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;https://&#39;</span> <span class="o">:</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>Important:<br/>Always check for the existence of a specific option item because you can&#8217;t always expect it to actually have a value stored in it. This will lead to notices being outputted out if you don&#8217;t perform the check first. It&#8217;s always good to use ternary operators for this purpose.</p></blockquote>


<h4>Plugin Options</h4>

<p>Next create a new PHP file and call it <code>zam-options.php</code> this is where we will put the code specific to the options page of our plugin.</p>

<p>Then build a class which will have a constructor that will assign the options to the <code>$options</code> variable.
This will store things like the twitter id of the user and other options that we might want to add later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam_Options</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$options</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register_settings_and_fields</span><span class="p">();</span> <span class="c1">//registers all the options for the plugin</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the constructor were calling the <code>get_option</code> method which simply gets a specific option from the Wordpress database. These options are stored in the <code>wp_options</code> table which has 4 fields:</p>

<ul>
<li><strong>option_id</strong> &ndash; auto increment unique id for the option</li>
<li><strong>option_name</strong> &ndash; the name of the options. In this case the name of the option for our plugin is <code>zam_options</code>.</li>
<li><strong>option_value</strong> &ndash; this can either have a string or a serialized string. The value is a string for default wordpress options like the <code>siteurl</code> or the <code>blogdescription</code>. But for option pages its a serialized string which looks like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">a:2:{s:16:&quot;enablexmlsitemap&quot;;s:2:&quot;on&quot;;s:36:&quot;post_types-attachment-not_in_sitemap&quot;;b:1;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t look friendly when compared to a simple json string simply because its actually storing the type of data and the length. <code>s:2</code> simply means string with a length of 2, which is true since the string &ldquo;on&rdquo; which is supplied as its value is a string and has 2 characters. <code>b:1</code> simply means boolean with a length of 1.</p>

<ul>
<li><strong>autoload</strong> &ndash; can have a value of <code>yes</code> or <code>no</code>. The default value is <code>yes</code> which usually means that the option can be fetched directly when using the <code>get_option</code> method.</li>
</ul>


<p>From the constructor were also calling the <code>register_settings_and_fields</code> this setups all the fields and sections in our plugin options page. Fields are the text fields, radio buttons, and check boxes that can be included in the options page. And sections are the groups in which these fields belong.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">register_settings_and_fields</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">register_setting</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">);</span> <span class="c1">//register zam_options as an option in the option group called zam_options</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//add a section called zam_options_main </span>
</span><span class='line'>  <span class="nx">add_settings_section</span><span class="p">(</span><span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Main Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_options_create&#39;</span><span class="p">),</span> <span class="k">__FILE__</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//create the zam_twitter_id field and add it to the zam_options_main section</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">create_fields</span><span class="p">(</span>
</span><span class='line'>      <span class="k">__FILE__</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">$this</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Twitter ID&#39;</span> <span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>              <span class="s1">&#39;function&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;display_twitter_id&#39;</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You might have notice that were using <code>__('text', 'text')</code> all over the place.
This is a good practice in Wordpress even if you don&rsquo;t plan to have your plugin available for many different languages. Were doing this to prepare our plugin for localization. <code>__()</code> is actually a method in wordpress used for localizing text. The first argument is the text itself and the second argument is the text domain. In this case the text domain is the name of the plugin but you can also have something else which directly relates to the plugin so that it can easily be distinguished what plugin does it belong to.</p>

<blockquote><p>Important:<br/>The localization will actually work without the text domain. That is if you are certain that the words, phrases and sentences used in your plugin are already localized and is already available in your current Wordpress installation.<br/>The importance of the text domain is to tell Wordpress that the specific text is localized for a specific plugin. <br/>The language file is usually stored in the languages directory in the root of the plugin. The load_plugin_textdomain is used to load those language files into Wordpress and the text is translated on the fly.</p></blockquote>


<p>Back to our <code>register_settings_and_fields</code> method, we are also calling the <code>zam_options_create</code> which job is to fill the section with the desired content. Its a required parameter so we have to supply it even if were really doing nothing with it at the moment since we are going to have a separate function to display each field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">zam_options_create</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Still in our <code>register_settings_and_fields</code> method, we are also calling the <code>create_fields</code> method.
This method will create all of the fields and sections in our plugin options page.
The first argument is the menu page in which to display the field. In this case were just going to use the built-in magic constant in PHP called <code>__FILE__</code> which simply stores the full path and the file name of the current file (zam-options.php).
The second argument is the context of the method that is going to display the specific field.
In this case were simply going to use the  <code>$this</code> keyword, since all the methods that were going to use for displaying the fields are class members and <code>$this</code> refers to the current object of the class.
The third argument is the section id. You can name it whatever you like but be sure to name it to something unique and it must directly relate to the plugin. In this case were just going to use the plugin name and the options word as the prefix then the name of the section.
The fourth argument is an array which stores an array for each field. The array contains the unique id for the field, the label to be used for the field, and the function that will display the field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">create_fields</span><span class="p">(</span>
</span><span class='line'>  <span class="k">__FILE__</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$this</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Twitter ID&#39;</span> <span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="s1">&#39;function&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;display_twitter_id&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next let&rsquo;s take a look at the <code>create_fields</code> method which we called above to create the sections and fields for our options page. Here we are simply looping through the contents of the fourth argument that we supplied above and passing in those arguments to the <code>add_settings_field</code> method. The <code>add_settings_field</code> method is a built-in method in Wordpress that allows us to register a field to a settings page.
It takes the same arguments as our <code>create_fields</code> methods. Since the <code>create_fields</code> method is just some sort of a factory so we don&rsquo;t have to call <code>add_settings_field</code> every time we need to create a new field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">create_fields</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="nv">$class</span><span class="p">,</span> <span class="nv">$section_id</span><span class="p">,</span> <span class="nv">$field_data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$field_data</span> <span class="k">as</span> <span class="nv">$field</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">add_settings_field</span><span class="p">(</span><span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;function&#39;</span><span class="p">]),</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$section_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the <code>display_twitter_id</code> method which displays the twitter id field. Nothing fancy here were just echoing out plain old HTML and supplying the value for that specific field if its present. But a good practice in naming is using the name of the options page as somewhat like the name of the array and the id of the field as the specific key that you want to access:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">display_twitter_id</span><span class="p">(){</span>
</span><span class='line'>  <span class="nv">$zam_twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;input type=&#39;text&#39; name=&#39;zam_options[zam_twitter_id]&#39; class=&#39;regular-text&#39; id=&#39;zam_twitter_id&#39;  value=&#39;</span><span class="si">{</span><span class="nv">$zam_twitter_id</span><span class="si">}</span><span class="s2">&#39;/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the function that will display all the fields and sections in the options page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>  
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">display_fields</span><span class="p">(){</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&quot;wrap&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="nx">screen_icon</span><span class="p">();</span> <span class="c1">//display the default icon for an options page ?&gt; </span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;?</span><span class="nx">php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Zam Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'><span class="x">      &lt;form action=&quot;options.php&quot; method=&quot;post&quot; id=&quot;zam_settings_forms&quot; data-validate=&quot;parsley&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">settings_fields</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;table class=&quot;form-table&quot;&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> <span class="nx">do_settings_sections</span><span class="p">(</span> <span class="k">__FILE__</span> <span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/table&gt;</span>
</span><span class='line'><span class="x">          &lt;p class=&quot;submit&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;input type=&quot;submit&quot; name=&quot;submit&quot; id=&quot;submit&quot; class=&quot;button button-primary&quot; value=&quot;Save Changes&quot;&gt;</span>
</span><span class='line'><span class="x">          &lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>display_fields</code> method will display a form element which will wrap the <code>settings_fields</code> and <code>do_settings_sections</code> method.
The <code>settings_field</code> method displays the option page fields that are added to the option group.
The option group in this case is <code>zam_options</code> which we supplied as the first argument when we called the <code>register_setting</code> field earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">register_setting</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>do_settings_sections</code> method displays all the sections added in a specific settings page. In this case the settings page is the file itself so were going to use the <code>__FILE__</code> magic-constant again to refer to the current settings page.</p>

<blockquote><p>Its a good practice to use the built-in view source feature in the browser (or better yet Chrome Dev Tools elements panel) to check out the existing mark-up that Wordpress uses in each of the pages that you want to create. This will give you an idea which classes to apply for each elements.</p></blockquote>


<p>Lastly, the method that will add a menu page. The <code>add_menu_page</code> has 4 required parameters:</p>

<ul>
<li>page title</li>
<li>menu title</li>
<li>capability</li>
<li>menu slug</li>
</ul>


<p>The <strong>page title</strong> is the text that you see in the browser tab when you access the page.
The <strong>menu title</strong> is the text that you see in the Wordpress menu on the left side of the screen when you access the admin page.
The <strong>capability</strong> is the minimum capability required so that the current user can have access to that options page. In this case if the current user has the ability to manage the options then he can access the page. Check out the <a href="http://codex.wordpress.org/Roles_and_Capabilities">Roles and Capabilities section</a> in Wordpress codex for more information on this.
The <strong>menu slug</strong> is simply the name which refers to that specific menu. You can think of it as the ID to that specific menu.</p>

<p>In the code below we also supplied a fifth argument which is the function that will display the fields for that specific menu page. We also used the <code>add_submenu_page</code> method, the only difference between this method and the <code>add_menu_page</code> is that the menu added using <code>add_menu_page</code> will be automatically displayed once you access the specific options page. And the <code>add_submenu_page</code> is simply used to add a submenu for that options page which means that it will be displayed right after the menu added using the <code>add_menu_page</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">add_menu</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_menu_page</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Zam&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;zam&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="s1">&#39;manage_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;display_fields&#39;</span> <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_submenu_page</span><span class="p">(</span><span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="s1">&#39;manage_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;display_fields&#39;</span> <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Plugin Widget</h4>

<p>Now let&rsquo;s create the widget that will display the tweets of the user supplied in the options page.
Create a new file and call it <code>zam-tweets-widget.php</code>. You can place the widgets in a separate directory if you want but since we only have one widget for this plugin we will put it in the same directory as the main plugin file.</p>

<p>First thing that you need to do is to declare a class and call it <code>Zam_Tweets_Widget</code>. Unlike the options class and the plugin class that we created earlier this will extend from the <code>WP_Widget</code> class which is stored in the <code>wp-includes/widgets.php</code> file. Because of this Wordpress widgets are always written in an object-oriented way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam_Tweets_Widget</span> <span class="k">extends</span> <span class="nx">WP_Widget</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Like all the classes that we have created so far the widget class will also have a constructor.
But since we are extending from the <code>WP_Widget</code> class we need to make sure that the constructor of the <code>WP_Widget</code> will also run. In PHP this is done by calling <code>parent::__construct()</code>. The constructor of the <code>WP_Widget</code> class expects the id of the widget as the first parameter, the name of the widget as the second, and the third will be an array of the widget options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;zam_tweets_widget&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Zam Tweets Widget&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;A widget for displaying tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>A wordpress widget commonly has 3 functions which are all set to <code>public</code>:</p>

<ul>
<li>form</li>
<li>update</li>
<li>widget</li>
</ul>


<p>The <strong>form</strong> function is the function that will display the widget form that the admin sees in the back-end of the site.
This is where the admin can change the options for that specific widget. A common option which can be customized is the widget title.</p>

<p>The <strong>update</strong> function is the function that will be executed when the admin saves the widget options.</p>

<p>The <strong>widget</strong> function is the function that will display the widget on the front-end. This is what the users will see when they visit the site.</p>

<p>Now that you&rsquo;re familiar what each function does let&rsquo;s go ahead and create the <strong>form</strong> function.
The <strong>form</strong> function has the <code>$instance</code> parameter which basically stores the data for that specific instance of the widget. If you played quite a bit with Wordpress you will notice that you can actually have many instances of the same widget.</p>

<p>First we check if the <code>title</code> and the <code>tweets_to_show</code> options for that specific instance of the widget already has a value. If it has a value then we use it. If it doesn&rsquo;t have a value we set an empty string as the value. Next we simply output a standard text field for the widget title and a drop-down box for the number of tweets to show. Always remember to put it the css classes that wordpress already uses to make your form fields match the styling of the other widgets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">form</span><span class="p">(</span><span class="nv">$instance</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">])){</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$title</span> <span class="o">=</span> <span class="nx">esc_attr</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]);</span>
</span><span class='line'>          <span class="nv">$tweets_to_show</span> <span class="o">=</span> <span class="nx">esc_attr</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]);</span>
</span><span class='line'>          <span class="nv">$tweets_to_show_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="nv">$title</span> <span class="o">=</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$tweets_to_show</span> <span class="o">=</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">          &lt;label for=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Title&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;:&quot;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/label&gt;</span>
</span><span class='line'><span class="x">          &lt;input type=&quot;text&quot; class=&quot;widefat&quot; id=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_name</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">          &lt;label for=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Tweets to show&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/label&gt;</span>
</span><span class='line'><span class="x">          &lt;select class=&quot;widefat&quot; id=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_name</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">foreach</span><span class="p">(</span><span class="nv">$tweets_to_show_range</span> <span class="k">as</span> <span class="nv">$num</span><span class="p">){</span>
</span><span class='line'>                  <span class="nv">$checked</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$tweets_to_show</span><span class="p">))</span> <span class="o">?</span> <span class="s1">&#39;checked=true&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">              &lt;option value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$num</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$checked</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$num</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/option&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> 
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/select&gt;</span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <strong>update</strong> function which has 2 parameters, the new instance stores the new option values after the widget options has been updated and the old instance stores the option values before the widget options was updated.
What were doing below is simply using the values for the new instance and then returning it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">,</span> <span class="nv">$old_instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$instance</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">strip_tags</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">strip_tags</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the <strong>widget</strong> function where we display the latest tweets from the user with the twitter ID inputted in the plugin options page. It will have an <code>$args</code> and <code>$instance</code> as parameters.</p>

<p>The <code>$args</code> stores standard widget information such as the name, description, class, widget id and widget name. It also stores the HTML that would show up before and after every widget title.</p>

<p>The <code>$instance</code> simply stores the widget information entered by the admin from the back-end such as the widget title and the number of tweets to show.</p>

<p>We used the built-in PHP method called <code>extract</code> below to extract the array into each of their own variables. Next we echo the html stored in the <code>$before_widget</code>,  <code>$before_title</code> , <code>$after_title</code> and <code>$after_widget</code> variables which were extracted from the widget&rsquo;s <code>$args</code> argument.
Then we call the <code>get_tweets</code> method which we will create later. This method returns an array of tweets by the user specified in the plugin options page. Lastly we simply <code>break</code> once the current iteration is equal to the number of tweets to show.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">widget</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nv">$instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$zam</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">extract</span><span class="p">(</span><span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">extract</span><span class="p">(</span><span class="nv">$instance</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$title</span><span class="p">)){</span>
</span><span class='line'>          <span class="nv">$title</span> <span class="o">=</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">echo</span> <span class="nv">$before_widget</span><span class="p">;</span>
</span><span class='line'>          <span class="k">echo</span> <span class="nv">$before_title</span> <span class="o">.</span> <span class="nx">__</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="nv">$after_title</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$tweets</span> <span class="o">=</span> <span class="nv">$zam</span><span class="o">-&gt;</span><span class="na">get_tweets</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;div id=&quot;zam_tweets&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>          <span class="k">foreach</span><span class="p">(</span><span class="nv">$tweets</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$tweet</span><span class="p">){</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">              &lt;li&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$tweet</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nv">$tweets_to_show</span> <span class="o">==</span> <span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>    
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">echo</span> <span class="nv">$after_widget</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to our main plugin file we will now initialize our plugin options page once the admin page has been initialized. So we simply create a callback function on the <code>admin_init</code> action hook and create a new instance of the <code>Zam_Options</code> class. The <code>Zam_Options</code> class if you can remember is the class name of our plugin options page. Simply instantiating this class will build the options page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>But aside from building the options page we also need to add the menu items as well since there would be no way for the admin to access our plugin options page if we don&rsquo;t add a menu that he can easily click. What the code above did was to simply add the options page, the admin can access it by typing the menu slug directly into the address bar of the browser but he can&rsquo;t access it directly from the admin menu.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">zam_admin_init</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">Zam_Options</span><span class="o">::</span><span class="na">add_menu</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We can just hook this function to the <code>admin_menu</code> hook which is a hook which is used for adding extract submenus to the admin panel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_menu&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_admin_init&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we now create the <code>get_tweets</code> method which we called earlier from our widget.
We can either use built-in PHP methods like <code>curl</code> and <code>file_get_contents</code> for this one but like I said in the best practices section earlier, making use of methods which are available to Wordpress is considered a best practice. It will make your life as a developer easier since you don&rsquo;t have to write most of the functionality that you need by hand.</p>

<p>Back to our method were using the <code>wp_remote_get</code> method to get the contents returned from the user timeline of the twitter user specified in the plugin options page. An array containing the header (request status and anything else in the request header) and the body (actual content returned) is returned by <code>wp_remote_get</code> if the request was successful. The twitter API returns a json string so we have to use <code>json_decode</code> to convert it to a PHP array which we can iterate from. Once we have that array we simply loop through it and do some modifications (wrapping url&rsquo;s in anchor tags) then store it back to an array which we then return after were done iterating through the results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_tweets</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//access the twitter API</span>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nx">wp_remote_get</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">.</span> <span class="s2">&quot;api.twitter.com/1/statuses/user_timeline.json?screen_name=&quot;</span><span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span><span class="o">.</span><span class="s2">&quot;&amp;count=11&amp;exclude_replies=true&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$tweets</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$tweet_text</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$tweets</span><span class="p">)){</span>      
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$tweets</span> <span class="k">as</span> <span class="nv">$t</span><span class="p">){</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//wrap all the url&#39;s with anchor tags</span>
</span><span class='line'>          <span class="nv">$text</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
</span><span class='line'>              <span class="s2">&quot;#((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|</span><span class="se">\&quot;</span><span class="s2">|&#39;|:|\&lt;|$|\.\s)#ie&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;&#39;&lt;a href=</span><span class="se">\&quot;</span><span class="s2">$1</span><span class="se">\&quot;</span><span class="s2"> target=</span><span class="se">\&quot;</span><span class="s2">_blank</span><span class="se">\&quot;</span><span class="s2">&gt;$3&lt;/a&gt;$4&#39;&quot;</span><span class="p">,</span> <span class="nv">$t</span><span class="o">-&gt;</span><span class="na">text</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$tweet_text</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$text</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$tweet_text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>save_tweet</code> method which we will use to save the text of the randomly selected tweet into the database.
This method will have a <code>$post_id</code> argument when attached to the <code>save_post</code> method. This stores the post id of that specific post. We can use this to get the data associated with the post such as the post title and the post content.</p>

<p>Inside the method we access the global object called <code>$wpdb</code> so that we can do some CRUD operations with the Worpdress database.</p>

<p>Next we pick a random number from 0 to 10, this will be used later to get a specific tweet with the random index. As you might already know, the most recent tweet will have an index of 0 and the one after that will have an index of 1 and so on.</p>

<p>Next we get more information regarding the post by using the <code>get_post</code> method and passing in the post id as its argument. This will return all the information about the post which you can normally find in the <code>wp_posts</code> table in the Wordpress database. But we only need to get 3 fields: the post title, post content and the post type.</p>

<p>The <code>wp_posts</code> table doesn&rsquo;t just store blog posts it also stores pages, attachments, and revisions for specific posts that&rsquo;s why we need to get the post type as well because the post type that we need is only the <code>post</code>. You can read more about <a href="http://codex.wordpress.org/Post_Types">Post Types</a> on Wordpress codex.</p>

<p>Next we check whether the post is a revision by using the <code>wp_is_post_revision</code> method which takes up the post id as its argument. This returns true if the post is a revision and false if its not. Note that Wordpress doesn&rsquo;t just store the most recent version of a specific posts it also stores some revisions. So for example if you have edited a post twice then it would have 2 revisions that will also be saved in the <code>wp_posts</code> table.
We also check if the post type is <code>post</code> to make sure were only running this method if the post is an actual blog post and not an attachment, revision or a page.</p>

<p>Next we check for the pattern of our shortcode if it exists in the current post.
If it doesn&rsquo;t exists then we do nothing, but if it exists then we extract the <code>page</code> attribute from the results that were returned which is stored in index 1. Index 0 stores the whole pattern that was matched.</p>

<p>Parenthesis are capturing groups in PHP regular expressions so we have the actual page number stored in index 1 because we wrapped the pattern for selecting the numbers 0-9 in parenthesis. Then we use the page number as part of the parameter for the url to get the tweets. Then we use the <code>json_decode</code> method to convert the json string returned by the twitter API into an array. After that we simply extract the text for that specific tweet by specifying the index number as the random index number that we generated earlier. Then we check the database if an existing entry in the tweets table has already the same post id as the post that were trying to save. We only insert into the database if it doesn&rsquo;t exists yet which is indicated by the number of rows returned from the last select query using <code>$wpdb-&gt;num_rows</code>. If it doesn&rsquo;t exist yet then <code>$wpdb-&gt;num_rows</code> returns 0, if it already exists it returns any number greater than 0 depending on the number of occurence of that specific post id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">save_tweet</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span> <span class="c1">//wordpress database</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$random_index</span> <span class="o">=</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">//select a random number from 0 to 10, this will be used later to select a random tweet</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$post</span> <span class="o">=</span> <span class="nx">get_post</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">);</span> <span class="c1">//get_post returns data for a specific post</span>
</span><span class='line'>  <span class="nv">$post_title</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_title</span><span class="p">;</span> <span class="c1">//title of the post</span>
</span><span class='line'>  <span class="nv">$post_content</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_content</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$post_type</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_type</span><span class="p">;</span> <span class="c1">//type of the post</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//check whether the post is not a revision</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">wp_is_post_revision</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$post_type</span> <span class="o">==</span> <span class="s1">&#39;post&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/\[zam_tweets page=([0-9])\]/&#39;</span><span class="p">;</span> <span class="c1">//the general pattern for the shortcode</span>
</span><span class='line'>      <span class="nb">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$post_content</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span> <span class="c1">//check matches</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//check if the shortcode that were using matches the currently save post</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">//extract the page from the matches returned</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//get tweets for the specific page from twitter</span>
</span><span class='line'>          <span class="nv">$result</span> <span class="o">=</span> <span class="nx">wp_remote_get</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">.</span> <span class="s2">&quot;api.twitter.com/1/statuses/user_timeline.json?screen_name=&quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span> <span class="o">.</span> <span class="s2">&quot;&amp;count=11&amp;exclude_replies=true&amp;page=&quot;</span> <span class="o">.</span> <span class="nv">$page</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$tweets</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]);</span>
</span><span class='line'>          <span class="nv">$tweet</span> <span class="o">=</span> <span class="nb">strip_tags</span><span class="p">(</span><span class="nv">$tweets</span><span class="p">[</span><span class="nv">$random_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">);</span> <span class="c1">//select a random tweet using the random index earlier</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span> <span class="c1">//table name, always remember to get prefix with $wpdb-&gt;prefix</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//query database to select existing posts with the same post id</span>
</span><span class='line'>          <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT id FROM </span><span class="si">$tweets_table</span><span class="s2"> WHERE post_id = &#39;</span><span class="si">$post_id</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//only save into the database if its a new one</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">num_rows</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="c1">//insert the tweet into the tweets table</span>
</span><span class='line'>              <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="nv">$tweets_table</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;post_id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$post_id</span><span class="p">,</span> <span class="s1">&#39;tweet&#39;</span> <span class="o">=&gt;</span> <span class="nv">$tweet</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>            
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>save_tweet</code> method would be hooked into the <code>save_post</code> action which is executed every time a post is saved or updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;save_post&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;save_tweet&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>shortcode_to_tweet</code> method, this will convert the shortcode to a content. In this case the content is simply the tweet that was saved in the database when we first published our post. Again we check for the existence of the pattern used for our shortcode. We only perform the query that selects the tweets from the database if the post actually contains the pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">shortcode_to_tweet</span><span class="p">(</span><span class="nv">$attrs</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$post_id</span> <span class="o">=</span> <span class="nx">get_the_ID</span><span class="p">();</span> <span class="c1">//get the id of the current post</span>
</span><span class='line'>  <span class="nv">$post_content</span> <span class="o">=</span> <span class="nx">get_the_content</span><span class="p">();</span> <span class="c1">//get the content of the current post</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/\[zam_tweets page=([0-9])\]/&#39;</span><span class="p">;</span> <span class="c1">//pattern for our shortcode</span>
</span><span class='line'>  <span class="nb">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$post_content</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)){</span> <span class="c1">//check if the pattern exists</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_var</span><span class="p">(</span><span class="s2">&quot;SELECT tweet FROM </span><span class="si">$tweets_table</span><span class="s2"> WHERE post_id = &#39;</span><span class="si">$post_id</span><span class="s2">&#39;&quot;</span><span class="p">);</span> <span class="c1">//select the tweet from the posts table</span>
</span><span class='line'>      <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">;</span> <span class="c1">//assign the content to be the result returned from the database</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we just inform Wordpress about this new shortcode by passing the name of our shortcode (zam_tweets) and the name of the method (shortcode_to_tweet) that would process the shortcode to the <code>add_shortcode</code> method. You can learn more about Shortcodes in the <a href="http://codex.wordpress.org/Shortcode_API">Shortcode API Documentation</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_shortcode</span><span class="p">(</span><span class="s1">&#39;zam_tweets&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;shortcode_to_tweet&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>By doing this Wordpress already knows that once an author publishes a post using the <code>zam_tweets</code> shortcode it uses the <code>shortcode_to_tweet method</code> to convert the shortcode into an actual content. The shortcode for our plugin would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">[zam_tweets page=1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create the <code>installation_housekeeping</code> method which will run once our plugin is installed by the user.
This isn&rsquo;t usually needed especially for simple plugins which only does one thing. But for this plugin we need a table to store the tweets. This will serve as a cache for the tweets that the admin has published using shortcodes.
The table would only have 3 fields: ID, post_id and tweet where the ID is an auto-increment primary key and the post_id is the id of the post and the tweet is the text content of that specific tweet.</p>

<p>One thing to remember here is to not use <code>$wpdb</code> when creating or dropping tables. We use <code>dbDelta</code> instead but we have to include the <code>upgrade.php</code> file under the <code>wp-admin/includes</code> directory before using it.
Another thing to remember is when creating tables you should always use the <code>$wpdb-&gt;prefix</code> which is a value that you can specify on the table prefix variable in the <code>wp-config.php</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">installation_housekeeping</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$tweets_sql</span> <span class="o">=</span> <span class="s2">&quot;CREATE TABLE </span><span class="si">$tweets_table</span><span class="s2"> (</span>
</span><span class='line'><span class="s2">   id INT(10) NOT NULL AUTO_INCREMENT,</span>
</span><span class='line'><span class="s2">   post_id BIGINT(20) NOT NULL,</span>
</span><span class='line'><span class="s2">    tweet VARCHAR(160) NOT NULL,</span>
</span><span class='line'><span class="s2">     PRIMARY KEY id (id)</span>
</span><span class='line'><span class="s2"> );&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">require_once</span> <span class="nx">ABSPATH</span> <span class="o">.</span> <span class="s1">&#39;wp-admin/includes/upgrade.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">dbDelta</span><span class="p">(</span><span class="nv">$tweets_sql</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then hook it up on the event that the plugin is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_zam/zam.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax that we used is: <code>prefix + underscore + plugin name + slash + plugin file name</code>.
So if your plugin name is max and its file name is <code>max.php</code> then your hook should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_max/max.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course anything that we do on plugin install we must undo once the user uninstalls our plugin.
This often depends on the user whether he wants to keep the data that was added by a specific plugin or not. We can actually give the user the option to keep the data or not. But to keep things simple were going to stick to the rule: if the user doesn&rsquo;t want it anymore then we remove everything.</p>

<p>To tell Wordpress what to do once the user uninstalls the plugin (clicking on the delete link).
Create a new file and name it <code>uninstall.php</code>. We don&rsquo;t really have a choice with the naming here, this is a way to tell Wordpress to execute the <code>uninstall.php</code> just before it deletes the plugin.
For this plugin all we have to do is to drop the tweets table and delete <code>zam_options</code> option which is the option that we used earlier to store the users twitter id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;WP_UNINSTALL_PLUGIN&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">exit</span><span class="p">();</span>
</span><span class='line'><span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'><span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;DROP TABLE </span><span class="si">$tweets_table</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">delete_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we just have to add all of our hooks to the constructor so that Wordpress would be aware of all the code we&rsquo;ve written up until now once the class for our plugin is instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">=</span> <span class="nx">is_SSL</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;https://&#39;</span> <span class="o">:</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//add the options page</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_menu&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_admin_init&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//register the tweets widget</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;widgets_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">register_widget</span><span class="p">(</span><span class="s1">&#39;zam_tweets_widget&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//hook up the save_tweet method to the save_post action</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;save_post&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;save_tweet&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//tell wordpress about the zam_tweets shortcode</span>
</span><span class='line'>  <span class="nx">add_shortcode</span><span class="p">(</span><span class="s1">&#39;zam_tweets&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;shortcode_to_tweet&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//activation hook</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_zam/zam.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to create Wordpress plugins. You&rsquo;ve also learned some of the best practices and coding standards in developing Wordpress plugins. Now go and create some plugins!</p>

<h3>Resources</h3>

<ul>
<li><a href="http://codex.wordpress.org/WordPress_Coding_Standards">Wordpress Coding Standards</a></li>
<li><a href="http://wp.tutsplus.com/tutorials/7-simple-rules-wordpress-plugin-development-best-practices/">Wordpress Plugin Development Best Practices</a></li>
<li><a href="http://wp.tutsplus.com/tutorials/plugins/two-ways-to-develop-wordpress-plugins-object-oriented-progamming/">Two ways to develop Wordpress plugins</a></li>
<li><a href="http://make.wordpress.org/core/handbook/">Core Contributor Handbook</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/zam.7z">Zam Plugin Source Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Windows Development Environment]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/19/my-windows-development-environment/"/>
    <updated>2013-05-19T15:37:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/19/my-windows-development-environment</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to share some of the applications and development tools that I install on my Windows machine.</p>

<!--More-->


<h3>HeidiSQL</h3>

<p>HeidiSQL is a database manager for MySQL and MSSQL Databases.
<a href="http://www.heidisql.com/">Download</a></p>

<h3>Peazip</h3>

<p>Not really a development tools but its useful for extracting archives for software packages.
<a href="http://peazip.sourceforge.net/">Download</a></p>

<h3>PHP</h3>

<p>PHP is a server-side scripting language that I currently use to take care of the back-end stuff for the web applications that I build.</p>

<p><a href="http://php.net/downloads.php">Download</a></p>

<h3>MySQL</h3>

<p>MySQL is a database management system commonly used with PHP to build dynamic web applications.</p>

<p><a href="http://dev.mysql.com/downloads/">Download</a></p>

<h3>Apache</h3>

<p>Apache is an HTTP Server used to access the PHP applications from the browser.</p>

<p><a href="http://httpd.apache.org/download.cgi">Download</a></p>

<h3>CURL</h3>

<p>CURL is a command line tool for transferring data using the FTP or HTTP protocol. I commonly use it to install packages which uses CURL. For Windows users the latest file under the Win32 &ndash; Generic section should be downloaded.</p>

<p><a href="http://curl.haxx.se/download.html">Download</a></p>

<h3>Chrome Canary</h3>

<p>To get access and play around with the most cutting edge stuff in Google&rsquo;s Chrome browser I always use the Canary Build. It&rsquo;s a very useful tool to learn which features will be coming to the future versions of the Chrome Developer tools.</p>

<p><a href="https://www.google.com/intl/en/chrome/browser/canary.html">Download</a></p>

<h3>Chrome Plugins</h3>

<p>I also use some plugins to further improve my productivity when using the Chrome Browser.</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/measureit/pokhcahijjfkdccinalifdifljglhclm">MeasureIt</a></li>
<li><a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a></li>
<li><a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli">PageSpeed Insights</a></li>
<li><a href="https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka">EyeDropper</a></li>
</ul>


<h3>Octopress</h3>

<p>Octopress is a framework built on top of the Jekyll static site generator. I use it on my blog so I also consider it a s a development tool.</p>

<p><a href="http://octopress.org/">Download</a></p>

<h3>Ruby</h3>

<p>When I need a break from PHP I also play with Ruby. I use the installer from rubyinstaller.org to install ruby on my machine.</p>

<p><a href="http://rubyinstaller.org/">Download</a></p>

<h3>Node.js</h3>

<p>I haven&rsquo;t really played around with Node.js because I only have it installed on my machine to have access to the Node Package Manager which I can use to install development tools like Coffeescript, Bower, Hogan.js, and Grunt.</p>

<p><a href="http://nodejs.org/download/">Download</a></p>

<h3>Chocolatey</h3>

<p>Chocolatey is a package manager for Windows much like the <code>apt-get</code> that we use on linux distributions like Ubuntu or Linux Mint. Chocolatey can be installed by simply pasting the following commands in the command-line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin</span></code></pre></td></tr></table></div></figure>


<p>After that you can just paste in commands to install applications on your machine. So for example if you want to install notepad++ you simply execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst notepadplusplus</span></code></pre></td></tr></table></div></figure>


<p>Or if you want Sublime Text 2 instead:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst sublimetext2</span></code></pre></td></tr></table></div></figure>


<p>Nice and easy!</p>

<p><a href="http://chocolatey.org/">Download</a></p>

<h3>Sublime Text 2</h3>

<p>Yes I also use Sublime Text just like many of us. It&rsquo;s like the text-editor of the century. I believe I won&rsquo;t switch to any text-editor soon.</p>

<p><a href="http://www.sublimetext.com/2">Download</a></p>

<h3>Sublime Text 2 Packages</h3>

<p>Sublime Text 2 is already awesome but its even more awesome with some packages installed.
To install packages you must first install the package manager. You can do that by executing the following command in the Sublime Text console. You can access the console by pressing ctrl + `:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')</span></code></pre></td></tr></table></div></figure>


<p>Here are some of the packages that I currently have on Sublime Text:</p>

<ul>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a></li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a></li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees Color Schemes</a></li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">DocBlockr</a></li>
<li><a href="http://emmet.io/">Emmet</a></li>
<li><a href="https://github.com/welovewordpress/SublimePhpTidy">PHPTidy</a></li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">SidebarEnhancements</a></li>
</ul>


<p>If you want more sublime text 2 goodness you can check out Alex Maccaw&rsquo;s article: <a href="http://blog.alexmaccaw.com/sublime-text">Setting Up Sublime Text 2</a> or Drew Barontini&rsquo;s <a href="http://drewbarontini.com/setup/sublime-text/">Sublime Text 2 Setup</a></p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Package Control Installation</a></p>

<h3>Git</h3>

<p>Git is a version control software which I primarily use to keep track of the changes and to push to a remote repository for the projects that I&rsquo;m working on.</p>

<p><a href="http://git-scm.com/">Download</a></p>

<h3>Wordpress</h3>

<p>Wordpress is a content management system that I used for the past few months to create plugins for. It&rsquo;s built on top of PHP and uses MySQL as its database.</p>

<p><a href="http://wordpress.org">Download</a></p>

<h3>POEdit</h3>

<p>POEdit is a cross-platform gettext catalogs editor. I use it to easily create translations for Wordpress plugins. The way it works is simple, you simply open the file that you want to create translations for and it will automatically scan it for the groups of text which are wrapped in <code>__('')</code> and <code>_e()</code>. After that you can just use Google translate to translate the text that its lists out.</p>

<p><a href="http://www.poedit.net/">Download</a></p>

<h3>Everything</h3>

<p>Not really a development tool but its a very useful software for quickly finding and opening files that I want to edit.</p>

<p><a href="http://www.voidtools.com/">Download</a></p>

<h3>Composer</h3>

<p>Composer is like the NPM equivalent for PHP. It&rsquo;s also a package manager used for installing different tools for PHP.
You have 3 options if you want to install it on Windows. First is using CURL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<p>Another is by simply creating a new PHP file and putting the following code then execute it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php -r "eval('?&gt;'.file_get_contents('https://getcomposer.org/installer'));"</span></code></pre></td></tr></table></div></figure>


<p>The third option is by using the <a href="http://getcomposer.org/Composer-Setup.exe">Windows installer</a></p>

<p>Once you&rsquo;re done installing Composer you can go ahead and search from the <a href="https://packagist.org/">packagist</a> site to search for some packages. In the screenshot below we have the <code>eher/phpunit</code> package. You can see all the information regarding its requirements, suggestions and conflicts be sure to read it before trying to install anything.</p>

<p><img src="http://anchetaWern.github.io/images/posts/windows_dev_environment/php_unit.PNG" alt="package" /></p>

<p>You can install packages by simply copying the string under the <code>dev-master</code> or the top-level section. In the example above we have <code>"eher/phpunit": "dev-master"</code>. Just wrap it in curly braces and put in the <code>require</code> property.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{    
</span><span class='line'>  "require": {
</span><span class='line'>      "eher/phpunit": "dev-master"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>After that just save the file as <code>composer.json</code> and then execute <code>composer install</code> on the same directory where you have that file. It may take a while depending on the package so be patient and don&rsquo;t close the command-line.
If the package that you installed can be executed from the command-line simply add it to the environment variables so that you can easily execute it from the command-line regardless of the path where you are currently in.</p>

<p><a href="http://getcomposer.org/download/">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get a job in the Web Development Industry]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry/"/>
    <updated>2013-05-13T13:19:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry</id>
    <content type="html"><![CDATA[<p>Want to get a job in the Web Development Industry? That&rsquo;s easy! You must know HTML, CSS, JavaScript and PHP.
Nah! Sometimes that is all you really need but most of the time you need to know more than that in order to get the job you want. In this article I&rsquo;m going to share to you some of the tips that has worked for me in finding a job in Web Development.</p>

<!--More-->


<p>First of all just to make sure that we are on the same boat. What is a web developer?
According to <a href="http://en.wikipedia.org/wiki/Web_developer">Wikipedia</a>:</p>

<blockquote><p>A web developer is a programmer who specializes in, or is specifically engaged in, the development of World Wide Web applications, or distributed network applications that are run over HTTP from a web server to a web browser.</p></blockquote>


<p>Ok so a web developer is actually a programmer who works on the web.
Web developers can be classified into 4 groups:</p>

<ul>
<li>front-end developer</li>
<li>back-end developer</li>
<li>middle-tier developer</li>
<li>full-stack developer</li>
</ul>


<p>The <strong>front-end developer</strong> mainly works on the public facing part of a web application.
Front-end developers are mainly concerned with UI components, browser support, front-end performance, and everything else that the user can perceive. Common technologies involved are HTML, CSS, JavaScript.</p>

<p>The <strong>back-end developer</strong> mainly works on the back-end of the website or the things that happens in the background while the user is interacting with the web application. This is the core of the web application. Common technologies involved are server-side technologies like PHP, Python, and Ruby. Back-end developers also works with databases such as MySQL, PostgreSQL Oracle, and MariaDB.</p>

<p>The <strong>middle-tier developer</strong> mainly works with services that sit between the front-end and the back-end. The middle tier developer is mainly concerned with how the front-end and back-end of the web application is going to communicate.</p>

<p>Lastly there&rsquo;s the <strong>full-stack developer</strong> which knows how to do a bit of the front-end, back-end and middle stack.</p>

<p>So which do you want to be? Personally for me I&rsquo;m currently working as a full-stack developer. I work a bit on the front-end, back-end and the middle stack. The advantage of the first 3 types of developers is that they&rsquo;re specialists. They have a very deep understanding of the technologies that they are working on, specialists are often rare so their salary is very high. The advantage of being a full stack developer is that its easy to become one and you will be more marketable since you know a lot of different skills and technologies. The only downside is that they don&rsquo;t make as much salary as the front-end, back-end and middle-tier guys make.</p>

<p>Back to the main topic of this article. Here are some tips to get a job in web development:</p>

<ul>
<li>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</li>
<li>Learn things on your free time</li>
<li>Network</li>
<li>Apply for that job</li>
</ul>


<h3>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</h3>

<p>You must have your own portfolio, <a href="https://github.com">github</a>, <a href="http://stackoverflow.com">stackoverflow</a> and <a href="http://www.linkedin.com/">linked In</a>. You can also create a blog if you like writing and sharing your ideas.</p>

<p>If you&rsquo;re a new graduate you might not have anything to put in your portfolio and that&rsquo;s just normal.
What you can do is to work on personal projects or create a blog. A personal project can be anything that you really want to create. For developers its common to work on projects that can help them in their daily tasks like generators, code linters, or libraries. You can also have a personal project that involves technologies that you want to learn. For example, if you want to learn how to use the Facebook Graph API you can go ahead and plan out the application that you want to build. It doesn&rsquo;t matter if you don&rsquo;t know anything about the technology or if the features that the application that you have in mind are already present in Facebook. Just dive in to the <a href="https://developers.facebook.com/docs/reference/api/">Facebook Graph API Documentation</a> and figure out how to do stuff using the API by Googling stuff. You can also ask questions at Stackoverflow if you get stuck.</p>

<p>The fastest way to learn things is to dive right in to doing it, but be sure to google best practices and look at code that other people have written so that you&rsquo;ll have an idea on how to do things the right way.</p>

<p>Once you have setup your personal project you can just go ahead and push it up on Github so that the rest of the world can see it. It doesn&rsquo;t matter if other people thinks your code sucks. What matters is that you know you&rsquo;ve done a good job and is constantly working on improving it.</p>

<p>You can also create your stackoverflow profile and answer some of the questions that you can already answer. It doesn&rsquo;t matter if the question that you&rsquo;re trying to answer has already an accepted answer or that the question is already 3 years old. Just answer the question as best as you could and people will surely notice. They will give comments on how to improve your answer and you will even get an upvote if they think your answer is awesome.</p>

<p>Lastly you can also create your LinkedIn profile and start putting some of your achievements in school and the personal projects that you have worked on in your free time. Link to your portfolio, twitter, Google plus, stackoverflow, github or even your facebook if you want.
Its okay to put in a lot of information about your past achievements and projects but be sure to only include the things that actually matter to the career that you are trying to pursue. In this case being a web developer. So there&rsquo;s no need to put in your linkedIn profile that you are actually a chess champion or a basketball super star.</p>

<h3>Learn things on your free time</h3>

<p>The best way to make yourself more marketable is to learn things on your free time. Its a good time to learn something new. Especially now that there&rsquo;s so much good learning resources out there which are free to use. Here are some of the resources that I have personally used:</p>

<p><a href="https://www.udacity.com/">Udacity</a>
<a href="http://www.codeschool.com/">Codeschool</a>
<a href="http://learn.shayhowe.com/html-css/">A Beginners Guide to HTML and CSS</a>
<a href="https://developer.mozilla.org/en-US/">Mozilla Developer Network</a>
<a href="http://google.com">Google</a></p>

<p>The sheer amount of stuff that you need to learn in order to become a proficient web developer is staggering. But the key is don&rsquo;t be overwhelmed because its <a href="http://anchetawern.github.io/blog/2013/04/13/this-crazy-world-of-web-development/">just how things are in this field</a>. Just take it easy and learn things one at a time.
My advice is that you should learn first the fundamentals before diving in to the shiny and new stuff. An example would be to learn first how to do things in JavaScript before you learn jQuery. Write plain CSS first before using CSS Preprocessors like LESS and SASS.</p>

<h3>Network</h3>

<p>Its always a good idea to have a network of people who can recommend you for a job. If you have taken up college, it can be your classmates, teachers, friends. It can also be like-minded people that you have met online. A good place to find those connections is linkedIn, a social network for professionals. But be sure to keep your linkedIn profile updated so that people will actually notice your profile. Its also a good idea to add recruiters who are recruiting professionals in the field of web development. You can also join groups in LinkedIn and start contributing to the community. There will be a bigger chance that someone will notice you and can recommend you to a client.</p>

<p><img src="http://anchetaWern.github.io/images/posts/how_to_find_a_job_in_the_webdev_industry/groups.png" alt="linkedIn Groups" /></p>

<h3>Apply for that job</h3>

<p>We are never really 100% ready to apply for a job that we want. Sometimes were not confident that we enough of that specific technology in order to apply. But that&rsquo;s actually a good sign that you&rsquo;re ready. If you&rsquo;re familiar with the Dunning-Kruger effect which according to Wikipedia is:</p>

<blockquote><p>a cognitive bias in which unskilled individuals suffer from illusory superiority, mistakenly rating their ability much higher than average. This bias is attributed to a metacognitive inability of the unskilled to recognize their mistakes.</p></blockquote>


<p>Not having the confidence that you already know enough to start appliying for a job means that you&rsquo;re already in the second stage of competence which is the conscious incompetence which means that you already recognize your lack of knowledge or skill on a specific field. This is enough to drive you into learning more.</p>

<p>At some point in time when you feel like you already have the minimum requirements to get started with applying for a job then you can go ahead and start applying. Here are some good places to start looking for jobs:</p>

<ul>
<li><p><a href="http://www.craigslist.org/about/sites">Craigslist</a> &ndash; you can look at web/HTML/info design jobs, internet engineering jobs, and software/QA/DBA/etc jobs. Sometimes there are bad eggs that you have to filter through. Some signs that a job posting is a bad egg if there are lots of mispelled words and there&rsquo;s really no sane job description which gives you a bit of idea what you will be working on once you get accepted for the job.</p></li>
<li><p><a href="http://jobmote.com/">Jobmote</a> &ndash; by far has the most quality job listings I&rsquo;ve ever found. These are human curated job listings so the bad eggs are already filtered out. These are mostly telecommuting jobs.</p></li>
<li><p><a href="https://www.staff.com/">Staff</a> &ndash; mostly telecommute jobs. You will get emailed when there&rsquo;s a job opportunity.</p></li>
</ul>


<p>All you really need to get to that interview is to have an awesome Résumé and cover letter. I won&rsquo;t be delving into those in this article since they have already been written a dozen times before. Just Google those and you will surely find an answer.</p>

<h2>Closing Thoughts</h2>

<p>I cannot assure that this will work for you as well as it worked for me but just give it a try if you really want to get that job. All I can say is that you&rsquo;re already half-way to getting that job if you have the genuine passion and you really love web development and building things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stay healthy as a developer]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer/"/>
    <updated>2013-05-11T19:14:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer</id>
    <content type="html"><![CDATA[<p>Developers are not really the healthiest group of people in the planet simply because our faces are just buried in front of the computer 8 hours a day (or even more) 7 days a week. Were just sitting all day thinking of how to solve a problem, which technique to implement, and writing code.</p>

<!--More-->


<p>Here are the things that I personally observe in order to stay healthy:</p>

<ul>
<li>Exercise</li>
<li>Eat healthy foods</li>
<li>Stand while working</li>
<li>Sleep well</li>
<li>Take breaks</li>
</ul>


<h3>Exercise</h3>

<p>Always try to get atleast an hour of exercise everyday. Doesn&rsquo;t matter which time you exercise(either morning or afternoon) or what type of exercise you do. What&rsquo;s important is that you enjoy exercising and don&rsquo;t think of anything else while doing it.
I personally like brisk walking, jogging and running. I live close to a spacious school ground and that&rsquo;s where I usually exercise so there&rsquo;s really no excuse in not exercising.</p>

<h3>Eat healthy foods</h3>

<p>Always try to eat fruits, vegetables and have soup for every meal.
Soup helps in making the food easier to digest.
You can also try to eat less meat since meat is harder to digest than vegetable.
If you&rsquo;re the carnivorous type then there&rsquo;s no excuse in drinking 8 &ndash; 10 glasses of water everyday. Actually you can drink more if you&rsquo;re sweating a lot when exercising. Water helps in digestion, combine it with fiber which you can get from <a href="http://www.doctoroz.com/videos/50-fiber-rich-foods">a whole bunch of fruits and vegetables</a> leads to a healthier stomach.</p>

<p>Also try chew the food well, eating a meal in 20 to 30 minutes is a good indication that you&rsquo;re chewing your food well. The stomach digests the food that we eat but digestion actually starts in the mouth when we chew our food.
This will lead to better digestion which leads to better stomach and colon health.</p>

<h3>Stand while working</h3>

<p>Try to get a standing desk. Sitting is not good especially if you don&rsquo;t take frequent breaks.
If you don&rsquo;t have the budget or you&rsquo;re earning for something else you can always try to look for an alternative standing desk. I personally use our chest and drawer as my standing desk simply because it matches my elbow height and I feel comfortable using it.</p>

<h3>Sleep well</h3>

<p>Always try to get atleast 7 &ndash; 8 hours of sleep each night.
This ensures that our mind is in its optimum state when we wake up.
Fresh, happy and ready to solve some problems.</p>

<h3>Take breaks</h3>

<p>Take breaks every 50 &ndash; 60 minutes. Stretch up and do a micro-exercise, its a good way to make sure that your blood is flowing properly. Venous diseases like hemorrhoids, deep vein thrombosis, and varicose veins are born from not moving too much and staying in just one position all day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Working Remotely]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/28/on-working-remotely/"/>
    <updated>2013-04-28T17:52:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/28/on-working-remotely</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a year since I started working remotely and I never regret any moment of it. In this post I&rsquo;m going to share some of my thoughts in working remotely. Some of the pros and cons, and how to stay productive even if there&rsquo;s no boss breathing down your neck.</p>

<!--More-->


<p>For those who don&rsquo;t know what telecommuting is. Here&rsquo;s a helpful description from Wikipedia:</p>

<blockquote><p>Telecommuting, remote work, telework is a work arrangement in which employees do not commute to a central place of work. <br/>A person who telecommutes is known as a &#8220;telecommuter&#8221;, &#8220;teleworker&#8221;, and sometimes as a &#8220;home-sourced&#8221; employee.</p></blockquote>


<p>Ok now that were on the same page let&rsquo;s begin.</p>

<h3>Pros</h3>

<ul>
<li>Less interruptions.</li>
<li>Less distractions (only if you are disciplined).</li>
<li>Less time wasted on transportation.</li>
<li>Comfortable work environment.</li>
<li>More productive.</li>
</ul>


<h3>Cons</h3>

<ul>
<li><p>No social interactions. Telecommute workers will basically miss out on random office chats and other social events that happens outside the office (E.g. company paid outings).</p></li>
<li><p>There&rsquo;s so little trust. This is basically because the person that you are working with doesn&rsquo;t see if you&rsquo;re really working or not.</p></li>
<li><p>You can&rsquo;t ask for help. Team mates can be working while you&rsquo;re sleeping and most of the time they&rsquo;re too busy with their own work.</p></li>
<li><p>You can&rsquo;t see what other employees in the company are working on. Though this is normal I believe there is a benefit in knowing what projects others are working on especially the senior one&rsquo;s. You know the type of office interaction where you can ask questions to other employees and learn something from their answers.</p></li>
</ul>


<h3>How to Stay Productive</h3>

<p>Telecommuting is hard if you don&rsquo;t have the discipline to work without a boss breathing down your neck every second of the day. So the main ingredient needed to successfuly work remotely is discipline.
The kind of discipline that will keep you from looking at your Facebook or Twitter stream every 5 minutes. Or watching some dancing cat ninjas on Youtube. Or endlessly browsing Stumbleupon.</p>

<p>Another important ingredient is love for the work that you do. By loving the work that you do you will have no problem working overtime if you don&rsquo;t think you&rsquo;ve done good enough for the day.</p>

<p>Lastly, you should always have a todo list so that you can keep track of what to do, what&rsquo;s done and what needs some review.</p>

<p>That&rsquo;s all there is to it really. You don&rsquo;t need the Pomodoro technique or any other technique to be productive. All you need is discipline and love for your work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging into Chrome Dev Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools/"/>
    <updated>2013-04-21T17:15:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through some of the things that we can do with the Chrome Developer Tools to improve our web development workflow.</p>

<!--More-->


<h3>Accessing Chrome Dev Tools</h3>

<p>You can access the Chrome Developer Tools by clicking on the Chrome Settings button &ndash;> Tools &ndash;> Developer Tools.</p>

<h4>Elements Panel</h4>

<p>First there&rsquo;s the elements panel which we can use to inspect and edit the html that is used in a web page.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/elements_panel.jpg" alt="elements panel" /></p>

<p>This is very useful for when you want to edit the HTML of the web page that you&rsquo;re working on, adding some classes or attributes on the fly.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/element_options.jpg" alt="elements options" /></p>

<p>As you can see from the screenshot above there&rsquo;s a bunch of things that you can do with the currently selected element like copying its HTML, Edit the HTML, or deleting the node which you can do by just pressing delete on your keyboard. If you mess up you can always press on ctrl + z to undo the changes that you&rsquo;ve made.</p>

<p>You can also edit entire HTML blocks or navigate directly to the parent element of the currently selected element.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/edit_html_block.jpg" alt="edit html blocks" /></p>

<p>You can also drag elements around by holding the left mouse button and then dragging the element to where you want it to be and then finally releasing it.</p>

<p>Another thing that you can do within the elements panel is live editing of the CSS used in a particular element.</p>

<p>You can add new styles by pressing tab while the cursor is inside the value of the last property for a specific selector. As you can see from the screenshot below it also gives you a nice auto-completion for every property and values that are currently supported by the browser.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/add_styling.jpg" alt="add styling" /></p>

<p>You can also disable a specific style by unchecking the checkbox before the property:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/disable_styling.jpg" alt="remove styling" /></p>

<p>To delete a property entirely you can press delete while the cursor is either inside of the property or the value.</p>

<p>There&rsquo;s also a sweet color picker which you can use to experiment on the color that you want to use.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/color_picker.jpg" alt="color picker" /></p>

<p>You can also directly edit the css file by clicking on the name of the css file that you want to edit.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/css_file.jpg" alt="css file" /></p>

<p>After that you can just edit the file like you usually do in a text-editor and the web page will be automatically updated as you type in the value for each property. The only difference is that you don&rsquo;t get the auto-completion while in this mode.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/css_editing.jpg" alt="css editing" /></p>

<p>But the only problem with this is that all your changes only lives on the browser once you refresh the page all your changes will be gone. And the only plugin-less solution would be to click on the filename of the css file that you&rsquo;ve edited then copy all of its contents and then paste it back on your source file. Or you can actually right click on the file and then click on save.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/save_css.jpg" alt="save css file" /></p>

<h3>Resources Panel</h3>

<p>Next is the resources panel where we can see some of the resources that the web page has loaded on initial page load.
That includes the current page (html), images, script files (mainly JavaScript), stylesheets, and other types of media.
Each of these files are group according to their file type so all stylesheets are under the same group, all the JavaScript are in the same group, etc. Also note that the ordering depends on what has been loaded first. So the first files that were loaded during page load are first on the list.</p>

<p>From the resources panel you can also see what&rsquo;s stored in Web SQL, Indexed DB, local storage, session storage, cookies, and application cache which is mainly specified in the manifest file whenever you want your application to be accessed offline.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/resources_panel.jpg" alt="resources panel" /></p>

<p>The resources panel also gives you a nice preview of the file that you&rsquo;re currently viewing.
For images you get something like this:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/image_preview.jpg" alt="image preview" /></p>

<p>And for HTML, CSS, and JavaScript files you get to view the source:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/html_source.jpg" alt="html source" /></p>

<h3>Network Panel</h3>

<p>Next is the network panel where you can see the list of files which are loaded by the web page.
Either on initial page load or while the users are interacting with the web page.
So you can actually see the AJAX requests, template files and other network requests in the network panel.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/network_panel.jpg" alt="network panel" /></p>

<p>Here are some of the information that you can see on the Network Panel:</p>

<p><strong>Name</strong> &ndash; the name of the file that was requested.</p>

<p><strong>Method</strong> &ndash; the method that was used to get the specific file (GET, POST).</p>

<p><strong>Type</strong> &ndash; the <a href="http://en.wikipedia.org/wiki/MIME">type of file</a> that was requested.</p>

<p><strong>Status</strong> &ndash; the status of the request <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">status</a>. The common status are 200 OK which means the request was successful and the file was directly downloaded from the server. There&rsquo;s also 304 not modified.</p>

<p><strong>Initiator</strong> &ndash; the page that requested the file or resource. This is usually the current page.</p>

<p><strong>Size</strong> &ndash; the size of the requested file in kilobytes.</p>

<p><strong>Time</strong> &ndash;  the time between making the request and the server&rsquo;s first response in milliseconds.</p>

<p><strong>Timeline</strong> &ndash; shows the waiting and receiving time for each file. The waiting time is the amount of time in which the browsers waits for the file upon requesting it. The receiving time is the amount of time in which the file is downloaded.</p>

<p>Clicking on each file allows you to view the request headers, preview, response, cookies and the timing.</p>

<p><strong>headers</strong> &ndash; this shows you the details of the request like the Request URL which is the URL to the file that is requested.
The request method which is usually GET or POST. The status code which you also saw from the network request summary earlier.</p>

<p>There&rsquo;s also the Request Headers and Response Headers. The Request Headers are the information that is present in the browser. And the Response Headers is the information returned from the server.</p>

<p>Some of the information that are present in the Request Headers are the  Referer which is basically the url of the file that initially requested the file or resource, the User-Agent is the browser used by the user to access the web page.</p>

<p>While the Response Headers contains information like the name of the Server (Apache, ECS, Nginx and a bunch of others), the current system date of the server, the <a href="http://en.wikipedia.org/wiki/HTTP_ETag">entity tag</a>.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/network_request.jpg" alt="network request" /></p>

<p><strong>preview</strong> &ndash; this is usually the source of the file. If its an image file you usually get a preview of the image.</p>

<p><strong>response</strong> &ndash; the same as preview but this time you only get the raw data.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/response.jpg" alt="response" /></p>

<p><strong>cookies</strong> &ndash; this is usually the cookies stored by the website that the user is currently looking at.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/cookies.jpg" alt="cookies" /></p>

<p><strong>timing</strong> &ndash; the same as the information displayed in the waterfall timeline that you see on the network request summary only this time its only for the file that you have clicked on.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/timing.jpg" alt="timing" /></p>

<h3>Sources Panel</h3>

<p>The sources panel allows you to view and edit the source files used in the current web page.
We kind of touch on this earlier when we click on a filename on the elements panel we get redirected to the sources panel and then it allows us to edit the file that we selected and the changes would be automatically reflected on the page. But that&rsquo;s just on the css side of things. You can actually debug JavaScript code as well in the sources panel. The official Chrome Dev Tools documentation already had us covered in the <a href="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints">Breakpoints</a> section so I won&rsquo;t delve much in how that&rsquo;s done.</p>

<h3>Timeline Panel</h3>

<p>The timeline panel allows you to view information regarding the performance of your web app. Things like paint times, frames per second, and memory consumption. It gives you a complete overview of how your web app performs.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/timeline_panel.jpg" alt="timeline panel" /></p>

<p>You can start using the timeline panel by clicking on the <code>record</code> button found at the lower left portion of chrome dev tools.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/record_button.jpg" alt="record button" /></p>

<p>Then interact with your app a bit. Usually you would interact on the parts of your app in which you want to measure the performance. Once you&rsquo;re done click on the <code>stop</code> button.</p>

<p>On first look this might really look complicated. I also had no idea where the hell should I start looking the first time I used the timeline panel.</p>

<p>First let&rsquo;s talk about the colors that you see in the timeline panel:</p>

<p><strong>Blue</strong> &ndash; sending of requests and network related stuff.
<strong>Yellow</strong> &ndash; execution of JavaScript code.
<strong>Purple</strong> &ndash; css calculation and rendering.
<strong>Green</strong> &ndash; repaints (updating the page).</p>

<p>The length of these colors depends on the amount of time (in milliseconds) that the browser executed the operation.
That&rsquo;s about all I can share about the timeline panel. I&rsquo;m not really in the level yet of measuring the performance of the applications that I&rsquo;m trying to build especially in the frontend because I do more backend than I do frontend.</p>

<h3>Console</h3>

<p>The console panel allows you to play around with JavaScript code that you want to include in your application.
It also serves as a shortcut in selecting elements in the DOM.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/console_select.jpg" alt="selecting in the console" /></p>

<p>There are also some shortcuts which you can use to select elements.</p>

<p>To select the element that is currently selected in the elements panel you can use <code>$0</code>:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/dollar_zero.jpg" alt="$0" /></p>

<p>Of course you can also use <code>$1</code>, <code>$2</code> and other numbers for as far as your memory can reach to select the elements that were previously selected. So if you select the body then the main wrapper then the first child of that wrapper. <code>$0</code> returns the first child of the wrapper, <code>$1</code> returns the wrapper, and <code>$0</code> returns the body.</p>

<p>Other things that the console allows you to do:</p>

<ul>
<li><p>view errors &ndash; the console automatically allows you to view errors in your JavaScript code like parse errors when trying to call <code>JSON.parse</code> on an invalid JSON string.</p></li>
<li><p>assertion &ndash; checking if a specific condition is true. You can use the <code>assert</code> method to do assertions.
For example when checking if the following values are true:</p></li>
</ul>


<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/console_assert_numbers.jpg" alt="asserting values" /></p>

<p>As you can see from the screenshot above the first two conditions returned <code>undefined</code> which means the assertion has pass. While on the 3rd condition the assertion failed since were using the strict equality operator which also checks the data type of the variable and not just its value.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/typeof.jpg" alt="typeof" /></p>

<p>You can also assert return values from functions as well:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_chrome_dev_tools/assert_functions.jpg" alt="asserting functions" /></p>

<p>As you can see from the screenshot above the first assertion failed since 3 is not equal to 4. But the second assertion passes since 3 is less than 4. This is a pretty simple example but you can also have more complex functions checked by <code>console.assert</code> as long as they have return values which it can check.</p>

<h3>Resources</h3>

<p><a href="https://developers.google.com/chrome-developer-tools/">Chrome Dev Tools Documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This crazy world of web development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/13/this-crazy-world-of-web-development/"/>
    <updated>2013-04-13T13:45:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/13/this-crazy-world-of-web-development</id>
    <content type="html"><![CDATA[<p>Need a css framework? There&rsquo;s Foundation, Bootstrap, HTML Kickstart, Kube, Skeleton, Baseline, Gumby, Ink, Groundwork.
There&rsquo;s also a bunch of others which are based from Bootstrap: Flatstrap, Metro Bootstrap.</p>

<p>Need a boilerplate? There&rsquo;s the HTML5 Boilerplate, 320 and up, HTML5Bones.</p>

<p>Need a package manager? There&rsquo;s component, ender, bower, jam, NPM.</p>

<p>Need a browser tool? There&rsquo;s Firebug, Chrome Developer tools, Page Speed Insights, JSON View, YSlow, MeasureIt, Colorzilla, CSS Usage, PageSpeed, SEO Doctor.</p>

<p>Need a coding tool? There&rsquo;s Codekit(for Mac), ScoutApp (for Windows), LiveReload, Yeoman, Grunt, Lumbar, Yeoman, Sublime Text, Brackets.</p>

<p>Need a css base? There&rsquo;s reset.css and normalize.css.</p>

<p>Need a CSS Compiler? There&rsquo;s SASS + Compass, LESS.</p>

<p>Need a validator/linting tool? There&rsquo;s JSLint, JSHint, JSON Lint, HTML Validator, CSS Validator.</p>

<p>Need a static site generator? There&rsquo;s Jekyll, Octopress, Middleman.</p>

<p>Need an MVC/MVP/MVVM Framework? There&rsquo;s Backbone, Ember, Knockout, Angular.</p>

<p>Tired of writing helper functions from scratch? There&rsquo;s underscore.js, sugar.js, lo-dash, yepnope.js, modernizr, accounting.js.</p>

<p>Need to work with SVG? There&rsquo;s Processing.js, Raphael.js, SVG Kit and SVG Web.</p>

<p>How about templating libraries? There&rsquo;s Smarty, Handlebars, Mustache, Hogan.js.</p>

<p>Need a JavaScript library? There&rsquo;s jQuery, Dojo, Mootools.</p>

<p>You think JavaScript is ugly? There&rsquo;s Coffeescript, TypeScript, Dart.</p>

<p>Want a back-end framework? There&rsquo;s Ruby on Rails for Ruby, Laravel for PHP, and Django for Python, Node.js.</p>

<p>Need a database? There&rsquo;s MySQL, PostgreSQL, MongoDB, CouchDB, RavenDB.</p>

<p>How about a Software Development Methodology? There&rsquo;s Waterfall, Prototyping, Spiral, RAD, Agile.</p>

<p>How about Design Patterns? There&rsquo;s Singleton, Adapater, Bridge, Facade, Factory and a bunch of others.</p>

<p>Heck there&rsquo;s a lot! The list is endless and it&rsquo;s hard to keep up.
There&rsquo;s always something new everyday.
There&rsquo;s always a new technology, methodology, library, and tool.
There&rsquo;s always a new blog post, video, and podcasts that speaks about these technologies, methodologies, libraries and tools.
There&rsquo;s always a new, cool and faster way to solve problems.</p>

<p>There&rsquo;s always this temptation (in most cases obsession) to check out all the shiny and new stuff, to read all those blog posts which speaks about them.
And before you know it there&rsquo;s no more time left for you to solve the real problems that needs solving.</p>

<p>Most of the tools, libraries and methodologies that comes out everyday is yet another way to solve existing problems.
The only difference is that its newer and it looks sexier. But sooner or later it becomes out of fashion and a shiny new thing will replace it again.</p>

<p>What&rsquo;s important is learning the core technology behind a library, so instead of learning jQuery, Mootools or Dojo we should first learn JavaScript. Instead of learning how to use Bootstrap or Foundation we should learn the basics and important concepts in CSS first. Core technologies that makes the whole platform (the web) work  never gets replaced thus it should be given the priority before the shiny and new stuff. And once your done learning the core technologies you&rsquo;re in a good position to try out some of the shiny and new stuff. And by try I mean giving it a go for a week or so and see if it feels right for you. If it feels right for you and you think it makes you more productive then you should definitely include it in your daily workflow.</p>

<p>Who cares if you&rsquo;re using MS Paint and not Photoshop. Who cares if you&rsquo;re using Notepad or Dreamweaver instead of Sublime Text. Who cares if you&rsquo;re still using <code>alert</code> instead of <code>console.log</code> to debug your JavaScript. If you think you&rsquo;re productive by using some of the old tools then why not right? At the end of the day it doesn&rsquo;t really matter what tools, libraries or methodologies we use as long as we get to solve problems and we make our clients happy by solving them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ebay Finding API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api/"/>
    <updated>2013-04-03T08:09:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can access the e-bay finding API to access products that are sold from e-bay.
Product data such as the list price, available quantities, images are available from the e-bay finding API.</p>

<!--More-->


<h3>Getting an API Key</h3>

<p>First thing that you have to do is to get an API Key from e-bay.
This will serve as a unique identification for your application
and a means for e-bay to limit access to their API to only those that have an API key.</p>

<p>To get an API key you must first register with e-bay: <a href="https://developer.ebay.com/join/">developer.ebay.com/join</a></p>

<p>After successfully registering you will receive an email from e-bay. Click on the link to verify your email and you will be redirected to a screen similar to the screenshot below:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_ebay_finding_api/registration_success.jpg" alt="successful registration" /></p>

<p>You can then click on the get your application keys link, you will be redirected to the accounts page where you can click on the Generate production keys button to generate the API key.</p>

<h3>Building a Simple e-bay Class</h3>

<p>Next were going to build the class that were going to use later to access the API.
Create a new PHP file and name it <code>class.ebay.php</code>. Then put the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class ebay{
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>Inside the class declare the following private member variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://svcs.ebay.com/services/search/FindingService/v1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$app_id</span><span class="p">;</span> <span class="c1">//api key</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$global_id</span><span class="p">;</span> <span class="c1">//e-bay region (eg. EBAY-US)</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$version</span> <span class="o">=</span> <span class="s1">&#39;1.0.0&#39;</span><span class="p">;</span> <span class="c1">//version of the API to use</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$format</span> <span class="o">=</span> <span class="s1">&#39;json&#39;</span><span class="p">;</span> <span class="c1">//format of the returned data </span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$url</code> is the address in which the API can be accessed.</p>

<p>The <code>$app_id</code> is the API key that you got earlier from registering your application with e-bay.</p>

<p>The <code>$global_id</code> is the e-bay region in which you want to access product data. Think of it as the e-bay store which you access in your browser when you want to buy something online. The e-bay store that you&rsquo;re accessing when you type in <code>ebay.com</code> is the US store which has a global id of <code>EBAY-US</code>. There are also other global ids that you can use, you can access them here: <a href="http://developer.ebay.com/DevZone/finding/CallRef/Enums/GlobalIdList.html">Global ID List</a></p>

<p>The <code>$version</code> is the version of the API that you want to use. At the time of writing of this article the version that is available is <code>1.0.0</code> so were going to use that here.</p>

<p>The <code>$format</code> is the format in which you want the returned data to be encoded. The preffered format is <code>json</code> since we can easily manipulate it using PHP or JavaScript.</p>

<p>Next is the constructor which will take up 3 arguments. The <code>$app_id</code> and <code>$global_id</code>.
The constructor is called once you create an object of this class so you&rsquo;ll have to pass in the 2 arguments when you create an object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$app_id</span><span class="p">,</span> <span class="nv">$global_id</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app_id</span> <span class="o">=</span> <span class="nv">$app_id</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">global_id</span> <span class="o">=</span> <span class="nv">$global_id</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a new method and call it <code>findItems</code> this will take 2 arguments: the <code>$keyword</code> and the <code>$limit</code>.
The <code>$keyword</code> is your query. For example <code>computer accessories</code>.
The <code>$limit</code> is the number of products which you want to return.</p>

<p>In this method were simply appending the different parameters to the <code>$url</code> that we declared earlier.</p>

<p>The parameters that we have used here are:</p>

<ul>
<li><p>operation-name &ndash; the operation that you want to perform. In the example below were using the <code>findItemsByKeywords</code> operation. The type of operation will determine the other parameters that you will be including in your request.
In the case of <code>findItemsByKeywords</code> the required parameter is the <code>keywords</code>. There are also other operations which you can use you can find them at the <a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">call reference page</a>.</p></li>
<li><p><strong>service-version</strong> &ndash; the version of the API that you would want to use. In our example were using version    <code>1.0.0</code></p></li>
<li><p><strong>keywords</strong> &ndash; the parameter required by the <code>findItemsByKeywords</code> operation in which you supply your url encoded query.</p></li>
<li><p><strong>paginationInput.entriesPerPage</strong> &ndash; the number of entries per page</p></li>
<li><p><strong>security-appname</strong> &ndash; the APP id that you got from registering your application with e-bay</p></li>
<li><p><strong>response-data-format</strong> &ndash; the format in which you want the returned data to be.
The preferred format is json although you can also have XML or SOAP as response data format.</p></li>
</ul>


<p>Once the parameters are all appended together with the request url we can then make a request to the API by using the <code>file_get_contents</code> method and supplying the request url as the argument. And since we specified <code>json</code> as the format earlier were going to use the <code>json_decode</code> method to convert the json string into an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">findItems</span><span class="p">(</span><span class="nv">$keyword</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$url</span>    <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">url</span> <span class="o">.</span> <span class="s1">&#39;?&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;operation-name=findItemsByKeywords&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;service-version=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">version</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;keywords=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;paginationInput.entriesPerPage=&#39;</span> <span class="o">.</span> <span class="nv">$limit</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;security-appname=&#39;</span><span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app_id</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;response-data-format=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also have a method where we can have more specificity with what we want to find.
We can also specify the sorting type, item type, minimum price and maximum price. Note that we are using a different operation name for this method and that is the <code>findItemsAdvanced</code> operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">findItemsAdvanced</span><span class="p">(</span><span class="nv">$keyword</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$item_sort</span> <span class="o">=</span> <span class="s1">&#39;BestMatch&#39;</span><span class="p">,</span> <span class="nv">$item_type</span> <span class="o">=</span> <span class="s1">&#39;FixedPricedItem&#39;</span><span class="p">,</span> <span class="nv">$min_price</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="nv">$max_price</span> <span class="o">=</span> <span class="s1">&#39;9999999&#39;</span><span class="p">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$url</span>    <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">url</span> <span class="o">.</span> <span class="s1">&#39;?&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;operation-name=findItemsAdvanced&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;service-version=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">version</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;global-id=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">global_id</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;keywords=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;sortOrder=BestMatch&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(0).name=ListingType&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(0).value=FixedPrice&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(1).name=MinPrice&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(1).value=&#39;</span> <span class="o">.</span> <span class="nv">$min_price</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(2).name=MaxPrice&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;itemFilter(2).value=&#39;</span> <span class="o">.</span> <span class="nv">$max_price</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;paginationInput.entriesPerPage=&#39;</span> <span class="o">.</span> <span class="nv">$limit</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;descriptionSearch=false&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;security-appname=&#39;</span><span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app_id</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;response-data-format=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we can also create a method which simply returns an array of the sort orders available via e-bay.
You can find the available values for sort orders in <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsAdvanced.html#Request.sortOrder">this page</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">sortOrders</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$sort_orders</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;BestMatch&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Best Match&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;BidCountFewest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bid Count Fewest&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;BidCountMost&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bid Count Most&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CountryAscending&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Country Ascending&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CountryDescending&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Country Descending&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CurrentPriceHighest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Current Highest Price&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;DistanceNearest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Nearest Distance&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;EndTimeSoonest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;End Time Soonest&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;PricePlusShippingHighest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Price Plus Shipping Highest&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;PricePlusShippingLowest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Price Plus Shipping Lowest&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;StartTimeNewest&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Start Time Newest&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$sort_orders</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Building a Simple App</h3>

<p>Time to use the class that we just created in building a simple application.
Our simple application will have a search field for inputting products that the user wants to search
and a drop-down box to sort the results.</p>

<p>The only product details that were going to show to the user is the item title, price and the product image.
In the code below were declaring an object of the class that we created earlier specifying the API key
and the e-bay region as the first and second parameter.</p>

<p>Then we call the <code>sortOrders</code> method which simply returns an array of sort orders that are available from the e-bay finding API.</p>

<p>Next, we build the form for searching products.</p>

<p>Finally, we check if the <code>$_POST['search']</code> variable is not empty and use its value together with the sort selected by the user as the argument for the <code>findItemsAdvanced</code> method.
Going back to the class that we created earlier we used <code>findItemsAdvanced</code> as the operation.
The operation determines the first index when accessing the results.
So for the <code>findItemsAdvanced</code> it will have <code>findItemsAdvancedResponse</code> as the first index.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;class.ebay.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ebay</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ebay</span><span class="p">(</span><span class="s1">&#39;YOUR API KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;EBAY-US&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$sort_orders</span> <span class="o">=</span> <span class="nv">$ebay</span><span class="o">-&gt;</span><span class="na">sortOrders</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;form action=&quot;ebay_finding_test.php&quot; method=&quot;post&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;text&quot; name=&quot;search&quot; id=&quot;search&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;select name=&quot;sort&quot; id=&quot;sort&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$sort_orders</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$sort_order</span><span class="p">){</span>
</span><span class='line'>  <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;option value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$key</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$sort_order</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/option&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> 
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/select&gt;</span>
</span><span class='line'><span class="x">  &lt;input type=&quot;submit&quot; value=&quot;Search&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;search&#39;</span><span class="p">])){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$results</span> <span class="o">=</span> <span class="nv">$ebay</span><span class="o">-&gt;</span><span class="na">findItemsAdvanced</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;search&#39;</span><span class="p">],</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;sort&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$item_count</span> <span class="o">=</span> <span class="nv">$results</span><span class="p">[</span><span class="s1">&#39;findItemsAdvancedResponse&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;searchResult&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;@count&#39;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$item_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$items</span> <span class="o">=</span> <span class="nv">$results</span><span class="p">[</span><span class="s1">&#39;findItemsAdvancedResponse&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;searchResult&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;item&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$items</span> <span class="k">as</span> <span class="nv">$i</span><span class="p">){</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;li&gt;</span>
</span><span class='line'><span class="x">          &lt;div class=&quot;item_title&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;viewItemURL&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;</span>
</span><span class='line'><span class="x">          &lt;/div&gt;</span>
</span><span class='line'><span class="x">          &lt;div class=&quot;item_img&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;img src=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;galleryURL&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot; alt=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">          &lt;/div&gt;</span>
</span><span class='line'><span class="x">          &lt;div class=&quot;item_price&quot;&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;sellingStatus&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;currentPrice&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;@currencyId&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$i</span><span class="p">[</span><span class="s1">&#39;sellingStatus&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;currentPrice&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;__value__&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/div&gt;</span>
</span><span class='line'><span class="x">      &lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>        
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the demo for this simple application implemented using JavaScript by using Handlebars for the template and jQuery&rsquo;s <code>$.ajax</code> method to request the data. Be sure to place your own app id that you got from e-bay in order to make this demo work.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/L6Nkj/embedded/js,resources,html,css,result/light/"></iframe>


<h3>Conclusion</h3>

<p>That&rsquo;s it for this tutorial. Using the API is really easy since you don&rsquo;t need to construct signatures to be used in the request like other API&rsquo;s. Be sure to check out the resources below if you want to learn more about the e-bay finding API.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://developer.ebay.com/DevZone/finding/HowTo/">Finding API How To</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html">Making an API Call</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">Call Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/ebay_finding_api.7z">Sample Application Source Code</a></li>
<li><a href="http://tutorialdemos-wern.rhcloud.com/ebay_finding_api/ebay_finding_test.php">Sample Application Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Templating Libraries]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries/"/>
    <updated>2013-03-24T21:49:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through some of the templating libraries
that I&rsquo;m currently using for my projects specifically the following:</p>

<ul>
<li><a href="https://github.com/janl/mustache.js">Mustache</a></li>
<li><a href="https://github.com/wycats/handlebars.js/">Handlebars</a></li>
<li><a href="http://smarty.net/">Smarty</a></li>
</ul>


<p>Mustache is available for a bunch of languages but were going to use the JavaScript version for this tutorial.
Handlebars is only available on JavaScript. And Smarty is for PHP.</p>

<p>You can either use chrome dev tools, JS Fiddle (or any alternatives) or a local file for this tutorial.</p>

<!--More-->


<h3>Mustache</h3>

<p>Let&rsquo;s start by creating the two ingredients that Mustache needs in order
to create an output: a data source and a template.</p>

<h4>Basics</h4>

<p>Mustache mainly accepts JavaScript objects as its data source
and an html string for the template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name_obj</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;Killua Zoldyc&#39;</span><span class="p">};</span> <span class="c1">//data source</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">name_template</span> <span class="o">=</span> <span class="s2">&quot;&lt;h1&gt;{{name}}&lt;/h1&gt;&quot;</span><span class="p">;</span> <span class="c1">//template</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, we can call the <code>Mustache.to_html()</code> method
to merge the data source and the template together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name_html</span> <span class="o">=</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">to_html</span><span class="p">(</span><span class="nx">name_template</span><span class="p">,</span> <span class="nx">name_obj</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name_html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can just use jQuery or plain JavaScript to append the html contained by <code>name_html</code> variable into the DOM.</p>

<h4>Collections</h4>

<p>Next let&rsquo;s do something less basic.
Let&rsquo;s try to use a group of hunters as our data source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">hunters</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;hunters&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;Gon&#39;</span><span class="p">,</span> <span class="s1">&#39;nen&#39;</span> <span class="o">:</span> <span class="s1">&#39;Enhancer&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;Killua&#39;</span><span class="p">,</span> <span class="s1">&#39;nen&#39;</span> <span class="o">:</span> <span class="s1">&#39;Transmuter&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;Kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;nen&#39;</span> <span class="o">:</span> <span class="s1">&#39;Conjurer&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;Leorio&#39;</span><span class="p">,</span> <span class="s1">&#39;nen&#39;</span> <span class="o">:</span> <span class="s1">&#39;Emitter&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the template were going to make use of a table to display
both their names and nen ability:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;hunters&quot;</span> <span class="na">type=</span><span class="s">&quot;text/html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hunters</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">border</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Nen</span> <span class="nx">Ability</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">#</span><span class="nx">hunters</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">nen</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">/hunters}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>   
</span></code></pre></td></tr></table></div></figure>


<p>On our previous example we made use of a variable which stores an html string for the template.
But for the example above were using a <code>script</code> tag which has a type of <code>text/html</code> and plain html on its body.</p>

<p>We also used a new pair of tags for looping through the items in the array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#hunters}}
</span><span class='line'>  #access the value for each of the properties here
</span><span class='line'>{{/hunters}}
</span></code></pre></td></tr></table></div></figure>


<p>The hash <code>#</code> marks the start of the loop and the forward slash <code>/</code> marks its end.
Then within those tags you can access the properties of the object.
In our example the properties are <code>name</code> and <code>nen</code>.</p>

<p>You can then append the html created from calling <code>Mustache.to_html()</code> into a container.
Just make sure you&rsquo;re doing it after the dom has fully loaded and you can do that by calling the
method inside jQuery&rsquo;s <code>document.read</code> event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>var hunters_html = Mustache.to_html($(&#39;#hunters&#39;).html(), hunters);
</span><span class='line'>$(function(){
</span><span class='line'>  $(&#39;.container&#39;).html(hunters_html);
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aj73t/embedded/js,resources,html,css,result/light/"></iframe>


<h4>Arrays</h4>

<p>In our previous example we used an object as the data source and then accessed its properties inside the loop.
But what if the data source is an array?</p>

<p>For example we have this data source and we want to access the items in the <code>hunter_names</code> array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">hunter_names</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;hunter_names&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gon&#39;</span><span class="p">,</span> <span class="s1">&#39;Killua&#39;</span><span class="p">,</span> <span class="s1">&#39;Kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;Leorio&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To access each of the items in the <code>hunter_names</code> array all we have to do is to place a dot <code>.</code> inside the template tags. The dot represents the current item in the array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/html&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;hunter_names&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">#</span><span class="nx">hunter_names</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{.}}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">/hunter_names}}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Tb8pu/embedded/js,resources,html,css,result/light/"></iframe>


<h4>Functions</h4>

<p>You can also make use of functions in Mustache.
For example we have an object which stores the items that we have added to the cart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">subtotal</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;cart&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;gundam&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">2500</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;racket&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">99</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;flash drive&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the object above you can see that we have the <code>subtotal</code> property which we have assigned
to the <code>subtotal</code> function which returns the product of the <code>price</code> and the <code>quantity</code>.</p>

<p><code>this</code> simply refers to the current context where the function is being called so <code>this.price</code> simply refers to the price of the current item.</p>

<p>We can then define our template.
Note that were accessing the data from the <code>subtotal</code> property just like a normal property.
It seems like Mustache already does some of its sorcery once we call the    <code>Mustache.to_html()</code> method which might include computing the subtotal for each item.</p>

<p>So you don&rsquo;t really have to call the method from the template just like what we normally do when accessing the value returned from a property that was assigned to a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cart</span><span class="p">.</span><span class="nx">cart</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">subtotal</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;functions&quot;</span> <span class="na">type=</span><span class="s">&quot;text/html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">border</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Quantity</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Subtotal</span><span class="o">&lt;</span><span class="err">/th&gt;    </span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">#</span><span class="nx">cart</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">price</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">quantity</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">subtotal</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">/cart}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The common use cases for functions is when checking for the existence or truthiness of a value, computing values, and adding extra markup based on a certain condition.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/mGmPG/2/embedded/js,resources,html,css,result/light/"></iframe>


<h3>Handlebars</h3>

<p>There&rsquo;s not really much difference between Mustache and Handlebars.</p>

<p>They still use the same template tags which looks like a double mustache &#8220;.
But the template tags also look like the Handlebars of a bicycle so maybe that&rsquo;s the reason behind the naming of this templating library.</p>

<p>Handlebars packs more features than Mustache since it has some simple logic tags which you can use like <code>if</code> , <code>with</code> and <code>each</code>. I believe templates should contain less logic as possible since templates are only for presentation.</p>

<p>Just like how we keep logic to a minimum in the views when working with MVC.
Handlebars has also limited the logic tags that we can use.</p>

<p>To emphasize that there isn&rsquo;t really much difference between Mustache and Handlebars I&rsquo;ll use the same object that we used earlier on our Mustache example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">subtotal</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;cart&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;gundam&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">2500</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;racket&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">99</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;flash drive&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;subtotal&#39;</span> <span class="o">:</span> <span class="nx">subtotal</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'><span class="p">};</span> 
</span></code></pre></td></tr></table></div></figure>


<p>And for the template the only change that we have here is the value of the type attribute of the script tag.
In this case the value is <code>text/x-handlebars-template</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;functions&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">border</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Quantity</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Subtotal</span><span class="o">&lt;</span><span class="err">/th&gt;    </span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">#</span><span class="nx">cart</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">price</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">quantity</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">subtotal</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">/cart}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>   
</span></code></pre></td></tr></table></div></figure>


<p>Handlebars isn&rsquo;t really picky when it comes to the value of tye <code>type</code> attribute.
You can actually use <code>text/html</code> as the value or nothing at all.</p>

<p>But its a good practice to always specify the <code>type</code> so that other people will know what that specific <code>script</code> tag is all about. Plus I haven&rsquo;t really tested if the two tags below would really work in all possible scenarios.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/html&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  
</span><span class='line'><span class="nt">&lt;script&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we can just call <code>Handlebars.compile</code> and supply the html string of our template as an argument to create the template. We can then call the template and supplying the data source <code>cart</code> as the argument then assign it as the html of the container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>var cart_html = Handlebars.compile($(&#39;#functions&#39;).html());
</span><span class='line'>$(&#39;.container&#39;).html(cart_html(cart));
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/H8Bac/embedded/js,resources,html,css,result/light/"></iframe>


<p>In the above example we did not explicitly specify that we want to loop through the items in the cart.
In handlebars there&rsquo;s actually an alternative syntax for looping through the items in an array.
And that is by using the <code>each</code> keyword followed by the name of the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#each cart}}
</span><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{name}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{price}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{quantity}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>{{subtotal}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>{{/each}}
</span></code></pre></td></tr></table></div></figure>


<h4>With</h4>

<p><code>With</code> is used to change the context on which the properties that are accessed inside of it are called.</p>

<p>First lets define our data source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">hunter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;family_occupation&#39;</span> <span class="o">:</span> <span class="s1">&#39;assassin&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;hunter&#39;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;killua zoldyc&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ability&#39;</span> <span class="o">:</span> <span class="s1">&#39;transmuter&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then our template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;hunter&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">#</span><span class="kd">with</span> <span class="nx">hunter</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">:</span> <span class="p">{{</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Ability</span><span class="o">:</span> <span class="p">{{</span><span class="nx">ability</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Family</span><span class="o">:</span> <span class="p">{{..</span><span class="o">/</span><span class="nx">family_occupation</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">/with}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the template above we have change the context to <code>hunter</code> so any properties that are defined inside the <code>hunter</code> object will be accessible as long as they are within the <code>with</code> tags.</p>

<p>But if you want to access properties outside of the current context you can use <code>../</code> just like what we do when stepping back a single directory when linking assets relatively in html.
From our example the <code>family_occupation</code> property is outside the <code>hunter</code> object so we&rsquo;ve used <code>../</code> to step back.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ZprP6/embedded/js,resources,html,css,result/light/"></iframe>


<h4>If</h4>

<p><code>if</code> is used to check for the <a href="http://james.padolsey.com/javascript/truthy-falsey/">truthiness</a> of a value.
It can be used along with <code>else</code> to output something else in case a value is not present.</p>

<p>In our object below there is no value for the <code>box_weapon</code> of the first member.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">family</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;member&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;reborn&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;tsunayoshi sawada&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;sky lion&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;hibari kyoya&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;cloud hedgehog&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;gokudera hayato&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;storm leopard&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;takeshi yamamoto&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;rain swallow&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;ryohei sasagawa&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;sun kangaroo&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;lambo&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;lightning bull&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;rokudo mukuro&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;box_weapon&#39;</span> <span class="o">:</span> <span class="s1">&#39;mist owl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then use <code>if</code> and <code>else</code> to check if the value is present or not and output something else if the value is not present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;ifs&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">vongola</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">border</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Family</span> <span class="nx">Member</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Box</span> <span class="nx">Weapon</span><span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">member</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="p">{{</span><span class="err">#</span><span class="k">if</span> <span class="nx">box_weapon</span><span class="p">}}</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">box_weapon</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>        <span class="p">{{</span><span class="k">else</span><span class="p">}}</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="nx">No</span> <span class="nx">box</span> <span class="nx">weapon</span><span class="o">&lt;</span><span class="err">/td&gt;&lt;!--if value is not present--&gt;</span>
</span><span class='line'>        <span class="p">{{</span><span class="err">/if}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;family&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/J8qXs/embedded/js,resources,html,css,result/light/"></iframe>


<h4>Helpers</h4>

<p>Finally there are <code>helpers</code> which are like functions that you can call inside your Handlebars template.
They can be used to extend the functionality that Handlebars already provides by default.</p>

<p>For our example let&rsquo;s define the data source which is just an array of numbers from 1 to 10:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;numbers&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then let&rsquo;s define our handlebars helper. You can define a helper by calling <code>Handlebars.registerHelper</code>.
The first argument is the name of the helper, in this case the name is <code>multiply_by_10</code>.
The second argument is the callback function which contains the logic or the process that you want to perform with the data that you specify. The data that you want the function to use are specified as arguments. In this case we have the <code>num</code> variable. The helper below simply returns the value returned from multiplying the argument <code>num</code> with the number 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;multiply_by_10&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">num</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then create the template and call the helper that we just created, supplying the current item in the array of numbers. The current item in an array is represented by <code>this</code> in Handlebars.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;helpers&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">numbers</span><span class="p">}}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">multiply_by_10</span> <span class="k">this</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;num_container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s do another example, this time were going to use the cart object that we used earlier.
But now we&rsquo;ll remove the <code>subtotal</code> property since we will let our helper take care of that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cart</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;cart&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;gundam&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">2500</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;racket&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">99</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s1">&#39;name&#39;</span> <span class="o">:</span> <span class="s1">&#39;flash drive&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;quantity&#39;</span> <span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;price&#39;</span> <span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For this example were going to use two helpers.
One will return the header for the table. And the other one will compute the subtotal.</p>

<p>Here&rsquo;s the helper that returns the header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;get_headers&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">table_headers</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">x</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">table_headers</span> <span class="o">+=</span> <span class="s2">&quot;&lt;th&gt;&quot;</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;&lt;/th&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">(</span><span class="nx">table_headers</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What were doing in the code above is looping through the properties of the object that we specified
and then wrapping it in <code>th</code> tags. The current property is represented by the value stored in the variable <code>x</code>.
We then append this value to the the <code>table_headers</code> variable.</p>

<p>After looping through all of the properties of the object we then return the string accumulated by the <code>table_headers</code> variable. We have to return a <code>new Handlebars.SafeString(html_string)</code> because Handlebars automatically escapes HTML tags. This is a way of telling Handlebars not to escape the specific HTML that were trying to return from the helper.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/tENVa/embedded/js,resources,html,css,result/light/"></iframe>


<h4>JSON</h4>

<p>Finally were going to use real world data to supply to our template.
Twitter really makes it easy to retrieve the tweets of a specific user as long as the tweets are set to public
so were going to make use of the data from Twitter as the data source for our templates.</p>

<p>Here&rsquo;s our template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;tweets&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Wern</span> <span class="nx">Ancheta</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">tweets</span><span class="p">}}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">linkify</span> <span class="nx">text</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tweets_container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then extend the String prototype by adding a method called <code>replaceArray</code> this method will take two arrays as arguments. All it does is to loop through the <code>find</code> array and replaces the current item in the <code>find</code> array with the current item in the <code>replace</code> array and then assign it back to the original string which is represented by <code>this</code>. After looping through all of the items it just returns the string which now has been replaced with the items in the <code>replace</code> array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">replaceArray</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">find</span><span class="p">,</span> <span class="nx">replace</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">replaceString</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">find_length</span> <span class="o">=</span> <span class="nx">find</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">find_length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">replaceString</span> <span class="o">=</span> <span class="nx">replaceString</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">find</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">replace</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">replaceString</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a helper that would change the url&rsquo;s in a specific tweet to a link that can be clicked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;linkify&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">linkified</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">urls</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/(\{(.+?)\}:)?(http:\/\/[\w\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[\w])+)/g</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">urls</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">url_count</span> <span class="o">=</span> <span class="nx">urls</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">url_count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">url_string</span> <span class="o">=</span> <span class="s2">&quot;&lt;a href=&#39;&quot;</span> <span class="o">+</span> <span class="nx">urls</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">urls</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/a&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">linkified</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">url_string</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">replaceArray</span><span class="p">(</span><span class="nx">urls</span><span class="p">,</span> <span class="nx">linkified</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above were using regex to extract only the urls from the tweet.
For example we have this tweet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">really</span> <span class="nx">nice</span> <span class="nx">interactive</span> <span class="nx">course</span> <span class="nx">on</span> <span class="nx">chrome</span> <span class="nx">developer</span> <span class="nx">tools</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//t.co/wHdyEMnWjG</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the regex that we have above the <code>urls</code> variable will contain a single item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="nx">http</span><span class="o">:</span><span class="c1">//t.co/wHdyEMnWjG]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then loop through all of those url&rsquo;s and wrapping it in anchor tags and then push it to the <code>linkified</code> variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">url_count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url_string</span> <span class="o">=</span> <span class="s2">&quot;&lt;a href=&#39;&quot;</span> <span class="o">+</span> <span class="nx">urls</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">urls</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/a&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">linkified</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">url_string</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we call the <code>replaceArray</code> method that we created earlier to replace all the url&rsquo;s in the tweet to a url wrapped in anchor tags. Then we use it as an argument of the <code>Handlebars.SafeString</code> method so that Handlebars would not escape the HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">replaceArray</span><span class="p">(</span><span class="nx">urls</span><span class="p">,</span> <span class="nx">linkified</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case there&rsquo;s no url in the current tweet we simply return the tweet without doing anything to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="nx">text</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we can compile the template for the tweets and then issue an AJAX request to the Twitter API to get the tweets.
The <code>dataType</code> should be <code>jsonp</code> since we can&rsquo;t really make a request to another domain if we don&rsquo;t specify the data type as <code>jsonp</code>. If you want to learn more about it check out this question at stackoverflow: <a href="http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about">What is jsonp all about</a>.</p>

<p>Once the request succeeded we can then replace the HTML of our tweets container with the HTML string returned from merging the template with the data coming from Twitter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">tweets_template</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tweets&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://api.twitter.com/1/statuses/user_timeline.json?screen_name=wern_ancheta&amp;count=5&amp;exclude_replies=true&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tweets</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.tweets_container&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">tweets_template</span><span class="p">({</span><span class="s1">&#39;tweets&#39;</span> <span class="o">:</span> <span class="nx">tweets</span><span class="p">}));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aZra5/embedded/js,resources,html,css,result/light/"></iframe>


<h3>Smarty</h3>

<p>The last library that were going to play around today is the Smarty templating engine for PHP.
And for that you need to download Smarty over at <a href="http://www.smarty.net">smarty.net</a>.</p>

<p>The main smarty file is the <code>Smarty.class.php</code> stored in the <code>libs</code> directory.
Include it on your working file and then do the housekeeping (make an instance of the smarty class, set the template directory):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;libs/Smarty.class.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$smarty</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Smarty</span><span class="p">;</span>
</span><span class='line'><span class="nv">$smarty</span><span class="o">-&gt;</span><span class="na">setTemplateDir</span><span class="p">(</span><span class="s1">&#39;smarty_templates&#39;</span><span class="p">);</span> <span class="c1">//this is where all your template files are stored</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a template under the <code>smarty_templates</code> directory.
The file extension for smarty templates is <code>.tpl</code>.</p>

<p>Next, we create our data source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$names</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Yoh Asakura&#39;</span><span class="p">,</span> <span class="s1">&#39;Ichigo Kurosaki&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Uzumaki Naruto&#39;</span><span class="p">,</span> <span class="s1">&#39;Edward Elric&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Alibaba Saluja&#39;</span><span class="p">,</span> <span class="s1">&#39;BK201&#39;</span><span class="p">,</span> <span class="s1">&#39;Luffy&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then assign a template variable and call it <code>names</code>.
You can use the  <code>assign</code> method to assign template variables.
It takes up 2 arguments which is the name of the variable and then the variable which stores the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$smarty</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;names&#39;</span><span class="p">,</span> <span class="nv">$names</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the name of the variable doesn&rsquo;t necessarily need to be the same as the name you gave to the variable which stores the data. So you can also have something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$smarty</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;anime&#39;</span><span class="p">,</span> <span class="nv">$names</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>For our template we simply loop through the items in the array.
Here were using <code>foreach</code> to loop through the items.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Anime<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>{foreach $names as $n}
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>{$n}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{/foreach}
</span></code></pre></td></tr></table></div></figure>


<p>For our final example were just going to reuse the cart that we had earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$cart</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;racket&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;quantity&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;table&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;quantity&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;bat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;quantity&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And for the template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Cart<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--Loop through the properties of the first item (name, price, quantity)--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>  {foreach $cart[0] as $h =&gt; $p}
</span><span class='line'>    <span class="nt">&lt;th&gt;</span>{$h}<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>  {/foreach}
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {foreach $cart as $i}
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>{$i.name}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>{$i.price}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>{$i.quantity}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {/foreach}
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'>
</span><span class='line'>There are {$cart|count} items in the cart.
</span></code></pre></td></tr></table></div></figure>


<p>Some of the functions that you can use on PHP can also be used inside Smarty templates.
For the code above we have used the <code>count</code> function. To use a function inside a template you simply specify the value that you want to supply as the argument of the function and then followed by a pipe <code>|</code> and then the function name, in this case the function name is <code>count</code> which simply returns how many items are in the array that was specified.</p>

<h2>Conclusion</h2>

<p>There&rsquo;s not really much difference between PHP and Smarty syntax and you can actually do everything in PHP if you like.</p>

<p>But why would we need to use templates instead of just plain PHP?</p>

<p>Because templates has much more cleaner syntax and it encourages code reuse.
Sometimes in our projects we need to make use of the same HTML structure for
the data that were presenting and often times we just repeat ourselves.
Using a template can help make our code DRYer.</p>

<p>Another reason is that by using Smarty and other templating engines we can avoid writing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$html_str</span>   <span class="o">=</span> <span class="s2">&quot;&lt;h1&gt;Heading&lt;/h1&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$html_str</span>  <span class="o">.=</span> <span class="s2">&quot;&lt;ul&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$items</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$html_str</span>  <span class="o">.=</span> <span class="s2">&quot;&lt;li&gt;&quot;</span> <span class="o">.</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&lt;/li&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$html_str</span>  <span class="o">.=</span> <span class="s2">&quot;&lt;/ul&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$html_str</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Or something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">ob_start</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;h1&gt;Heading&lt;/h1&gt;</span>
</span><span class='line'><span class="x">&lt;ul&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$items</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nb">ob_get_contents</span><span class="p">();</span>
</span><span class='line'><span class="nb">ob_end_flush</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$html</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above doesn&rsquo;t really look great and we can avoid having to write those kinds of codes by using templates.
This is true for all the templating libraries that we have gone around in this article and others which we haven&rsquo;t tackled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging into Octopress]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/10/digging-into-octopress/"/>
    <updated>2013-03-10T13:01:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/10/digging-into-octopress</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll be sharing some of the things
that I&rsquo;ve discovered while working with Octopress.</p>

<h3>Introduction</h3>

<p>As you all know Octopress is a blogging framework much like Wordpress
but only static and its powered by Jekyll which is a static site generator.
Static means that it generates html and other assets whenever you generate the site.
Every configuration are stored in files.
Therefore there&rsquo;s no database involved.
There&rsquo;s no login and other dynamic things that you might find in Wordpress and other CMS.</p>

<!--More-->


<p><strong>Pros</strong></p>

<ul>
<li><p>You own your content. Posts in octopress lives in your hard drive and then you just deploy them later on.</p></li>
<li><p>Fully customizable and extensible. You get to write your own plugins and themes. And you can customize almost anything on your site.</p></li>
<li><p>You can deploy anywhere. All you need are the files that were generated. No need for PHP, MySQL.</p></li>
</ul>


<p><strong>Cons</strong></p>

<ul>
<li><p>More difficult setup. You have to install a bunch of stuff from the command line before you get it to work. But the docs are great so there&rsquo;s no need to worry.</p></li>
<li><p>It takes time to generate the whole site when you&rsquo;re publishing something, probably a minute or two but that&rsquo;s just my computer. It might be faster on more powerful computers.</p></li>
</ul>


<h2>Themes</h2>

<p>There&rsquo;s a bunch of <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">themes</a> available for Octopress. The one that I&rsquo;m using for my site is the <a href="http://zespia.tw/Octopress-Theme-Slash/">Slash theme</a> though I&rsquo;ve done a bit of customization so that it won&rsquo;t look too Slashy.</p>

<p>The process for installing a theme is simply downloading the theme then extract it into the <code>.themes</code> directory and then execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git clone GIT_URL .themes/THEME_NAME
</span><span class='line'>rake install['THEME_NAME']
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h2>Plugins</h2>

<p>There&rsquo;s also a bunch of <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">plugins</a> that you can use for Octopress. You can install the plugins on the <code>plugins</code> directory inside <code>octopress</code>. I personally use the following plugins:</p>

<ul>
<li>blockquote</li>
<li>gist_tag</li>
<li>video_tag (vimeo, youtube)</li>
<li>backtick code block</li>
</ul>


<h3>Customizing Octopress</h3>

<p>Customizing Octopress is easy.
All you have to do is to edit the files on the following directories:</p>

<ul>
<li>source &ndash; html templates, scripts, images and other site assets (E.g. fonts)</li>
<li>sass &ndash; stylesheets</li>
<li>plugins &ndash; plugin files which are mostly ruby files</li>
<li>.themes &ndash; theme files</li>
</ul>


<p>Here&rsquo;s a screenshot of the source directory where most of the files that Octopress uses to generate a site are stored.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_octopress/source.jpg" alt="source" /></p>

<h4>Layouts</h4>

<p>In Octopress there are site layouts which are basically just html files with templating logic.
Here&rsquo;s the default layout used in Octopress. Most of the time the default layout is the layout used in the index page of an Octopress blog.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_octopress/default_html.jpg" alt="default" /></p>

<p>There&rsquo;s also the <code>post</code> layout which just inherits from the default layout.
And then loads the actual post inside the <code>article</code> section.</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_octopress/post_html.jpg" alt="post" /></p>

<p>So where does Octopress know where to find the <code>article.html</code> that we are
including inside the <code>article</code> section? It finds them inside the <code>_includes</code> directory.
All the files that are included by doing <code>include file.html</code> are stored in the <code>_includes</code> directory.</p>

<p>Opening up the <code>article.html</code> file we see something like this:</p>

<p><img src="http://anchetaWern.github.io/images/posts/digging_into_octopress/article_html.jpg" alt="article" /></p>

<p>Upon reading the code you will see that this actually does either of two things.
First it checks if the current page is the <code>index</code> page.
If its the <code>index</code> page then it doesn&rsquo;t load all the content of the blog post
but only if you have specified it in your post.</p>

<p>Going back to the Octopress documentation under the blogging basics section.
You will see that in order to specify where your content will be cut in the index page
you have to put the <code>&lt;!-- more --&gt;</code> comment right after the specific spot where you want
the content to be cut. Someone might have written a plugin that automatically only loads a bit of the actual content in the index page but having a control on where the content will be cut is really good.</p>

<p>On the other hand if the current page is something other than the <code>index</code> page then it simply loads the whole content.</p>

<h3>Behaviors</h3>

<p>Here are some of the behaviors that I noticed while I was using Octopress:</p>

<ul>
<li><p>If the source file (markdown) that you are trying to convert to html is not valid it will either return an error when you execute <code>rake generate</code> or it will simply fallback to the previously generated site without returning an error.</p></li>
<li><p>Errors in plugins will return an error when executing <code>rake generate</code></p></li>
<li><p>Posts that are not published (published: false) will show up on <code>rake preview</code> but does not show up on <code>rake deploy</code></p></li>
</ul>


<h3>Commands</h3>

<p>Here are some of the commands that I frequently used when working with Octopress:</p>

<ul>
<li><p><strong>rake generate</strong> &ndash; used for generating the site</p></li>
<li><p><strong>rake preview</strong> &ndash; used for previewing the whole site on your browser. The common port is <code>4000</code>. So to access your Octopress site offline you would have to type in <code>localhost:4000</code> that is if you haven&rsquo;t setup a virtual host on your machine.</p></li>
<li><p><strong>rake gen_deploy</strong> &ndash; used for generating the whole site and then deploy it to your preferred hosting site (E.g Github pages, Heroku).</p></li>
</ul>


<h3>Extending Octopress</h3>

<p>You can easily extend the default functionality offered by Octopress. With a bit of knowlege in Ruby, Sass, HTML, JavaScript and templating you can already create your own Octopress plugins.
Like I said earlier Octopress is powered by Jekyll
so anything that you have on Jekyll you also have on Octopress.
Most of the default plugins that you have when Octopress is installed are actually Jekyll plugins.
Here&rsquo;s a tutorial on <a href="https://github.com/mojombo/jekyll/wiki/Plugins">how to create Jekyll Plugins</a>.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://octopress.org/docs/">Octopress Documentation</a></li>
<li><a href="http://anchetawern.github.com/blog/2012/11/29/customizing-octopress/">Customizing Octopress</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">Octopress Plugins</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Octopress Themes</a></li>
<li><a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll Plugins</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Like in a Company]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/10/what-i-like-in-a-company/"/>
    <updated>2013-03-10T10:44:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/10/what-i-like-in-a-company</id>
    <content type="html"><![CDATA[<p>Perhaps this is one of the posts where I share the things I want.
A few alternative titles might be:</p>

<blockquote><p>What kind of Companies do I like to work for?</p></blockquote>




<blockquote><p>Things I&#8217;m looking for in a Company</p></blockquote>




<blockquote><p>What makes a company awesome?</p></blockquote>




<!--More-->


<p>I want to work for a company that:</p>

<ul>
<li>Offers a salary that matches my level of competency</li>
<li>Gives a lot of opportunity to grow</li>
<li>Has some nice and awesome people</li>
<li>Gives rasonable deadlines</li>
</ul>


<h3>Offers a salary that matches my level of competency</h3>

<p>As a professional its really important to get paid rightfully with the work that we do.
We do our jobs well and often times we also work beyond the time when we are required to work.
But the exception is that when were just starting out (probably around 1-3 years in the industry)
the priority is to get experience. It doesn&rsquo;t matter if the salary is low because later on
you&rsquo;ll get to demand your salary once you&rsquo;re awesome enough.</p>

<h3>Gives a lot of opportunity to grow</h3>

<p>This is the most important one in the list if you&rsquo;re just starting out.
What I specifically look for in a company is that they&rsquo;re willing to give me work
that involves technologies, tools and methodologies that I do not already know how
to use. This is great because what can you gain from doing things that you already
know over and over and over again? Nothing right?
But you will probably become an expert at doing it.
And you gain the ability to do it blindfolded while your other hand is handcuffed.</p>

<p>Ok going back to the original topic: a company that gives a lot of opportunity to grow.
This is what fresh graduates and people that are fresh in the industry should be looking for.
Because schools only teaches a small fraction of what you would be really working with when you graduate. Its important that you gain the knowledge and experience needed for most of the work that you will be doing in the industry.</p>

<h3>Nice and awesome people</h3>

<p>There will always be douchebags, and people that you can&rsquo;t really work with because of their attitude so its always nice to have some nice people around which are always accomodating, friendly and always ready to answer your questions.
Always offers a piece of advice and always has a suggestion whenever you get yourself in a hole.</p>

<h3>Reasonable Deadlines</h3>

<p>Deadlines are great because it prevents you from working on a project forever.
It prevents you from fooling around while working.
And it keeps you focused on the project.</p>

<p>But some deadlines, especially those that are given by project managers
who have no experience in development are just terrible.</p>

<p>Reasonable deadlines are really important so the developer won&rsquo;t end up
crapifying the code just to catch up to a deadline made for zombie superhumans.
Just like the saying goes:</p>

<blockquote><p>Everything that is forced ends up like crap</p></blockquote>


<p>Its important that the project manager or anyone who&rsquo;s giving out the deadlines
has a prior experience in development.
Because only then can they make an intelligent decision on what the deadline should be.
Even better is letting the developer estimate how much the specific story or module
will take.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it for this blog post. At the end of the day you will always have to choose the company where you&rsquo;re happy to work with and that you&rsquo;re enjoying the work that you do for that company. Otherwise you wouldn&rsquo;t last or even if you stay on that company longer, the work that you do will always be badly affected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning and how I did it wrong]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/03/learning-and-how-i-did-it-wrong/"/>
    <updated>2013-03-03T08:58:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/03/learning-and-how-i-did-it-wrong</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to share some of the mistakes that I did while trying to learn something. Looking at the list below you might say that these are all nice things to do while trying to learn something. But I&rsquo;m going to try explaining below why these kinds of activities are not always good for learning.</p>

<ul>
<li>Watching video tutorials</li>
<li>Reading Books</li>
<li>Learning something that I cannot immediately apply</li>
<li>Taking up online learning classes</li>
</ul>


<!--More-->


<h3>Watching video tutorials</h3>

<p>Video tutorials are a fast and easy way to learn something.
Its not like the classroom setting wherein you have to listen carefully and take note of every important thing that the teacher says so you will have something to review later on for the exams.
Video tutorials are different in the sense that you can skip to a part where you&rsquo;re specifically interested in or repeat viewing the video any time you want.
So you basically keep watching the video tutorial until you finally grok everything that&rsquo;s mentioned in there. You would also try to code up the program that was thought in the video tutorial yourself.</p>

<p>There&rsquo;s actually no problem with this method of learning. We learn faster by doing this but sometimes we often forget the real reason why were doing it and that is to learn.
Sometimes we get too caught up in watching all the videos in that tutorial series and we tend to make the process of learning faster by just going through all the videos without even trying for yourself what you&rsquo;ve learned and applying the things that you&rsquo;ve learned on a project.</p>

<p>This is exactly what happened when I started watching the tutorials over at thenewboston. The guy there really knows how to make things easier to understand by making use of different real world scenarios or analogies. His videos were simply addictive and before I knew it I already watched several of his tutorials on Python and Python game development, Java, PHP, and JavaScript.
I also tried learning Ruby on Rails and a bunch of other programming related stuff but none of those ever stick into my mind because I wasn&rsquo;t applying everything that I&rsquo;ve learned. I was simply watching the videos, tried to code it by myself on notepad++ and then call it a day.</p>

<h3>Reading Books</h3>

<p>Books are also a great way to learn especially e-books.
You can basically skip through the things that interest you the most
in that book. Sometimes there are also exercises
to help you further understand what you&rsquo;ve learned.
But books are often lengthy(400 pages or more) and its easy to lose motivation
when reading a book. But that&rsquo;s the mistake in that.
Books which has 400 pages or more aren&rsquo;t meant to be read from cover to cover.
They&rsquo;re meant as a reference or a guide in your learning.</p>

<h3>Learning something that I cannot immediately apply</h3>

<p>There are lots of things that I want to learn, there are lots of interesting articles about programming and web development that I want to read, there are lots of tools that are coming out that I want to use.
There&rsquo;s just too much that I want to learn but only a few of them can be immediately applied to the things that I&rsquo;m currently doing (E.g. my day job).
These are the things that truly hinders learning the things that are really needed.
It&rsquo;s only a matter of discipline but its really hard to fight the temptations in learning something that&rsquo;s hot and new.</p>

<h3>Taking up online learning classes</h3>

<p>Taking up online classes like the one&rsquo;s found at codeacademy, codeschool and udacity are also a great way to learn but they&rsquo;re also susceptible by some of the things that I&rsquo;ve already mentioned above (E.g. temptation in learning something that is not immediately needed, the focus lies on somewhere else rather than learning and become better).</p>

<p>This post is not meant to criticize online learning classes, books and video tutorials.
We all agree that these are all very good way to learn something.
What I&rsquo;m saying is that its so easy to lead yourself in the wrong direction if you don&rsquo;t know how to make use of these learning resources responsibly.
We must all remember that life is continuous learning process.
It doesn&rsquo;t mean that the learning stops when you&rsquo;ve watched all the videos in the Laravel Course or Regular Expressions Course or JavaScript course.
Often times you&rsquo;ve only learned the basics after taking up these kinds of courses.
But the important thing is that you already know much that you can already level up your skills further with your own hands without relying on a guide or a course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should everyone learn how to code?]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/03/should-everybody-learn-how-to-code/"/>
    <updated>2013-03-03T08:47:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/03/should-everybody-learn-how-to-code</id>
    <content type="html"><![CDATA[<p>Should everyone learn how to code? That&rsquo;s the question that&rsquo;s been
running on my mind lately. And my answer would be no.
You wouldn&rsquo;t expect your grandpa or grandma to learn how to code,
you wouldn&rsquo;t expect the community worker to learn how to code,
you wouldn&rsquo;t expect a policeman, a politician, a plumber
or a basketball player to learn how to code because it not needed in their daily jobs.</p>

<p>But how about changing the question to something like: Should every children of this generation learn how to code?</p>

<p>My answer for this would be yes, every children of this generation should learn how to code. Were in 2013 and computers are rapidly changing the world.
It&rsquo;s only natural that every children of this age should learn how to make computers do things for them. And that is through coding.
But this doesn&rsquo;t mean that every children of this age should become programmers, software engineers or web developers in the future.
Every children should learn how to code regardless of their future profession.
Because programming allows children to talk to computers and computers are the future.
It allows children to build things, it brings out the creativity in children.
Programming is a great way to improve problem solving skills.</p>

<p>I believe that every school should teach basic computing and programming to children. Its a great skill to have and there are many opportunities waiting for them when they decided to pursue a career in the field of computer science in the future.</p>

<p>And to further support this movement that every children should learn how to code. Here are some resources that would help the children or everyone who wants to learn how to code.</p>

<h3>Interactive</h3>

<ul>
<li><a href="http://www.code.org">code.org</a></li>
<li><a href="http://www.codecademy.com">codeacademy</a></li>
<li><a href="https://www.udacity.com/">udacity</a></li>
<li><a href="http://www.coursehero.com/">coursehero</a></li>
<li><a href="http://www.learnpython.org/">learn python</a></li>
<li><a href="http://www.codeschool.com/">code school</a></li>
<li><a href="http://www.learnstreet.com/">learnstreet</a></li>
<li><a href="http://rubymonk.com/">ruby monk</a></li>
</ul>


<h3>Group Learning</h3>

<ul>
<li><a href="https://p2pu.org/en/">p2pu</a></li>
</ul>


<h3>University</h3>

<ul>
<li><a href="https://www.coursera.org/">coursera</a></li>
<li><a href="https://www.edx.org/courses/">edx</a></li>
</ul>


<h3>Video Tutorials</h3>

<ul>
<li><a href="https://www.khanacademy.org/">khan academy</a></li>
<li><a href="http://thenewboston.org/">thenewboston</a></li>
<li><a href="http://youtube.com/phpacademy">php academy</a></li>
<li><a href="http://www.youtube.com/jreamdesign">jreamdesign</a></li>
<li><a href="http://www.youtube.com/user/mybringback">mybringback</a></li>
</ul>


<h3>Web Development</h3>

<ul>
<li><a href="http://www.webplatform.org/">web platform.org</a></li>
<li><a href="https://developer.mozilla.org/en-US/">Mozilla Developer Network</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Freebase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api/"/>
    <updated>2013-02-11T19:55:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to show you the basics of using the Freebase API.</p>

<h3>What is Freebase?</h3>

<p>Freebase is a collection of data from different sources.
So its basically like an encyclopedia in which you can pull data from.</p>

<p>Here&rsquo;s a diagram that shows exactly what type of data you can fetch from Freebase:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/Freebase-Domains.jpg" alt="freebase diagram" /></p>

<p>You can also watch this video Introducing the knowledge graph:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mmQl6VGvX-c "></iframe></div>




<!--More-->


<h3>Playing with the API</h3>

<p>Most API&rsquo;s requires an API Key so that you could access its data but Freebase is different.
You have the choice whether or not to register an API key. If you just want to try things out
you can simply access the data from Freebase like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/search?query=nirvana&indent=true</span></code></pre></td></tr></table></div></figure>


<p>There are 2 parameters used in this url:</p>

<ul>
<li>query &ndash; what you want to search.</li>
<li>indent &ndash; can either be true or false, specify the value of true if you want to return a formatted json string so that you can easily read it.</li>
</ul>


<h4>Specifying Language</h4>

<p>You can also specify the language by using the <code>lang</code> parameter.
If you specified a non-supported language the API will also tell you:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/unsupported_language.jpg" alt="unsupported language" /></p>

<h4>Filters</h4>

<p>But the true power of this API lies on the filters that you can use to specify what is exactly the type
of data that you&rsquo;re looking for. For example you want to be able to find music that has the name &ldquo;Robot&rdquo; on it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/search?query=robot&indent=true&filter=(all%20type:music)</span></code></pre></td></tr></table></div></figure>


<p>The query above would return:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/robot_music.jpg" alt="robot music" /></p>

<p>Another example would be if you&rsquo;re looking for &ldquo;One piece&rdquo; not the swimsuit but the <a href="http://en.wikipedia.org/wiki/One_Piece">manga/anime</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/search?query=one%20piece&indent=true&filter=(all%20type:animation)</span></code></pre></td></tr></table></div></figure>


<p>And as expected it returns only the data which refers to the &ldquo;One Piece&rdquo; anime/manga:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/one_piece.jpg" alt="one piece anime" /></p>

<h3>Read Services</h3>

<p>The Freebase API is actually composed of several services which you can use separately or in tandem with other services. We will go over some of these services later on and implement it using PHP.</p>

<ul>
<li>Search Service</li>
<li>MQL Read Service</li>
<li>Topic API</li>
<li>RDF API</li>
<li>Text Service</li>
<li>Image Service</li>
<li>Freebase Suggest</li>
</ul>


<h3>Getting an API Key</h3>

<p>Once you&rsquo;ve played around the Freebase API a bit you might want to register an API key.
You can register from the <a href="https://code.google.com/apis/console/">Google API Console</a>.
It&rsquo;s free to register but when your application gets more and more users and it exceeds the limit for the free service Google will have you pay for the service.</p>

<p>If you haven&rsquo;t created a project with the Google console before you might need to create a new project.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/new_project.jpg" alt="new project" /></p>

<p>Once that&rsquo;s done look for the Freebase API in the services tab and then enable it by turning it on:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/freebase.jpg" alt="freebase" /></p>

<p>Accept the service agreement and then click on the API Access tab:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_freebase/api_key.jpg" alt="api key" /></p>

<p>All you have to do now is copy the API key and use it on your requests by specifying a key parameter.
Using our previous query, your query will now look like this with the api key specified:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.googleapis.com/freebase/v1/search?query=one%20piece&indent=true&filter=(all%20type:animation)&key=xyz</span></code></pre></td></tr></table></div></figure>


<h3>Freebase with PHP</h3>

<p>Now that we&rsquo;ve played around with the Freebase API in the browser its time to access it using PHP.</p>

<p>First were going to build a simple class that will query the Freebase API for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Freebase</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new private variable that will store the API key that we got from the Google console earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">private</span> <span class="nv">$api_key</span> <span class="o">=</span> <span class="s1">&#39;xyz&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Search Service</h4>

<p>Like I mentioned earlier we will go through some of the read services that the Freebase API offers.
So were going to create a method which will utilize these services in our class.</p>

<p>The service that we have gone over earlier was the Search service which simply allows you to search based on keywords.</p>

<p>Create a new method and call it search this will utilize the search service.
Here we have 1 required parameter ($query) and 5 optional parameters.
You can see a full list of the parameters that you can specify in the wiki for the <a href="http://wiki.freebase.com/wiki/ApiSearch">Search API</a>.</p>

<p>As you can see from the code below
were just building the URL from the arguments that we will supply later on when we call the method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">search</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">$exact</span> <span class="o">=</span> <span class="s1">&#39;false&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$query</span><span class="p">)){</span>
</span><span class='line'>      <span class="nv">$query</span> <span class="o">=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$url</span>    <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/freebase/v1/search?query=&#39;</span><span class="o">.</span> <span class="nv">$query</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;filter=(&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$filter</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;start=&#39;</span> <span class="o">.</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;limit=&#39;</span> <span class="o">.</span> <span class="nv">$limit</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;exact=&#39;</span> <span class="o">.</span> <span class="nv">$exact</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;key=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">),</span> <span class="k">true</span><span class="p">)[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The important thing to note here is that the query should be <a href="http://php.net/manual/en/function.urlencode.php">url encoded</a> otherwise your query won&rsquo;t work properly if for example the query has spaces in it or some special characters.</p>

<p>You can see url encoding in action when you input your query manually in the address bar of the browser.
If you manually input our query earlier it will look like this before you type in enter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">https</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">googleapis</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">freebase</span><span class="o">/</span><span class="nx">v1</span><span class="o">/</span><span class="nx">search</span><span class="o">?</span><span class="nx">query</span><span class="o">=</span><span class="nx">one</span> <span class="nx">piece</span><span class="o">&amp;</span><span class="nx">indent</span><span class="o">=</span><span class="k">true</span><span class="o">&amp;</span><span class="nx">filter</span><span class="o">=</span><span class="p">(</span><span class="nx">all</span> <span class="nx">type</span><span class="o">:</span><span class="nx">animation</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">key</span><span class="o">=</span><span class="nx">xyz</span>
</span></code></pre></td></tr></table></div></figure>


<p>But once you press on enter all those spaces will be replaced with <code>%20</code> or <code>+</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">https</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">googleapis</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">freebase</span><span class="o">/</span><span class="nx">v1</span><span class="o">/</span><span class="nx">search</span><span class="o">?</span><span class="nx">query</span><span class="o">=</span><span class="nx">one</span><span class="o">%</span><span class="mi">20</span><span class="nx">piece</span><span class="o">&amp;</span><span class="nx">indent</span><span class="o">=</span><span class="k">true</span><span class="o">&amp;</span><span class="nx">filter</span><span class="o">=</span><span class="p">(</span><span class="nx">all</span><span class="o">%</span><span class="mi">20</span><span class="nx">type</span><span class="o">:</span><span class="nx">animation</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">key</span><span class="o">=</span><span class="nx">xyz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a <a href="http://www.w3schools.com/tags/ref_urlencode.asp">url encoding reference</a> from W3Schools.</p>

<p>The main meat of all the methods that we will be creating
for this class is the actual fetching of the data from the Freebase API.
We do the fetching by using a method called <code>file_get_contents</code> which takes a <code>url</code> as an argument and returns the contents (both html, javascript and text) of the page referenced by the url that you supplied.</p>

<p>But do note that <code>file_get_contents</code> doesn&rsquo;t work with every site or every API out there.
So in the case it doesn&rsquo;t work then you can use CURL instead.
There&rsquo;s a very gentle introduction on <a href="http://codular.com/curl-with-php">how to perform cURL request using PHP</a> at codular.</p>

<p>Also note that <code>file_get_contents</code> returns a warning if the content that you&rsquo;re requesting doesn&rsquo;t exist because of an HTTP Error or the API simply didn&rsquo;t find the data that you&rsquo;re requesting for.
In those cases you might want to include an <code>@</code> sign before the actual method name like <code>@file_get_contents</code> that way it wouldn&rsquo;t return a warning even if nothing is returned.</p>

<p>Lastly we use the <code>json_decode</code> method to convert the json string to a PHP array which we can easily manipulate or loop through.</p>

<h4>Image Service</h4>

<p>There&rsquo;s also the Image Service which simply returns an image base on the entity ID.
The entity ID can be a string or a number representing the entity.
But in my experience I notice that this service doesn&rsquo;t generalize if you query for something like &lsquo;naruto&rsquo;, &lsquo;ichigo&rsquo; or &lsquo;gundam&rsquo;. It can only return an image for a certain entity that is globally known like the following people or works:</p>

<ul>
<li>vincent_van_gogh</li>
<li>pablo_picasso</li>
<li>mona_lisa</li>
<li>the_scream</li>
<li>jose_rizal</li>
<li>andres_bonifacio</li>
<li>leonardo_da_vinci</li>
</ul>


<p>For the others which aren&rsquo;t globally known or entities which didn&rsquo;t deserve to have an actual index for the image service you can use the search service to get the entity ID and then use that entity ID to query the image service.
We&rsquo;ll go through that in a minute.</p>

<p>For now let&rsquo;s look at the method for fetching image from the image service.
We have 3 parameters, 1 required and 2 optional.</p>

<p>There&rsquo;s not really much parameters that you can specify for the image service, be sure to check out the wiki for the <a href="http://wiki.freebase.com/wiki/ApiImage">image service</a> to learn more.</p>

<p>The first parameter is the <code>entity_id</code> which for globally known entities can be just words separated by underscores like we saw earlier.
As you can see were not actually using the <code>file_get_contents</code> method here since we only need the url for the image we only return the url itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">image</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">,</span> <span class="nv">$max_width</span> <span class="o">=</span> <span class="mi">150</span><span class="p">,</span> <span class="nv">$max_height</span> <span class="o">=</span> <span class="mi">150</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">)){</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;https://usercontent.googleapis.com/freebase/v1/image&#39;</span> <span class="o">.</span> <span class="nv">$entity_id</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;?maxwidth=&#39;</span> <span class="o">.</span> <span class="nv">$max_width</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;maxheight=&#39;</span> <span class="o">.</span> <span class="nv">$max_height</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;key=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$url</span><span class="p">;</span>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Text Service</h4>

<p>The text service is different from the image service in that the
image service actually accepts the title or name of well-known entities as a value for the entity ID as well as the ID representing the entity itself.
But for the text service we can only utilize it once we&rsquo;ve
called the search service which returns the entity ID that we need.</p>

<p>The method has also a  <code>max_length</code> parameter which is simply used to specify the maximum length of the text that will be returned. <code>0</code> being no limit so it basically returns everything it can return.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">text</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">,</span> <span class="nv">$max_length</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">)){</span>
</span><span class='line'>      <span class="nv">$url</span>    <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/freebase/v1/text/&#39;</span> <span class="o">.</span> <span class="nv">$entity_id</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;?maxlength=&#39;</span> <span class="o">.</span> <span class="nv">$max_length</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;key=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">),</span> <span class="k">true</span><span class="p">)[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>       
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Topic API</h4>

<p>Lastly there&rsquo;s the topic API. There&rsquo;s actually 3 more services in the Freebase API which we haven&rsquo;t gone over but I&rsquo;ll leave those for another day. The topic API just like the text service and image service requires an entity ID for the request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">topic</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$entity_id</span><span class="p">)){</span>
</span><span class='line'>      <span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;https://www.googleapis.com/freebase/v1/topic&#39;</span> <span class="o">.</span> <span class="nv">$entity_id</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>        
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Calling the Methods</h3>

<p>Now that were done creating the class its now time to actually call the methods
to produce some output. Create a new file and then import the class that we created earlier.
Also create an object of that class so that we can use it to call the methods.</p>

<p>What the code below does is just using the search method as the base data source
and then the image and text methods to fetch the image and a description for each entity
returned from our main search.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;class.freebase.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$freebase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Freebase</span><span class="p">();</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$freebase</span><span class="o">-&gt;</span><span class="na">search</span><span class="p">(</span><span class="s1">&#39;Dragon ball z&#39;</span><span class="p">,</span> <span class="s1">&#39;all type:manga&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$result</span> <span class="k">as</span> <span class="nv">$entity</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$id</span> <span class="o">=</span> <span class="nv">$entity</span><span class="p">[</span><span class="s1">&#39;mid&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$entity</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$freebase</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$freebase</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;li&gt;</span>
</span><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$name</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;img src=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$image</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; alt=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$name</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$text</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"> </span>
</span><span class='line'><span class="x">  &lt;/p&gt;  </span>
</span><span class='line'><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="http://wiki.freebase.com/wiki/ApiSearch">Search Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiImage">Image Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiText">Text Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/Topic_API">Topic API</a></li>
<li><a href="http://wiki.freebase.com/wiki/Search_Cookbook">Search Cookbook</a></li>
<li><a href="http://www.w3schools.com/tags/ref_urlencode.asp">URL Encoding Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/getting_started_with_freebase_api.7z">Sample Application Source Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon Product Advertising API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/10/getting-started-with-amazon-product-advertising-api/"/>
    <updated>2013-02-10T19:31:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/10/getting-started-with-amazon-product-advertising-api</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to show you how you can get started using Amazon&rsquo;s product advertising API in PHP.
I&rsquo;m going to walk you through creating an access key, some of the basics of the API and lastly some examples on how to use the API.</p>

<!--More-->


<h3>What is the Product Advertising API</h3>

<p>Amazon Product Advertising API is basically an API offered by Amazon for accessing data on every product that are being displayed at any Amazon site.</p>

<h3>Create an Access Key</h3>

<p>Just like most of the API that are offered by sites like Facebook, Twitter, Tumblr we need to create an
access key to be used by our application. The access key that were going to create can be used to authenticate requests to any Amazon Web Service API and that includes the Product Advertising API.</p>

<p>In order to obtain an access key first you have to sign up for an amazon web service account at: <a href="http://aws.amazon.com/">aws.amazon.com</a>. Youre amazon web service account is different from your amazon account that you use for shopping so you have to create a new account if you don&rsquo;t already have one.
Along the sign up process you will be asked for your credit card number.
If you don&rsquo;t have a credit card fret not because you can just close the tab when you reach that point and then access the <a href="https://portal.aws.amazon.com/gp/aws/securityCredentials">security credentials page</a> where you can create a new access key. All you have to do once you reach that page is to scroll down a bit so you will see the Access Credentials section which basically shows you a table of the access keys that are associated with your account.
Just click on the &ldquo;Create new access key&rdquo; link to create a new access key. Once that&rsquo;s done you can just copy and paste the access key ID and the Secret Access key to the PHP file where you&rsquo;re going to include the class for accessing the api later on.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/access_key.jpg" alt="amazon access key" /></p>

<p>You can also sign up for an amazon affiliate account: <a href="https://affiliate-program.amazon.com/">Amazon affiliate program</a> so that you will have your own affiliate ID which you can also use in the class for accessing the API.</p>

<h3>API Basics</h3>

<p>There are only 3 things that you have to keep in mind while working with the Amazon Product Advertising API:</p>

<ul>
<li>Operations</li>
<li>Response Groups</li>
<li>Browse Nodes</li>
</ul>


<h4>Operations</h4>

<p>Operations are like methods in a class. This tells the API what specific action to do.
Some of the most commonly used operations are:</p>

<ul>
<li>ItemSearch &ndash; commonly used for returning one or more items that satisfies the parameters specified</li>
<li>ItemLookup &ndash; commonly used for returning a single item but can also return more items if the ASIN&rsquo;s (Amazon Standard Identification Number) are separated by comma.</li>
<li>SimilarityLookup &ndash; used for returning items that are similar to the ASIN that is specified in the request.</li>
</ul>


<h4>Response Groups</h4>

<p>Response groups are pre-defined result sets in the API.
They are used for specifying the data that is to be returned by the API.
Some of the most commonly used response groups are:</p>

<ul>
<li>ItemAttributes</li>
<li>EditorialReview</li>
<li>Images</li>
<li>Medium</li>
<li>NewReleases</li>
<li>Reviews</li>
<li>ItemIds</li>
</ul>


<p>You can check out the full list of available response groups here: <a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ResponseGroupsList.html">Response Groups</a></p>

<p>Looking at the documentation provided by Amazon I don&rsquo;t think there&rsquo;s a way to specify the specific fields that you want to return so the best thing to do when working with the API is to select a response group that suits your needs.
Medium and Large response groups isn&rsquo;t really the best response group to use if you only want to get the items ASIN, title and selling price. So its wiser to check out what specific data are being returned by each response group before picking something like the Medium response group which returns a whole bunch of data that you might not need in the app that you&rsquo;re trying to build.
Choosing the right response group will have a considerable effect on performance as you&rsquo;re only getting what&rsquo;s actually needed.</p>

<h4>Browse Nodes</h4>

<p>Browse Nodes in simple terms are product categories in amazon.
If you have already tried shopping for a product at amazon you might have notice that there&rsquo;s a general category that you select when searching for a product like Electronics, Aparrel, Books, etc.
These are the major browse nodes. As you go inside that category you will then see some sub-categories. For example you&rsquo;re browsing through the Books category. In the right side you will see sub-categories like arts &amp; philosophy, business &amp; investing, children&rsquo;s books, etc.
All of these are represented by node Id&rsquo;s. You can find the full list of some of the major nodes in Amazon here: <a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/BrowseNodeIDs.html">Browse Node IDs</a></p>

<p>As you might have noticed in the table in the link above, every amazon site has different sets of major nodes since not every site has the same items available.</p>

<h3>Accessing the API</h3>

<p>A very nice guy has already written the class for us so we won&rsquo;t have to write the class for accessing the API.
Here&rsquo;s the link to his blog post on how to use the API: <a href="http://www.codediesel.com/php/accessing-amazon-product-advertising-api-in-php/">Accessing Amazon Product Advertising API</a> you might want to download the source code from that site and read the blog post. He has also written another class which can be used for fetching some of the product categories available in each amazon site: <a href="http://www.codediesel.com/libraries/amazon-advertising-api-browsenodes/">Amazon Advertising API Browse Nodes</a>.</p>

<p>Ok enough with the boring explanation let&rsquo;s start playing with the API.
Go ahead and download the source available at the site I&rsquo;ve linked earlier and setup a sandbox where you could play with the API to your heart&rsquo;s content if you haven&rsquo;t done so.</p>

<p>Open up the php file which contains the class for accessing the api and do some modifications.
The class doesn&rsquo;t have every single operation and response group that&rsquo;s available in the API but its fine since we rarely need to use all of those. But we have to do some modifications so the class will become more flexible.</p>

<p>First replace the constructor to accept the access key($public) , access key secret($private), amazon local site($local_site) and the associate id($associate_tag):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$public</span><span class="p">,</span> <span class="nv">$private</span><span class="p">,</span> <span class="nv">$local_site</span><span class="p">,</span> <span class="nv">$associate_tag</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">public_key</span> <span class="o">=</span> <span class="nv">$public</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">private_key</span> <span class="o">=</span> <span class="nv">$private</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">local_site</span> <span class="o">=</span> <span class="nv">$local_site</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">associate_tag</span> <span class="o">=</span> <span class="nv">$associate_tag</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you will need to declare some member variables where the values specified in the constructor will be assigned.</p>

<p>The <code>queryAmazon</code> method can also use a little modification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">queryAmazon</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">amazon_product_api_signed_request</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">local_site</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">public_key</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">private_key</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">associate_tag</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Little because we&rsquo;ve only changed the string &ldquo;com&rdquo; to be the member variable local site.
All the rest is left unchanged.</p>

<p>There are a number of methods already present in the class but the <code>queryAmazon()</code> method is all we really need.
All we have to do is to specify the parameters needed and were good to go.</p>

<p>There&rsquo;s also the php file which makes the actual request and creates the signatures for us.
Basically amazon needs some sort of a signature for you to be able to access the API aside from the access ID and secret that you already have.
But the access ID and secret are basically the ingredients on creating the signature.
We won&rsquo;t be diving into that because honestly I don&rsquo;t understand some of the black magic coding-fu that&rsquo;s done in that file.</p>

<p>But we need to make some modifications on it as well.
Open up the <code>aws_signed_request.php</code> and scroll to its <code>aws_signed_request</code> method.
I noticed that the default host that is used in there is somewhat obsolete.</p>

<p>So instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$method</span> <span class="o">=</span> <span class="s2">&quot;GET&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$host</span> <span class="o">=</span> <span class="s2">&quot;webservices.amazon.&quot;</span><span class="o">.</span><span class="nv">$region</span><span class="p">;</span>
</span><span class='line'><span class="nv">$uri</span> <span class="o">=</span> <span class="s2">&quot;/onca/xml&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Service&quot;</span><span class="p">]</span>          <span class="o">=</span> <span class="s2">&quot;AWSECommerceService&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;AWSAccessKeyId&quot;</span><span class="p">]</span>   <span class="o">=</span> <span class="nv">$public_key</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;AssociateTag&quot;</span><span class="p">]</span>     <span class="o">=</span> <span class="nv">$associate_tag</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Timestamp&quot;</span><span class="p">]</span>        <span class="o">=</span> <span class="nb">gmdate</span><span class="p">(</span><span class="s2">&quot;Y-m-d</span><span class="se">\T</span><span class="s2">H:i:s\Z&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Version&quot;</span><span class="p">]</span>          <span class="o">=</span> <span class="s2">&quot;2009-03-31&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$region</span> <span class="o">==</span> <span class="s1">&#39;jp&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="nv">$host</span> <span class="o">=</span> <span class="s2">&quot;ecs.amazonaws.&quot;</span><span class="o">.</span><span class="nv">$region</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$host</span> <span class="o">=</span> <span class="s2">&quot;webservices.amazon.&quot;</span><span class="o">.</span><span class="nv">$region</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$method</span> <span class="o">=</span> <span class="s2">&quot;GET&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$uri</span> <span class="o">=</span> <span class="s2">&quot;/onca/xml&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Service&quot;</span><span class="p">]</span>          <span class="o">=</span> <span class="s2">&quot;AWSECommerceService&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;AWSAccessKeyId&quot;</span><span class="p">]</span>   <span class="o">=</span> <span class="nv">$public_key</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;AssociateTag&quot;</span><span class="p">]</span>     <span class="o">=</span> <span class="nv">$associate_tag</span><span class="p">;</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Timestamp&quot;</span><span class="p">]</span>        <span class="o">=</span> <span class="nb">gmdate</span><span class="p">(</span><span class="s2">&quot;Y-m-d</span><span class="se">\T</span><span class="s2">H:i:s\Z&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$params</span><span class="p">[</span><span class="s2">&quot;Version&quot;</span><span class="p">]</span>          <span class="o">=</span> <span class="s2">&quot;2011-08-01&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not really much change in here. All we did was to make the host a little bit flexible and level up the version a bit (from version 2009-03-31 to 2011-08-01). As of the writing of this article Amazon.co.jp is the only amazon site that doesn&rsquo;t work with <code>webservices.amazon.{region}</code> so we had to do that little <code>if</code> statement to check if the region that is specified is Japan.</p>

<p>Next create a new php file and include the class for accessing the api:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;amazon_api_class.php&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create an instance of the class and provide the necessary details:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$amazon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AmazonProductAPI</span><span class="p">(</span><span class="nv">$public</span><span class="p">,</span> <span class="nv">$private</span><span class="p">,</span> <span class="nv">$site</span><span class="p">,</span> <span class="nv">$affiliate_id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$site</code> is the amazon site where the items will be fetched. By default its value is &ldquo;com&rdquo;</p>

<h4>Getting a Specific Item</h4>

<p>First let&rsquo;s try getting a specific item by using an ASIN.
You can get the ASIN of an item in amazon by scrolling down to its product details:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/item_asin.jpg" alt="amazon item ASIN" /></p>

<p>Here we are specifying the ASIN of a Gundam called Heavy Arms Custom.
One thing to remember when getting data for a specific product you must use the <code>ItemLookup</code> operation.
The ItemId is a required parameter when using the <code>ItemLookup</code> operation so it must always be present.
In the response group we specified two which is the reviews response group and the medium response group. Response group can either be one or more depending on what specific data you need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$single</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Operation&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ItemLookup&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ItemId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;B0006N149M&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ResponseGroup&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Reviews,Medium&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to specify more than one response group then you can use comma to separate them. The  same is true with the other parameters that you specify. So for <code>ItemId</code> you can also specify one or more ASIN&rsquo;s also separated by commas. But for the operation you can only have one. In the screenshot below I&rsquo;ve specified two operations (ItemLookup and ItemSearch):</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/multi_operation.jpg" alt="multi operation" /></p>

<p>If you missed a parameter required by the specific operation that you have specified the API will also tell you. So for example we haven&rsquo;t specified the ItemId as a parameter:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/required_params.jpg" alt="required parameters" /></p>

<p>It&rsquo;s always nice to play around with the parameters so you&rsquo;ll know which are possible and which are not. Different parameters renders different results.</p>

<p>Now if you execute the following code in the browser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$amazon</span><span class="o">-&gt;</span><span class="na">queryAmazon</span><span class="p">(</span><span class="nv">$single</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You will get the following results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">OperationRequest</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">RequestId</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">78</span><span class="nx">a46e7d</span><span class="o">-</span><span class="mi">73</span><span class="nx">ca</span><span class="o">-</span><span class="mf">43e9</span><span class="o">-</span><span class="mi">802</span><span class="nx">b</span><span class="o">-</span><span class="mi">956</span><span class="nx">bd94878ab</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">Arguments</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">Argument</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Operation</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ItemLookup</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Service</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">AWSECommerceService</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Signature</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">oiTUfIDVjKQzYKj2CA8KXoGU</span><span class="o">/</span><span class="nx">hkgu</span><span class="o">+</span><span class="nx">WimXaPOt6Czo8</span><span class="o">=</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">AssociateTag</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Version</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">2009</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">31</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ItemId</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">B002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">AWSAccessKeyId</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Timestamp</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">2013</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">11</span><span class="nx">T10</span><span class="o">:</span><span class="mi">37</span><span class="o">:</span><span class="mi">21</span><span class="nx">Z</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ResponseGroup</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Value</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Reviews</span><span class="p">,</span><span class="nx">Medium</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="nx">RequestProcessingTime</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mf">0.0188220000000000</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nx">Items</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">Request</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsValid</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">True</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ItemLookupRequest</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">IdType</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ASIN</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ItemId</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">B002ODQJKQ</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ResponseGroup</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Reviews</span>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Medium</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="nx">VariationPage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">All</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="nx">Item</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ASIN</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">B002ODQJKQ</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">DetailPageURL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">GTMax</span><span class="o">-</span><span class="nx">Black</span><span class="o">-</span><span class="nx">Travel</span><span class="o">-</span><span class="nx">Charger</span><span class="o">-</span><span class="nx">Sandisk</span><span class="o">/</span><span class="nx">dp</span><span class="o">/</span><span class="nx">B002ODQJKQ</span><span class="o">%</span><span class="mi">3</span><span class="nx">FSubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D165953</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ItemLinks</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ItemLink</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Technical</span> <span class="nx">Details</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">GTMax</span><span class="o">-</span><span class="nx">Black</span><span class="o">-</span><span class="nx">Travel</span><span class="o">-</span><span class="nx">Charger</span><span class="o">-</span><span class="nx">Sandisk</span><span class="o">/</span><span class="nx">dp</span><span class="o">/</span><span class="nx">tech</span><span class="o">-</span><span class="nx">data</span><span class="o">/</span><span class="nx">B002ODQJKQ</span><span class="o">%</span><span class="mi">3</span><span class="nx">FSubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Add</span> <span class="nx">To</span> <span class="nx">Baby</span> <span class="nx">Registry</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gp</span><span class="o">/</span><span class="nx">registry</span><span class="o">/</span><span class="nx">baby</span><span class="o">/</span><span class="nx">add</span><span class="o">-</span><span class="nx">item</span><span class="o">.</span><span class="nx">html</span><span class="o">%</span><span class="mi">3</span><span class="nx">Fasin</span><span class="o">.</span><span class="mi">0</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">SubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Add</span> <span class="nx">To</span> <span class="nx">Wedding</span> <span class="nx">Registry</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gp</span><span class="o">/</span><span class="nx">registry</span><span class="o">/</span><span class="nx">wedding</span><span class="o">/</span><span class="nx">add</span><span class="o">-</span><span class="nx">item</span><span class="o">.</span><span class="nx">html</span><span class="o">%</span><span class="mi">3</span><span class="nx">Fasin</span><span class="o">.</span><span class="mi">0</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">SubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Add</span> <span class="nx">To</span> <span class="nx">Wishlist</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gp</span><span class="o">/</span><span class="nx">registry</span><span class="o">/</span><span class="nx">wishlist</span><span class="o">/</span><span class="nx">add</span><span class="o">-</span><span class="nx">item</span><span class="o">.</span><span class="nx">html</span><span class="o">%</span><span class="mi">3</span><span class="nx">Fasin</span><span class="o">.</span><span class="mi">0</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">SubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Tell</span> <span class="nx">A</span> <span class="nx">Friend</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gp</span><span class="o">/</span><span class="nx">pdp</span><span class="o">/</span><span class="nx">taf</span><span class="o">/</span><span class="nx">B002ODQJKQ</span><span class="o">%</span><span class="mi">3</span><span class="nx">FSubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">All</span> <span class="nx">Customer</span> <span class="nx">Reviews</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">review</span><span class="o">/</span><span class="nx">product</span><span class="o">/</span><span class="nx">B002ODQJKQ</span><span class="o">%</span><span class="mi">3</span><span class="nx">FSubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Description</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">All</span> <span class="nx">Offers</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">gp</span><span class="o">/</span><span class="nx">offer</span><span class="o">-</span><span class="nx">listing</span><span class="o">/</span><span class="nx">B002ODQJKQ</span><span class="o">%</span><span class="mi">3</span><span class="nx">FSubscriptionId</span><span class="o">%</span><span class="mi">3</span><span class="nx">DAKIAJBYTL3GMGIPXK6GQ</span><span class="o">%</span><span class="mi">26</span><span class="nx">tag</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dhttpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">%</span><span class="mi">26</span><span class="nx">linkCode</span><span class="o">%</span><span class="mi">3</span><span class="nx">Dxm2</span><span class="o">%</span><span class="mi">26</span><span class="nx">camp</span><span class="o">%</span><span class="mi">3</span><span class="nx">D2025</span><span class="o">%</span><span class="mi">26</span><span class="nx">creative</span><span class="o">%</span><span class="mi">3</span><span class="nx">D386001</span><span class="o">%</span><span class="mi">26</span><span class="nx">creativeASIN</span><span class="o">%</span><span class="mi">3</span><span class="nx">DB002ODQJKQ</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">SalesRank</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">502</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">SmallImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL75_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">MediumImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL160_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">160</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">160</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">LargeImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ImageSets</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ImageSet</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="o">@</span><span class="nx">attributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Category</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">primary</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">SwatchImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL30_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">30</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">30</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">SmallImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL75_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">ThumbnailImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL75_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">75</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">TinyImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL110_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">110</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">110</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">MediumImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">_SL160_</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">160</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">160</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">LargeImage</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                        <span class="p">(</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">URL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">ecx</span><span class="o">.</span><span class="nx">images</span><span class="o">-</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">I</span><span class="o">/</span><span class="mi">41</span><span class="nx">betMKJ4</span><span class="o">%</span><span class="mi">2</span><span class="nx">BL</span><span class="o">.</span><span class="nx">jpg</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>                                            <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>                                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ItemAttributes</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Binding</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Electronics</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Brand</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">TPA</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">EAN</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mo">00</span><span class="mi">84331456620</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">EANList</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">EANListElement</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mo">00</span><span class="mi">84331456620</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Feature</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Brand</span> <span class="k">new</span> <span class="nx">generic</span> <span class="nx">charger</span><span class="o">.</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Label</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">GTMax</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Manufacturer</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">GTMax</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">MPN</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">VF</span><span class="o">-</span><span class="mi">76</span><span class="o">-</span><span class="nx">SAN</span><span class="o">-</span><span class="nx">CLP</span><span class="o">-</span><span class="nx">WALLC</span><span class="o">-</span><span class="nx">A01</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">PackageDimensions</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Height</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">110</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Length</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">360</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Weight</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Width</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">350</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="nx">PackageQuantity</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">PartNumber</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">VF</span><span class="o">-</span><span class="mi">76</span><span class="o">-</span><span class="nx">SAN</span><span class="o">-</span><span class="nx">CLP</span><span class="o">-</span><span class="nx">WALLC</span><span class="o">-</span><span class="nx">A01</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ProductGroup</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Network</span> <span class="nx">Media</span> <span class="nx">Player</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">ProductTypeName</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ACCESSORY_OR_PART_OR_SUPPLY</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Publisher</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">GTMax</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">SKU</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">NAS</span><span class="o">-</span><span class="nx">B002ODQJKQ</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Studio</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">GTMax</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">Title</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">GTMax</span> <span class="nx">Black</span> <span class="nx">Home</span> <span class="nx">Travel</span> <span class="nx">Charger</span> <span class="k">for</span> <span class="nx">Sandisk</span> <span class="nx">Sansa</span> <span class="nx">Clip</span> <span class="nx">Plus</span> <span class="mi">4</span><span class="nx">GB</span> <span class="mi">8</span><span class="nx">GB</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">UPC</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">084331456620</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">UPCList</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">UPCListElement</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">084331456620</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">OfferSummary</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">LowestNewPrice</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Amount</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">CurrencyCode</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">USD</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">FormattedPrice</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="err">$</span><span class="mf">0.01</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="p">[</span><span class="nx">TotalNew</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">TotalUsed</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">TotalCollectible</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">TotalRefurbished</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">CustomerReviews</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">IFrameURL</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">amazon</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">reviews</span><span class="o">/</span><span class="nx">iframe</span><span class="o">?</span><span class="nx">akid</span><span class="o">=</span><span class="nx">AKIAJBYTL3GMGIPXK6GQ</span><span class="o">&amp;</span><span class="nx">alinkCode</span><span class="o">=</span><span class="nx">xm2</span><span class="o">&amp;</span><span class="nb">asin</span><span class="o">=</span><span class="nx">B002ODQJKQ</span><span class="o">&amp;</span><span class="nx">atag</span><span class="o">=</span><span class="nx">httpanchetawe</span><span class="o">-</span><span class="mi">20</span><span class="o">&amp;</span><span class="nb">exp</span><span class="o">=</span><span class="mi">2013</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">12</span><span class="nx">T10</span><span class="o">%</span><span class="mi">3</span><span class="nx">A37</span><span class="o">%</span><span class="mi">3</span><span class="nx">A25Z</span><span class="o">&amp;</span><span class="nx">v</span><span class="o">=</span><span class="mi">2</span><span class="o">&amp;</span><span class="nx">sig</span><span class="o">=</span><span class="mi">1</span><span class="nx">hL8</span><span class="o">%</span><span class="mi">2</span><span class="nx">BYC95zSlZ9ngcaerOMj3TEoZhDARGrPlLN9GnfI</span><span class="o">%</span><span class="mi">3</span><span class="nx">D</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">HasReviews</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="nx">EditorialReviews</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="nx">EditorialReview</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">SimpleXMLElement</span> <span class="nx">Object</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Source</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Product</span> <span class="nx">Description</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">Content</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'><span class="nx">Brand</span> <span class="k">new</span> <span class="nx">non</span><span class="o">-</span><span class="nx">OEM</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Input</span><span class="o">:</span> <span class="mi">100</span><span class="nx">V</span> <span class="o">-</span> <span class="mi">240</span><span class="nx">V</span> <span class="p">(</span><span class="nx">U</span><span class="o">.</span><span class="nx">S</span><span class="o">.</span> <span class="o">&amp;</span> <span class="nx">World</span> <span class="nx">Standard</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">LED</span> <span class="nx">light</span> <span class="nx">power</span> <span class="nx">indicator</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Best</span> <span class="nx">replacement</span> <span class="k">for</span> <span class="nx">original</span> <span class="nx">Sansa</span> <span class="nx">travel</span> <span class="nx">charger</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Intelligent</span> <span class="nx">IC</span> <span class="nx">chip</span> <span class="nx">inside</span> <span class="nx">recognizes</span> <span class="nx">a</span> <span class="nx">fully</span> <span class="nx">charged</span> <span class="nx">battery</span> <span class="k">and</span> <span class="nx">automatically</span> <span class="nx">switches</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">saver</span> <span class="nx">mode</span> <span class="nx">to</span> <span class="nx">prevent</span> <span class="nx">overcharging</span> <span class="k">and</span> <span class="nx">short</span> <span class="nx">circuit</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">UPC</span> <span class="nx">Code</span><span class="o">:</span><span class="mi">084331456620</span>
</span><span class='line'>
</span><span class='line'>                                    <span class="p">[</span><span class="nx">IsLinkSuppressed</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wew! That was a lot for a single product. What more if you&rsquo;re fetching more than one.
Take the time to examine which specific data are returned so that you&rsquo;ll know how to access them later on.</p>

<p>As you have seen above the api returns a simple xml object so you can access the data from it just like a normal object in PHP. But here were going to convert the object into an array.</p>

<p>To convert a Simple Xml Object to an array you first have to convert it to a JSON string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$json</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then use <code>json_decode()</code> to convert it to an array.
Be sure to specify to convert it to an associative array by setting the second argument to <code>true</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then access it like a regular array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$array</span><span class="p">[</span><span class="s1">&#39;Items&#39;</span><span class="p">][</span><span class="s1">&#39;Item&#39;</span><span class="p">][</span><span class="s1">&#39;ASIN&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to remember though. Not every product has the same sets of fields.
Just like in the real world, you can&rsquo;t expect a bag to have a model number since only electronic gadgets like cellphones have that.</p>

<h4>Getting Similar Items</h4>

<p>You can also get items which are similar to the item that you have specified in your parameters.
Here were using the <code>SimilarityLookup</code> operation to get the items which are similar to the Gundam Heavy Arms Custom. We also have a new parameter called <code>Condition</code> which is simply the status of the item whether its new, refurbished, used or collectible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$similar</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Operation&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;SimilarityLookup&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ItemId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;B0006N149M&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Condition&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;All&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ResponseGroup&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Medium&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here were simply looping through the results returned by the api and were outputting the image, price and the ASIN of the item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span>  <span class="nv">$amazon</span><span class="o">-&gt;</span><span class="na">queryAmazon</span><span class="p">(</span><span class="nv">$similar</span><span class="p">);</span>
</span><span class='line'><span class="nv">$similar_products</span> <span class="o">=</span> <span class="nv">$result</span><span class="o">-&gt;</span><span class="na">Items</span><span class="o">-&gt;</span><span class="na">Item</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$similar_products</span> <span class="k">as</span> <span class="nv">$si</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$item_url</span> <span class="o">=</span> <span class="nv">$si</span><span class="o">-&gt;</span><span class="na">DetailPageURL</span><span class="p">;</span> <span class="c1">//get its amazon url</span>
</span><span class='line'>  <span class="nv">$img</span> <span class="o">=</span> <span class="nv">$si</span><span class="o">-&gt;</span><span class="na">MediumImage</span><span class="o">-&gt;</span><span class="na">URL</span><span class="p">;</span> <span class="c1">//get the image url</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;li&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;img src=&#39;</span><span class="si">$img</span><span class="s2">&#39;/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;a href=&#39;</span><span class="si">$item_url</span><span class="s2">&#39;&gt;&quot;</span><span class="o">.</span> <span class="nv">$si</span><span class="o">-&gt;</span><span class="na">ASIN</span> <span class="o">.</span> <span class="s2">&quot;&lt;/a&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$si</span><span class="o">-&gt;</span><span class="na">ItemAttributes</span><span class="o">-&gt;</span><span class="na">ListPrice</span><span class="o">-&gt;</span><span class="na">FormattedPrice</span><span class="p">;</span> <span class="c1">//item price</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;/li&gt;&quot;</span><span class="p">;</span>     
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what it will look like:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/similar_items.jpg" alt="required parameters" /></p>

<h4>Item Lookup</h4>

<p>Finally let&rsquo;s look at the <code>ItemSearch</code> operation.
As I have mentioned earlier the <code>ItemSearch</code> operation simply returns all the items which matches the criteria that you have specified.</p>

<p>So here were trying to get some computer software which are associated with the keyword &ldquo;Disney&rdquo;.
We also have some new paramters which we haven&rsquo;t used earlier. The <code>SearchIndex</code> is the category where we want to search, in this case the category is software so its expected that we only get software for the results. The <code>Keywords</code> is like the query for our search. In other words what specific software do we want to search. In this case its &ldquo;disney&rdquo; software. Remember that games are also software so its natural that we get some computer games back.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$category</span> <span class="o">=</span> <span class="s1">&#39;Software&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;Operation&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;ItemSearch&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;SearchIndex&quot;</span>   <span class="o">=&gt;</span> <span class="nv">$category</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Keywords&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;disney&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;ResponseGroup&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Medium,Reviews&quot;</span>       
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And indeed we get some computer games based on some disney films:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_amazon_product_advertising_api/disney_games.jpg" alt="disney games" /></p>

<h2>Conclusion</h2>

<p>We&rsquo;ve barely scratched the surface with this tutorial but I hope I&rsquo;ve been able to give you some useful information on how to get started using the Amazon Product Advertising API.</p>

<h2>Resources</h2>

<ul>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_Intro_AAWS.html">Introduction to the Product Advertising API</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ApiReference.html">API Reference</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/BrowseNodeIDs.html">Browse Node IDs</a></p></li>
<li><p><a href="http://www.codediesel.com/php/accessing-amazon-product-advertising-api-in-php/">Accessing Amazon Product Advertising API</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ResponseGroupsList.html">Response Groups</a>)</p></li>
<li><p><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/getting_started_with_amazon_product_api.7z">Sample Application Source Code</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I learned on my second job]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/10/things-i-learned-on-my-second-job/"/>
    <updated>2013-02-10T15:58:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/10/things-i-learned-on-my-second-job</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to share some of the things that I learned on my second job.</p>

<!--More-->


<h3>Apache Solr</h3>

<p>Apache Solr is a search platform that&rsquo;s available for different languages like Ruby, PHP, and Java.
Solr&rsquo;s main feature is that its very fast. It returns either XML or JSON.
There&rsquo;s a library available for PHP which is the one that I used. It&rsquo;s called <a href="http://code.google.com/p/solr-php-client/">solr php client</a></p>

<p>Here&rsquo;s a sample query for accessing data that&rsquo;s available in the Solr server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost/solr/select/?q=id:%search&wt=json&rows=%max_results</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you can see its just like accessing data from an API like the one provided by Twitter or Facebook.
You can use Solr via server-side or client side.</p>

<p>If you want to access its data via the server-side you can use the <code>file_get_contents()</code> php function or <code>curl</code>.
If you want to access its data via the client-side you can use the <code>$.ajax</code> jQuery function.
But if the Solr server is located on a different server you can use the <code>jsonp</code> data type.</p>

<h3>Wordpress Plugin Development</h3>

<p>I&rsquo;ve also learned about Wordpress Plugin Development and the Wordpress platform as a whole.
<a href="http://codex.wordpress.org/">Codex</a>, the main documentation site for Wordpress has some really good guides and reference for the different functions that are available from Wordpress.</p>

<p>When developing Wordpress plugins you will almost always have to hang out in these 2 pages:</p>

<ul>
<li><a href="http://codex.wordpress.org/Plugin_API/Filter_Reference">Filter Reference</a></li>
<li><a href="http://codex.wordpress.org/Plugin_API/Action_Reference">Action Reference</a></li>
</ul>


<p>In Wordpress filters are used for processing the things that are already outputted by Wordpress like the content of a blog post or the title of your blog. Filters are used to modify, add, or hide content.
This is very useful for filtering out things like profanity in blog posts.</p>

<p>Actions in Wordpress are events that happen inside wordpress like publishing a new blog post or creating a new page or activating a plugin. You can hook into these actions to execute a specific function that will do something when these events happen.</p>

<p>There&rsquo;s also a built-in class for accessing the Wordpress database which is the <a href="http://codex.wordpress.org/Class_Reference/wpdb">WPDB</a> which you will most likely use if the plugin that you&rsquo;re trying to build needs to persist data in a database (E.g for storing settings that your plugin will use).</p>

<h3>API&rsquo;s</h3>

<p>I&rsquo;ve also learned how to use API&rsquo;s like the <a href="http://www.flickr.com/services/api/">Flickr API</a>, <a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ApiReference.html">Amazon Product Advertising API</a>, <a href="http://developer.ebay.com/common/api/">Ebay API</a>, and <a href="http://wiki.freebase.com/wiki/Freebase_API">Freebase API</a>.
Since this will be used by the Wordpress plugin that I&rsquo;m developing.</p>

<p>The Ebay API was particularly easy to use since they have a very good documentation.
And by good documentation I mean things are easy to find.
The documentation also has everything that a developer who is just getting started with using the API wants to know.</p>

<p>The documentation for Amazon Product Advertising API was the exact opposite of the Ebay API documentation.
Things were hard to find and you can&rsquo;t even find examples on how to use the API on languages like PHP.
Thankfully I found this blog post on <a href="http://www.codediesel.com/php/accessing-amazon-product-advertising-api-in-php/">how to access the product advertising API in PHP</a> which made life easier.</p>

<p>The Freebase API was also easy to use because the API itself is relatively simple.
The Freebase API was divided into different services like Search, Image, Text, Topic, etc.
Each of those returns different sets of data in JSON format.
Freebase is already owned by Google so you can basically acquire an API key or access key from the Google API console.</p>

<p>The Flickr API is also comparable to the Amazon Product Advertising API when it comes to difficulty.
Though the documentation is very good it lacks some examples on how to access the API using different languages.
But the <a href="http://phpflickr.com/">PHPFlickr</a> library made my life easier.
All I had to do was to specify the App ID and App secret for my Flickr App which can be created at the <a href="http://www.flickr.com/services/apps/create/">App Garden</a> and then I can just call the methods which I need.</p>

<p>That&rsquo;s all for this blog post. I will continue to update this blog post once I learn more things from my second job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I wish I was told when I first started Web Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development/"/>
    <updated>2013-02-09T14:48:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development</id>
    <content type="html"><![CDATA[<p>In this post I want to share some of the things I wish someone told me when I first started Web Development.
Things that could have made me a better developer.
Things that could have gotten me into the right path when I first started.</p>

<!--More-->


<h3>The learning doesn&rsquo;t stop</h3>

<p>There&rsquo;s always a new technology, tools, and methodology
that you will need to learn in order to become a better developer.
This is a truth not just for web developers but for any profession as well.
The only thing is the learning in the web development industry have to go in a faster pace if you want to stay in the game.</p>

<h3>There are many ways to accomplish one thing</h3>

<p>There are many ways to accomplish one thing but there are only
a few best practices that you need to follow.
Best practices are industry standard way of doing things.
Always Google the best practices for every programming language, technology, tool or methodology that you&rsquo;re trying to learn.
So that you will be doing things the right way right from the very start.
For PHP there&rsquo;s <a href="http://www.phptherightway.com/">PHP the right way</a>, <a href="http://phpbestpractices.org/">PHP Best Practices</a> and the <a href="http://php.net/">official PHP site</a>. And for JavaScript there&rsquo;s <a href="http://jstherightway.com/">JS the right way</a>.</p>

<h3>Not everything in the web is right</h3>

<p>When I was in College we started learning HTML and CSS using <a href="http://www.w3schools.com/">W3Schools</a> and <a href="http://www.htmlgoodies.com/">HTMLGoodies</a>. And we used the following to build an HTML page:</p>

<ul>
<li>TD colspan and TD rowspan</li>
<li>Frames</li>
<li><blink> tags</li>
</ul>


<p>Yuck right? But now there&rsquo;s <a href="https://developer.mozilla.org/en-US/">MDN</a> and <a href="http://www.webplatform.org/">Web Platform</a> that teaches us the right way of doing things.</p>

<p>Going back to the main topic. Not everything in the web is right so don&rsquo;t believe everything people say.
Most of the tutorials in the web shows you how to do things but often times its not a best practice.
So don&rsquo;t just blindly copy and paste codes that you find in the web.
Always see to it that you perform a Google search on the specific method that the author have used in the blog
post and check what other people are saying and decide for yourself which method you would follow.</p>

<h3>There are lots of learning resources that you could use</h3>

<p>There are lots of learning resources that you could use.
But always try to check the authority of where you&rsquo;re learning from.
Check what other people says about that particular resource.
Lastly see for yourself if they can give you the education that you need (teaches the standard way of doing things not the hacky way).
Here are some of the learning resources that I would personally recommend:</p>

<ul>
<li><a href="http://www.codecademy.com">Code Academy</a></li>
<li><a href="https://www.udacity.com/">Udacity</a></li>
<li><a href="http://www.codeschool.com/">Code School</a></li>
<li><a href="https://www.khanacademy.org/">Khan Academy</a></li>
</ul>


<h3>There&rsquo;s always something to improve</h3>

<p>The code that you write today won&rsquo;t be perfect. 3 or 4 days later you will see something that
needs improvement. Sometimes you will even ask yourself: why did I even write this crappy code?
Or maybe: Who wrote this? It sucks!</p>

<h3>There are lots of tools that you could use</h3>

<p>And by tools I mean the tools that you can use for developing applications.
Sublime Text is really hot these days but it doesn&rsquo;t mean that you should use it.
The tools that you will use always depends on which feels right for you.
If dreamweaver feels right for you and you think you&rsquo;re productive when using it then don&rsquo;t give it up.
Although its always recommended that you try out different tools so that you&rsquo;ll have
an idea of how it can help you achieve your daily development tasks.</p>

<h3>There will never be enough time learn everything you want to learn</h3>

<p>No matter how much time you have there will never be enough time to learn everything
you want to learn so take it easy. Learn one technology at a time.
Everything that is rushed ends up like crap. You just have to enjoy while learning.
Make sure you understand everything that you&rsquo;re learning and don&rsquo;t take shortcuts.</p>

<h3>Expose Your Skills</h3>

<p>If you plan on Freelancing then this is the way to go.
Share your thoughts in the technologies, tools, coding practices, and methodologies that you&rsquo;re using.
Answer some questions on <a href="http://stackoverflow.com/">Stackoverflow</a>, join discussions at <a href="http://news.ycombinator.com/">Hacker News</a>, create a youtube channel and upload some video tutorials that you have created.
Create side projects and upload your code to <a href="https://github.com/">Github</a>.
Create a portfolio and LinkedIn or Twitter account to show your skills to the world.
I won&rsquo;t be able to assure you that this will get you a job but its a good start to give you the exposure that you need. Just make sure that all of the content that you&rsquo;re producing is good. Don&rsquo;t publish anything that hasn&rsquo;t been proof-read. When writing a tutorial don&rsquo;t assume too much but don&rsquo;t give out too much information either.</p>

<h3>Salary doesn&rsquo;t really matter when first starting out</h3>

<p>The salary that you make doesn&rsquo;t really matter when first starting out.
There are even people who do a project for free just to have something to put
on their portfolio. What is important is that you&rsquo;re given the time to learn the technologies
required to do the job and you&rsquo;re not being pressured into producing an application in a week.
Because if that&rsquo;s the job that you&rsquo;re going to do when first starting out then you&rsquo;ll only end up
with writing crappy code. Nothing good actually comes out from being pressured and being forced to finish things fast.</p>

<h3>Love what you do</h3>

<p>Lastly, you must love what you do.</p>
]]></content>
  </entry>
  
</feed>
