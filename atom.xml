<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-09-19T03:43:36+00:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Make Money as a Home-based Developer]]></title>
    <link href="http://wern-ancheta.com/blog/2016/09/19/how-to-make-money-as-a-home-based-developer/"/>
    <updated>2016-09-19T03:34:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/09/19/how-to-make-money-as-a-home-based-developer</id>
    <content type="html"><![CDATA[<p>Being a developer is one of those jobs wherein you don&rsquo;t really need to be physically present in an office to do the job. You can work pretty much anywhere you please as long as you have a decent internet connection and you&rsquo;re productive. In this article, I&rsquo;d like to share some of the ways developer&rsquo;s can make money doing a remote work. I&rsquo;ve already experienced most of the things that I&rsquo;ll be sharing but I&rsquo;ll also share the things that I&rsquo;d like to try in the future.</p>

<h2>Look for Jobs from Remote Job Sites</h2>

<p>Lots of companies are already embracing remote work, that&rsquo;s why there are also lots of job sites which lists remote jobs. Here are some of my favorite go to places whenever I&rsquo;m looking for a new job:</p>

<ul>
<li><a href="http://manila.craigslist.com.ph/search/web">Craigslist</a></li>
<li><a href="http://jobmote.com/">Jobmote</a></li>
<li><a href="http://stackoverflow.com/jobs?allowsremote=True">Stack Overflow</a></li>
<li><a href="https://remoteok.io/remote-dev-jobs">Remote ok</a></li>
<li><a href="https://weworkremotely.com/">We Work Remotely</a></li>
<li><a href="http://jobs.remotive.io/">Remotive Jobs</a></li>
</ul>


<p>I&rsquo;ve been getting jobs from these sites for about four years now, and they have never failed me. Basically what you do is look for a job you&rsquo;re interested in. You don&rsquo;t have to know all the skills listed, you should be fine as long as you know the core skills that they require. Once you&rsquo;ve found something, just email them with your cover letter and resume and wait for a response.</p>

<h2>Get Projects from Freelancer Sites</h2>

<p>If you like the idea of bidding for projects, there&rsquo;s also <a href="https://www.upwork.com/">Upwork</a> (formerly Odesk), <a href="https://www.freelancer.com">freelancer</a> and other freelancer sites. I&rsquo;ve tried these kinds of sites once but I found they&rsquo;re overpopulated, most clients are just looking for cheap developers, and I don&rsquo;t really like the idea of bidding for projects. It&rsquo;s too time consuming and you have to work your way upwards by taking on cheap projects in order to gain reputation and get higher paying projects. This is great if you&rsquo;re just beginning, but if you have already some experience you still have to start at the bottom in order to gain reputation. So most projects will be either cheap, boring or both.</p>

<h2>Write for Content Creators</h2>

<p>Developers need to be constantly learning if they don&rsquo;t want to get left in the dust. That&rsquo;s why there are companies such as Sitepoint and Envato which provides content for developers of all shapes and sizes. And who&rsquo;s the best source of content other than developers themselves.</p>

<p>I&rsquo;ve been writing for Sitepoint for about two years now, and for Envato Tuts+ for one year. And I can say that they&rsquo;re really a good source of income for a side-gig. You can make $150 to $350 per article depending on the detail or the additional resources that you&rsquo;ve included in the article (e.g. Github repository, intro video, live demo). If you have at least four to six hours to spare in a day, you can pretty much write two to three articles per week. The only downside is you often have to wait for weeks to a few months for your article to get published before you can invoice for it. But the time investment is so low that it&rsquo;s really worth it.</p>

<p>Aside from <a href="https://sitepoint.com">Sitepoint</a> and <a href="http://code.tutsplus.com">Envato Tuts+</a>, here are a few other sites which you can write for. The idea is that the more sites you write for, the more articles gets published in a month:</p>

<ul>
<li><a href="https://www.smashingmagazine.com">Smashing Magazine</a></li>
<li><a href="https://www.compose.com">Compose</a></li>
<li><a href="https://scotch.io">Scotch</a></li>
<li><a href="https://www.codementor.io">Codementor</a></li>
</ul>


<p>Still not convinced? Go read <a href="https://code.tutsplus.com/articles/how-to-make-nettuts-your-full-time-job--net-28382">this article</a> from Jeffrey Way, it&rsquo;s an old one but the things that were mentioned still applies today (or even increased).</p>

<p>In order to write for the sites I mentioned above, all you have to do is look for their &ldquo;Write for Us&rdquo; page. There&rsquo;s usually a form in there that allows you to introduce yourself, and pitch your idea for an article. Check out some of the recently published articles in the website to get an idea of the articles they usually want to publish in the site. Include as much detail in your pitch as possible and you&rsquo;re good to go.</p>

<h2>Do Some Free Stuff</h2>

<p>Sometimes it&rsquo;s not just all about making money. You have to release some free stuff too. Try creating a blog. If you&rsquo;re a thrifty person, you can use static site generators along with Github pages to create your very own blog. You don&rsquo;t even have to bother with the command line, because you can easily get your blog up and running with <a href="https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/">Jekyll and Github pages</a>. Aside from blogging, you can also create a Youtube channel and upload video tutorials regarding the use of a specific technology or how you dealt with a specific development problem. You can also answer questions on Stack Overflow, or participate on discussions on Twitter, Reddit or Quora. Lastly, push some of your personal projects on Github. You might be asking, why do all these when you could already be making money by doing the same thing? Well, that&rsquo;s because the more you make yourself visible online, the more channels you participate in, the better chances you get for someone relevant to actually find you. In my experience, I usually get projects because of a blog post that I&rsquo;ve written years ago. Or because of a personal project that I&rsquo;ve uploaded on Github. Secondly, this shows that you&rsquo;re passionate enough as a developer to be doing things for free on your free time. All of these combined makes it really easy for potential clients to find you. It also makes you more hireable.</p>

<p>The things I&rsquo;ve mentioned so far are the one&rsquo;s that I&rsquo;ve already tried. The following are the one&rsquo;s I&rsquo;d like to try in the future. If you&rsquo;re already doing some of these, please let me know in the comments how effective they are.</p>

<h2>Create Online Courses</h2>

<p>If you&rsquo;ve already mastered the art of creating video tutorials then you&rsquo;re more than ready to create courses for the following sites:</p>

<ul>
<li><a href="https://tutsplus.com/courses">Envato Tuts+ Courses</a> &ndash; yup, it&rsquo;s not just articles they&rsquo;re interested in. Envato is a platform for learning all kinds of skills so any kind of content that allows people to learn these skills are welcome. That includes video tutorials as well.</li>
<li><a href="https://www.sitepoint.com/premium/">Sitepoint Premium</a> &ndash; Sitepoint&rsquo;s platform for video courses and books.</li>
<li><a href="https://www.pluralsight.com/">Pluralsight</a> &ndash; probably the website which has the largest collection of video courses for IT professionals.</li>
<li><a href="http://lynda.com">Lynda</a></li>
</ul>


<h2>Sell Your Code</h2>

<p>If you know how to create themes for various Content Management Systems (e.g. Wordpress, Drupal, Joomla), or you know how to develop plugins for JavaScript libraries like jQuery then you can submit them to the following websites:</p>

<ul>
<li><a href="https://codecanyon.net">CodeCanyon</a></li>
<li><a href="https://themeforest.net">ThemeForest</a></li>
</ul>


<p>These are called &ldquo;developer marketplace&rdquo;, it&rsquo;s a platform where developers sell their creations. Anything that is created with your own code can be listed on a marketplace. The one&rsquo;s I mentioned above are the two of the most popular and generic one&rsquo;s. There are also marketplaces for specific kinds of software, all you have to do is look for it.</p>

<h2>Write a Book</h2>

<p>If you like to invest your time into creating something in the long term, there&rsquo;s no better way to do that than writing a book. Here are some links you might want to check out:</p>

<ul>
<li><a href="http://www.oreilly.com/work-with-us.html">O&#8217;Reilly</a></li>
<li><a href="https://leanpub.com/">Leanpub</a></li>
<li><a href="https://www.lulu.com/">Lulu</a></li>
</ul>


<h2>Create Services and Mobile Apps</h2>

<p>The market for services and mobile apps is already saturated. There&rsquo;s already an app or website for almost anything you can think of. But if you come up with a really unique idea, or if you know of a way to make an existing service better then creating a website or mobile app that offers a specific service might work for you.</p>

<p>That&rsquo;s it! By following some of the tips above, you can make at least around 2,800 USD per month. It might seem like a small amount but if you&rsquo;re living in the Philippines or any country which has a big USD conversion rate, it&rsquo;s already a decent amount. Note that the amount I mentioned only applies for the things I&rsquo;ve already tried doing. You can make much much more than that if you create online courses or write a book for example. But I can&rsquo;t really vouch for it, because I haven&rsquo;t tried those yet.</p>

<p>Are you a remote developer? Do you know any other sources of income aside from the one&rsquo;s I mentioned. Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL Manipulation with Purl]]></title>
    <link href="http://wern-ancheta.com/blog/2016/03/03/url-manipulation-with-purl/"/>
    <updated>2016-03-03T07:15:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/03/03/url-manipulation-with-purl</id>
    <content type="html"><![CDATA[<p>In PHP projects, there&rsquo;s often a need to construct URL&rsquo;s to be used for making requests to API&rsquo;s. Normally we would concatenate the different pieces of the URL together in order to make up a complete URL where the request is made. In this tutorial, I&rsquo;ll be talking about Purl. This library reduces the need for concatenation. With this library, you can manipulate a specific URL anyway you want. You can do things like parsing the URL so you can get it&rsquo;s individual parts such as the scheme, port, path, query parameters and even fragments. These parts can then be modified any way you want.</p>

<h3>Installation</h3>

<p>You can use <a href="https://getcomposer.org/">Composer</a> to install Purl.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require jwage/purl</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To use Purl, you have to include the vendor autoload file and then use the <code>Url</code> class in the <code>Purl</code> namespace. Optionally, you can give it an alias so you only have to use it instead of the namespace + class syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Purl\Url</span> <span class="k">as</span> <span class="nx">purl</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting a URL</h4>

<p>To use Purl, create a new instance of it using the alias you&rsquo;ve assigned earlier and then pass in the URL that you want to manipulate. In order to get the modified URL back, call the <code>getUrl</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">purl</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">getUrl</span><span class="p">();</span> <span class="c1">//http://wern-ancheta.com</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above code, the URL wasn&rsquo;t really manipulated yet so it will return the same thing that you passed.</p>

<h4>Getting Parts of the URL</h4>

<p>You can use any of the following properties to extract different parts of the URL. Note that the subdomain in this specific URL will return an empty string since there&rsquo;s no subdomain. If the URL was <code>http://blog.wern-ancheta.com</code> then the value for subdomain will be <code>blog</code>. Another thing to note is the <code>canonical</code> property. This returns everything in the URL except the scheme and the fragment. Also the <code>publicSuffix</code> is the first value, followed by the <code>registerableDomain</code>. So instead of <code>wern-ancheta.com</code>, you will see <code>com.wern-ancheta</code>. Lastly, the <code>port</code> is an empty string since it wasn&rsquo;t explicitly specified in the URL. By default, website uses port 80 and it doesn&rsquo;t need to be explicitly specified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">purl</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com/some/path?query=some_query&amp;another=query#fragment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">scheme</span><span class="p">;</span> <span class="c1">// http</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">port</span><span class="p">;</span> <span class="c1">// empty string</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">publicSuffix</span><span class="p">;</span> <span class="c1">// com</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">registerableDomain</span><span class="p">;</span> <span class="c1">// wern-ancheta.com</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">subdomain</span><span class="p">;</span> <span class="c1">// empty string</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">canonical</span><span class="p">;</span> <span class="c1">// com.wern-ancheta/some/path?query=some_query&amp;another=query</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">;</span> <span class="c1">// /some/path</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">;</span> <span class="c1">// query=some_query&amp;another=query</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">fragment</span><span class="p">;</span> <span class="c1">// fragment</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting Parts of the URL</h4>

<p>If you want to set the different parts of the URL, you have to use the static method <code>parse</code> and then pass in the URL you want to manipulate. This allows you to chain the <code>set</code> methods. If you initialize a new instance of the <code>purl</code> class instead, you will get an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="nx">purl</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;scheme&#39;</span><span class="p">,</span> <span class="s1">&#39;https&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="s1">&#39;1122&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="s1">&#39;wern&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;pass&#39;</span><span class="p">,</span> <span class="s1">&#39;ancheta&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">,</span> <span class="s1">&#39;some/path&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;query&#39;</span><span class="p">,</span> <span class="s1">&#39;query1=value1&amp;query2=value2&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;fragment&#39;</span><span class="p">,</span> <span class="s1">&#39;my-fragment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">getUrl</span><span class="p">();</span> <span class="c1">// https://wern:ancheta@wern-ancheta.com:1122/some/path?query1=value1&amp;query2=value2#my-fragment</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to individually add paths to the URL, you have to initialize a new instance of the <code>purl</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">purl</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$url</span><span class="o">-&gt;</span><span class="na">path</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;my&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;awesome&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">getUrl</span><span class="p">();</span> <span class="c1">//http://wern-ancheta.com/my/awesome/page</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to individually set the query parameters, you can use teh <code>setData</code> method. This allows you to pass in an associative array with its key being the query and the value being the value for that query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">purl</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$url</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;query1&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;query2&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value2&#39;</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="na">getUrl</span><span class="p">();</span> <span class="c1">//http://wern-ancheta.com/?query1=value1&amp;query2=value2</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s the other way around, and you want to extract the query parameters from a specific URL. Here&rsquo;s the way you do it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">purl</span><span class="p">(</span><span class="s1">&#39;http://wern-ancheta.com?query1=value1&amp;query2=value2&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nv">$url</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">());</span> <span class="c1">// Array ( [query1] =&gt; value1 [query2] =&gt; value2 )</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Extracting URL&rsquo;s</h4>

<p>One bonus feature of this library is that it allows you to extract URL&rsquo;s in a specific string of text. Call the static <code>extract</code> method to use this. You can then extract each individual URL by using the key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$str</span> <span class="o">=</span> <span class="s2">&quot;Hey I&#39;m a string with url&#39;s in it http://google.com and another one http://github.com&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$urls</span> <span class="o">=</span> <span class="nx">purl</span><span class="o">::</span><span class="na">extract</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$urls</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that each extracted URL&rsquo;s are Purl URL instances of their own. So you can actually extract or manipulate individual parts as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">registerableDomain</span><span class="p">;</span> <span class="c1">//google.com</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">path</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;my&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;awesome&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$urls</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getUrl</span><span class="p">();</span> <span class="c1">//http://google.com/my/awesome/path</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this tutorial, you&rsquo;ve learned about Purl, a URL manipulation library for PHP. For more information, check out their official <a href="https://github.com/jwage/purl">Github project page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Swiftmailer]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/24/getting-started-with-swiftmailer/"/>
    <updated>2016-02-24T20:14:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/24/getting-started-with-swiftmailer</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through how to use Swift Mailer in your PHP applications. Swift Mailer, as the name suggests is a library for sending emails in PHP.</p>

<h3>Installation</h3>

<p>You can install Swiftmailer through Composer by executing the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require swiftmailer/swiftmailer</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To start sending emails you first have to create a new instance of the <code>Swift_SmtpTransport</code> class. This accepts the host as its first argument and the port as its second. You can then set your username and password by calling the <code>setUsername</code> and <code>setPassword</code> methods. So for example, you want to use your mandrill for sending emails, you can use the following. Just replace the username and password to that of your mandrill account.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$transport = Swift_SmtpTransport::newInstance('smtp.mandrillapp.com', 587)
</span><span class='line'>  -&gt;setUsername('your-mandrill-username')
</span><span class='line'>  -&gt;setPassword('your-mandrill-password');</span></code></pre></td></tr></table></div></figure>


<p>Next, create a new Swift mailer instance and passing in the transport object as the argument. You can use this later on to send messages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mailer = Swift_Mailer::newInstance($transport);</span></code></pre></td></tr></table></div></figure>


<p>You can create a new message by creating a new instance of <code>Swift_Message</code> class. From there, call the <code>setSubject</code>, <code>setBody</code>, <code>setFrom</code> and <code>setTo</code> methods to add the details of the email.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$message = Swift_Message::newInstance()
</span><span class='line'>  -&gt;setSubject('YOUR-SUBJECT')
</span><span class='line'>  -&gt;setBody('BODY-OF-YOUR-MESSAGE')
</span><span class='line'>  -&gt;setFrom(array('YOUR-EMAIL@HOST.COM' =&gt; 'YOUR-USER-NAME'))
</span><span class='line'>  -&gt;setTo(array('EMAIL-TO@HOST.COM' =&gt; 'NAME-TO@HOST.COM'));</span></code></pre></td></tr></table></div></figure>


<p>Optionally, you can set an alternative body:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$message-&gt;addPart('YOUR-ALTERNATIVE-BODY', 'text/html');</span></code></pre></td></tr></table></div></figure>


<p>You can also attach a file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$message-&gt;attach(Swift_Attachment::fromPath('/path/to/file.pdf'));</span></code></pre></td></tr></table></div></figure>


<p>If you want to send to multiple clients, then you can pass in additional items to the <code>setTo</code> method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$message-&gt;setTo(array('EMAIL-TO@HOST.COM' =&gt; 'NAME-TO@HOST.COM', 'ANOTHER-EMAIL@HOST.COM' =&gt; 'ANOTHER-NAME@HOST.COM'));</span></code></pre></td></tr></table></div></figure>


<p>Finally, you can send the message by calling the <code>send</code> method in the mailer instance that you have created earlier. Pass in the message as its argument.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try {
</span><span class='line'>    $response = $mailer-&gt;send($message);
</span><span class='line'>}catch (Exception $e){
</span><span class='line'>    echo 'error occured while trying to send your message';
</span><span class='line'>    echo $e-&gt;getMessage();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>The <code>send</code> method will return <code>1</code> as its response if the message was sent successfully. If not then it will return an error, that&rsquo;s why you need to wrap it in a <code>try catch</code> block.</p>

<p>If you&rsquo;re using Laravel, SwiftMailer is already added as a dependency by default. All you have to do is update the mail configuration file. If you&rsquo;re using another framework, you can just follow the examples here.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to use SwiftMailer on your php applications. If you want to learn more, be sure to check out the <a href="http://swiftmailer.org/docs/introduction.html">official docs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Intervention Image Library in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/18/using-the-intervention-image-library-in-php/"/>
    <updated>2016-02-18T14:04:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/18/using-the-intervention-image-library-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how to manipulate images in PHP using the <a href="http://image.intervention.io/">Intervention Image library</a>. In the PHP applications that I write, I primarily use intervention image for resizing images into smaller one&rsquo;s. But aside from that, there are other things that this library can do.</p>

<h3>Installation and Setup</h3>

<p>To use intervention image, you need to have ImageMagick installed. In Ubuntu, you can do that by executing the following command from your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install imagemagick</span></code></pre></td></tr></table></div></figure>


<p>On your working directory, execute the following to install Intervention Image.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require intervention/image</span></code></pre></td></tr></table></div></figure>


<p>This command uses Composer. If you don&rsquo;t have it already, check out the <a href="https://getcomposer.org/download/">downloads page</a> and install it on your system.</p>

<p>Create a new PHP file and name it <code>tester.php</code>. This will be the file that you&rsquo;re going to use for the rest of this tutorial.</p>

<p>To use the library, require the autoload file in the vendor directory. This allows you to include the Intervention Image library into your current file. You can then give an alias to the <code>ImageManagerStatic</code> class and use it for manipulating images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Intervention\Image\ImageManagerStatic</span> <span class="k">as</span> <span class="nx">Image</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create Image Instance</h3>

<p>The first thing that you need to do when working with this library is to create an instance of the image from source. This is like saving a copy of the image into memory so that it can be easily manipulated. Any changes made to the image are only in memory until you choose to commit it to the filesystem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span> <span class="o">=</span> <span class="nx">Image</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;images/a.jpg&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Resizing Images</h3>

<p>You can resize images by calling the <code>resize</code> method in the image instance that you&rsquo;ve created. In the example below, the image is resized to exactly 50x50 pixels. It doesn&rsquo;t matter if the image is distorted in the process. So if you have an image which is 300x600 (where 300 is the width and 600 is the height), the height will have to get squashed. This results in a sandwich-like image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">resize</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t want that to happen, you need to utilize aspect ratio. This allows you to supply only either the width or the height. In the example below, the width is optional and the height is 50. This resizes the image to have a height of 50 and the width can have any value as long as the aspect ratio is the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">resize</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$constraint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$constraint</span><span class="o">-&gt;</span><span class="na">aspectRatio</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adjusting Brightness, Contrast and Opacity</h3>

<p>To adjust the brightness of an image, you can use values between 100 and -100. 100 being the brightess and -100 being the darkest. So you&rsquo;ll only really see a white image if you supply 100 as the value and a black image if the value is -100. Positive values are used to bring the brightness up and negative to bring it down. In the example below, the brightness is adjusted to 25% of the default brightness of the image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">brightness</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To adjust the contrast, yup you guessed it right!, use the the <code>contrast</code> method. Just like the <code>brightness</code> method this accepts values between 100 and -100.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">contrast</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To adjust the opacity, supply a value between 0 and 100 to the <code>opacity</code> method. With <code>100</code> being the full opacity and <code>0</code> being the full transparency. Note that adjusting the opacity of an image takes a bit of time. On my testing, it took a bit longer for it to finish than the other operations I&rsquo;ve used so far.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">opacity</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cropping</h3>

<p>Cropping images can be done by calling the <code>crop</code> method. This accepts 2 required arguments and 2 optional. The first and second arguments are the width and height of the area to be cropped. And the optional third and fourth arguments are the X and Y axis of the starting points of the crop area. If you do not supply those values, Intervention Image is going to assume that you want to crop at the very center of the image moving outward. That&rsquo;s what the example below does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">crop</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re planning to implement a cropping functionality in your PHP application, Intervention Image can&rsquo;t do it alone. It has to have a client-side component that allows the user to visually crop the image. For that there&rsquo;s a jQuery plugin called <a href="http://fengyuanchen.github.io/cropper/">cropper</a>. I haven&rsquo;t personally used it but the demo shows that the X and Y coordinates and the width and height can be determined using this library. So all you have to do is pass in those values to the server side and let Intervention Image do its thing.</p>

<h3>Saving Images</h3>

<p>Finally, you can commit the changes that you&rsquo;ve made to the filesystem by using the <code>save</code> method. You don&rsquo;t need to supply any arguments to it if you want to replace the original image. If you do not want that, then you can supply the path to the file where you want to save it. If you have a keen eye, you might have noticed that the original image was a <code>.jpg</code> image, and now its being saved as a <code>.png</code> image. Well that&rsquo;s acceptable, Intervention Image automatically converts the image type for you. Lastly, the quality of the image can also be modified by passing in a second argument which has a value between 0 and 100. 100 being the same quality of the original image. In the example below, the quality is adjusted to 50% of the original one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">();</span> <span class="c1">//replace the original image</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="s1">&#39;images/b.png&#39;</span><span class="p">);</span> <span class="c1">//save to another file</span>
</span><span class='line'><span class="nv">$img</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="s1">&#39;images/b.png&#39;</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">//adjust quality of image</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to manipulate images in your PHP applications using the Intervention Image. As always, you have barely scratched the surface with this tutorial. There&rsquo;s much more things that you can do with this library. I recommend you to check out the <a href="http://image.intervention.io/">official website</a> to learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validating Data with Respect Validation]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/13/validating-data-with-respect-validation/"/>
    <updated>2016-02-13T07:44:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/13/validating-data-with-respect-validation</id>
    <content type="html"><![CDATA[<p>Data validation is an absolute need for every PHP application. This protects your app from security breaches caused by malicious user input. Good thing there&rsquo;s not a shortage of data validation libraries available for PHP. And most frameworks (if not all) have it as part of their core functionalities. In this tutorial, I&rsquo;ll be walking you through using the Respect Validation library for PHP. It&rsquo;s one of the most complete validation libraries that I&rsquo;ve seen. It can validate a whole range of data types such as numbers, strings, arrays, objects, date, banking data, phone numbers, emails and others.</p>

<h3>Installation</h3>

<p>You can install the library through Composer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require respect/validation</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, include the vendor autoload file and give an alias to the Validation class. This allows you to use the alias instead of the actual class name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Respect\Validation\Validator</span> <span class="k">as</span> <span class="nx">v</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Validating Data</h3>

<p>Now let&rsquo;s take a look at some of the most common validators that you might want to use. All of the validators returns a boolean value, so if the data is valid it returns <code>true</code>, and if it&rsquo;s not then it returns <code>false</code>. To validate a data, you first call the validator. Some validators allows you to specify the format in which the data should be and some does not. In cases that it allows you, simply pass in the format as the argument for that validator. Next, call the <code>validate</code> method and pass in the data that you want to validate.</p>

<h4>Dates</h4>

<p>To validate dates, you use the <code>date</code> validator. This accepts the date format as its argument. If you do not specify one, the default date format of <code>Y-m-d</code> is used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_datevalid</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-02-30&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_datevalid</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;m-d-Y&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-02-30&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you haven&rsquo;t noticed yet, one thing to note about date validation, is that it returns <code>true</code> even for a day that shouldn&rsquo;t exist in a specific month. In the example above, the month february shouldn&rsquo;t have a 30th day. If you use 32 or 33 for the day, it works fine since most of months have only 31 days.</p>

<h4>Country Code</h4>

<p>Validating country codes can be done by using the <code>countryCode</code> validator. On my testing, its only able to validate 2-character ISO country codes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_validcountrycode</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">countryCode</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;PH&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_validcountrycode</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">countryCode</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;PHL&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Between</h4>

<p>The <code>between</code> validator allows you to validate if a specific value is between 2 values. It can validate strings, numbers and dates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">string</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">string</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="mi">31</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="s1">&#39;2015-03-25&#39;</span><span class="p">,</span> <span class="s1">&#39;2015-04-30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-03-28&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_between</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">between</span><span class="p">(</span><span class="s1">&#39;2015-07-12&#39;</span><span class="p">,</span> <span class="s1">&#39;2015-10-30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-03-01&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Length</h4>

<p>To validate if a string or array matches a specific length between a minimum and a maximum value, you can use the <code>length</code> validator. You can specify either of the minimum and maximum values if you don&rsquo;t want to be specific.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_length</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">string</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;my-username&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_length</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">string</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;my&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_length</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">arr</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;def&#39;</span><span class="p">,</span> <span class="s1">&#39;ghi&#39;</span><span class="p">));</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_length</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">arr</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;def&#39;</span><span class="p">,</span> <span class="s1">&#39;ghi&#39;</span><span class="p">));</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Min and Max</h4>

<p>The <code>min</code> and <code>max</code> validators allows you to check if an integer or date value is within the minimum or maximum value that you specify.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_min</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">min</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">//false </span>
</span><span class='line'><span class="nv">$is_min</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">min</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//true </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_max</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">max</span><span class="p">(</span><span class="s1">&#39;2015-07-27&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-03-12&#39;</span><span class="p">);</span> <span class="c1">//true </span>
</span><span class='line'><span class="nv">$is_max</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">date</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">max</span><span class="p">(</span><span class="s1">&#39;2015-06-13&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;2015-08-29&#39;</span><span class="p">);</span> <span class="c1">//false </span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Numbers</h4>

<p>You can validate number values using the <code>numeric</code>, <code>digit</code>, and <code>int</code> validators. <code>numeric</code> is the generic number validator, it can accept integer, double or float values and even negative numbers. <code>digit</code> accepts whitespaces between integer values but it doesn&rsquo;t accept float or double values. <code>int</code> accepts only integer values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_numeric</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">numeric</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;55&#39;</span><span class="p">);</span> <span class="c1">//true </span>
</span><span class='line'><span class="nv">$is_numeric</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">numeric</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;99.9&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_numeric</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">digit</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;45 3 330&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_numeric</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">digit</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;7.9&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_int</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;8.2&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_int</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">int</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;709&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Domain</h4>

<p>Domain names can be validated using the <code>domain</code> validator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_domain</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">domain</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;github.com&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_domain</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">domain</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;google.com.ph&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Bank</h4>

<p>Bank information can also be validated. Currently, you can only validate bank accounts and bank identifier codes for Germany. And you have to install the bav Composer package to do that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require malkusch/bav</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are a few examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_bankaccount</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">bankAccount</span><span class="p">(</span><span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;70169464&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s2">&quot;1112&quot;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_bankaccount</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">bankAccount</span><span class="p">(</span><span class="s2">&quot;de&quot;</span><span class="p">,</span> <span class="s2">&quot;70169464&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s2">&quot;1234&quot;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$is_bankaccount</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">bic</span><span class="p">(</span><span class="s2">&quot;de&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s2">&quot;VZVDDED1XXX&quot;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_bankaccount</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">bic</span><span class="p">(</span><span class="s2">&quot;de&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s2">&quot;VZVDDED1&quot;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Alpha</h4>

<p>If you want to restrict a string to only have letters, you can use the <code>apha</code> validator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_alpha</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alpha</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;abc 123&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_alpha</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alpha</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;abc def&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Alnum</h4>

<p>You can validate alphanumeric characters (numbers and letters) using the <code>alnum</code> validator. You can group it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alnum</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;batman 123&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alnum</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">lowercase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;batman 123&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alnum</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">uppercase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;batman 123&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alnum</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;batman 123&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Email</h4>

<p>Email addresses are validated using the <code>email</code> validator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_email</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">email</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;not&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_email</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">email</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;email@gmail.com&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Phone</h4>

<p>Phone numbers that have 7, 10 or 11 digits in them can be validated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_phone</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">phone</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;(072) 242 8084&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_phone</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">phone</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;+639111111111&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Required</h4>

<p>To set a specific data as required, you use the <code>notEmpty</code> validator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_required</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">isNotEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'><span class="nv">$is_required</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">isNotEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;im not empty&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Chaining</h4>

<p>As you have seen earlier, you can combine different validators together. Here are a few examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">alnum</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;superman 456&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nv">$is_alnum</span> <span class="o">=</span> <span class="nx">v</span><span class="o">::</span><span class="na">email</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">lowercase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;superman456@gmail.com&#39;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Validating an Array of Data</h4>

<p>To validate an array of data or a form, you need to setup the rules for each field and add them in an array. You then loop through each item in the array and validate them one by one. In the example below, the <code>check</code> method is used instead of the <code>validate</code> method. This is because the <code>validate</code> method only returns a boolean value and not the actual error message. While the <code>check</code> method returns an exception which you can then get by calling the <code>getMainMessage</code> method in the exception that was returned. Lastly, use <code>break</code> to break the execution of the <code>foreach</code> loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$rules</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="o">::</span><span class="na">string</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">lowercase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="o">::</span><span class="na">email</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;phone_number&#39;</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="o">::</span><span class="na">phone</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notEmpty</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;phone number&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wernancheta&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;myemail@gmail.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;phone_number&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;111&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">{</span>
</span><span class='line'>        <span class="nv">$rules</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">check</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\InvalidArgumentException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMainMessage</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to use the Respect Validation library for PHP. Be sure to check out the <a href="http://respect.li/Validation">official docs</a> if you want to learn more. If you&rsquo;re using Laravel, you might want to check out this article on Sitepoint: <a href="http://www.sitepoint.com/validating-your-data-with-respect-validation/">Validating your data with Respect Validation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Love Web Development]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/03/why-i-love-web-development/"/>
    <updated>2016-02-03T08:56:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/03/why-i-love-web-development</id>
    <content type="html"><![CDATA[<p>It&rsquo;s not very often that I reflect on why I love things. Why I Love Web Development is not a question
I often ask myself. In this essay I&rsquo;ll attempt to explore the why.
I first started learning about Web Development when I was in College.
Back then it was just another subject that I had to learn in order to finish my course.
I never really thought that it would be the thing that puts money in my pocket 5 years later.
I became a Web Developer. It&rsquo;s very easy to get into Web Development. All you need is a computer, a text-editor and a browser.
Just create an HTML file, put some styling into it, and then sprinkle some JavaScript to make things more interactive and you have a full-fledge web page. Of course you&rsquo;ll need to install other things such as Apache, MySQL and PHP if you&rsquo;re working on the back-end.
But initially, Web Development is very accessible for beginners.
With websites such as <a href="https://www.codeschool.com/">Code School</a>, <a href="http://www.pluralsight.com/">Pluralsight</a> and <a href="https://www.codecademy.com/">Codeacademy</a> it became even easier to get into <a href="https://www.codecademy.com/.  ">https://www.codecademy.com/.  </a>
Perhaps that&rsquo;s the first thing that made me fall in love with Web Development. It&rsquo;s easy to get into it. There&rsquo;s also a plethora of information about it. Q&amp;A websites such as <a href="http://stackoverflow.com/">Stackoverflow</a> makes it really easy to solve problems in case you get stuck with something. All you really need to know is to know what to Google.</p>

<p>Web Development isn&rsquo;t without its difficulties. If you&rsquo;re a Web Developer you have to learn so many things.
You have to consider a lot of things when it comes to your users. You need to be empathetic to their needs.
That&rsquo;s probably the reason why there are Web Designers, Front-end Developers, Back-end Developers, Devops and UX Designers. One person can&rsquo;t really do it all. I&rsquo;m not really one to talk because I&rsquo;ve only been practicing Web Development as a Full-stack Developer. Which means that I take care of everything. Or not. I have to admit that I lack the qualities of a Web Designer. And when it comes to UX, I have a lot to learn. I primarily consider myself a Back-end Developer because that&rsquo;s where my core skills are.
But this doesn&rsquo;t mean that I have to ignore learning things about design and how to make things more accessible.
This doesn&rsquo;t mean that I don&rsquo;t need to make an effort no matter how little. Such as putting the <code>alt</code> attribute on images or sprinkling some <code>aria-role</code> attributes in my HTML code. Aside from that, you also need to think about performance. Not all users have a blazing fast internet connection with 10 GB/s download speed. But it doesn&rsquo;t end there. As a developer you also need to think of the maintainability of your code. You need to think of the next person who&rsquo;s going to end up maintaining your code. As a developer you have to make an effort on carefully naming things and structuring your code in such a way that things can easily be found. Your code should also be DRY. Which means that there should only be a single source of truth in your code. And avoid repeating things as much as possible. You need to think about the future. The dependencies you pull into your code. It&rsquo;s always wise to pull in a third-party library to easily accomplish things that would be hard for you to implement on your own. But you also need to make sure that your code doesn&rsquo;t break if this library gets updated.</p>

<p>The idea of creating something that didn&rsquo;t previously exist. The joy of building something and seeing it come to life is what makes Web Development really awesome. You get to play around with shiny, new and cool stuff all the time. You get to learn something new every day. You get to work on side-projects and push it to Github and have other people use your work. That to me is fantastic.</p>

<p>The ability to see the world in a Programmer&rsquo;s eyes. You begin to wonder how things are built. What technologies are behind it? How are things implemented?</p>

<p>The dread that you feel whenever a new JavaScript library comes out. And the fear that the shiny new thing that you&rsquo;ve learned is replaced by that JavaScript library that came out.</p>

<p>The never-ending queue of articles that you think you have to read in order to keep yourself up to date.</p>

<p>The idea that you can reach a lot of people by just creating a single website.
The idea that you can provide valuable information and make their life easier by using the thing that you created. The ability to empower people from a thousand miles a way and they don&rsquo;t even know you. That to me is priceless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Fake Data in PHP with Faker]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker/"/>
    <updated>2016-01-28T07:13:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker</id>
    <content type="html"><![CDATA[<p>In the good old days, I often test PHP applications by accessing it directly from the browser and input the data in the forms. Today, with the explosion of <a href="https://github.com/ziadoz/awesome-php">awesome PHP libraries</a> you can now generate most kinds of data by using code alone. The data can then be directly inserted into the database. This reduces the need to input data directly into the app. In this tutorial, I&rsquo;ll be walking you through <a href="https://github.com/fzaninotto/Faker">Faker</a>, a PHP library that generates fake data for you.</p>

<h3>Installation</h3>

<p>You can install Faker by executing the following command. Note that this requires you to have <a href="https://getcomposer.org/">Composer</a> installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require fzaninotto/faker</span></code></pre></td></tr></table></div></figure>


<h3>Concepts</h3>

<p>Here are a few concepts that you need to remember before moving on.</p>

<ul>
<li><strong>generators</strong> &ndash; responsible for generating data.</li>
<li><strong>providers</strong> &ndash; the data source for generators. Generators can&rsquo;t really stand by themselves. Providers really shine on the localization feature of Faker. Real places, phone numbers in countries can be generated by Faker through the use of providers.</li>
<li><strong>formatters</strong> &ndash; these are the properties that you can access from a specific generator. Examples include name, city, address, and phoneNumber.</li>
</ul>


<h3>Usage</h3>

<p>To use Faker from your file, you need to include the vendor autoload file and create a new Faker instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Localization</h4>

<p>Since Faker is an open-source project that anyone can contribute to, lots of localized providers has already been added. You can take advantage of this by passing in the locale when you create a new Faker instance. For example, if you live in the Philippines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;en_PH&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then generate an address in the Philippines by using the <code>address</code> formatter. Note that it&rsquo;s only down to the city level. This means that the street and barangay are using the default providers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">address</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that each provider doesn&rsquo;t have generators for every possible formatter. For example, the <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider/en_PH">Philippine provider</a> has only generators for the Address and PhoneNumber. This means that you can only have localized values for those. All the other formatters will utilize the default ones provided by Faker.
For a list of providers, check out <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider">this page</a> in their Github repo.</p>

<h4>Formatters</h4>

<p>Here are the formatters that I commonly use in my projects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//person</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">firstName</span><span class="p">(</span><span class="s1">&#39;male&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">lastName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//address</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">address</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">streetName</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">streetAddress</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">postCode</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">address</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">country</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//company</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">company</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//date and time</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">year</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">month</span><span class="p">;</span> <span class="c1">//number representation of a month</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">monthName</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">timezone</span><span class="p">;</span> <span class="c1">//valid php timezone (http://php.net/manual/en/timezones.php)</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">time</span><span class="p">;</span> <span class="c1">//string time</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">dateTime</span><span class="p">;</span> <span class="c1">//datetime object</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">unixTime</span><span class="p">;</span> <span class="c1">//unix timestamp</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//internet</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">userName</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">password</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//payment</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">creditCardType</span><span class="p">;</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">creditCardNumber</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//images</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">imageUrl</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span> <span class="c1">//where width=50 and height=60</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating New Providers</h4>

<p>If you want to create a provider for your own project, you can easily extend Faker. For example, if you want to generate random pokemon names. The first thing that you need to do is to declare the namespace in which the class belongs. Next, declare a new class and have it extend the faker provider base class. Inside the class, create an array of Pokemon names. Create a new function and call it <code>pokemon</code>, this is the function that will be called later on to generate a random pokemon name. To pick a random item from the array you created, use the <code>randomElement</code> function and then pass in the array which you want to use as the data source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Faker\Provider</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pokemon</span> <span class="k">extends</span> <span class="nx">\Faker\Provider\Base</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">static</span> <span class="nv">$pokemon</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;Pikachu&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Bulbasaur&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Cubone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Charizard&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Marowak&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Gastly&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Alakazam&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Arcanine&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Vaporeon&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Flareon&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Venusaur&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Wartortle&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">pokemon</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">randomElement</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="nv">$pokemon</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the file and name it <code>Pokemon.php</code>. You can save it any where in your project as long as you can easily reference it from your main file.</p>

<p>On your main file, include the vendor autoload together with the file that you&rsquo;ve just created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;Pokemon.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new faker generator. This is a bare bones generator with no providers assigned to it. So if you use <code>$faker-&gt;name</code>, all you get is an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$faker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Faker\Generator</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use the default providers, you can include them by calling the <code>addProvider</code> method and passing in a new instance of the provider that you want to include.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\en_US\Person</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\en_US\Address</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\en_US\PhoneNumber</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\en_US\Company</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\Lorem</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\Internet</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To add the new Pokemon provider.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">addProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Faker\Provider\Pokemon</span><span class="p">(</span><span class="nv">$faker</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now call the new <code>pokemon</code> formatter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">pokemon</span><span class="p">;</span> <span class="c1">//marowak</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Integration with Your PHP Application</h4>

<p>Most PHP frameworks today already comes with a database seeding feature. If you&rsquo;re using Laravel, it has a database <a href="http://laravel.com/docs/5.0/migrations">migration and seeding functionality</a>. You can simply install Faker into your project, generate a new seeder and then use Faker inside the seeder. This allows you to seed your database with Fake data in a single command by using <a href="http://laravel.com/docs/5.0/artisan">Artisan CLI</a>. If your framework doesn&rsquo;t include a seeding feature, you can use Phinx, a database-migration tool for PHP. This tool also allows you to <a href="http://docs.phinx.org/en/latest/seeding.html">create seeders for your database</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Faker library to generate fake and random data for testing your PHP applications. Check out the <a href="https://github.com/fzaninotto/Faker">official github page</a> for more information regarding its usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making HTTP Requests with Guzzle]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/20/making-http-requests-with-guzzle/"/>
    <updated>2016-01-20T07:18:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/20/making-http-requests-with-guzzle</id>
    <content type="html"><![CDATA[<p>Most PHP applications today includes the ability to integrate with different web services such as Facebook, Twitter, Google, and other API&rsquo;s. Thus the need for a library to ease the process of making HTTP requests to other servers. Most API&rsquo;s already comes with their own clients for selected programming languages. These clients makes the interaction with their API&rsquo;s easier. But oher services doesn&rsquo;t offere any clients at all. This is where Guzzle comes in, a PHP library that allows you to easily make HTTP requests. In this tutorial, I&rsquo;ll be walking you through this library.</p>

<h3>Installation</h3>

<p>You can install Guzzle through <a href="https://getcomposer.org/">Composer</a> by executing the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require guzzlehttp/guzzle:~6.0</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>You can start using Guzzle by including the vendor autoload file then use the <code>Client</code> class in the <code>GuzzleHttp</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">GuzzleHttp\Client</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From there, you can create a new client. This accepts an array of arguments. The most important one is the <code>base_uri</code>, which is the base URL that will be used for each of the requests that you will make with this client. In the example below, the base URI is that of the <a href="http://pokeapi.co/">Pokemon API</a>, an API which allows you to get any data about Pokemon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://pokeapi.co/api/v1/&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To make an actual request to an endpoint, you can use the <code>get</code> method to make a <code>GET</code> HTTP request. To extract the response body, you have to call the <code>getBody</code> method in the response that was returned. Most API&rsquo;s today returns a JSON string as their response. The Pokemon API is no exception. So you need to use the <code>json_decode</code> method and pass in the data. You can pass in <code>true</code> as the second argument to convert it to an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;pokedex/1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">();</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the output that you get when accessing the file from the browser. From this data, we know that the <code>pokedex/1</code> endpoint returns all the pokemon that are currently existing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [created] =&gt; 2013-11-09T15:14:48.957604</span>
</span><span class='line'><span class="x">    [modified] =&gt; 2013-11-09T15:14:48.957565</span>
</span><span class='line'><span class="x">    [name] =&gt; national</span>
</span><span class='line'><span class="x">    [pokemon] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [0] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; rattata</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/19/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [1] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; charmander</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/4/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [2] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; charmeleon</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/5/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [3] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; wartortle</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/8/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [4] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; blastoise</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/9/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [5] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; caterpie</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/10/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [6] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; metapod</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/11/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [7] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; butterfree</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/12/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [8] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; spearow</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/21/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [9] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; kakuna</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/14/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [10] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [name] =&gt; beedrill</span>
</span><span class='line'><span class="x">                    [resource_uri] =&gt; api/v1/pokemon/15/</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that it&rsquo;s not only <code>get</code> method that you can do with Guzzle. Each HTTP methods have their equivalent method in Guzzle. So <code>post</code>, <code>put</code> and <code>delete</code> are all valid method names.</p>

<p>Before moving on, here&rsquo;s another example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;pokemon/150&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">();</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$moves</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;moves&#39;</span><span class="p">],</span> <span class="k">function</span><span class="p">(</span><span class="nv">$move</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$move</span><span class="p">[</span><span class="s1">&#39;learn_type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;level up&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$description_response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;/api/v1/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;descriptions&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;resource_uri&#39;</span><span class="p">]));</span>
</span><span class='line'><span class="nv">$description_data</span> <span class="o">=</span> <span class="nv">$description_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">();</span>
</span><span class='line'><span class="nv">$description_data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$description_data</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;div&gt;</span>
</span><span class='line'><span class="x">    &lt;img src=&quot;</span><span class="cp">&lt;?</span><span class="o">=</span> <span class="s1">&#39;http://pokeapi.co/media/img/&#39;</span> <span class="o">.</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;pkdx_id&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;.png&#39;</span> <span class="cp">?&gt;</span><span class="x">&quot; alt=&quot;</span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;h4&gt;</span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="cp">?&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">    &lt;p&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nv">$description_data</span><span class="p">[</span><span class="s1">&#39;description&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;div&gt;</span>
</span><span class='line'><span class="x">        &lt;strong&gt;Moves&lt;/strong&gt;</span>
</span><span class='line'><span class="x">        &lt;ul&gt;            </span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;?php</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nv">$moves</span> <span class="k">as</span> <span class="nv">$move</span><span class="p">){</span>
</span><span class='line'>        <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;li&gt;</span>
</span><span class='line'><span class="x">            </span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nv">$move</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/li&gt;</span>
</span><span class='line'><span class="x">        </span><span class="cp">&lt;?php</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;/ul&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, 2 <code>GET</code> request were used to get all the data that is needed for the final output. First, the <code>pokemon</code> endpoint is used to get the details of a specific pokemon. Second is the request for getting the description of the pokemon. In order to extract the moves, the <code>array_filter</code> function is used. The condition is to select only moves that have been learned through level up. In order to get the endpoint for getting the description, the <code>str_replace</code> function is used to replace a part of the base uri in the resource uri that was returned. Since the resource uri already has the <code>/api/v1/</code> in the beginning. Guzzle would end up making a request to the following URL if that string isn&rsquo;t replace with an empty one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://pokeapi.co/api/v1//api/v1/description/150</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output is going to look like this.</p>

<p><img src="http://wern-ancheta.com/images/posts/guzzle/mewtwo.png" alt="mewtwo" /></p>

<p>Finally let&rsquo;s take a look at how to do a <code>POST</code> request with Guzzle. For that let&rsquo;s try to submit a post to Facebook using Facebook API. To do that, declare a new client using the <code>https://graph.facebook.com/</code> as the <code>base_uri</code>. Posting to facebook requires the <code>access_token</code>, <code>message</code> and an optional <code>link</code>. Call the <code>post</code> method and pass in <code>me/feed</code> as the first argument. This is the endpoint for posting to facebook. The second argumment is an array containing the data that you want to submit. In Guzzle, the data should be contained within the <code>query</code> item. You can then call <code>getBody</code> on the response to get the response body. This should return the ID of the post that was created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://graph.facebook.com/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$post_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;access_token&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR-FACEBOOK-ACCESS-TOKEN&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;testing&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;link&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://wern-ancheta.com/&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$res</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;me/feed&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;query&#39;</span> <span class="o">=&gt;</span> <span class="nv">$post_data</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response_body</span> <span class="o">=</span> <span class="nv">$res</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">();</span>
</span><span class='line'><span class="nv">$response_body</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response_body</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In This tutorial, you&rsquo;ve learned how to make HTTP requests with the Guzzle library. There&rsquo;s so much more you can do with Guzzle, so be sure to check out their <a href="http://guzzle.readthedocs.org/en/latest/">official docs</a> if you want to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stalking the Programmer Way with Clearbit's Person API]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/15/stalking-the-programmer-way-with-clearbits-person-api/"/>
    <updated>2016-01-15T13:41:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/15/stalking-the-programmer-way-with-clearbits-person-api</id>
    <content type="html"><![CDATA[<p>In this tutorial, I&rsquo;ll be showing you can programatically find out information about any person using their email. You can do that by using the Clearbit Person API.</p>

<p>In order to use the Person API, you first have to <a href="https://clearbit.com/">create your Clearbit account</a>. After creating your account, you&rsquo;ll be assigned with an API key which you can use for making requests to their API.</p>

<p>If you&rsquo;re on Ruby, Node or Python you can search for the Clearbit client for each of those platforms from their <a href="https://github.com/clearbit">Github page</a>. Just search for &lsquo;clearbit-&rsquo; followed by the platform. So if you&rsquo;re on Ruby, then you search for &lsquo;clearbit-ruby&rsquo;. You can then install the client on your machine and follow the examples provided in the <a href="https://clearbit.com/docs#person-api">official documentation</a>.</p>

<p>At the time of writing of this article, there&rsquo;s still no client available for PHP. But you can use <a href="http://guzzle.readthedocs.org/en/latest/">Guzzle</a> to easily make requests to their API. You can install Guzzle via Composer by executing the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require guzzlehttp/guzzle:~6.0</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can include the vendor autoload file in your test file and then create a new instance of the Guzzle client. Use <code>http://person.clearbit.com/v1/</code> as the base for all your requests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://person.clearbit.com/v1/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To request the data of a specific person, you can pass their email after the <code>people/email</code> endpoint. Here&rsquo;s an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;people/email/ancheta.wern@gmail.com&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;auth&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;YOUR-CLEARBIT-API-KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="p">)));</span>
</span><span class='line'><span class="nv">$res</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$res</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearbit uses basic authentication. The API key acts as the username so the password should be left blank.</p>

<p>It would then return the following output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">[id] =&gt; c29c2e9f-d082-4525-8dd3-1291835bf834</span>
</span><span class='line'><span class="x">[name] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [fullName] =&gt; Wern Ancheta</span>
</span><span class='line'><span class="x">        [givenName] =&gt; Wern</span>
</span><span class='line'><span class="x">        [familyName] =&gt; Ancheta</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[email] =&gt; ancheta.wern@gmail.com</span>
</span><span class='line'><span class="x">[gender] =&gt; </span>
</span><span class='line'><span class="x">[location] =&gt; Philippines</span>
</span><span class='line'><span class="x">[geo] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [city] =&gt; </span>
</span><span class='line'><span class="x">        [state] =&gt; </span>
</span><span class='line'><span class="x">        [country] =&gt; PH</span>
</span><span class='line'><span class="x">        [lat] =&gt; 12.879721</span>
</span><span class='line'><span class="x">        [lng] =&gt; 121.774017</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[bio] =&gt; JavaScripter, PHP Junkie, Anime Fanatic, Pokemon Master, Supernatural Enthusiast</span>
</span><span class='line'><span class="x">[site] =&gt; http://wern-ancheta.com</span>
</span><span class='line'><span class="x">[avatar] =&gt; https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/c29c2e9f-d082-4525-8dd3-1291835bf834</span>
</span><span class='line'><span class="x">[employment] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [name] =&gt; </span>
</span><span class='line'><span class="x">        [title] =&gt; </span>
</span><span class='line'><span class="x">        [domain] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[facebook] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; vern.ancheta</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[github] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">        [id] =&gt; </span>
</span><span class='line'><span class="x">        [avatar] =&gt; </span>
</span><span class='line'><span class="x">        [company] =&gt; </span>
</span><span class='line'><span class="x">        [blog] =&gt; </span>
</span><span class='line'><span class="x">        [followers] =&gt; </span>
</span><span class='line'><span class="x">        [following] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[twitter] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; Wern_Ancheta</span>
</span><span class='line'><span class="x">        [id] =&gt; 283769265</span>
</span><span class='line'><span class="x">        [bio] =&gt; JavaScripter, PHP Junkie, Anime Fanatic, Pokemon Master, Supernatural Enthusiast</span>
</span><span class='line'><span class="x">        [followers] =&gt; 330</span>
</span><span class='line'><span class="x">        [following] =&gt; 961</span>
</span><span class='line'><span class="x">        [statuses] =&gt; 7402</span>
</span><span class='line'><span class="x">        [favorites] =&gt; 356</span>
</span><span class='line'><span class="x">        [location] =&gt; Philippines</span>
</span><span class='line'><span class="x">        [site] =&gt; http://wern-ancheta.com</span>
</span><span class='line'><span class="x">        [avatar] =&gt; https://pbs.twimg.com/profile_images/2585189311/7q7dmz2h78lv32f8tw78.jpeg</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[linkedin] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[googleplus] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[angellist] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">        [id] =&gt; </span>
</span><span class='line'><span class="x">        [bio] =&gt; </span>
</span><span class='line'><span class="x">        [blog] =&gt; </span>
</span><span class='line'><span class="x">        [site] =&gt; </span>
</span><span class='line'><span class="x">        [followers] =&gt; </span>
</span><span class='line'><span class="x">        [avatar] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[klout] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">        [score] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[foursquare] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[aboutme] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; </span>
</span><span class='line'><span class="x">        [bio] =&gt; </span>
</span><span class='line'><span class="x">        [avatar] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[gravatar] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; zenonn</span>
</span><span class='line'><span class="x">        [urls] =&gt; Array</span>
</span><span class='line'><span class="x">            (</span>
</span><span class='line'><span class="x">                [0] =&gt; Array</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [value] =&gt; http://kyokasuigetsu25.wordpress.com</span>
</span><span class='line'><span class="x">                        [title] =&gt; Data Integrated Entity Blog</span>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                [1] =&gt; Array</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [value] =&gt; http://wernancheta.wordpress.com</span>
</span><span class='line'><span class="x">                        [title] =&gt; Wern Ancheta Web Development Blog</span>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                [2] =&gt; Array</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [value] =&gt; http://wernancheta.carbonmade.com</span>
</span><span class='line'><span class="x">                        [title] =&gt; Wern Ancheta Portfolio</span>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">        [avatar] =&gt; http://2.gravatar.com/avatar/717bcde740783a83a168468df0dbbb75</span>
</span><span class='line'><span class="x">        [avatars] =&gt; Array</span>
</span><span class='line'><span class="x">            (</span>
</span><span class='line'><span class="x">                [0] =&gt; Array</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [url] =&gt; http://2.gravatar.com/avatar/717bcde740783a83a168468df0dbbb75</span>
</span><span class='line'><span class="x">                        [type] =&gt; thumbnail</span>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                [1] =&gt; Array</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [url] =&gt; http://0.gravatar.com/userimage/29616243/2e8d74c1260a1c180328ea6317ebb8e0</span>
</span><span class='line'><span class="x">                        [type] =&gt; </span>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[fuzzy] =&gt; </span>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it&rsquo;s not very complete. It has left out my Github, LinkedIn, GooglePlus and FourSquare profiles. It doesn&rsquo;t have one for Instagram as well. Nevertheless, this API proves to be a good resource if you want to get data about a specific person.</p>

<p>If you want to update your own data, extract the ID that clearbit has assigned to your profile and then use it on your request. Here&rsquo;s an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://person.clearbit.com/v1/&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;people/YOUR-CLEARBIT-ID/flag&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;auth&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;YOUR-CLEARBIT-API-KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="s1">&#39;form_params&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;foursquare&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;handle&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wern_ancheta&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;googleplus&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;handle&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;+WernAncheta&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;github&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;handle&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;anchetaWern&#39;</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;gender&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;linkedin&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;handle&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wernr&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;gravatar&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;handle&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;vernancheta&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$res</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span> <span class="c1">//200</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that your data won&rsquo;t be immediately update. This is good since the update must be reviewed by an actual human so that not just anyone can mess with your data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Linting]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting/"/>
    <updated>2016-01-09T16:25:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting</id>
    <content type="html"><![CDATA[<p>Yo! It&rsquo;s been a while but I&rsquo;ve decided to continue this series on A Whirlwind Tour of Web Developer Tools. For those who don&rsquo;t know, I started this series a year ago but then I got so busy with work and I became an author at Sitepoint. So you can only count the number of in-depth tutorials with your fingers. But I quit my job and now I have a lot of free-time. That is why I no longer have any excuse not to continue what I started.</p>

<p>Ok enough with the life update. Now let&rsquo;s move on to the main topic of this article. This is part eight of the series on Web Developer Tools where I&rsquo;m going to walk you through linting. Linting is the process of running a program that will check the quality of code in order to avoid any potential errors. Take for example the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">y</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;Hello, World!&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;Hello&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By looking at the code, you can immediately see that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. The semicolon is also missing from the first <code>return</code> statement. But if add this function to a JavaScript file, you will see that it doesn&rsquo;t actually cause any errors until you add the code that will call the function. Only then will you realize that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. But JavaScript doesn&rsquo;t actually complain if you miss a semicolon or two so the first <code>return</code> statement won&rsquo;t probably cause any errors. This is because of the automatic semicolon insertion in JavaScript. I know the example that I gave is a bit contrived but you get the point. As developers we sometimes miss the obvious things such as defining a variable or putting a semicolon. That is why there are tools to help us avoid making these kinds of mistakes. Linters are one of those. In the world of web development there are a bunch of tools which can be classified as linters. I&rsquo;m going to walk you through some of those in this tutorial.</p>

<h3>Markup Validation Service</h3>

<p>The <a href="https://validator.w3.org/">markup validation service</a> by the World Wide Web Consortium allows developers to check the validity of the HTML code that they&rsquo;ve written. It uses the doctype defined at the very top of the document as a basis for which specific rules to use for checking the code. You can supply a URL, upload a file or directly input the HTML code that you want to check. Here&rsquo;s an example:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/w3c-validator.png" alt="w3c validator" /></p>

<p>As you can see from the screenshot, it gives you three types of feedback: info, warning and error. Info gives you general information about the page. Warnings are messages telling you that you can do better. Or something could be improved. In the example above it says that the document uses unicode private use areas. Which is basically another way of saying that undefined unicode characters shouldn&rsquo;t be used in publicly available documents. Lastly there&rsquo;s the error. These are messages that tells you to fix something because it might cause problems to the users of your website. In the example above, it&rsquo;s saying that an <code>alt</code> attribute should always be defined, except in specific conditions. And then it points out to the SVG logo of the website which should probably have an <code>alt</code> assigned to it. This is important because some users might be partially disabled (color-blind, partially blind, etc.) might be using a screenreader to interact with your website. And the value that you have placed in the <code>alt</code> attribute is read out by the screenreader. If there&rsquo;s nothing there then the user won&rsquo;t be able to know what he&rsquo;s currently focusing at.</p>

<h3>HTMLHint</h3>

<p><a href="http://htmlhint.com/">HTMLHint</a> is a linter for HTML code. Unlike the markup validation service, this allows you to specify what specific validation rules are to be used to check your HTML code. For example you can specify that all tags should be in lowercase. Or that in every file, an ID can only be used once. Here&rsquo;s an example:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/htmlhint.png" alt="htmlhint" /></p>

<p>HTMLHint gives you feedback on which specific line has problems in it. And if you hover over the line number, you will see what the specific error is. In the example above you can see that the errors are:</p>

<ul>
<li>the id <code>a_unique_id</code> has been used twice. It doesn&rsquo;t matter that the elements used are different as long as an ID is used more than once, it triggers the error on the lines in which the ID is used for the second time.</li>
<li>the <code>div</code> with the ID of <code>a_unique_id</code> hasn&rsquo;t been closed. Note that this doesn&rsquo;t get triggered on the line where the tag hasn&rsquo;t been closed. Instead it gets triggered on the nearest closing tag which doesn&rsquo;t have a pair.</li>
</ul>


<p>At the bottom part of the website, you can check or uncheck rules depending on what you&rsquo;d like to apply. There are are a number of rules you can choose from and the naming is pretty self-explanatory so I won&rsquo;t be delving into that.</p>

<h3>CSSLint</h3>

<p><a href="http://csslint.net/">CSSLint</a> as the name suggests, is a linter for CSS code. Just like HTMLHint it allows you to specify which validation rules you&rsquo;d like to apply for the checking of your CSS code. With CSSLint there are mostly warning rules but you can trigger errors as well. Such as when a specific rule is empty, or when using unknown CSS properties, or disallowing duplicate one&rsquo;s. Warning rules on the other hand requires you to add fallback colors if you&rsquo;re using <code>hsl</code>, <code>rgba</code>, <code>rgb</code>, or <code>hsla</code> to specify colors. Older browsers might not support those methods of specifying colors so you&rsquo;ll have to provide a fallback in hexadecimal format. Another example is disallowing units for 0 values. This is mostly for performance benefits. Here&rsquo;s an example CSS code that I&rsquo;ve checked with CSSLint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span> <span class="n">Neue</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#settings-button</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-right</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#message</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#64CF49</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">#sidebar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#67B6DA</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items-container</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#F7F7F7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#sidebar</span> <span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border-bottom</span><span class="o">:</span> <span class="m">3px</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#types</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nf">#types</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#types</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#575757</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#3A3A3A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#DFDFDF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.item-info</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#8A8A8A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-top</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then it showed me the following feedback:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/csslint.png" alt="csslint" /></p>

<p>As you can see I&rsquo;ve used a lot of ID&rsquo;s in this css file so CSSLint is complaining that I shouldn&rsquo;t use ID&rsquo;s. This is mainly because CSSLint have this idea that ID&rsquo;s are completely unique and therefore there&rsquo;s no room for reuse. CSSLint advocates the use of OOCSS (Object-oriented CSS) whose main principle is the reusability of code by means of using objects.</p>

<p>Another warning is the use of overqualified selectors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span><span class="nf">#types</span><span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s saying that just using <code>#types</code> would suffice.</p>

<p>The last type of warning is the heading should not be qualified warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#sidebar</span> <span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because headings are considered as top-level styles. This means that you shouldn&rsquo;t define their styles under a specific element. Because their appearance should be consistent throughout the entire website. Note that this is not saying that headings cannot be nested under a specific element. You can do that but when you&rsquo;re declaring their styles it should be just on its own so that you can ensure that they look the same throughout the whole website.</p>

<h3>JSHint</h3>

<p><a href="http://jshint.com/">JSHint</a> helps to detect errors and potential problems in your JavaScript code. It checks for undefined variables, the use of <code>eval</code> (we all know that <code>eval</code> is evil right?), unused variables and <a href="http://jshint.com/docs/options/">many others</a>. In the JSHint website you can configure which rules to apply by clicking on the <em>configure</em> link. Here&rsquo;s an example of how it works:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/jshint.png" alt="jshint" /></p>

<p>As you can see it provides you with some code metrics. It tells you how many functions has been defined, how many variables are not defined and how many are not used.</p>

<p>It also tells you the cyclomatic complexity of the largest functions. In case you&rsquo;re wondering, <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a> is just a fancy term for the complexity of a specific program. You can see that the cyclomatic complexity of the largest function that I&rsquo;ve defined is 2. And the median (average) complexity of all the functions in the file is 1.5. People generally say that a cyclomatic complexity of 0 to 5 is fine. But if you get around 6 or more then you should consider refactoring your code.</p>

<p>Another warning that you can see in the example is the missing &ldquo;use strict&rdquo; statement. This is a way of telling the browser to use strict mode. I haven&rsquo;t really dived into strict mode yet but the main idea is that adding this literal expression at the very top of each JavaScript file and at the very top of each function makes the browser complain more about your code. Take for example the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span><span class="p">;</span> <span class="c1">//browser: sweet!</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without invoking strict mode, the browser would happily execute this piece of code for you. But with strict mode it will complain that you haven&rsquo;t defined <code>x</code> yet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span><span class="p">;</span> <span class="c1">//browser: Uncaught ReferenceError: x is not defined</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Command Line Tool</h3>

<p>HTMLHint, CSSLint, and JSHint can all be used through the command line. We&rsquo;re going to take a look at how to do that in this section.</p>

<p>The first thing that you need to do is to install node.js and npm. But we&rsquo;re not going to go through that here because I previously mentioned it in my article on <a href="http://wern-ancheta.com/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers/">package managers</a>. Go ahead and check that out if you don&rsquo;t already have node.js and npm installed.</p>

<p>Once you&rsquo;ve installed node.js and npm, you can now install htmlhint, csslint, and jshint using npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">htmlhint</span> <span class="nx">csslint</span> <span class="nx">jshint</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now immediately use them right after the installation is complete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">htmlhint</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="nx">csslint</span> <span class="nx">style</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'><span class="nx">jshint</span> <span class="nx">main</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that each of these tools already comes with default options. So if you were to execute each of the commands above, you will most likely get a warning or an error if your code is already complex enough. But you can also specify which rules to apply by creating a configuration file inside of your project directory.</p>

<p>For HTMLHint the configuration file that you have to create is <code>.htmlhintrc</code> and it looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;tagname-lowercase&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attr-lowercase&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tag-pair&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctype-first&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tag-self-close&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attr-no-duplication&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attr-value-double-quotes&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attr-value-not-empty&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;title-require&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id-unique&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;inline-style-disabled&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;inline-script-disabled&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;doctype-html5&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;alt-require&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the rules that you can specify in <a href="https://github.com/yaniswang/HTMLHint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s the HTMLHint cli-tool in action:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/htmlhint-cli.png" alt="htmlhint-cli" /></p>

<p>And here&rsquo;s the file that I checked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;boom&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;boom&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;STRONG&gt;&lt;/STRONG&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong&gt;&lt;/strong&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;i</span> <span class="na">data</span> <span class="na">href=</span><span class="s">fldsfl</span> <span class="na">BOOM=</span><span class="s">&quot;bam!&quot;</span> <span class="na">style=</span><span class="s">&quot;color:red;&quot;</span><span class="nt">&gt;&lt;b&gt;</span>dds<span class="nt">&lt;/b&gt;&lt;/i&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For CSSLint it&rsquo;s <code>.csslintrc</code> and it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;adjoining-classes&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;box-sizing&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;box-model&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;compatible-vendor-prefixes&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;floats&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;font-sizes&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;gradients&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;important&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;known-properties&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;outline-none&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;qualified-headings&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;regex-selectors&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;shorthand&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;text-indent&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;unique-headings&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;universal-selector&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;unqualified-attributes&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I&rsquo;ve pick up that configuration straight from <a href="https://github.com/twbs/bootstrap/blob/master/less/.csslintrc">bootstrap&rsquo;s</a> <code>.csslintrc</code> file. You can find the rules for CSSLint in <a href="https://github.com/CSSLint/csslint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s CSSLint&rsquo;s cli-tool in action:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/csslint-cli.png" alt="csslint-cli" /></p>

<p>Here&rsquo;s the stylesheet that was checked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span> <span class="n">Neue</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#settings-button</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-right</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#message</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#64CF49</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">#sidebar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#67B6DA</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items-container</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">80</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-left</span><span class="o">:</span> <span class="m">20</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#F7F7F7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#sidebar</span> <span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border-bottom</span><span class="o">:</span> <span class="m">3px</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-left</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#types</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nf">#types</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#types</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#575757</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#3A3A3A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#items</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#DFDFDF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.item-info</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#8A8A8A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-top</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly there&rsquo;s jshint. Here&rsquo;s a sample <code>.jshintrc</code> file which I&rsquo;ve taken from <a href="https://github.com/CSSLint/csslint/blob/master/.jshintrc">CSSLint</a>. CSSLint is basically written in JavaScript that&rsquo;s why it has its own <code>.jshintrc</code> file to help the developers in checking their code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;camelcase&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;curly&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;eqeqeq&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;es3&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;forin&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;immed&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;indent&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;latedef&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;newcap&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;noarg&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;noempty&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;nonbsp&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;quotmark&quot;</span><span class="p">:</span> <span class="s2">&quot;double&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;strict&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;undef&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;unused&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find a list of options <a href="http://jshint.com/docs/options/">here</a>.</p>

<p>And here is JSHint&rsquo;s cli tool in action:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/jshint-cli.png" alt="jshint-cli" /></p>

<p>With this script file being checked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">beam</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">u</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Build Tool Integration</h3>

<p>Ok so we have a slight improvement over just copying and pasting the code that we want to check in the HTMLHint, CSSLint, and JSHint website. But wouldn&rsquo;t it be great if we don&rsquo;t need to execute the command every time we need to check? And in real-world projects you would most likely have multiple css, JavaScript and HTML files. So executing the commands for each of those files would be too troublesome and time-consuming. That is where build tools comes in. Luckily I&rsquo;ve already done an article specifically about <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">build tools</a> so if you&rsquo;re new to it then be sure to check that out. Then you can go back to this article once you have an idea how to use a build tool.</p>

<p>Ok so you&rsquo;re back. Hopefully you&rsquo;ve learned all about Grunt and Gulp. In this article we&rsquo;ll be using Gulp and the Gulp plugins for HTMLHint, CSSLint and JSHint. You can install those with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">gulp</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">htmlhint</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">csslint</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">jshint</span>
</span></code></pre></td></tr></table></div></figure>


<p>Optionally you can also install the formatters to make the reports more beautiful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">htmlhint</span><span class="o">-</span><span class="nx">stylish</span> <span class="nx">jshint</span><span class="o">-</span><span class="nx">stylish</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that there&rsquo;s also a package called <a href="https://www.npmjs.com/package/csslint-stylish">csslint-stylish</a> but it currently doesn&rsquo;t work with Gulp. If you&rsquo;re reading this article at a later time be sure to check out that page and see if it already works for Gulp.</p>

<p>The next step is to create a <code>gulpfile.js</code> file in the root of your project directory and then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">htmlhint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-htmlhint&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">csslint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-csslint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jshint&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint_html&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&quot;*.html&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlhint</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlhint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s2">&quot;htmlhint-stylish&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint_css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.css&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">csslint</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">csslint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint_js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;*.js&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s2">&quot;jshint-stylish&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;*.html&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint_html&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;*.css&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint_css&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;*.js&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint_js&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like I said earlier, I won&rsquo;t go deep into this because I&rsquo;ve already written a whole article on <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">Build Tools</a>. Basically what this file does is to declare all the task that we want to perform with Gulp. We have four tasks in total, one for each linter and one for watching files in a specific directory. The only task that we need to execute is the last one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span> <span class="nx">watch</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is to watch all the HTML files and then execute the HTML Linter. The same is true with the other file types. The linter for each specific file type is executed once you save a file. So if you press <code>ctrl + s</code> on your keyboard, the task is immediately executed. What you can do is you can either switch windows (<code>alt + tab</code>) or put the command line window and your text-editor side by side so you get instant feedback on your code.</p>

<h3>Text-editor Integration</h3>

<p>For the final part we&rsquo;re going to look at how to integrate the linting tools in the text-editor. I&rsquo;m a Sublime Text user so I&rsquo;ll be using it for the examples. But if you&rsquo;re using another text-editor or IDE be sure to check out if these tools are also available.</p>

<p>The first thing that you need to do is to install the SublimeLinter plugin with Sublime <a href="https://packagecontrol.io/">Package Control</a>.</p>

<p>Once installed, determine where HTMLHint, CSSLint, and JSHint are installed in your computer. In Ubuntu you can do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">which</span> <span class="nx">htmlhint</span>
</span><span class='line'><span class="nx">which</span> <span class="nx">csslint</span>
</span><span class='line'><span class="nx">which</span> <span class="nx">jshint</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will return the path to the executable file. For me it was <code>/home/wern/.nvm/v4.0.0/bin/csslint</code> for csslint. Note that <code>csslint</code> in that path is the executable file itself. So the path that you actually want is <code>/home/wern/.nvm/v4.0.0/bin</code>. It returned the same path for HTMLHint and JSHint for me so I only need that one path. Once you&rsquo;ve found it, go ahead and copy that path.</p>

<p>Next open Sublime Text, click on the <em>preferences</em> menu > <em>package settings</em> > <em>SublimeLinter</em> > <em>Settings &ndash; User</em>. This opens the user configuration file for SublimeLinter. Add the following into it and then save.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open the file again by going through the same steps above. This time Sublime Text has already added the default configurations in there. What you need to do now is to look for the <code>paths</code> object and under your current operating system at the path to where the HTMLHint, CSSLint and JSHint executables are. Because I&rsquo;m using Ubuntu I had to put it inside <code>linux</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;paths&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;linux&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;/home/wern/.nvm/v4.0.0/bin&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;osx&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nt">&quot;windows&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done, save the file then restart Sublime Text (close it and open again).</p>

<p>Open the Sublime Text console by pressing <code>ctrl + `</code> then look for something similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">SublimeLinter:</span> <span class="err">htmlhint</span> <span class="err">activated:</span> <span class="err">/home/wern/.nvm/v</span><span class="mf">4.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/bin/htmlhint</span>
</span><span class='line'><span class="err">SublimeLinter:</span> <span class="err">jshint</span> <span class="err">activated:</span> <span class="err">/home/wern/.nvm/v</span><span class="mf">4.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/bin/jshint</span>
</span><span class='line'><span class="err">SublimeLinter:</span> <span class="err">csslint</span> <span class="err">activated:</span> <span class="err">/home/wern/.nvm/v</span><span class="mf">4.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/bin/csslint</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells you that SublimeLinter has successfully picked up the paths to where the linters are installed. If you&rsquo;re seeing that then you&rsquo;re good to go, if not then be sure to check if the path that you&rsquo;ve supplied really contains the executable code for each of those linters.</p>

<p>Here are some screenshot that shows the linters in action:</p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/htmlhint-text.png" alt="htmlhint text editor" /></p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/csslint-text.png" alt="csslint text editor" /></p>

<p><img src="http://wern-ancheta.com/images/posts/devtools_linters/jshint-text.png" alt="jshint text editor" /></p>

<p>The yellow dots indicates warnings, while the red dots indicate errors. If you move your cursor over to the line where a dot is, you can see the actual message on the status bar (bottom left corner of the screen). Pretty sweet right?</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it! In this article you&rsquo;ve learned how to use some of the tools that you could use to help you with determining potential problems in your HTML, CSS and JavaScript code. You&rsquo;ve also learned how to integrate this into your workflow by making use of the command-line tool or the text-editor integration.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/yaniswang/HTMLHint/wiki">HTMLHint Wiki</a></li>
<li><a href="https://github.com/CSSLint/csslint/wiki">CSSLint Wiki</a></li>
<li><a href="https://github.com/jshint/jshint/wiki/Documentation">JSHint Wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Developers New Years Resolution]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/04/a-developers-new-years-resolution/"/>
    <updated>2016-01-04T20:11:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/04/a-developers-new-years-resolution</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 2016. A brand-new year is upon us. And this is the time of the year when people usually set goals for the new year. While most other folks have new year&rsquo;s resolution for their real life, In this article I&rsquo;ll be sharing some of my new year&rsquo;s resolution as a developer.</p>

<h3>Generate Passive Income</h3>

<p>The idea of generating a passive income has really enticed me in the past but it&rsquo;s only this year that I&rsquo;ve thought about it seriously. For developers one way of generating passive income is through marketplaces like Themeforest and CodeCanyon. All you have to do is build something useful and you can sell it on the platforms that I&rsquo;ve just mentioned. I&rsquo;ve already created an account on CodeCanyon, set it up and read their terms. All that&rsquo;s left for me to do is to build something and submit it for review so that people can find it.</p>

<h3>Continue What I&rsquo;ve Started</h3>

<p>I have a bunch of projects on Github. Some might not already work. Some lacking in documentation. This year I&rsquo;ll continue every project that I started. Or at least mention that I won&rsquo;t already be doing active development for projects that I&rsquo;m no longer interested in pursuing.</p>

<p>I have also a blog series that I started back in 2014 which I called: <a href="http://wern-ancheta.com/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/">A Whirlwind Tour of Web Developer Tools</a>, I&rsquo;m planning to start that up again this year.</p>

<h3>Be More Picky</h3>

<p>I read a lot. In fact I&rsquo;ve created <a href="http://updatedapp.github.io/">a website</a> that curates all the news from sources that I want. Usually these are from the developer newsletters, twitter users, and websites that I follow.
But I&rsquo;m still subscribed to the newsletters which I have used as the news item source. So it still gets the better of my time when I receive a new issue. My plan is to unsubscribe to all of those newsletters and just stick to using the website myself. This is so that I don&rsquo;t accidentally engage to some content. Or click on a link and not actually reading what&rsquo;s in there. With the new setup I can actually just visit the website if I really want to read something and not when I receive a new issue of a newsletter.</p>

<p>The second step after unsubscribing to all newsletters is to actually pick only what I really want to read. If its a tool that I can use in the future, then I save it on my delicious account. If its an article which I want to go back to in the future then I save it on Pocket.</p>

<p>The third step is to actually read what&rsquo;s really important or at least something that I really want to read. Of course this can&rsquo;t be determined by merely looking at the title so the article has to be scanned first and then determine if it&rsquo;s really relevant.</p>

<p>Of course this goes with all the other content that I&rsquo;m consuming and creating. So movies, anime shows, personal projects, blog posts should go through a tight consideration before I actually engage on it.</p>

<h3>Be More Healthy</h3>

<p>Developers have a sedentary lifestyle by nature. Just sitting on a chair coding all day. That&rsquo;s no good so here are the steps that I&rsquo;m planning to implement to be more healthy.</p>

<ul>
<li>Indoor exercise in the morning. Intense outdoor exercise in the weekends.</li>
<li>Use the standing desk at least one hour in the morning and one hour in the afternoon.</li>
<li>Eat less rice.</li>
<li>Eat more fruits and vegetables. There should be at least one meal per day where I eat a decent amount of those.</li>
<li>Get more sunlight.</li>
<li>Sleep more.</li>
<li>Be more concious about my posture.</li>
</ul>


<h3>Engage More in the Community</h3>

<ul>
<li>I&rsquo;ll start by creating videos <a href="http://youtube.com/WernAncheta">on Youtube</a> showing a specific technology, tool or methodology regarding web development. I&rsquo;ve already started it the previous year by uploading some of my flipped classroom videos that I&rsquo;ve used in my class in the school where I teach.</li>
<li>Comment on other developers blog posts, or talk to them on twitter.</li>
<li>Answer questions on Stackoverflow.</li>
<li>Attend local developer meetups.</li>
<li>Contribute to open-source projects.</li>
</ul>


<h3>Use Tools</h3>

<p>I&rsquo;ve been pretty much avoiding the use of tools in my day to day job as a developer. I still use plain css instead of Less, Sass, Stylus or {insert your css preprocessor of choice here}. I still don&rsquo;t use Grunt, Gulp, Brocolli, Carrots, Eggplant, {insert your build tool of choice here} for every project (note: there&rsquo;s no carrots or eggplant yet but someone might create it after this). I&rsquo;ve been avoiding the use of tools because I just want to get started with a project fast. Installing a bunch of tools and setting them up before I can start coding is a pain. The only tools that I currently use are the following:</p>

<ul>
<li>Composer</li>
<li>Bower</li>
<li>npm</li>
</ul>


<p>Simply because you can&rsquo;t install anything without those.</p>

<p>This year I&rsquo;ll start by learning how to use Yeoman so I can easily setup all the things that I need for a project. And then learn how to use a css preprocessor, Gulp to process the project assets, JSLint to check the quality of my JavaScript code. And then in the back-end use PHPUnit for unit-testing.
And lastly use a continuous integration server such as Jenkins to automatically run unit tests so that I immediately know if a specific code is still working or not.</p>

<h3>Build More Cool Shit</h3>

<p>Pardon the language but developers are <a href="https://twitter.com/gitlost">commonly foul-mouthed</a> right? Anyway, what I mean by build more cool shit is to create stuff that I can be proud of. I&rsquo;d also like to build IOT (Internet of Things) projects. And with the birth of the RaspberryPi zero it just got more easy. Though I&rsquo;m yet to order one because the stock is always zero. I should have ordered one when I first heard about it. Now people are ordering it non-stop. Who wouldn&rsquo;t right? RaspberryPi zero is only five fucking dollars.</p>

<h3>Learn a New Language, Framework, Tool, Methodology</h3>

<ul>
<li>Language: Python &ndash; If I am to build stuff with RaspberryPi I need to learn to code in Python. I also want to leap from the hybrid app bandwagon and go full native so I&rsquo;ll have to learn (or rather re-learn) Java. This is simply because apps built with Hybrid App Framework such as Cordova performs poorly on my old android phone. Maybe I just need a new phone but I&rsquo;ll go ahead and blame it to programming.</li>
<li>Framework: Symfony &ndash; I&rsquo;m basically a Laravel guy so for a change I pick Symfony.</li>
<li>Tools: CI Server, PHPUnit, Gulp, Sass, ReactJS</li>
<li>Methodology: I&rsquo;m still not sure. But I&rsquo;ll probably try to learn some of the most popular design patterns in JavaScript and PHP.</li>
</ul>


<h3>Get Better at What I Do</h3>

<p>No matter how good you are at something there&rsquo;s always room for improvement, there&rsquo;s always another way for doing things twice as easy or efficient. So the plan for 2016 is to look for ways to improve my current development workflow. Like I said earlier I&rsquo;m a Laravel guy so I&rsquo;ll start by examining my current Laravel workflow and see what I can improve.</p>

<h3>Invade Other Fields</h3>

<p>I&rsquo;ve been really interested in UX because I know it will be helpful for me as an all-around developer. When I say all-around it means I&rsquo;m the one doing the server setup up to deployment and anything between those two. I&rsquo;m pretty much a one-man band in all the projects that I&rsquo;ve built so far. No devops, no designer, no nothing.</p>

<p>Another field that I&rsquo;d like to look into is SEO. Who wouldn&rsquo;t want to have their website more findable?</p>

<p>That&rsquo;s it! How about you? What&rsquo;s your plan for 2016?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Year-end Review]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/29/2015-year-end-review/"/>
    <updated>2015-12-29T12:14:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/29/2015-year-end-review</id>
    <content type="html"><![CDATA[<p>A year is coming to an end again. And with lots of free time during the holidays I figured it would be nice to reflect on the previous year. So in this post I&rsquo;ll be sharing some of the things that happened in 2015.</p>

<h3>Career</h3>

<p>As you might already know I&rsquo;m a developer. So I develop websites and apps for a living. I mainly do home-based work since I graduated from college. Mainly because of its convenience and for personal reasons. You get to work from home and earn money how cool is that? But recently its no longer that fun. Payments get delayed. And projects are no longer that interesting. I basically stopped doing it around October of this year. Good thing I got hired as an author for Tutsplus&#8217; Mobile channel. And I still write for Sitepoint. So I currently write articles for those two awesome websites full-time.</p>

<p>Around July this year I got a message from my college instructor asking if I want to teach. I said yes. And so from August until December I taught at the college where I graduated from. It&rsquo;s only part-time during the afternoon so I still got to write full-time. From my 4 months of experience I can say that I really enjoyed teaching. Being able to share what you know and helping your students get better, it&rsquo;s one of the most rewarding feelings ever.</p>

<p>Since teaching in college requires someone to have a master&rsquo;s degree in their field. I had to take up Master&rsquo;s in Information Technology. Good thing the school is only walking distance from my home so it&rsquo;s very accessible. And classes are only on saturdays. So I&rsquo;m still able to do what I like doing the most: coding.</p>

<h4>Projects</h4>

<p>This career section wouldn&rsquo;t be complete without me talking about projects. If you look at my <a href="https://github.com/anchetaWern">Github profile</a> there are lots of new additions to the list of repos this year. This is mainly because I always write tutorials on making apps with different web technologies. Sitepoint and Tutsplus requires those apps to be in a Github repo. That&rsquo;s why my Github has got a bunch of those apps. Another reason for the repo population growth is free time. I already mentioned that I currently write full-time. But I don&rsquo;t necessarily have a boss. So I still got to choose whether to write for a certain day or work with another thing. Some days I choose to work on my personal projects. The common theme for my personal projects is usually to solve some problems that I&rsquo;m having. Mainly automation stuff so I don&rsquo;t have to do a lot of things manually. My part-time teaching job has particularly lots of problems that needs solving. This includes: <a href="http://wern-ancheta.com/blog/2015/09/27/introduction-to-absentist/">attendance tracking</a>, managing of files submitted by students, <a href="http://wern-ancheta.com/blog/2015/10/25/introduction-to-shotgun/">checking of student activities</a>, <a href="http://wern-ancheta.com/blog/2015/11/03/introduction-to-grade-viewer/">showing grades to the students</a>.</p>

<h3>Health</h3>

<p>Developers are mainly sedentary animals. That&rsquo;s why there&rsquo;s a need to make an effort to thwart the effects of sitting in front of the computer all day long. As for me what I did was to use a standing desk. And jog first thing in the morning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Information About Any Company with Clearbit's Company API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/19/getting-information-about-any-company-with-clearbits-company-api/"/>
    <updated>2015-12-19T13:41:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/19/getting-information-about-any-company-with-clearbits-company-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how you can get information from any company using the Clearbit Company API.</p>

<p>Start by signing up for an account on the Clearbit website. An API key will be assigned to your account after signing up. This allows you to make a request to their API.</p>

<p>Next, install Guzzle on your working directory. Guzzle is an HTTP library for PHP. It is used to easily make requests to any API.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require guzzlehttp/guzzle:~6.0</span></code></pre></td></tr></table></div></figure>


<p>Include the vendor autoload file on your file and create a new Guzzle client with the following base uri: <code>https://company.clearbit.com/</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://company.clearbit.com/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the API, make a <code>get</code> request to the <code>v1/companies/domain/</code> endpoint followed by the domain name of the company that you want. Pass in the <code>auth</code> as an option. This allows you to specify the API key which you got from Clearbit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;v1/companies/domain/google.com&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;auth&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;YOUR-CLEARBIT-API-KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then get the response body by calling the <code>getBody</code> method in the response. In the example below, the response is converted to an array using the <code>json_decode</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output will look something like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">[id] =&gt; 1d396c21-e421-4dd9-988e-55a8200c6e10</span>
</span><span class='line'><span class="x">[name] =&gt; Google</span>
</span><span class='line'><span class="x">[legalName] =&gt; Google Inc</span>
</span><span class='line'><span class="x">[domain] =&gt; google.com</span>
</span><span class='line'><span class="x">[domainAliases] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [0] =&gt; covet.com</span>
</span><span class='line'><span class="x">        [1] =&gt; appspotchat.com</span>
</span><span class='line'><span class="x">        [2] =&gt; ggh-uae.com</span>
</span><span class='line'><span class="x">        [3] =&gt; remail.com</span>
</span><span class='line'><span class="x">        [4] =&gt; orkut.com</span>
</span><span class='line'><span class="x">        [5] =&gt; goolge.com</span>
</span><span class='line'><span class="x">        [6] =&gt; picasa.com</span>
</span><span class='line'><span class="x">        [7] =&gt; blogspot.ru</span>
</span><span class='line'><span class="x">        [8] =&gt; sparkbuy.com</span>
</span><span class='line'><span class="x">        [9] =&gt; pushlife.com</span>
</span><span class='line'><span class="x">        [10] =&gt; greenparrotpictures.com</span>
</span><span class='line'><span class="x">        [11] =&gt; phonetic-arts.com</span>
</span><span class='line'><span class="x">        [12] =&gt; omnisio.com</span>
</span><span class='line'><span class="x">        [13] =&gt; googlecloud.com</span>
</span><span class='line'><span class="x">        [14] =&gt; weardrobe.com</span>
</span><span class='line'><span class="x">        [15] =&gt; ojos-inc.com</span>
</span><span class='line'><span class="x">        [16] =&gt; akwan.com.br</span>
</span><span class='line'><span class="x">        [17] =&gt; appliedsemantics.com</span>
</span><span class='line'><span class="x">        [18] =&gt; gemail.com.br</span>
</span><span class='line'><span class="x">        [19] =&gt; wosix.com</span>
</span><span class='line'><span class="x">        [20] =&gt; firstinwireless.com</span>
</span><span class='line'><span class="x">        [21] =&gt; cloudmarket.me</span>
</span><span class='line'><span class="x">        [22] =&gt; riya.com</span>
</span><span class='line'><span class="x">        [23] =&gt; teronamanagement.com</span>
</span><span class='line'><span class="x">        [24] =&gt; sxz.co</span>
</span><span class='line'><span class="x">        [25] =&gt; womenfitnessinsider.com</span>
</span><span class='line'><span class="x">        [26] =&gt; webtocracy.org</span>
</span><span class='line'><span class="x">        [27] =&gt; webtocracy.com</span>
</span><span class='line'><span class="x">        [28] =&gt; webtocracy.net</span>
</span><span class='line'><span class="x">        [29] =&gt; superapple.org</span>
</span><span class='line'><span class="x">        [30] =&gt; storktechnology.com</span>
</span><span class='line'><span class="x">        [31] =&gt; sourful.com</span>
</span><span class='line'><span class="x">        [32] =&gt; snapchatdeals.com</span>
</span><span class='line'><span class="x">        [33] =&gt; quarterthree.com</span>
</span><span class='line'><span class="x">        [34] =&gt; puwak.com</span>
</span><span class='line'><span class="x">        [35] =&gt; nudevilla.com</span>
</span><span class='line'><span class="x">        [36] =&gt; nemzis.com</span>
</span><span class='line'><span class="x">        [37] =&gt; ryanstull.com</span>
</span><span class='line'><span class="x">        [38] =&gt; mckayfamily.org</span>
</span><span class='line'><span class="x">        [39] =&gt; marksearle.net</span>
</span><span class='line'><span class="x">        [40] =&gt; opentolink.com</span>
</span><span class='line'><span class="x">        [41] =&gt; lewispi.com</span>
</span><span class='line'><span class="x">        [42] =&gt; levkova.com</span>
</span><span class='line'><span class="x">        [43] =&gt; katenka.net</span>
</span><span class='line'><span class="x">        [44] =&gt; imize.net</span>
</span><span class='line'><span class="x">        [45] =&gt; google.us</span>
</span><span class='line'><span class="x">        [46] =&gt; com.google</span>
</span><span class='line'><span class="x">        [47] =&gt; gogle.com</span>
</span><span class='line'><span class="x">        [48] =&gt; oingo.com</span>
</span><span class='line'><span class="x">        [49] =&gt; googlesyndication.com</span>
</span><span class='line'><span class="x">        [50] =&gt; ggoogle.com</span>
</span><span class='line'><span class="x">        [51] =&gt; google.io</span>
</span><span class='line'><span class="x">        [52] =&gt; blogspot.ae</span>
</span><span class='line'><span class="x">        [53] =&gt; gogole.com</span>
</span><span class='line'><span class="x">        [54] =&gt; hijab.pw</span>
</span><span class='line'><span class="x">        [55] =&gt; industrial-perception.com</span>
</span><span class='line'><span class="x">        [56] =&gt; googlr.com</span>
</span><span class='line'><span class="x">        [57] =&gt; googleadservices.com</span>
</span><span class='line'><span class="x">        [58] =&gt; talkbin.com</span>
</span><span class='line'><span class="x">        [59] =&gt; picnik.com</span>
</span><span class='line'><span class="x">        [60] =&gt; postrank.com</span>
</span><span class='line'><span class="x">        [61] =&gt; appjet.com</span>
</span><span class='line'><span class="x">        [62] =&gt; google.co</span>
</span><span class='line'><span class="x">        [63] =&gt; zabrinalee.com</span>
</span><span class='line'><span class="x">        [64] =&gt; blu-ray.us</span>
</span><span class='line'><span class="x">        [65] =&gt; picasa.net</span>
</span><span class='line'><span class="x">        [66] =&gt; googleproductforums.com</span>
</span><span class='line'><span class="x">        [67] =&gt; googlelabs.com</span>
</span><span class='line'><span class="x">        [68] =&gt; googlee.com</span>
</span><span class='line'><span class="x">        [69] =&gt; gooogle.com</span>
</span><span class='line'><span class="x">        [70] =&gt; diychef.com</span>
</span><span class='line'><span class="x">        [71] =&gt; googl.com</span>
</span><span class='line'><span class="x">        [72] =&gt; gmail.co</span>
</span><span class='line'><span class="x">        [73] =&gt; blogger.ch</span>
</span><span class='line'><span class="x">        [74] =&gt; mozingo.me</span>
</span><span class='line'><span class="x">        [75] =&gt; orkut.org</span>
</span><span class='line'><span class="x">        [76] =&gt; lifescapeinc.com</span>
</span><span class='line'><span class="x">        [77] =&gt; firehunt.com</span>
</span><span class='line'><span class="x">        [78] =&gt; google.info</span>
</span><span class='line'><span class="x">        [79] =&gt; veremey.net</span>
</span><span class='line'><span class="x">        [80] =&gt; docverse.com</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[url] =&gt; http://google.com</span>
</span><span class='line'><span class="x">[site] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [url] =&gt; http://google.com</span>
</span><span class='line'><span class="x">        [title] =&gt; Google</span>
</span><span class='line'><span class="x">        [h1] =&gt; </span>
</span><span class='line'><span class="x">        [metaDescription] =&gt; Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.</span>
</span><span class='line'><span class="x">        [metaAuthor] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[category] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [sector] =&gt; Consumer Discretionary</span>
</span><span class='line'><span class="x">        [industryGroup] =&gt; Media</span>
</span><span class='line'><span class="x">        [industry] =&gt; Media</span>
</span><span class='line'><span class="x">        [subIndustry] =&gt; Publishing</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[tags] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[description] =&gt; Google’s mission is to organize the world’s information and make it universally accessible and useful.</span>
</span><span class='line'><span class="x">[location] =&gt; 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA</span>
</span><span class='line'><span class="x">[geo] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [streetNumber] =&gt; 1600</span>
</span><span class='line'><span class="x">        [streetName] =&gt; Amphitheatre Parkway</span>
</span><span class='line'><span class="x">        [subPremise] =&gt; </span>
</span><span class='line'><span class="x">        [city] =&gt; Mountain View</span>
</span><span class='line'><span class="x">        [state] =&gt; California</span>
</span><span class='line'><span class="x">        [country] =&gt; United States</span>
</span><span class='line'><span class="x">        [postalCode] =&gt; 94043</span>
</span><span class='line'><span class="x">        [lat] =&gt; 37.4224206</span>
</span><span class='line'><span class="x">        [lng] =&gt; -122.0843021</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[logo] =&gt; https://logo.clearbit.com/google.com</span>
</span><span class='line'><span class="x">[facebook] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; google</span>
</span><span class='line'><span class="x">        [likes] =&gt; </span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[linkedin] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; company/google</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[twitter] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; google</span>
</span><span class='line'><span class="x">        [id] =&gt; 20536157</span>
</span><span class='line'><span class="x">        [bio] =&gt; News and updates from Google</span>
</span><span class='line'><span class="x">        [followers] =&gt; 11873983</span>
</span><span class='line'><span class="x">        [following] =&gt; 448</span>
</span><span class='line'><span class="x">        [location] =&gt; Mountain View, CA</span>
</span><span class='line'><span class="x">        [site] =&gt; http://t.co/twxHxOtTvy</span>
</span><span class='line'><span class="x">        [avatar] =&gt; https://pbs.twimg.com/profile_images/522909800191901697/FHCGSQg0_normal.png</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[angellist] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [id] =&gt; 32203</span>
</span><span class='line'><span class="x">        [handle] =&gt; google</span>
</span><span class='line'><span class="x">        [description] =&gt; Google’s mission is to organize the world’s information and make it universally accessible and useful.</span>
</span><span class='line'><span class="x">        [followers] =&gt; 7097</span>
</span><span class='line'><span class="x">        [blogUrl] =&gt; http://googleblog.blogspot.com/</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[crunchbase] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [handle] =&gt; google</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[emailProvider] =&gt; </span>
</span><span class='line'><span class="x">[type] =&gt; public</span>
</span><span class='line'><span class="x">[ticker] =&gt; </span>
</span><span class='line'><span class="x">[phone] =&gt; +1 650-253-0000</span>
</span><span class='line'><span class="x">[metrics] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [alexaUsRank] =&gt; 1</span>
</span><span class='line'><span class="x">        [alexaGlobalRank] =&gt; 1</span>
</span><span class='line'><span class="x">        [googleRank] =&gt; 9</span>
</span><span class='line'><span class="x">        [employees] =&gt; 10000</span>
</span><span class='line'><span class="x">        [marketCap] =&gt; </span>
</span><span class='line'><span class="x">        [raised] =&gt; 1700000000</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">[tech] =&gt; Array</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [0] =&gt; google_analytics</span>
</span><span class='line'><span class="x">        [1] =&gt; double_click</span>
</span><span class='line'><span class="x">        [2] =&gt; google_adwords</span>
</span><span class='line'><span class="x">        [3] =&gt; doubleclick</span>
</span><span class='line'><span class="x">        [4] =&gt; google_apps</span>
</span><span class='line'><span class="x">    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing Passwords in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php/"/>
    <updated>2015-12-11T12:35:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;re going to take a look at some of the libraries that allows us secure passwords in PHP.</p>

<h3>Password Compat</h3>

<p>The first library that we&rsquo;re going to look at is Password Compat. You can install it through <a href="https://getcomposer.org/">Composer</a> by using the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require ircmaxell/password-compat</span></code></pre></td></tr></table></div></figure>


<p>Once it&rsquo;s done installing, you can the include the vendor autoload file so you can use its functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>password_hash</code> function is used to hash passwords. It accepts the password that you want to hash as its first argument and the algorithm to be used for password hashing as its second. In the example below, <code>PASSWORD_DEFAULT</code> is used. This allows you to use the most secure algorithm that&rsquo;s currently available to PHP. At the time of writing of this article, the most secure algorithm that&rsquo;s available to PHP is bcrypt. So that&rsquo;s the one that&rsquo;s being used when you specify <code>PASSWORD_DEFAULT</code> as the second argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_DEFAULT</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also an optional third argument which allows you to change the CPU <code>cost</code> of hashing the password. By default the <code>cost</code> is 10. So if you have a less powerful server you can change it to something lower. The <code>cost</code> can have a value between 4 and 31.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_DEFAULT</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;cost&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then store the hash in your database.</p>

<p>To validate if a password matches the hash stored in the database, use the <code>password_verify</code> method. This accepts the password as the first argument and the hash as the second. So in your application you might have a query to select the user based on its email or username and then you use the hash that was returned for the second argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">password_verify</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;valid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>PHPAss</h3>

<p>PHPAss is one of the older password hashing libraries that are available for PHP. Nevertheless it doesn&rsquo;t make it less secure than any of the password securing methods in this article. It uses the blowfish algorithm to hash passwords.</p>

<p>Execute the following to install PHPAss.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require hautelook/phpass</span>
</span></code></pre></td></tr></table></div></figure>


<p>After including the vendor autoload file, set your current file to use the <code>PasswordHash</code> class in the <code>Hautelook</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Hautelook\Phpass\PasswordHash</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new password hasher instance. This accepts 2 required arguments. First is the base-2 logarithm of the iteration count used for password stretching. The second a boolean value for setting if the password will use portable hashes. The values that I&rsquo;ve set below are the default one&rsquo;s. Those will do for most use cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$passwordHasher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordHash</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then call the <code>HashPassword</code> method to actually hash the password. This hash should then be stored into the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nv">$passwordHasher</span><span class="o">-&gt;</span><span class="na">HashPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check if a password is valid by using the <code>CheckPassword</code> method. This accepts the password as its first argument and the hash that came from the database as the second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$passwordMatch</span> <span class="o">=</span> <span class="nv">$passwordHasher</span><span class="o">-&gt;</span><span class="na">CheckPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$passwordMatch</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;valid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>PHP Password Lib</h3>

<p>PHP Password Lib is one of those libraries that isn&rsquo;t really recommended for production use. As mentioned in their <a href="https://github.com/ircmaxell/PHP-PasswordLib">Github page</a> itself, it&rsquo;s currently in beta and should be used at your own risk.</p>

<p>In order to install PHP Password Lib, you first have to add a <code>minimum-stability</code> option and set it to <code>dev</code>. Also set <code>prefer-stable</code> to <code>true</code> so that composer will default to installing the stable versions of the other libraries that you&rsquo;re installing via composer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&quot;minimum-stability&quot;: &quot;dev&quot;,</span>
</span><span class='line'><span class="x">&quot;prefer-stable&quot;: true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can&rsquo;t really find the library in <a href="https://packagist.org">Packagist</a> so you need to add the following to your <code>composer.json</code> file directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&quot;PasswordLib/PasswordLib&quot;: &quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, execute <code>composer update</code> to update the dependencies.</p>

<p>To use the library, create a new instance of the <code>PasswordLib</code> class and then use it to call the <code>createPasswordHash</code> method to hash a password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$lib</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordLib\PasswordLib</span><span class="p">();</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">createPasswordHash</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like the previous libraries it also comes with its own verify function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_valid</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">verifyPasswordHash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$is_valid</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;yep&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;nope&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside from the generating and verifying hashes, it also allows you to generate random tokens. A sample use case would be when users request for their password to be reset. That&rsquo;s commonly done by sending an email to the user. That email contains a link with a query parameter on it which has a random string as its value. That string is the token. Which is used for fetching the password reset request that was saved in the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$token</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">getRandomToken</span><span class="p">(</span><span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$token</span><span class="p">;</span> <span class="c1">// Mpe/H3oLamOqEV4uxTwu.fuhKpb5p/u4BMu</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>zxcvbn-php</h3>

<p>zxcvbn-php is a library for estimating password strength.</p>

<p>You can install it by executing the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require bjeavons/zxcvbn-php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the library, make use of the <code>ZxcvbnPhp\Zxcvbn</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">ZxcvbnPhp\Zxcvbn</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then determine the password score by calling the <code>passwordStrength</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$zxcvbn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Zxcvbn</span><span class="p">();</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$strength</span> <span class="o">=</span> <span class="nv">$zxcvbn</span><span class="o">-&gt;</span><span class="na">passwordStrength</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$strength</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on my testing, it returns 0 if the password is not secure or easy to crack. And return 4 if it is secure. I haven&rsquo;t found any values between those and there&rsquo;s nothing higher than 4 so I assume it can only return a score of either 4 or 0. The result contains other data as well. Things like the entropy, calc_time and crack_time.</p>

<h3>GenPhrase</h3>

<p>Lastly, we&rsquo;re going to take a look at GenPhrase. This library allows us to generate secure passphrases in PHP.</p>

<p>To install GenPhrase, execute the following on your terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require genphrase/genphrase</span>
</span></code></pre></td></tr></table></div></figure>


<p>One note about the installation though. It&rsquo;s also mentioned in their <a href="https://github.com/timoh6/GenPhrase">official Github project page</a>. It mentioned that GenPhrase should be obtained only via secure connection using Github. This is because Composer is susceptible to man-in-the-middle attacks. If you&rsquo;re just testing, it&rsquo;s fine to install this library via composer. But if you&rsquo;re following this tutorial to implement this library on a production server then think again. You&rsquo;ve been warned.</p>

<p>To use GenPhrase, create a new instance of the <code>Password</code> class under the <code>GenPhrase</code> namespace. Then call the <code>generate</code> method to generate the random passphrase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GenPhrase\Password</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">();</span> <span class="c1">// Slum treble Boost rack</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass the <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory">entropy</a>) as an argument. By default the value is 50. But you can have a value between 26 and 120.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span> <span class="c1">// soviet!Retain8skinny&amp;spoil</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to secure passwords in PHP using the <a href="https://github.com/ircmaxell/password_compat">Password Compat</a>, <a href="https://github.com/hautelook/phpass">phpass</a>, <a href="https://github.com/ircmaxell/PHP-PasswordLib">PHP Password Lib</a>, <a href="https://github.com/bjeavons/zxcvbn-php">zxcvbn</a> and <a href="https://github.com/timoh6/GenPhrase">GenPhrase</a> libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools of Trade]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/05/tools-of-trade/"/>
    <updated>2015-12-05T07:19:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/05/tools-of-trade</id>
    <content type="html"><![CDATA[<p>Every developer has their own set of &ldquo;go to tools&rdquo; when it comes to developing applications. Such as the stack, programming tools and libraries that would make specific tasks easier to implement.
In this article I&rsquo;m going to share some of the tools and resources that I usually use in my day to day web development practice.</p>

<h3>LAMP</h3>

<p>Since I&rsquo;m running Ubuntu on my machine, I use the LAMP (Linux, Apache, MySQL, PHP) stack for all of my projects. Linux being the Operating System, Apache as the web server, MySQL for the database and PHP for the programming language.</p>

<h3>Composer</h3>

<p><a href="https://getcomposer.org/">Composer</a> is a package manager for PHP. It handles the installation of various PHP libraries which can be found at <a href="https://packagist.org/">Packagist.org</a>.</p>

<h3>Laravel</h3>

<p>For medium-sized projects (takes about 2-5 months to build), I use the <a href="http://laravel.com/">Laravel</a> framework. And for small-sized (takes about 2 days to 3 weeks to build), I use the <a href="http://lumen.laravel.com/">Lumen</a> framework which is basically a lightweight version of Laravel. I chose it because of the sheer elegance of code that can be written when using the framework. It also comes with a lot features that I need in most of my projects. Such as database migrations, seeding, routing, templating and easy integration with third-party libraries.</p>

<h3>jQuery</h3>

<p>They say jQuery is for sissies, but I don&rsquo;t really mind. As long as the tool works, it doesn&rsquo;t really matter. jQuery is basically the all in one solution for all my JavaScript needs. It makes it easy to select and manipulate the elements in the page, listen to events and make AJAX requests. I haven&rsquo;t done a web project where I didn&rsquo;t need jQuery.</p>

<h3>Sublime Text</h3>

<p>My text-editor of choice, though I admit that I&rsquo;m still using an unregistered copy. So I still see the purchase pop-up every now and then. Though I have plans to buy a license in the future. But as they say &ldquo;someday I&rsquo;ll buy a sublime text license but today isn&rsquo;t that day&rdquo;. What I liked with <a href="http://www.sublimetext.com/">Sublime Text</a> is that it makes writing code faster. You can also install plugins which integrates with other programs such as JSHint or Git.</p>

<h3>Git</h3>

<p>Most developers today are using <a href="http://git-scm.com/">Git</a>, probably because of Github. But that doesn&rsquo;t really matter. Git is an awesome software by itself, even without Github. For the uninitiated, Git is a version control software which allows you to make snapshots of your project so that you can easily revert later or share your changes to your team. Github on the other hand, is a web based Git repository hosting service with lots of other nice features. Go check it out yourself. But the key takeaway is that Github makes collaboration much easier with the set of tools that it provides.</p>

<h3>Cordova</h3>

<p>Ocassionally I get mobile app development projects. This is where <a href="https://cordova.apache.org/">Cordova</a> comes in handy. It basically makes it easier to develop apps for any of the platforms (Android, iOS, Windows, etc.) that it supports by making use of web technologies (HTML, CSS, JavaScript). Access to native device APIs are also provided by making use of plugins.</p>

<h3>Bootstrap</h3>

<p>I admit, I&rsquo;m not a designer and my CSS skills could certainly improve. Making things pretty isn&rsquo;t really my forte. That&rsquo;s why front-end frameworks such as <a href="http://getbootstrap.com/">Bootstrap</a> really helps. It keeps my mind off making things pretty so I can just concentrate on the functionality.</p>

<h3>Chrome/Chromium</h3>

<p>The main browser that I use for testing the web applications that I build. The developer tools is what really makes it shine. It&rsquo;s interface is really intuitive and easy to use. Almost every aspect of your web application can be inspected and tested by using their developer tools.</p>

<h3>Skype</h3>

<p>Since I&rsquo;m mostly working remotely, there&rsquo;s a need for exchanging messages and making calls. Skype helps me with that. It&rsquo;s also cross-platform, so I can install it no matter what machine I&rsquo;m using. Recently they also released <a href="https://web.skype.com/en/">Skype for web</a> which makes things even more easier.</p>

<h3>Bitbucket</h3>

<p><a href="https://bitbucket.org/">Bitbucket</a> is another Git repository hosting service. Well there&rsquo;s already Github, but the thing is you can only have public repositories on Github. Bitbucket on the other hand allows you to have private repositories for free. That&rsquo;s pretty much the only reason why I used Bitbucket. I need my projects to be private so I use it instead of Github.</p>

<h3>Node.js</h3>

<p>If a project calls for real-time functionality such as chat applications, nothing beats <a href="https://nodejs.org/en/">Node.js</a>. It provides an event-driven architecture and a non-blocking I/O API. This allows real-time applications to be built with ease.</p>

<h3>Socket.io</h3>

<p><a href="http://socket.io/">Socket.io</a> is a library that makes it easy to build real-time applications. It&rsquo;s often used in tandem with Node.js.</p>

<h3>Virtualbox</h3>

<p>If a project requires me to test on a different platform and browser such as Internet Explorer or Safari on Windows. I usually use <a href="https://www.virtualbox.org/">Virtualbox</a>. I guess I don&rsquo;t really have much of a choice. Other than Virtualbox, I&rsquo;m not really aware of any other software that can virtualize an OS.</p>

<h3>AWS</h3>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> as the name suggests is a collection of Web Services offered by Amazon. I only use ec2 (elastic compute cloud), s3 (simple storage service) and cloudfront (CDN) though. The cool thing about their web services is that they&rsquo;re tightly integrated with each other. Which means that you can easily use s3 within an ec2 instance without having to do much of the setup. They also provide an API which can be used to programatically upload files to their servers.</p>

<h3>DigitalOcean</h3>

<p>Recently I also started using <a href="https://www.digitalocean.com/">Digitalocean</a> for my personal projects. Mainly because its very affordable (only $5 a month for the lowest tier) and easy to resize (I can upgrade or downgrade any time).</p>

<h3>Carbon</h3>

<p>Carbon is a PHP library for working with dates.</p>

<h3>Moment</h3>

<p>Basically the Carbon equivalent for JavaScript. The nice thing is that you can use it on both the client-side and server-side (node.js).</p>

<h3>Intervention Image</h3>

<p>When there&rsquo;s a need for image processing in a PHP application, I always grab <a href="http://image.intervention.io/">intervention image</a> through Composer. Resizing, cropping, blurring, change orientation, optimizing, name it and intervention image has it. But what hit the jackpot is that it works nicely with Laravel without having to do much setup.</p>

<h3>Twig</h3>

<p>Blade is the default templating engine used by Laravel so I use that without having second thoughts. But whenever I work outside Laravel, I have to use something like <a href="http://twig.sensiolabs.org/">Twig</a> to handle my templating needs.</p>

<h3>Handlebars</h3>

<p>My templating engine of choice when I&rsquo;m using JavaScript.</p>

<h3>Mandrill</h3>

<p>Whenever I need to send out emails from an application, <a href="https://www.mandrill.com/">Mandrill</a> is the tool of choice. Its a no-brainer since Laravel makes it easy to send emails using services such as Mandrill.</p>

<h3>Faker</h3>

<p>As programmers we all love automating things. <a href="https://github.com/fzaninotto/Faker">Faker</a> does exactly that. It generates fake data for you so you don&rsquo;t have to enter it manually through the application that you&rsquo;re building.</p>

<h3>Dropzone</h3>

<p><a href="http://www.dropzonejs.com/">Dropzone</a> is my file upload libary of choice. It&rsquo;s easy to get started using it. But it also makes it easy for developers to customize.</p>

<h3>Stripe</h3>

<p>Whenever a project needs to accept payments from its users, <a href="https://stripe.com/">Stripe</a> is my service of choice. I&rsquo;m not really confident enough that I&rsquo;d be able to implement a payment system which is safe from every hacker. Just the thought of saving the hash of credit card numbers on a database sends shivers to my spine. Stripe takes that fear away. I know the guys at Stripe know their stuff.</p>

<h3>Paypal</h3>

<p>For simple payment needs, <a href="https://www.paypal.com/">Paypal</a> is the tool. And BTW, this is also how I receive payments. It integrates with almost every bank on the planet so you can easily withdraw your money using your bank of choice.</p>

<h3>Twilio</h3>

<p>Whenever there&rsquo;s a need for voice enabled apps or SMS verification, nothing beats <a href="https://www.twilio.com/">Twilio</a>.</p>

<h3>Guzzle</h3>

<p>&ldquo;No man is an island&rdquo;, the same is true with web applications. More often than not, you&rsquo;ll find the need to integrate with third party services. That&rsquo;s where <a href="http://docs.guzzlephp.org/en/latest/">Guzzle</a> comes in, it&rsquo;s a PHP library for making http requests. If the API that you&rsquo;re working on doesn&rsquo;t already come with a library for making requests, then Guzzle is for you.</p>

<h3>thujohn/pdf-l4</h3>

<p>For applications that require printing of reports. <a href="https://github.com/thujohn/pdf-l4">Thujohn&rsquo;s pdf-l4</a> library does it.</p>

<h3>Datatables</h3>

<p>If an application requires searching or paginating through a table of data, <a href="https://www.datatables.net/">datatables</a> does the trick. What&rsquo;s great is that there&rsquo;s also a <a href="https://github.com/Chumper/Datatable">datatable</a> library for Laravel 4 which makes it easy to integrate to a Laravel project.</p>

<h3>Beanstalk</h3>

<p><a href="http://kr.github.io/beanstalkd/">Beanstalk</a> is a queue system. You basically use it for running time-consuming tasks such as sending out emails or processing images. There&rsquo;s also a library called <a href="https://github.com/pda/pheanstalk">Pheanstalk</a> which makes it easy to work with Beanstalk for queueing tasks.</p>

<h3>Elasticsearch</h3>

<p>I use <a href="https://www.elastic.co/">Elasticsearch</a> if there&rsquo;s a need for fast searches. Elasticsearch if a full-text search server that is based on <a href="https://lucene.apache.org/core/">Apache Lucene</a>. It works with</p>

<h3>schickling/laravel-backup</h3>

<p>Any decent developer would implement a database backup and restore functionality for each of the applications that they build. For Laravel developers, the <a href="https://github.com/schickling/laravel-backup">laravel-backup</a> library is one choice. It allows you to easily backup your database on a folder in the server or in an Amazon s3 bucket.</p>

<h3>Cron</h3>

<p>We all know Cron. It&rsquo;s the thing that we use whenever we need to execute something at specific intervals.</p>

<h3>Express</h3>

<p>Express is a framework for Node.js. From their website itself: &ldquo;Express: Fast, unopinionated, minimalist web framework for Node.js&rdquo;. It handles routing and serving of static files. That&rsquo;s all it really does but you can easily install third-party libraries for talking to the database or handling views and you wouldn&rsquo;t have any problem. Its unopinionated so you can do whatever the fuck you want and it won&rsquo;t complain.</p>

<h3>Picnic CSS</h3>

<p>Recently for some of my personal projects, I used <a href="http://www.picnicss.com/">picnic css</a>. Think of it as a lightweight bootstrap. It makes your UI beautiful without all the cruft that usually comes with bootstrap. It&rsquo;s also modularized into a set of plugins. So you can just include the plugins that you need.</p>

<h3>Conclusion</h3>

<p>In this article you&rsquo;ve learned about some of the tools that I usually use in my projects. What about you? What are your &ldquo;go to&rdquo; tools when it comes to developing applications?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get the Logo of Any Company]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company/"/>
    <updated>2015-11-28T12:17:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company</id>
    <content type="html"><![CDATA[<p>In one of my previous projects called <a href="http://wern-ancheta.com/projects/stockswitch/">StockSwitch</a>, I had the need to fetch and utilize the logo of companies that are included in the NYSE, NASDAQ, and AMEX. In this article, I&rsquo;ll be showing you how you can get the logo for any company so that you can use it in your projects.</p>

<p>The best way to get the logo of any company is via Clearbit&rsquo;s logo API. All you have to do is replace the value of <code>{DOMAIN-NAME}</code> with the domain name used by the company that you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://logo.clearbit.com/{DOMAIN-NAME}</span></code></pre></td></tr></table></div></figure>


<p>For example, you want to utilize Google&rsquo;s logo in your project. Simply create a new image tag and link to <code>logo.clearbit.com</code> followed by the domain name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://logo.clearbit.com/google.com&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass in the following optional parameters.</p>

<ul>
<li>size &ndash; the size in pixels of the logo. The highest value I found to be valid is 800px. And the lowest is 5px.</li>
<li>format &ndash; you can pass either <code>png</code> or <code>jpg</code>.</li>
<li>greyscale &ndash; pass in a value of <code>true</code> if you want the logo to be in greyscale.</li>
</ul>


<p>For example, you want the image to be in 50px and the format is png.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://logo.clearbit.com/google.com?size=50&amp;format=png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also save it on your own server so you don&rsquo;t use Clearbit&rsquo;s resources every time the company logos are requested. Here&rsquo;s a sample code on how you might do it in php.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$companies</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;facebook.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;google.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;oracle.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;amazon.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ebay.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;uber.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;twitter.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;github.com&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$companies</span> <span class="k">as</span> <span class="nv">$company</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$url</span> <span class="o">=</span> <span class="s2">&quot;https://logo.clearbit.com/</span><span class="si">{</span><span class="nv">$company</span><span class="si">}</span><span class="s2">?size=150&amp;format=png&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">file_put_contents</span><span class="p">(</span><span class="s1">&#39;logos/&#39;</span> <span class="o">.</span> <span class="nv">$company</span> <span class="o">.</span> <span class="s1">&#39;.png&#39;</span> <span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above gets the contents returned from the clearbit logo URL and then saves it to the <code>logos</code> directory in the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to pokeapi-json]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/21/introduction-to-pokeapi-json/"/>
    <updated>2015-11-21T19:53:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/21/introduction-to-pokeapi-json</id>
    <content type="html"><![CDATA[<p>Welcome to yet another post about a side-project of mine. This time it&rsquo;s a totally useless project. It&rsquo;s called <a href="https://github.com/anchetaWern/pokeapi-json">pokeapi-json</a>. As the name suggests, its the JSON version of the <a href="https://github.com/phalt/pokeapi">pokeapi</a> project. If you check their Github page, the data is basically in csv format. The only real difference is that I&rsquo;m using JSON on my project. Which is pretty much the same way they&rsquo;re serving the data on the <a href="http://pokeapi.co/">pokeapi website</a>. That&rsquo;s really all there is to it to this project. I had fun watching as my hard drive gets filled up by 6000+ Pokemon descriptions from different games. I had fun seeing the cute little Pokemon sprites filling the directory that I specified. Here&rsquo;s a screenshot:</p>

<p><img src="http://wern-ancheta.com/images/posts/pokeapi/pokemon.png" alt="Pokemon sprites" /></p>

<p>Very cute right? There&rsquo;s a sense of achievement just seeing all 718 Pokemon sitting in a directory in your hard drive.</p>

<p>But I&rsquo;m not satisfied with this yet. I&rsquo;m planning on creating my own Pokedex app which has all the Pokemon data one can imagine. Currently there are 2 awesome Pokedex app out there:</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.awestruck.poke">Pokedex &ndash; Dexter</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.brunosousa.pokeinfo">PokeInfo</a></li>
</ul>


<p>I&rsquo;m planning to create something much more awesome.</p>

<p>I&rsquo;ll probably need to scrape the following websites in order to get every possible information about Pokemon.</p>

<ul>
<li><a href="http://pokemondb.net/">PokemonDB.net</a></li>
<li><a href="http://www.serebii.net/">Serebii.net</a></li>
<li><a href="http://bulbapedia.bulbagarden.net/wiki/Main_Page">bulbapedia.bulbagarden.net</a></li>
</ul>


<p>I know it&rsquo;s not going to be easy but I&rsquo;ll try to do it for the love of Pokemon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: How to Setup Virtual Hosts in Ubuntu]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/15/quick-tip-how-to-setup-virtual-hosts-in-ubuntu/"/>
    <updated>2015-11-15T20:14:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/15/quick-tip-how-to-setup-virtual-hosts-in-ubuntu</id>
    <content type="html"><![CDATA[<p>In this quick tip I&rsquo;ll show you how you can setup virtual hosts for Apache in Ubuntu.</p>

<p>The first thing that you need to do is clone the default Apache configuration. In the example below <code>myproject.dev</code> is the virtual host name that you want to use.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/myproject.dev.conf</span></code></pre></td></tr></table></div></figure>


<p>Open the new configuration file and update the values for the <code>ServerName</code>, <code>ServerAlias</code>, and <code>DocumentRoot</code>. Where <code>ServerName</code> is the virtual host name and the <code>ServerAlias</code> is the www version. The <code>DocumentRoot</code> is the absolute path to the directory where your project is stored.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>        ServerName myproject.dev
</span><span class='line'>        ServerAlias www.myproject.dev
</span><span class='line'>
</span><span class='line'>        ServerAdmin wern@localhost
</span><span class='line'>        DocumentRoot /home/wern/www/antares-backend
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, enable the new virtual host configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite myproject.dev</span></code></pre></td></tr></table></div></figure>


<p>Lastly, add it to the hosts file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/hosts</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1       antaresapp.dev
</span><span class='line'>127.0.0.1       www.antaresapp.dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Grade Viewer]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/03/introduction-to-grade-viewer/"/>
    <updated>2015-11-03T13:50:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/03/introduction-to-grade-viewer</id>
    <content type="html"><![CDATA[<p>As a teacher I want to show my students what grades they&rsquo;re getting. And the common tool for recording their scores is a spreadsheet. This would automatically compute their grade based on the scores they got from each of the activities. If you have already worked with a spreadsheet before, you might already know that its hard to present it to another person. Because you have to scroll horizontally in order to view every thing. And since the total score for an activity is located at the top row, so you also have to scroll to the top whenever they want to see the total score.  To put it simply, the eye of the viewer has to move a lot. Not to mention, they will see the grades of their classmates as well. So directly showing the grades in the spreadsheet is really a no go.</p>

<p>Luckily I can actually program things. That&rsquo;s why I built <a href="https://github.com/anchetaWern/gradeviewer">Grade Viewer</a>. This allows me to upload an excel spreadsheet, then specify the range that I want to target.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/new-subject.png" alt="new subject" /></p>

<p>Then I enter the activities done for each component (lecture and laboratory) of the subject.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/activities.png" alt="activities" /></p>

<p>Once that&rsquo;s done (provided I have specified every thing correctly) I can now go to the dashboard and click on the <em>view grades</em> link.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/dashboard.png" alt="dashboard" /></p>

<p>This will list out all the subjects that I&rsquo;ve currently added. From here I can click on the <em>update</em> link to update the excel file and the settings. Or the <em>view</em> link to view the grades.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/subjects.png" alt="subjects" /></p>

<p>Here&rsquo;s what the page for viewing grades looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/grades.png" alt="grades" /></p>

<p>It has a search feature but it can also navigate with previous and next links. Just below the name of the student is their grade for lecture and laboratory.  And below it is the break down. From here, the student can just ask any questions regarding their grades.</p>

<h3>Future Plans</h3>

<p>Nothing really. The project is in a pretty sweet spot right now when it comes to functionality. But just like many of my side projects, the underlying code has a lot of room for improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dates and Times in PHP with Carbon]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon/"/>
    <updated>2015-10-31T17:32:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon</id>
    <content type="html"><![CDATA[<p>When writing PHP applications there&rsquo;s often a need for working with dates and times. In this tutorial, I&rsquo;ll be walking you through Carbon, a simple PHP API extension for the DateTime class. It basically makes working with dates and times a lot more easier. I&rsquo;ve personally used this library on my <a href="https://github.com/anchetaWern/ahead">Ahead</a> project, a Laravel app for scheduling posts to social media sites like Facebook, Twitter and LinkedIn.</p>

<h3>Installation</h3>

<p>To install Carbon, you need to use <a href="https://getcomposer.org/">Composer</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require nesbot/carbon</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>Include the vendor autoload in your file and then use the <code>Carbon</code> class in the <code>Carbon</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Carbon\Carbon</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting the Current Date and Time</h4>

<p>You can get the current date and time using the <code>now</code> method. If you do not specify an argument, it uses the default timezone from your PHP config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">();</span> <span class="c1">//2015-07-26 20:21:20</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use a different timezone, you can pass a <a href="http://php.net/manual/en/timezones.php">valid timezone</a> as the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">(</span><span class="s1">&#39;Asia/Manila&#39;</span><span class="p">);</span> <span class="c1">//2015-07-26 20:21:20</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside from the <code>now</code> method, there&rsquo;s also <code>today</code>, which returns the start of today&rsquo;s date, <code>yesterday</code>, which returns the start of the date yesterday, and <code>tomorrow</code>, which returns the start of the date tomorrow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">today</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">yesterday</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-25 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">tomorrow</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-27 00:00:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Converting to String</h4>

<p>By default, methods in Carbon returns a datetime object. Though its an object, you can directly output it using <code>echo</code> because of the <code>__toString</code> magic method. But if you want to convert it to a string, you can use the <code>toDateString</code> or <code>toDateTimeString</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateString</span><span class="p">();</span> <span class="c1">//2015-07-26</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 20:22:50</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Parsing Dates</h4>

<p>You can also parse dates in all sorts of formats using the <code>parse</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015/03/30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015-03-30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015-03-30 00:10:25&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:10:25</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;today&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;yesterday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-25 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;tomorrow&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-27 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2 days ago&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-24 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+3 days&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-29 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+2 weeks&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-08-09 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+4 months&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-11-26 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;-1 year&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2014-07-26 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;next wednesday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-29 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;last friday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-24 00:00:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Constructing Dates</h4>

<p>You can also construct dates by using individual parts such as the year month and day.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$year</span> <span class="o">=</span> <span class="s1">&#39;2015&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$month</span> <span class="o">=</span> <span class="s1">&#39;04&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$day</span> <span class="o">=</span> <span class="s1">&#39;12&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">createFromDate</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$day</span><span class="p">);</span> <span class="c1">//2015-04-12 20:55:59</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hour</span> <span class="o">=</span> <span class="s1">&#39;02&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$minute</span> <span class="o">=</span> <span class="s1">&#39;15&#39;</span><span class="o">:</span>
</span><span class='line'><span class="nv">$second</span> <span class="o">=</span> <span class="s1">&#39;30&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$day</span><span class="p">,</span> <span class="nv">$hour</span><span class="p">,</span> <span class="nv">$minute</span><span class="p">,</span> <span class="nv">$second</span><span class="p">);</span> <span class="c1">//2015-04-12 02:15:30</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Optionally, you can pass in any valid timezone as the last argument for the <code>create</code> and <code>createFromDate</code> methods.</p>

<h4>Manipulating Dates</h4>

<p>Manipulating dates can be done by using <code>add</code> (to add) or <code>sub</code> (to subtract) followed by the unit of time you want to add or subtract. For example, you want to add a specific number of days to the specific date, you use the <code>addDays</code> method. There&rsquo;s also the <code>modify</code> method which allows you to pass in the modification that you want. It takes the format of <code>+</code> or <code>-</code> followed by the unit value and the unit. So if you want to add a year to the current date, you use <code>+1 year</code>. Check out the examples below to have an idea what else you can do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addDays</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">//2015-08-20 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addWeeks</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//2015-08-16 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addHours</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">//2015-07-27 22:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">subHours</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//2015-07-26 19:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addHours</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">addMinutes</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">//2015-07-26 23:22:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">modify</span><span class="p">(</span><span class="s1">&#39;+15 days&#39;</span><span class="p">);</span> <span class="c1">//2015-08-10 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">modify</span><span class="p">(</span><span class="s1">&#39;-2 days&#39;</span><span class="p">);</span> <span class="c1">//2015-07-24 21:10:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Commonly in PHP apps are international. This means that you need to work with different timezones. Here&rsquo;s how to convert from one timezone to another.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setTimezone</span><span class="p">(</span><span class="s1">&#39;America/Los_Angeles&#39;</span><span class="p">);</span> <span class="c1">//2015-07-26 06:23:48</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Comparing Dates</h4>

<p>You can use the following methods to compare dates in Carbon.</p>

<ul>
<li><code>min</code> &ndash; returns the smaller date.</li>
<li><code>max</code> &ndash; returns the larger date.</li>
<li><code>eq</code> &ndash; check if two dates are the same.</li>
<li><code>gt</code> &ndash; check if the first date is greater than the second date.</li>
<li><code>lt</code> &ndash; check if the first date is less than the second date.</li>
<li><code>gte</code> &ndash; check if the first date is greater than or equal to the second date.</li>
<li><code>lte</code> &ndash; check if the first date is lesser than or equal to the second date.</li>
</ul>


<p>Other helpful methods include <code>isWeekDay</code>, <code>isWeekend</code>, <code>isYesterday</code>, <code>isFuture</code> and <code>isPast</code>.</p>

<h4>Laravel Integration</h4>

<p>If you&rsquo;re on Laravel, you can just add an alias for the Carbon library in the <code>aliases</code> in the <code>app/config/app.php</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&#39;Carbon&#39; =&gt; &#39;Carbon\Carbon&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Carbon library in PHP. Carbon is a really nice and easy way to work with dates in PHP. Be sure to check out the <a href="http://carbon.nesbot.com/docs/">official docs</a> to learn more about it.</p>
]]></content>
  </entry>
  
</feed>
