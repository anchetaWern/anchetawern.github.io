<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-03-01T16:42:41+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Implement Scroll in Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2015/03/01/how-to-implement-scroll-in-laravel/"/>
    <updated>2015-03-01T14:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/03/01/how-to-implement-scroll-in-laravel</id>
    <content type="html"><![CDATA[<p>In this quick tip I&rsquo;ll be showing you how to easily implement infinite scroll in laravel. In the back-end, we will be using laravel&rsquo;s pagination functionality. And in the front-end, we&rsquo;ll be using <a href="https://github.com/infinite-scroll/infinite-scroll">jQuery infinite scroll</a>. You can ahead and download the jquery.infinitescroll.min.js file from that page and save it on your project directory.</p>

<p>First thing that you need to do is return the data that you want to infinitely scroll from the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getNewsPage</span><span class="p">(){</span>
</span><span class='line'>    <span class="nv">$date</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$news</span> <span class="o">=</span> <span class="nx">News</span><span class="o">::</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span> <span class="nv">$date</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">paginate</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$page_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;news&#39;</span> <span class="o">=&gt;</span> <span class="nv">$news</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="nv">$page_data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And then from your view file (<code>news.blade.php</code>) just loop through the items that you wish to output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;news&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;items&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    @foreach($news as $item)
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    @endforeach
</span><span class='line'>    
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to include jquery and jquery.infinitescroll.min.js file before the closing body tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create the javascript file that will call the infinitescroll plugin and add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">loading_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">finishedMsg</span><span class="o">:</span> <span class="s2">&quot;&lt;div class=&#39;end-msg&#39;&gt;Congratulations! You&#39;ve reached the end of the internet&lt;/div&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">msgText</span><span class="o">:</span> <span class="s2">&quot;&lt;div class=&#39;center&#39;&gt;Loading news items...&lt;/div&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">img</span><span class="o">:</span> <span class="s2">&quot;/assets/img/ajax-loader.gif&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#items&#39;</span><span class="p">).</span><span class="nx">infinitescroll</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">loading</span> <span class="o">:</span> <span class="nx">loading_options</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">navSelector</span> <span class="o">:</span> <span class="s2">&quot;#news .pagination&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">nextSelector</span> <span class="o">:</span> <span class="s2">&quot;#news .pagination li.active + li a&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">itemSelector</span> <span class="o">:</span> <span class="s2">&quot;#items li.item&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down. First we wrap everything in a self-executing anonymous function to make sure that the script that were writing won&rsquo;t have a way of messing up with the other scripts in our page, if any. Next, we setup options required by infinite scroll by means of a JavaScript object. Here&rsquo;s a brief description of each:</p>

<ul>
<li><code>finishedMsg</code> &ndash; the html or text that you want to show once the user has reached the last page.</li>
<li><code>msgText</code> &ndash; the text that you want to show while the next page is being loaded from the back-end.</li>
<li><code>img</code> &ndash; the image that you want to show while the next page is being loaded from the back-end. Usually this is a gif animation that indicates that something is happening.</li>
</ul>


<p>Next we call the infinitescroll plugin on the main news wrapper. This takes up an object as its argument. The object contains the following items:</p>

<ul>
<li><code>loading</code> &ndash; the loading options that we have setup earlier.</li>
<li><code>navSelector</code> &ndash; the jquery selector that targets the pagination wrapper. Laravel gives it a class of <code>pagination</code> by default.</li>
<li><code>nextSelector</code> &ndash; the element indicating the next page. Laravel adds the <code>active</code> class on the <code>li</code> representing the current page. So all we need to do is to traverse to the next one by using the <code>+</code> selector and then the anchor element.</li>
<li><code>itemSelector</code> &ndash; an individual item.</li>
</ul>


<h3>Conclusion</h3>

<p>That&rsquo;s it for this quick tip. With the jquery infinite scroll plugin and laravel&rsquo;s pagination functionality, you can implement infinite scroll in your apps with ease.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Stripe API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/02/22/getting-started-with-stripe-api/"/>
    <updated>2015-02-22T16:33:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/02/22/getting-started-with-stripe-api</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Twilio API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/02/22/getting-started-with-twilio-api/"/>
    <updated>2015-02-22T07:42:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/02/22/getting-started-with-twilio-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be walking you through the basics of using the Twilio API in PHP. But before that, what is Twilio? Twilio is a cloud communications company. They offer APIs which developers can use to enable Text Messaging, Voice, VoIP on their apps.</p>

<p>Now that we got the introduction out of the way. Let&rsquo;s get started.</p>

<p>If you don&rsquo;t have an account with Twilio yet now is the time to create one. You can do so from this page: <a href="https://www.twilio.com/try-twilio">Try Twilio</a>. After signing up, Twilio will need to verify you&rsquo;re a human. You can either have them call you or send you a text message containing your verification code. You&rsquo;ll just have to select which country you&rsquo;re in and then your phone number. Twilio already adds the country code as the prefix so you will only have to add your actual phone number. After you have verified your phone number, Twilio assigns you your first phone number.</p>

<p><img src="http://anchetawern.github.io/images/posts/twilio/phone_number.png" alt="twilio phone number" /></p>

<p>After that, Twilio will have you take your phone number for a spin. You can either make a call, send an SMS, receive a call, or receive an SMS.</p>

<p><img src="http://anchetawern.github.io/images/posts/twilio/test-drive.png" alt="twilio test drive" /></p>

<p>Go ahead and try atleast one of those options so you have an idea how it works.</p>

<h3>SMS API</h3>

<p>Twilio&rsquo;s SMS API allows you to:</p>

<ul>
<li><p><strong>Send and receive SMS or MMS</strong> &ndash; when you signup with Twilio, you can purchase a phone number. You can then use this phone number to send text messages or multi-media messages to your users. At the same time, users can also send text messages to that phone number in order to interact with your application. How it works is that when a specific person sends a text message to the phone number that has been assigned to you by Twilio. Twilio makes an HTTP request to the URL you assigned to that phone number. The HTTP request contains the same data that the person sent. You can then use this data to have your app do what the user requested.</p></li>
<li><p><strong>Track SMS Conversations</strong> &ndash; this allows you to track conversations between two phone numbers through the use of HTTP cookies. These HTTP cookies are use to keep a state. Just like when you login to a specific website. Cookies allows you to continue accessing the admin pages as long as you have that cookie around. After being active for some time, the cookie expires automatically. The same idea is used when tracking conversations with Twilio. Each phone number is assigned a cookie, and this cookie is sent along with the text message on every HTTP request made by Twilio.</p></li>
</ul>


<h4>SMS API Hello World</h4>

<p>Now were ready to write some code. First create a <code>composer.json</code> file and add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "twilio/sdk": "dev-master"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This tells composer to require the twilio sdk for PHP. If you don&rsquo;t know what composer is. You can check out <a href="https://getcomposer.org/">getcomposer.org</a> to get started. Once you have saved the file, execute <code>composer install</code> from your terminal to install the twilio sdk.</p>

<p>Next, create a new PHP file then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">//include the twilio sdk</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$sid</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span><span class="p">;</span> <span class="c1">//your twilio account sid number</span>
</span><span class='line'><span class="nv">$token</span> <span class="o">=</span> <span class="s2">&quot;yyy&quot;</span><span class="p">;</span> <span class="c1">//your twilio account token</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$your_twilio_phonenumber</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="c1">//the friendly name of your twilio phone number</span>
</span><span class='line'><span class="nv">$phone_number_to_send_to</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="c1">//the phone number to send the message</span>
</span><span class='line'><span class="nv">$text_to_send</span> <span class="o">=</span> <span class="s1">&#39;Hello world! from twilio&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Services_Twilio</span><span class="p">(</span><span class="nv">$sid</span><span class="p">,</span> <span class="nv">$token</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//send message</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">account</span><span class="o">-&gt;</span><span class="na">messages</span><span class="o">-&gt;</span><span class="na">sendMessage</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$your_twilio_phonenumber</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$phone_number_to_send_to</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$text_to_send</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="na">sid</span><span class="p">;</span> <span class="c1">//the message id</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>From the code above, the first line includes the twilio sdk. This allows us to easily make requests to the Twilio API. Next we declare the sid and token. You can find this on your <a href="https://www.twilio.com/user/account/settings">account settings page</a> under the <strong>API Credentials</strong> section. You can either use the live or the test credentials. The only thing to note is that when using the live credentials, your account is charged by Twilio. But if your account is in trial mode, you can only use the live credentials. Twilio doesn&rsquo;t charge you when your account is in trial mode. But there are <a href="https://www.twilio.com/help/faq/twilio-basics/how-does-twilios-free-trial-work">some restrictions</a>. Going back to the code. Next we declare the twilio phone number. If you don&rsquo;t know what your twilio phone number is, visit the <a href="https://www.twilio.com/user/account/phone-numbers/incoming">numbers</a> page. You&rsquo;ll want to use the friendly name for your number. Next is the phone number where you want to send your message. This can be any phone number from any country supported twilio. Note that only United States and Canada are enabled by default. So you&rsquo;ll have to <a href="https://www.twilio.com/user/account/settings/international/sms">enable sending a message to your country</a> if you don&rsquo;t live in any of those places. Just add a check mark to the country you want to send the message to. Next add the text that you want to send. Then create a new instance of the <code>Services_Twilio</code> class and supply the sid and token that we declared earlier. Finally, send the message using the <code>sendMessage</code> method. This takes up 3 arguments: your twilio phone number, the phone number to send to and the message. This method returns the following data:</p>

<ul>
<li><code>sid</code> &ndash; a uniqued id assigned to the message.</li>
<li><code>date_created</code> &ndash; the date and time that the message was created.</li>
<li><code>date_updated</code> &ndash; the most recent date and time that the message was updated</li>
<li><code>date_sent</code> &ndash; normally this is empty when the request to send a message has just been made. Twilio messages doesn&rsquo;t seem to be sent immediately when the <code>sendMessage</code> method is called (it is queued). Therefore its only natural for this to be empty and only updated when the message is actually sent.</li>
<li><code>to</code> &ndash; the phone number where the message is sent.</li>
<li><code>from</code> &ndash; the twilio phone number that you used for sending the message.</li>
<li><code>body</code> &ndash; the actual text message.</li>
<li><code>status</code> &ndash; the status of the message, normally this has a value of &lsquo;queued&rsquo; right after getting the response from the <code>sendMessage</code> method. It is then updated to &lsquo;sent&rsquo; once the message is actually sent. For inbound messages, the value for this is &lsquo;received&rsquo;. If the message is currently being sent, this will have a value of &lsquo;sending&rsquo;. If the sending failed, it will have &lsquo;failed&rsquo; as the value.</li>
<li><code>num_segments</code> &ndash; the number of segments the message has. Text messages are only limited to 160 characters so your message is divided into 160-character segments. Each segment are then sent separately.</li>
<li><code>num_media</code> &ndash; the number of media items associated with your message.</li>
<li><code>direction</code> &ndash; can have a value of <code>outbound-api</code>, <code>inbound</code>, <code>outbound-call</code>, and <code>outbound-reply</code>. These are basically like the name suggests, <code>outbound-api</code> are the messages you have sent from your app. <code>inbound</code> are the ones that are sent from an actual phone number to your twilio phone number. <code>outbound-call</code> are the messages initiated during a call. And <code>outbound-reply</code> are messages initiated in response to an incoming SMS.</li>
<li><code>api_version</code> &ndash; the twilio api version used when the message was sent.</li>
<li><code>price</code> &ndash; the amount billed for the message.</li>
<li><code>price_unit</code> &ndash; the currency used for the price.</li>
<li><code>error_code</code> &ndash; the error code returned. This will only have a value if the value for <code>status</code> is failed. If you are having an error returned to you, be sure to check out the <a href="https://www.twilio.com/docs/errors/reference">errors reference</a>.</li>
<li><code>uri</code> &ndash; the uri of the resource used for sending the message.</li>
<li><code>subresource_uris</code> &ndash; the sub-resources used in sending the message. For SMS, a possible sub-resource can be the media resource.</li>
</ul>


<h4>Dev Tools</h4>

<p>Before we move on to writing some more code. I&rsquo;d like to do a quick introduction on the dev tools offered by Twilio. Twilio&rsquo;s dev tools includes the following:</p>

<ul>
<li><p><strong>App Monitor</strong> &ndash; allows you to monitor the requests being made to your app. These requests can be an outbound test/call to a specific phone number, or an inbound text/call to your twilio phone number. Basically, every interaction to your app are logged in the app monitor.</p></li>
<li><p><strong>API Explorer</strong> &ndash; allows you to make and explore API requests. This includes the parameters needed for a specific resource and the response that it returns. The good part is that it also includes code samples in different programming languages. Which you can readily copy and paste in order to test in your application. One thing to note when making requests through the API explorer is that you get charged for specific resources. An example of such resource is the resource for sending messages.</p></li>
<li><p><strong>Connect Apps</strong> &ndash; allows you to create a twilio app for the purpose of letting your clients connect to it. This allows you to perform specific actions on behalf of your client. If you&rsquo;ve ever used the Facebook API before, its pretty much the same idea. The only difference is that its your clients twilio account that is connected to your app. This is useful for clients who have their own clients. This allows you to send messages or make calls to the clients of your client on their behalf. This means all the charges are being made to your clients twilio account instead of yours if you choose to.</p></li>
</ul>


<h3>Searching and Buying Phone Numbers</h3>

<p>If your app allows your users to have their own phone numbers. You can also use the twilio API to search for available phone numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$area_code</span> <span class="o">=</span> <span class="mi">201</span><span class="p">;</span> <span class="c1">//only for US and Canada</span>
</span><span class='line'><span class="nv">$search_params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;AreaCode&#39;</span> <span class="o">=&gt;</span> <span class="nv">$area_code</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//make a request to search for available phone numbers on a specific area</span>
</span><span class='line'><span class="nv">$numbers</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">account</span><span class="o">-&gt;</span><span class="na">available_phone_numbers</span><span class="o">-&gt;</span><span class="na">getList</span><span class="p">(</span><span class="s1">&#39;US&#39;</span><span class="p">,</span> <span class="s1">&#39;Local&#39;</span><span class="p">,</span> <span class="nv">$search_params</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$nums</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$numbers</span><span class="o">-&gt;</span><span class="na">available_phone_numbers</span> <span class="k">as</span> <span class="nv">$n</span><span class="p">){</span>
</span><span class='line'>    <span class="nv">$nums</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$n</span><span class="o">-&gt;</span><span class="na">phone_number</span><span class="p">),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$nums</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can supply the following arguments for your search:</p>

<ul>
<li><code>AreaCode</code> &ndash; any valid area code in US or Canada.</li>
<li><code>Contains</code> &ndash; a regular expression for matching the characters you want the phone numbers to have.</li>
<li><code>SmsEnabled</code> &ndash; if sms capabilities are enabled. This can either be true or false.</li>
<li><code>MmsEnabled</code> &ndash; if mms capabilities are enabled. This can either be true or false.</li>
<li><code>VoiceEnabled</code> &ndash; if making and receiving calls is enabled. This can either be true or false.</li>
<li><code>ExcludeAllAddressRequired</code> &ndash; if you want to exclude the phone numbers that require an address or not.</li>
<li><code>ExcludeLocalAddressRequired</code> &ndash; if you want to exclude the phone numbers that require a local address or not.</li>
<li><code>ExcludeForeignAddressRequired</code> &ndash; if you want to exclude the phone numbers that require a foreign address or not.</li>
</ul>


<p>Once your user has selected a number, you can then make a request to buy a phone number:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$phone_number</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;phone_number&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$number</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">account</span><span class="o">-&gt;</span><span class="na">incoming_phone_numbers</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;VoiceUrl&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://yourwebsite.com/greet&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;PhoneNumber&#39;</span> <span class="o">=&gt;</span> <span class="nv">$phone_number</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The request requires two arguments: the <code>VoiceUrl</code>, which is the URL which you want Twilio to make a request to when this specific phone number is called by someone. We&rsquo;ll talk more about this on the TwiML section, which is Twilio&rsquo;s way for interacting with users in a call through a computer voice. The second argument is the <code>PhoneNumber</code>, which is the phone number selected by the user which came from the search results earlier. Note that making a request to purchase a phone number costs money.</p>

<h3>TwiML</h3>

<p>TwiML or the Twilio Markup Language isn&rsquo;t exactly a new markup language created by Twilio. Its basically just plain old XML which you can use to do all kinds of cool stuff when a user calls your twilio phone number. Here are a few examples of awesome stuff you can do with TwiML. Note that these are all performed during a call:</p>

<ul>
<li><strong>Play</strong> &ndash; allows you to play an audio file.</li>
<li><strong>Say</strong> &ndash; allows you to convert text to speech.</li>
<li><strong>Dial</strong> &ndash; dials another phone number that can then be added to the current call.</li>
<li><strong>Record</strong> &ndash; record the voice of the caller.</li>
<li><strong>Sms</strong> &ndash; send a text message.</li>
<li><strong>Gather</strong> &ndash; allows you to gather the users input. Currently inputs are only limited to numbers.</li>
</ul>


<p>Now that you have an idea what you can do with TwiML, lets move on to some practical stuff. Let&rsquo;s build an app that allows the user to input a number and have a different sound played based on the number.</p>

<p>Start by creating a <code>hello.xml</code> file, then add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Response&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Say&gt;</span>Hello! Please enter a number from 1 to 5<span class="nt">&lt;/Say&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Gather</span> <span class="na">numDigits=</span><span class="s">&quot;1&quot;</span> <span class="na">action=</span><span class="s">&quot;/choose.php&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Response&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is allows you to control the response that the user hears when they call your twilio phone number. The first line specifies the xml version and the encoding. The second line is the response wrapper. This allows us to specify the actual response that the user will hear. The first thing that the user will hear is the speech version of the text that we added inside the <code>Say</code> verb. In this case, were asking the user for a single digit number from 1 to 5. Next we use the <code>Gather</code> verb to gather the digit entered by the user. The <code>numDigits</code> attribute allows you to specify the number of digits. This has an added benefit of submitting the response immediately after the number of digits you specified matches the number of digits entered by the user. The digits entered by the user are submitted to the page you specify on the <code>action</code> attribute. In this case its the <code>choose.php</code> file in the same request URL you added to your twilio number. If you don&rsquo;t know how to change the request URL used by your number, then visit the <a href="https://www.twilio.com/user/account/phone-numbers">numbers page</a> and click the number you want to use. That will redirect you to the settings page of that number. From there look for the voice section and then change the request url then click save. This means that if your request url is &lsquo;<a href="http://mywebsite.com">http://mywebsite.com</a>&rsquo; and you specified &lsquo;/choose.php&rsquo; as the action, then you need to have the &lsquo;choose.php&rsquo; file in the root web directory of your website in order for the digits to be submitted properly.</p>

<p>Add the following code to the <code>choose.php</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;content-type: text/xml&quot;</span><span class="p">);</span> <span class="c1">//specify content type to be xml</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$digits</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;Digits&#39;</span><span class="p">];</span> <span class="c1">//the digit inputted by the user in his/her phone</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the array of sounds that we will be playing back to the user</span>
</span><span class='line'><span class="nv">$animals</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;bassethound.wav&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;cat.wav&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;cattle.wav&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;chicken.wav&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;sheep.wav&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?</span><span class="nx">xml</span> <span class="nx">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span> <span class="nx">encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;Response&gt;</span>
</span><span class='line'><span class="x">  &lt;Say&gt;Here is the sound you selected&lt;/Say&gt;</span>
</span><span class='line'><span class="x">  &lt;Play&gt;http://mywebsite.com/sounds/</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$animals</span><span class="p">[</span><span class="nv">$digits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&lt;/Play&gt;</span>
</span><span class='line'><span class="x">&lt;/Response&gt;</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the code above, the first line specifies the content type to be xml. The second line is where we get the digits enterred by the user. Next we declare an array containing the sounds that we want to play. I got these sounds from <a href="http://www.animal-sounds.org/animal-sounds-free-download.html">animal-sounds.org</a>. Next we just set the response starting with a speech saying &lsquo;Here is the sound you selected&rsquo;, then we just play it back using the <code>Play</code> verb.</p>

<h3>Conclusion</h3>

<p>Twilio&rsquo;s API allows you to add SMS and Voice superpowers to your apps at ease. Their documentation, quick start guides can get you up and running pretty quickly. Their code samples include some of the most popular programming languages for the web. Such as PHP, Ruby, Python, Java and .Net. If you need to add SMS and Voice capabilities to your app, there is no doubt that Twilio should be your first choice.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://www.twilio.com/docs/quickstart">Twilio &ndash; Quickstart Docs</a></li>
<li><a href="https://www.twilio.com/docs/api">Twilio &ndash; API Docs</a></li>
<li><a href="https://www.twilio.com/docs/libraries">Twilio &ndash; Helper Libraries</a></li>
<li><a href="https://www.twilio.com/docs/howto">Twilio &ndash; How-tos</a></li>
<li><a href="https://www.twilio.com/docs/errors/reference">Twilio &ndash; Errors Reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Antares]]></title>
    <link href="http://anchetawern.github.io/blog/2015/02/15/introduction-to-antares/"/>
    <updated>2015-02-15T17:05:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/02/15/introduction-to-antares</id>
    <content type="html"><![CDATA[<p>As a developer there&rsquo;s no question as to why we need to <a href="http://programmers.stackexchange.com/questions/161099/why-do-developers-need-to-keep-up-to-date-with-technologies-and-methodologies">keep ourselves updated</a>. And that is why reading blogs is really important. There&rsquo;s no shortage of the most important people to follow on twitter, newsletters, podcasts and screencasts that helps us to keep up to date. But as the years pass the amount of resources that we use to keep ourselves updated tends to grow. This results in a browser window that looks like this:</p>

<p><img src="http://anchetawern.github.io/images/posts/antares/tabs.png" alt="too many tabs" /></p>

<p>Just the act of opening the interesting links in new tabs can take up to 30 minutes or more (I know, I&rsquo;ve been there). All because of the sheer amount of resources that were trying to maintain. I&rsquo;ve been doing that for years, and as my collection of resources grew larger, it only became harder and harder to read all of those things that are seemingly important. That is when I had the idea of creating an app which would still allow me to keep up to date, but will save me the time in opening all those links in a new tab. That is what Antares is all about. Its essentially a news app for developers. It collects content from interesting places such as Hacker News, Github, Designer News, Medium, Readability Top Reads, Slashdot, EchoJS, SidebarIO, and Product Hunt. It also collects all the content linked from popular developer newsletters such as JavaScriptWeekly, HTML5Weekly, PHPWeekly, CSSWeekly, Web Design Weekly and many others. Its basically an all in one tool for keeping up to date. As for me, it also have the effect of just letting go. Because having all those newsletters sent in my email has this mental effect that its something I need to open no matter what. The kind of feeling that its your responsibility to read through all those articles being pointed out in the newsletter. The feeling that you&rsquo;d miss out on something really important if you don&rsquo;t. Antares isn&rsquo;t like that. You can just install it and let it sit there. And you only really open it if you have some free time. The news just keeps on flowing in there but it doesn&rsquo;t make you feel that you&rsquo;ll miss out on one half of your life as a developer if you don&rsquo;t.</p>

<p>For the technical side of things, I used <a href="http://ionicframework.com/">Ionic framework</a> to build the app. Under the hood it uses HTML, CSS and JavaScript. Ionic is tied with Angular.js so there&rsquo;s really not much choice about what JavaScript framework to use. For the back-end I used Laravel to scrape the necessary data from all the relevant resources. It is then stored in a MySQL database. The data (mainly a title and a URL) is then requested via AJAX from the mobile app. Ionic then handles the presentation. To give you an idea, here&rsquo;s a couple of screenshot of how the app looks like:</p>

<p><img src="http://anchetawern.github.io/images/posts/antares/hn.jpg" alt="hacker news" /></p>

<p><img src="http://anchetawern.github.io/images/posts/antares/news.jpg" alt="article" /></p>

<p>As a developer who loves working on the back-end, I didn&rsquo;t really bother customizing the look and feel of the app.</p>

<p>This blog post is getting rather long for an introduction. Here&rsquo;s the <a href="https://play.google.com/store/apps/details?id=com.wern.antares">link to the app on Google Play Store</a>. If you got a Windows Phone, I also have the <code>.xap</code> file which you can use to install Antares. Antares doesn&rsquo;t have a version for apple devices. Mainly because it costs around $99 per year to be included in their developer program. As someone who doesn&rsquo;t really plan to make any money out of this. I think its unwise to pay for that amount. I&rsquo;m already paying $10 per month for the server costs and I paid $25 to put the app in the Google Play Store so I guess that&rsquo;s enough expenses on my part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ToDo List Driven Development]]></title>
    <link href="http://anchetawern.github.io/blog/2015/02/08/todo-list-driven-development/"/>
    <updated>2015-02-08T16:37:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/02/08/todo-list-driven-development</id>
    <content type="html"><![CDATA[<p>In my daily work as a developer I always have this file which I call <code>todo.txt</code>. It contains all the things that I plan to work on, currently working on, and those that I&rsquo;ve already done in the past. They are ordered from the most recent day that I&rsquo;ve worked on the project to the least recent. These todos are stored in their own folders, named after the name of the project. Here&rsquo;s the general format that I follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FEB 7, 2015
</span><span class='line'>
</span><span class='line'>TODO
</span><span class='line'>- list of things that I'll be doing
</span><span class='line'>
</span><span class='line'>DONE
</span><span class='line'>- list of things that I've done
</span><span class='line'>=========================
</span><span class='line'>
</span><span class='line'>FEB 6, 2015</span></code></pre></td></tr></table></div></figure>


<p>This is the first file that I open when I start working. It gives me a quick overview on which things I&rsquo;ve already finished and which things are left undone.</p>

<p>The items in the todo list often represents individual features that I have to work on. If the feature is too big (may take around 2-5 days to implement), I break it down into tiny bits to reduce the mental strain. Because holding one big feature in your short term memory is hard. I want to make my todo list as stupid as possible. So I can focus on writing the code and not needing to hold many details in my head. It would often look like a step by step procedure (algorithm) of sorts. Here&rsquo;s an example from the booking app that I&rsquo;m currently working on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TODO
</span><span class='line'>- add code for scheduling new appointments
</span><span class='line'> - use the combination of page url and service url as basis for selecting the needed data from the database.
</span><span class='line'> - once all the necessary data is in place, use it to get the time settings from the database.
</span><span class='line'> - use the time settings to generate an array that stores all the available times.
</span><span class='line'> - get all the times which has already been used in an appointment
</span><span class='line'> - get the settings on the maximum appointments that can be scheduled per day, the minimum scheduling notice, and the maximum number of days into the future can appointment be scheduled (to prevent scheduling something on year 2099 while its still 2015).
</span><span class='line'> - loop through all the available times. While inside the loop exclude all the times which has already been used in an appointment, also exclude the times based on the settings above.</span></code></pre></td></tr></table></div></figure>


<p>Of course it doesn&rsquo;t end there, but you get the idea. Make every item or in this case sub-item as stupid to implement as possible. If you think it would help to break each sub-item down some more, then do it.</p>

<p>Aside from the features I need to implement, my <code>todo.txt</code> file is where I also put details on the current project that I&rsquo;m working on. As I&rsquo;m primarily using Amazon ec2 instances on my projects, the details that I put on top of the file are the ip address, the domain name assigned to the instance and then the user and password for the database. Yes it would be more secure if I put them on a password manager such as keypass or lastpass but I prefer fast access over it. I just want everything that I need for the job to be in one place.</p>

<p>Lastly, when I&rsquo;m doing research for the project that I&rsquo;m currently working on. I also put in some relevant URLs which I could easily go back to later on once I implement a specific feature. When I find myself going back to access a specific page very often, I just copy the specific content that I need and paste it on the file. Here&rsquo;s a sample snippet, these are the set of commands that I use when building a phonegap app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#build phonegap app
</span><span class='line'>cordova build --release android
</span><span class='line'>
</span><span class='line'>#generate app key
</span><span class='line'>keytool -genkey -v -keystore stockswitch.keystore -alias switch -keyalg RSA -keysize 2048 -validity 10000
</span><span class='line'>
</span><span class='line'>#sign the app with the key
</span><span class='line'>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore stockswitch.keystore CordovaApp-release-unsigned.apk switch
</span><span class='line'>
</span><span class='line'>#build a release version
</span><span class='line'>zipalign -v 4 CordovaApp-release-unsigned.apk stockswitch.apk
</span><span class='line'>
</span><span class='line'>#output the certificate
</span><span class='line'>keytool -exportcert -alias switch -keystore stockswitch.keystore | openssl sha1 -binary | openssl base64</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Having a <code>todo.txt</code> file at my disposal is really helpful in my day to day life as a developer. It helps keep the mental load to the minimum by having all the details that I need all in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Market Yourself as a Developer]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/31/how-to-market-yourself-as-a-developer/"/>
    <updated>2015-01-31T19:04:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/31/how-to-market-yourself-as-a-developer</id>
    <content type="html"><![CDATA[<p>As a developer who mainly do remote work, its important for me to get my name out there. Because that&rsquo;s the only way people would know if I&rsquo;m actually any good or I&rsquo;m just faking it. That&rsquo;s the only way for potential clients to know if I actually have the skills required for the job or the project they wanted to build. In this post I&rsquo;ll be looking into some of the things a developer can do in order to market themselves. I already apply some of these tips as a developer. And some are the ones that I wish to do in the future.</p>

<h3>Blogging</h3>

<p>Start a blog where you document all the things that you&rsquo;re learning with regards to your craft as a developer. If you&rsquo;re a web developer go ahead and publish articles on PHP, Python, Ruby or Java. Front-end guy? Then blog about HTML, CSS or JavaScript. Angular, Backbone, or Ember if you&rsquo;re using that. Do you do some hybrid app development? Then do an article on Ionic or Titanium. Developing with Wordpress? Then write something about that cool Wordpress theme or plugin you have released recently. Worked with some cool API on your day job? Then tell the world about it. You get the idea. Whatever your niche is, try to come up with a specific topic and then write about it. You don&rsquo;t have to be 100% accurate about everything you write. It doesn&rsquo;t have to be 100% correct all the time. Its your personal blog after all.</p>

<p>Okay so why a blog? Because that&rsquo;s the easiest way you can prove to someone that you have worked with a specific technology in the past. And that you&rsquo;re good enough to be able to write an article about it. Remember that popular quote that goes something like:</p>

<blockquote><p>If you can&#8217;t explain it to a six year old, you don&#8217;t really know it yourself.</p></blockquote>


<p></p>

<p>That&rsquo;s what blogging does. You know that you have understood a topic when you write about it. And it makes sense when someone other than yourself reads it.</p>

<p>If you are more of a talker than a writer. Or you don&rsquo;t really like the idea of staring at your computer for hours constructing a blog post then you can do alternatives such as podcasting or screencasting. When I was new to programming this guy named Bucky Roberts was the authority. He&rsquo;s like the programming god or something. His youtube channel <a href="https://www.youtube.com/user/thenewboston">thenewboston</a> is full of screencasts related to programming. Android, IOS, Python, PHP, HTML5, C++, C#, Objective C. You name it he&rsquo;s got it. And there&rsquo;s this other guy (I don&rsquo;t know what his name is) who is basically the authority when it comes to PHP mainly because of the amount of PHP screencasts that he has put out there in his youtube channel <a href="https://www.youtube.com/user/phpacademy">phpacademy</a>.</p>

<p>If you want to start screencasting, all you need is a recording software, decent microphones (if it doesn&rsquo;t sound terrible when you play back your recording then its decent), and a webcam (optional if you don&rsquo;t want people to see your face). For Windows there&rsquo;s <a href="http://sourceforge.net/projects/camstudio/">CamStudio</a>. For Ubuntu, there&rsquo;s <a href="https://apps.ubuntu.com/cat/applications/gtk-recordmydesktop/">RecordMyDesktop</a>. And for Mac there&rsquo;s <a href="http://www.movavi.com/mac-screen-capture">Screen Capture</a>.</p>

<p>So how is all this gonna get me clients? Simple. It allows you to put yourself out there. And when you&rsquo;re out there in the internet with all your free awesome content. People are bound to find you at some point when they google a specific problem they are having or they&rsquo;re just browsing around looking for something.</p>

<p>After some time (maybe a year or two), you can now try writing for some of the most popular blogs or websites in your field. If you&rsquo;re a web developer, you can write for <a href="http://www.sitepoint.com/">Sitepoint</a>, <a href="http://code.tutsplus.com/">Tutsplus</a>, or <a href="http://www.smashingmagazine.com/">Smashing Magazine</a>. There are some others which are also popular but those are the only one&rsquo;s I can name on top of my head. The clear benefit is being able to reach a wider audience. Sitepoint and Tutsplus also pay their authors once an article is published. I&rsquo;m an <a href="http://www.sitepoint.com/author/wancheta/">author in the Sitepoint&rsquo;s PHP Channel</a> myself so I can vouch for that.</p>

<h3>Social Media</h3>

<p>An important part of having an online presence is social media. Have a new post on your blog? Tweet it. Liked a blog post by a fellow developer? Like it or +1 it. Heck comment on it too. Just make sure its a useful comment. You can also post links to the articles that you&rsquo;ve read regarding development. You can use <a href="https://bufferapp.com/">buffer</a> or <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">ahead</a> (shameless plug) for that.</p>

<h3>Side Projects</h3>

<p>As developers normally we would work for a company or a client. So we don&rsquo;t really get to show people the code that we write on a day to day basis. And that is why its important to have side projects and put them in Github or Bitbucket. That&rsquo;s the only way for potential clients or bosses to have a clear picture of your coding skills. Just like with blogging, podcasting or screencasting your code doesn&rsquo;t have to sparkle like a diamond. It doesn&rsquo;t have to be perfect. If you are early on in your career as a developer, all those best practices like applying design patterns in your code, SOLID, YAGNI or DRY or whatever acronym wouldn&rsquo;t be there. It doesn&rsquo;t matter if you have applied TDD or BDD in your project. It doesn&rsquo;t matter if you didn&rsquo;t use LESS, SASS, Stylus, Bower, Grunt or Gulp. It doesn&rsquo;t matter if you didn&rsquo;t use browserify or requireJS. We all get to use some of those at some point in our career. What&rsquo;s important is you put your code out there. Who knows it might help someone and then they give you money through flattr or paypal. You can also point out your Github or Bitbucket profile when applying for jobs or showing off what you can do.</p>

<h3>Networking</h3>

<p>Last but not the least is networking. Its the one thing that I ought to be doing but never really done. But now I&rsquo;m trying my best to do some networking by joining the <a href="https://hashtagfreelance.slack.com">freelance team at slack</a>, its a place where fellow freelancers can have a nice chat online and maybe schedule meetings offline. I also try to accept most of the invites on <a href="ph.linkedin.com/in/wernr">my linkedin account</a>. And then try to be helpful by providing testimonials for the people that I personally know. Twitter is good for this as well. For example, you read an article which you found helpful. You can say thanks to the person who wrote the article through your Twitter account. Follow the person. And hopefully they will respond and that can start a conversation. Lastly, always try to be helpful. If someone comments on your blog, try to respond. If someone adds you on Skype asking questions about that article that you&rsquo;ve written or that side-project you released on Github, accept them as a contact then respond to them. Who knows they might be the one bringing you a cool awesome project in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plans for 2015]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/10/plans-for-2015/"/>
    <updated>2015-01-10T10:56:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/10/plans-for-2015</id>
    <content type="html"><![CDATA[<p>Its 2015 and I think the best way to start one&rsquo;s year right is to lay out some plans. This 2015 I want to be more ambitious with the side projects that I do, I want to make my head hurt a little more. Because that&rsquo;s the only way to grow as a developer. I also want to read more books, watch more video courses and write more this 2015.</p>

<h3>Side Projects</h3>

<ul>
<li><strong>Anime API</strong> &ndash; I&rsquo;m a really big fan of anime. I watch anime everyday. That&rsquo;s why I&rsquo;m thinking of creating an API about anime. It will be something like <a href="http://www.imdb.com/">IMDb</a> but for anime. It will include information such as the title, genre, cover image, plot, air dates, and links to relevant websites.</li>
<li><strong>Pokemon API</strong> &ndash; Pokemon is one of the things I grew up with. Starting from the Red Version on Gameboy Color up to the Pokemon X Version on 3DS. There&rsquo;s already an existing <a href="http://pokeapi.co">Pokemon API</a> which is really good, except the fact that its lacking some data. Specifically on base stats, in-game trainers, type defenses, moves learned and pokedex entries. I want an API which has all of the information you need to know about Pokemon.</li>
<li><strong>Antares</strong> &ndash; At the later part of 2014 I published this <a href="https://play.google.com/store/apps/details?id=com.wern.antares">app on google play</a>. Its a news reader for developers. Currently its only getting news from various newsletters that I subscribe to, hacker news, medium, readability and other developer websites. I&rsquo;m planning to add machine learning capabilities to it so it will only recommend links that are more interesting to the current user.</li>
<li><strong>Ahead</strong> &ndash; As I&rsquo;ve introduced before, <a href="http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead/">ahead</a> is an app for scheduling posts to be published later to twitter, facebook or linkedin. I&rsquo;m thinking of adding integration to delicious, readability or instapaper. Or maybe get some data from the antares api and have it recommend some links for the user to share.</li>
<li><strong>vid-master</strong> &ndash; This is a project I started 5 months ago in the company that I&rsquo;m currently working for. Its a laravel app for creating video websites, this allows the user to import videos from youtube or vimeo and then use those as the content for the video website. Unfortunately this got abandoned so I asked my boss if I could just open-source it. And he agreed, that&rsquo;s why its now on my <a href="https://github.com/anchetaWern/vid-master">Github</a> waiting for updates.</li>
</ul>


<p>Those are my ideas for now. I&rsquo;ve already mentioned some of the projects that I&rsquo;m planning to do in my <a href="http://anchetawern.github.io/blog/2014/11/22/brain-dump-0/">brain dump post</a>.</p>

<h3>Code Quality</h3>

<p>As developers were in a constant pressure of releasing stuff out in the open. And that is true for me as well. Most of the time I sacrifice quality for the sake of speed. So that I can release things fast. That is why this 2015 I&rsquo;ll try to write more quality code whenever possible. I won&rsquo;t proceed with the first solution that comes to mind because that&rsquo;s often the hacky solution which results in dirty code. I&rsquo;ll also try to learn about design patterns, inversion of control, dependency injection, and leverage existing libraries more.</p>

<h3>Articles</h3>

<p>Aside from the ones I already mentioned on <a href="http://anchetawern.github.io/blog/2014/11/22/brain-dump-0/">brain dump</a>. I&rsquo;m thinking of doing the following as well:</p>

<ul>
<li><strong>Laravel Series</strong> &ndash; as I&rsquo;m mainly using laravel for most of my projects I think its necessary for me to write about it to further enforce what I&rsquo;ve learned and to share it to others.</li>
<li><strong>Shopify Series</strong> &ndash; I want to learn more about Shopify since I&rsquo;ve been getting lots of Shopify projects lately. Because of this article that I&rsquo;ve written 2 years ago about <a href="http://wern-ancheta.com/blog/2013/11/09/getting-started-with-shopify-app-development/">getting started with shopify app development</a>. I had to decline all of those projects since I&rsquo;m not confident enough on my Shopify Development skills. And so I think that doing more Shopify is the only solution. And I&rsquo;ll document everything that I learn on this blog in a form of a series of articles discussing about various Shopify topics.</li>
<li><strong>Prediction IO Series</strong> &ndash; just like Shopify, I&rsquo;m also getting a lot of projects concerning Prediction IO. So I also want to dive deeper so that I can feel confident enough about taking projects.</li>
</ul>


<h3>Screencast</h3>

<p>I had this plan for many years now but I never really got to put it into action. Hopefully this year I will get to create a new youtube channel such as <a href="https://www.youtube.com/user/thenewboston">thenewboston</a> or <a href="https://www.youtube.com/user/phpacademy">phpacademy</a> to share the things that I&rsquo;ve learned by means of a video. I think I really need this to exercise my verbal communication skills because as a remote and sole developer I don&rsquo;t really need to talk that much to do my job.</p>

<h3>Health</h3>

<p>Two years ago I wrote this blog post on <a href="http://anchetawern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer/">how to stay healthy as a developer</a>. As you might already know being a developer or any other job that requires you to sit all day long is bad for the health. That&rsquo;s why this 2015 I want to be a healthier person by means of walking. Walking is a very good physical activity that requires less effort. I recently bought a <a href="https://www.fitbit.com/">fitbit flex</a> which allows me to track the number of steps I&rsquo;ve made and the calories I&rsquo;ve burned. Hopefully this will help me to walk more and keep me motivated.</p>

<h3>Time Management</h3>

<p>I watch a lot of anime (6 to 14 titles per season), I waste a lot of time reading articles that I think matters, I like to keep up with a lot of things which ends up consuming most of my free time (Twitter, Facebook, Hacker News, Podcasts). This 2015 I want to be more picky about the things I watch and read so that I can have more time to do what&rsquo;s really important.</p>

<p>I think that pretty much sums it up. Looking forward for a productive and bountiful 2015.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Code]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/04/why-i-code/"/>
    <updated>2015-01-04T08:50:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/04/why-i-code</id>
    <content type="html"><![CDATA[<p>Why I code? I&rsquo;ve been thinking about this lately. Why is it that I love coding? What is it about coding that keeps me from doing it? What makes it so special? How do I maintain my love for coding even if its so frustrating most of the time. When I was younger I was into drawing. Cartoon characters, robots, sceneries, abstract art, and anything else that picked my interest. Not a week would past that I haven&rsquo;t added a new drawing in my collection. What kept me drawing back then was the sheer joy of adding a new drawing in my collection. It was sort of addictive. I couldn&rsquo;t wait to fill that old magazine with my drawings. In the end I ended up filling up about 8 old magazines with about 50 drawings each. Why did I stopped? It was around college days that I stopped drawing entirely. Mainly because of how busy it was and I really wanted to concentrate on my studies. College was my very first introduction to coding. The first programming language that I&rsquo;ve learned was c++. I easily picked up coding at first because we were just assigning variables and outputting strings. But as we dive deeper into adding actual logic in the programs that we wrote in our class, that&rsquo;s when my head started to hurt. I remember spending about 3 hours on our first project without making any progress. That was the dark ages when I didn&rsquo;t know how to ask Google for answers. Back then I never thought I&rsquo;d be doing coding as a primary source of work. I thought it was too difficult. Maybe I&rsquo;ll just do animation and stuff. But hey, Computer Programming was a major subject that I needed to pass. So it just came naturally that I needed to do something about it. That was when I started to take some of my free time and use it to practice writing some code. I took some of the exercises that we were having and tried to write it from scratch without looking at any of the notes. Once I&rsquo;ve successfully implemented it, I added some features. That was also when my Googling skills started to improve, as I needed some useful answers to the problems that I was having. Then I also discovered something that will change my life forever. Stackoverflow. I joined Stackoverflow in hopes that it will provide me some answers to the problems that I was having. Before I knew it, I have already asked about a hundred questions. Most of them with some useful answers from the community. Some were marked as a duplicate question, some were marked as non-useful or out of scope. Either way the comments and answers were really useful. Sometimes even the comments are enough.</p>

<p>Over time I got better at coding. I started to feel confident about my coding skills. I started believing that I could actually do this for a job. As I started to know more about programming and gain more experience. I realized just how much I still don&rsquo;t know. That&rsquo;s the time when I started my very first blog which I would write about some of the things that I&rsquo;ve learned in my coding adventures. At first I was writing about some VB.Net CRUD things. Because that was what they were teaching at school. I also wrote about some Java stuff when it was taught. Then came Web Development. HTML, CSS, JavaScript, PHP and MySQL. And I taught to myself. Dude! this is pretty sweet! I could write a program and have it used by many people as long as they&rsquo;re connected to the internet. That&rsquo;s when we were introduced to w3schools and htmlgoodies. These websites quickly became my best friend. They were my number one source of web stuff for a long time. But then came w3fools. Which made me realize that w3schools actually sucks. I started using MDN as my primary reference for web stuff as w3fools recommended.</p>

<p>Fast-forward to the present. I am now calling myself a web developer. Specifically a full-stack developer. Responsible for almost everything that&rsquo;s needed to release a whole website out in the open. I&rsquo;m a web developer for about 2 years now. Mainly doing some remote work. And sometimes freelancing on the side. And that leads us to the original question. Why I code? That&rsquo;s mainly because it gives you the ability to reach thousands of people and make their lives easier through the use of the app that you&rsquo;ve written. Its the joy of creating something out of nothing. The challenges that you encounter as you try to build your app. That rewarding feeling that you get when you finally implemented that feature which made your brain explode. Or that feeling that you got when you finally solved that bug that&rsquo;s been haunting you for 10 hours. Its also about the excitement that you feel whenever there&rsquo;s a shiny new toy that comes out. The shiny new toy can be any library, framework or programming language that was released recently. Finally, I code because I want to leave something to the world that will prove my existence. That I have onced lived and created this useful website or app that has been useful to many people. I&rsquo;m still far from that realization though. Like I said earlier, my side projects mainly solve a specific problem that I&rsquo;m having. And the projects that I&rsquo;m getting from the company I&rsquo;m currently working for are targeted only for a specific group of people and country. At most there will only be hundreds of people who will be able to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Year-End Review]]></title>
    <link href="http://anchetawern.github.io/blog/2014/12/29/year-end-review/"/>
    <updated>2014-12-29T17:44:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/12/29/year-end-review</id>
    <content type="html"><![CDATA[<p>This has been a very good and productive year. Lots of articles written, podcasts listened to, articles and books read, company and client projects, side-projects, travels, video games played, anime series and movies, video tutorials and talks watched. In this blog post I&rsquo;ll try to recollect some of those.</p>

<h3>Articles Written</h3>

<p>I&rsquo;m not going to list out every article I&rsquo;ve written on this blog for this year. We have the <a href="http://wern-ancheta.com/blog/archives/">archives</a> for that. So here are the articles that I consider the best from 2014. These are based from the number of responses I got from both the commenting system and social media:</p>

<ul>
<li><a href="http://wern-ancheta.com/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization/">A Whirlwind Tour of Web Developer Tools: Virtualization</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities/">A Whirlwind Tour of Web Developer Tools: Command Line Utilities</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice/">Being a dark matter developer must be nice</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">A Whirlwind Tour of Web Developer Tools: Build Tools</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/07/13/how-i-work-with-clients/">How I work with Clients</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/08/10/using-datatables-with-laravel/">Using Datatables with Laravel</a></li>
<li><a href="http://wern-ancheta.com/blog/2014/10/25/always-scratch-your-developer-itch/">Always scratch your developer itch</a></li>
</ul>


<p>I have also started writing for Sitepoint&rsquo;s PHP Channel this year. Here are some of the articles I&rsquo;ve written:</p>

<ul>
<li><a href="http://www.sitepoint.com/database-versioning-dbv/">Database Versioning with DBV</a></li>
<li><a href="http://www.sitepoint.com/automate-php-phake-introduction/">Automate PHP with Phake</a></li>
<li><a href="http://www.sitepoint.com/create-movie-recommendation-app-prediction-io-setup/">Create a Movie Recommendation app with Prediction.IO</a></li>
<li><a href="http://www.sitepoint.com/getting-started-medoo-examples-use/">Getting Started with Medoo</a></li>
</ul>


<p>If you want to check out some of my other articles on Sitepoint, please visit <a href="http://www.sitepoint.com/author/wancheta/">my author page</a>.</p>

<h3>Podcasts Listened To</h3>

<h3>Articles Read</h3>

<p>There&rsquo;s a gazillion of them. To give you an idea how much I articles I&rsquo;ve read this year, here&rsquo;s a screenshot of session buddy, a chrome extension that I&rsquo;m using for saving sets of tabs.</p>

<p><img src="http://anchetawern.github.io/images/posts/2014_yearend_review/sessions.png" alt="sessions" /></p>

<h3>Books Read</h3>

<p>Ok I was kidding when I said I read lots of books this year. Actually I finished one. That is <a href="http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555">Thinking Fast and Slow by Daniel Kahneman</a>. I tend to read 2 to 3 books at a time, so I&rsquo;m halfway through <a href="http://www.amazon.com/This-Will-Make-You-Smarter/dp/0062109391">This Will Make You Smarter: New Scientific Concepts to Improve Your Thinking by John Brockman</a>. And recently I&rsquo;ve started reading <a href="http://www.amazon.com/Optimism-Bias-Irrationally-Positive-Brain/dp/0307473511">Optimism Bias by Tali Sharot</a>.</p>

<h3>Company and Client Projects</h3>

<p>I&rsquo;m really thankful for having a great boss who always gives me some nice and cool projects to work on. This year I worked on a total of 7 company projects. 1 of those was from the previous company that I worked for. I joined my current company in late March this year so there&rsquo;s that 1 leftover project. Here are some of the company projects that I&rsquo;m most proud of:</p>

<ul>
<li><a href="http://wern-ancheta.com/projects/wpdonations">WP-Donations</a></li>
<li><a href="http://wern-ancheta.com/projects/vmonial">Vmonial</a></li>
<li><a href="http://wern-ancheta.com/projects/blink">Blink</a></li>
<li><a href="http://wern-ancheta.com/projects/stockswitch">StockSwitch</a></li>
<li><a href="http://wern-ancheta.com/projects/stockswitch-mobile">StockSwitch Mobile</a></li>
</ul>


<p>As for the client project, I don&rsquo;t actively look for them and even if I get one, I usually reject it because of lack of experience on the technologies to be used and overall lack of interest. There&rsquo;s only one project that got through the tight screening, and that is the <a href="http://wern-ancheta.com/projects/esa/">ebay store automator</a>.</p>

<h3>Side-projects</h3>

<p>There&rsquo;s an abundance of side-projects this year. I usually do these projects to automate some of the tasks that I usually do by hand, or to get my hands dirty on a specific technology I&rsquo;ve never worked with before. Here are some of those:</p>

<ul>
<li><a href="https://github.com/anchetaWern/octo-views">octo-views</a></li>
<li><a href="https://github.com/anchetaWern/octo-iframe">octo-iframe</a></li>
<li><a href="https://github.com/anchetaWern/laravel-bootstrap-starter">laravel bootstrap starter</a></li>
<li><a href="https://github.com/anchetaWern/octo-wysiwyg">octo-wysiwyg</a></li>
<li><a href="https://github.com/anchetaWern/jekyll-contact">jekyll-contact</a></li>
<li><a href="https://github.com/anchetaWern/ahead">Ahead</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.wern.antares">Antares</a></li>
</ul>


<h3>Travels</h3>

<p>I recently got a car so I naturally got exposed more exposure to the outside world as an excuse for getting some driving experience. Here are some of the places I&rsquo;ve been to this year. I&rsquo;ve mostly visited towns inside the same province where I live:</p>

<ul>
<li>Botanical Garden, San Fernando City, La Union</li>
<li>Intake Dam, Sudipen, La Union</li>
<li>Bahay na Bato, Luna, La Union</li>
<li>Occalong Falls, Luna, La Union</li>
<li>Callao Caves, Penablanca, Cagayan</li>
<li>Aparri, Cagayan</li>
<li>Basilica Minore of Our Lady of Piat, Piat, Cagayan</li>
<li>Baluarte, Vigan City, Ilocos Sur</li>
<li>Pindangan Ruins, San Fernando City, La Union</li>
<li>Pugo Adventure, Pugo, La Union</li>
<li>Basilica Minore of Our Lady of Charity, Agoo, La Union</li>
<li>Namacpacan Church, Luna, La Union</li>
<li>Balay Anito Falls, Santol, La Union</li>
</ul>


<h3>Video Games</h3>

<p>Not really a lot. I just played a bunch of Pokemon on my Nintendo DS Lite. These days I barely even touch it since I&rsquo;ve already finished all the Pokemon games available for DS. That&rsquo;s why I&rsquo;m planning on selling it to buy the 3DS which apparently have some pretty badass Pokemon Games in Full 3D.</p>

<h3>Anime Series</h3>

<p>I&rsquo;m a big anime fan, and I&rsquo;m probably watching more than what I should be watching. At most around 40 anime series per year. But here are the only ones that I can recommend:</p>

<ul>
<li>Parasyte</li>
<li>Hamatora</li>
<li>Haikyu</li>
<li>Amagi Brilliant Park</li>
<li>Hunter x Hunter (2011 Remake)</li>
<li>Free!</li>
<li>Noragami</li>
<li>Terra Formars</li>
<li>Nanatsu no Taizai</li>
<li>Yowamushi Pedal</li>
<li>Tokyo Ghoul</li>
<li>Shingeki no Bahamut</li>
<li>Garo: The Animation</li>
<li>Terror in Resonance</li>
<li>Captain Earth</li>
<li>Log Horizon</li>
<li>Sword Art Online (Season 2)</li>
<li>Chunibyo</li>
<li>Chaika &ndash; The Coffin Princess</li>
<li>World Trigger</li>
<li>Barakamon</li>
<li>Brynhildr in the Darkness</li>
<li>Kagerou Project</li>
<li>Psycho Pass (Season 2)</li>
<li>Aldnoah.Zero</li>
<li>Akatsuki no Yona</li>
<li>Akame Ga Kill</li>
</ul>


<h3>Movies</h3>

<p>Lots of good movies this year but here&rsquo;s the best:</p>

<ul>
<li>Dawn of the Planet of the Apes</li>
<li>Captain America: Winter Soldier</li>
<li>X-men: Days of Future Past</li>
<li>Lucy</li>
<li>Divergent</li>
<li>Cloverfield</li>
</ul>


<h3>Talks</h3>

<p>I don&rsquo;t really go to conferences so I only watched talks from all over the world via Youtube. I&rsquo;ve watched a lot of them this year but I&rsquo;ll only pick this one talk:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=ctwEcZC_mmI">Our Web Development Workflow is Completely Broken</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brain Dump 0]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/22/brain-dump-0/"/>
    <updated>2014-11-22T19:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/22/brain-dump-0</id>
    <content type="html"><![CDATA[<p>Welcome to the first issue of brain dump. Brain dump is my attempt on putting the things that are always at the back of my mind into writing. Everything has its limits, and that includes the brain. Brain dump is my way of freeing up some space in my brain in hopes that I can use it on something else.</p>

<h3>Things I want to learn</h3>

<ul>
<li>Meteor.js</li>
<li>Design Patterns in PHP and JavaScript</li>
<li>Behavior Driven Development in PHP: Codeception</li>
<li>JavaScript Unit Testing</li>
<li>PostgreSQL</li>
<li>Ember.js</li>
<li>Python</li>
<li>Django</li>
<li>Ruby</li>
<li>Ruby on Rails</li>
<li>SEO</li>
<li>Web Semantics</li>
<li>How to program Arduino or Raspberry Pi</li>
<li>ARIA</li>
<li>Canvas</li>
<li>SVG</li>
<li>Agile Development</li>
<li>Unit Testing</li>
<li>Regression Testing</li>
</ul>


<h3>Books I want to read</h3>

<ul>
<li>How to Win Friends and Influence People</li>
<li>Strangers to Ourselves</li>
<li>The Willpower Instinct: How Self-Control Works</li>
<li>You Are Not So Smart</li>
<li>Sway: The Irresistible Pull of Irrational Behavior</li>
<li>Mindfulness</li>
<li>The Optimism Bias</li>
<li>The Social Animal</li>
<li>The Honest Truth About Dishonesty: How We Lie to Everyone</li>
<li>Yes! (50 Scientifically Proven Ways to be Persuasive)</li>
<li>The Design of Everyday Things</li>
<li>The Paradox of Choice: Why More is Less</li>
<li>The Compass of Pleasure</li>
<li>The Lucifer Effect: Understanding How Good People Turn Evil</li>
<li>The Pragmatic Programmer</li>
<li>Clean Code</li>
<li>Predictably Irrational</li>
<li>Social Engineer: The Art of Human Hacking</li>
<li>Made to Stick: Why Some Ideas Survive and Others Die</li>
<li>Head First Design Patterns</li>
<li>Refactoring &ndash; Improving the design of existing code</li>
<li>The Passionate Programmer</li>
<li>Ship it!</li>
<li>What Makes Your Brain Happy (and Why You Should Do the Opposite)</li>
<li>Don&rsquo;t Make Me Think</li>
<li>Incognito: The Secret Lives of the Brain</li>
<li>The Power of Habit (Why We Do What We Do)</li>
<li>The Productive Programmer</li>
<li>The Art of Choosing</li>
<li>Mistakes Were Made (But Not By Me)</li>
<li>Priceless</li>
<li>Switch: How to Change Things When Change is Hard</li>
<li>Writing Solid Code</li>
<li>Practices of an Agile Developer</li>
<li>Stumbling on Happiness</li>
<li>Man&rsquo;s Search for Meaning</li>
</ul>


<h3>Video Courses I want to watch</h3>

<ul>
<li>Codeschool &ndash; JavaScript Best Practices</li>
<li>Codeschool &ndash; Mastering Github</li>
<li>Codeschool &ndash; Design Fundamentals</li>
<li>Udemy &ndash; Life&rsquo;s Little Secrets</li>
<li>Udemy &ndash; Improve Your Mental Well Being</li>
<li>Udemy &ndash; Freelance Jumpstart</li>
<li>Udemy &ndash; Sauce of Great Writing</li>
<li>Udemy &ndash; Become a Super learner</li>
<li>Tutsplus &ndash; Automated Testing with PHP</li>
<li>Tutsplus &ndash; Artisan Commands and You</li>
<li>Tutsplus- Custom Interactive Maps with Google Maps API</li>
<li>Tutsplus &ndash; Canvas Essentials</li>
<li>Tutsplus &ndash; SVG for Web Design</li>
<li>Tutsplus &ndash; Django Unchained</li>
<li>Tutsplus &ndash; SVG Uncovered</li>
<li>Lynda &ndash; Web Semantics</li>
</ul>


<h3>Projects I want to build</h3>

<ul>
<li>Wordpress Donations Plugin &ndash; can accept bitcoins, paypal, stripe</li>
<li>Newsletter Subscription for Octopress &ndash; using Mailchimp API</li>
<li>Gilium &ndash; similar to hacker news reader; mobile app for aggregating and suggesting content</li>
<li>Dropshipster &ndash; a web application for easy dropshipping</li>
<li>Vacationr &ndash; vacation planner app + social network</li>
</ul>


<h3>Things I want to write</h3>

<ul>
<li>My web development workflow</li>
<li>My mobile development workflow</li>
<li>Getting Started Guides

<ul>
<li>Yahoo Finance API</li>
<li>Ionic</li>
<li>Shopify Theme Development</li>
<li>Twilio</li>
<li>Youtube API</li>
<li>Vimeo API</li>
<li>Facebook API</li>
<li>Twitter API</li>
<li>Linkedin API</li>
<li>Stripe API</li>
</ul>
</li>
<li>A Whirlwind Tour of Web Developer Tools

<ul>
<li>Linting</li>
<li>Testing</li>
<li>Pre-processors</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous &ndash; tools not mentioned in any of the above, but still useful</li>
</ul>
</li>
</ul>


<h3>Articles I want to read</h3>

<p>There&rsquo;s bazzilion of them. It would take forever to write it here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RabbitMQ in PHP]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php/"/>
    <updated>2014-11-16T15:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php</id>
    <content type="html"><![CDATA[<blockquote><p>This article was originally published at Binpress:<br/>http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164</p></blockquote>


<p>In this tutorial I&rsquo;m going to walk you through how you can use RabbitMQ in PHP. But first what is RabbitMQ? RabbitMQ is a message broker software. It acts as a middleman between a producer and a consumer. Producer being the data that we want to pass, and consumer being the entity that we want to pass it to. RabbitMQ uses a queue, you can think of it as a mailbox where you drop your letters. RabbitMQ then takes the letters and delivers it to its destination.</p>

<h3>Installing RabbitMQ</h3>

<p>In Ubuntu and other debian based operating system you can install RabbitMQ by executing the following commands from your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "deb http://www.rabbitmq.com/debian/ testing main"  | sudo tee  /etc/apt/sources.list.d/rabbitmq.list &gt; /dev/null
</span><span class='line'>sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
</span><span class='line'>sudo apt-key add rabbitmq-signing-key-public.asc
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install rabbitmq-server -y
</span><span class='line'>sudo service rabbitmq-server start
</span><span class='line'>sudo rabbitmq-plugins enable rabbitmq_management
</span><span class='line'>sudo service rabbitmq-server restart</span></code></pre></td></tr></table></div></figure>


<p>What the first command does is to append the rabbitmq source to the software sources list. Next we download the rabbitmq signing key using <code>wget</code>. Then add the key to Ubuntu. Next we call <code>apt-get update</code> to update the software sources list. Next we install the RabbitMQ server, start it then enable RabbitMQ management plugin. This provides an HTTP-based API management for monitoring your RabbitMQ server. Finally we restart the RabbitMQ server so that changes will take effect.
The default username and password is <code>guest</code>. And the default port in which it runs is <code>5672</code>.</p>

<p>If you&rsquo;re on another operating system, you can find how to install RabbitMQ for your specific operating system here: <a href="http://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a>.</p>

<h3>Working with RabbitMQ</h3>

<p>Once you&rsquo;re done installing RabbitMQ, we can now install the AMQP library for PHP. This implements the AMQP (Advanced Messaging Queue Protocol) protocol. As the name suggests it is a protocol used for messaging.
Start by creating a new directory, this is where we will put all the files for testing RabbitMQ. Next create a composer.json file and add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>      "videlalvaro/php-amqplib": "2.2.*"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Next, open up your terminal and <code>cd</code> into the directory you created earlier then execute <code>composer install</code> to install the AMQP library.</p>

<p>Before we move on, lets also install <a href="http://swiftmailer.org/">Swiftmailer</a>. You can do that by executing the following command from your terminal. This also adds an entry to Swiftmailer to your composer.json:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require swiftmailer/swiftmailer @stable</span></code></pre></td></tr></table></div></figure>


<p>We will be using Swiftmailer for the sample app that were going to create. What we will do is create an app that will send emails for our users. Normally emails takes a few seconds before it is sent, adding an attachment to the email also adds to that time. In the real world we don&rsquo;t really want our users to wait. What we want to do is make them believe that we have already sent the email for them by outputting to the screen that their message has been sent.
This is where RabbitMQ comes in. We will use it as some sort of a mailbox in which multiple users can just drop their messages in. RabbitMQ will then take care of sending the messages in the background.</p>

<h4>Sending Messages</h4>

<p>First lets create the form to be used for sending emails. This will accept the name and email address of the sender, the email address of the receiver and then the subject and message. Name the file <code>form.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cp">if(!empty($_GET[&#39;sent&#39;])){</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    Your message was sent!
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;mailer.php&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;from&quot;</span><span class="nt">&gt;</span>From<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;from&quot;</span> <span class="na">id=</span><span class="s">&quot;from&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;from_email&quot;</span><span class="nt">&gt;</span>From Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;from_email&quot;</span> <span class="na">id=</span><span class="s">&quot;from_email&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;to_email&quot;</span><span class="nt">&gt;</span>To Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;to_email&quot;</span> <span class="na">id=</span><span class="s">&quot;to_email&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;subject&quot;</span><span class="nt">&gt;</span>Subject<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;subject&quot;</span> <span class="na">id=</span><span class="s">&quot;subject&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>Message<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">id=</span><span class="s">&quot;message&quot;</span> <span class="na">cols=</span><span class="s">&quot;30&quot;</span> <span class="na">rows=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Send<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create the file which will push the message into the queue. Name the file <code>sender.php</code>.
Require the <code>autoload.php</code> file so that our dependencies will be automatically loaded by PHP. Then use the <code>AMQPConnection</code> and <code>AMQPMessage</code> from the AMQP library. <code>AMQPConnection</code> allows us to create a new connection to the RabbitMQ server and <code>AMQPMessage</code> allows us to create messages that we can push to the queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Connection\AMQPConnection</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Message\AMQPMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPConnection</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5672</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPMessage</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;delivery_mode&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_publish</span><span class="p">(</span><span class="nv">$msg</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;email_queue&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: form.php?sent=true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, first we create a new connection by creating a new instance of the <code>AMQPConnection</code> class. This requires the following arguments:</p>

<ul>
<li><strong>host</strong> &ndash; the host in which the RabbitMQ server is running. In this case we&rsquo;ve installed RabbitMQ on the same computer we are running the script in. So it should be <code>localhost</code>. Note that in the real world we install RabbitMQ on a another server, different from the one were using to serve our websites. So instead of <code>localhost</code> we use the public ip address of that server.</li>
<li><strong>port</strong> &ndash; the port in which the RabbitMQ server is running.</li>
<li><strong>user</strong> &ndash; the username to use for logging in to the server. By default the username is set to <code>guest</code>.</li>
<li><strong>password</strong> &ndash; the password of the user. By default the password is set to <code>guest</code>.</li>
</ul>


<p>Next we create a channel. We can do that by calling the <code>channel()</code> method from the connection that we have just declared.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare the queue to be used by calling the  <code>queue_declare</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>queue_declare</code> method takes up the following arguments:</p>

<ul>
<li><strong>queue name</strong> &ndash; a name that you want to use for the queue, you can supply anything for this.</li>
<li><strong>passive</strong> &ndash; a boolean value for specifying whether to check for an existing exchange.</li>
<li><strong>durable</strong> &ndash; a boolean value for specifying whether the RabbitMQ holds on to a queue when the server crashes.</li>
<li><strong>exclusive</strong> &ndash; a boolean value for specifying whether the queue is used by only one connection.</li>
<li><strong>auto-delete</strong> &ndash; a boolean value for specifying whether the queue is deleted when the last subscriber unsubscribes.</li>
</ul>


<p>Next we convert the POST data that we receive from the form to a JSON string. We can only pass strings as a message so we&rsquo;ll have to convert this later on into an array on the receiver&rsquo;s end.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we create a new message. This accepts 2 arguments: the data and an array of options. For the array of options we specify the <code>delivery_mode</code> to 2 which means that the message is persistent. This means that it isn&rsquo;t lost when the server crashes or an error occurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPMessage</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;delivery_mode&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we publish the message by calling the <code>basic_publish()</code> method on the channel. This accepts 3 arguments: the message, the exchange and the name of the queue. If you&rsquo;re wondering why we set the value of exchange to an empty string, that&rsquo;s because we don&rsquo;t really need it. The exchange is commonly used for pub-sub patterns. What were using here is just basic publish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_publish</span><span class="p">(</span><span class="nv">$msg</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;email_queue&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we just redirect the user to the form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: form.php?sent=true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Receiving Messages</h4>

<p>Now were ready to write the code that will receive the messages sent by users. Name the file <code>receiver.php</code>. Here&rsquo;s the full contents of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PhpAmqpLib\Connection\AMQPConnection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AMQPConnection</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5672</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">,</span> <span class="s1">&#39;guest&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">channel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">queue_declare</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39; * Waiting for messages. To exit press CTRL+C&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message received&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$from</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$from_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from_email&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$to_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;to_email&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$subject</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$transporter</span> <span class="o">=</span> <span class="nx">Swift_SmtpTransport</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;smtp.gmail.com&#39;</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUsername</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_EMAIL&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_PASSWORD&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$mailer</span> <span class="o">=</span> <span class="nx">Swift_Mailer</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setSubject</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$from_email</span> <span class="o">=&gt;</span> <span class="nv">$from</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$to_email</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message was sent&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;channel&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">basic_ack</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;delivery_tag&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_qos</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">basic_consume</span><span class="p">(</span><span class="s1">&#39;email_queue&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">callbacks</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, the first 5 lines of code are basically the same as the one we have on the <code>sender.php</code> file. Then we just output a message saying how we can stop the file from running. We need to run this file from the terminal so to stop it we just hit <code>CTRL + C</code>.</p>

<p>Next we declare a named function. This will be used for processing the message that we passed from the sender. The first thing it does is output that the message was received. Then we use <code>json_decode()</code> to convert the JSON string back to an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot; * Message received&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we extract the data and assign them to each of their own variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$from</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$from_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;from_email&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$to_email</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;to_email&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$subject</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;message&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new transporter to be used by Swiftmailer. This allows us to use a gmail account for sending emails. Declaring a new instance accepts 3 arguments: the host, port and the encryption. Then we set the username and password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$transporter</span> <span class="o">=</span> <span class="nx">Swift_SmtpTransport</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;smtp.gmail.com&#39;</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setUsername</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_EMAIL&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="s1">&#39;YOUR_GMAIL_PASSWORD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new mailer instance, and supplying the transporter as an argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mailer</span> <span class="o">=</span> <span class="nx">Swift_Mailer</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a new message, this also takes up the transporter as its argument. We then set the subject, from field, to field, and body of the message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transporter</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setSubject</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$from_email</span> <span class="o">=&gt;</span> <span class="nv">$from</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$to_email</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we send the message and output that the message was sent. The last line basically tells RabbitMQ that the sending of the message has indeed been successful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot; * Message was sent&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;channel&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">basic_ack</span><span class="p">(</span><span class="nv">$msg</span><span class="o">-&gt;</span><span class="na">delivery_info</span><span class="p">[</span><span class="s1">&#39;delivery_tag&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Running the program</h4>

<p>You can now run the receiver by going to your terminal and executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php receiver.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once its running, go to your browser and access the <code>sender.php</code> file. Enter the details of your message and click on send. You&rsquo;re instantly greeted by a &lsquo;Your message was sent!&rsquo; text but if you immediately check your email account its not there yet. If its not there then the queue is still processing it. Check the output displayed on the terminal window where you executed the receiver. You should see a &lsquo;Message was sent&rsquo; output if the email was already sent.</p>

<h3>Conclusion</h3>

<p>RabbitMQ is a nice way for implementing messaging applications such as the one we created in this tutorial. We have barely scratch the surface with this tutorial. I recommend you check out the <a href="http://www.rabbitmq.com/getstarted.html">getting started guides</a> and the <a href="http://www.rabbitmq.com/documentation.html">documentation</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Christmas Wishlist 2014]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/08/christmas-wishlist-2014/"/>
    <updated>2014-11-08T10:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/08/christmas-wishlist-2014</id>
    <content type="html"><![CDATA[<h3>13-inch MacBook Pro with Retina display</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/macbookpro.jpg" alt="macbook pro" /></p>

<p>I have always wanted a Macbook Pro since birth. But due to its priciness I never got myself to buy one.</p>

<p>I&rsquo;d like to stick with the following hardware:</p>

<ul>
<li><strong>Processor</strong>: 3.0GHz Dual-core Intel Core i7</li>
<li><strong>Memory</strong>: 8GB 1600MHz DDR3L SDRAM</li>
<li><strong>Storage</strong>: 512GB PCIe-based Flash Storage</li>
</ul>


<h3>Google Nexus 5</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/google_nexus5.jpg" alt="Google Nexus 5" /></p>

<p>Not really a Google fanboy, I&rsquo;m just more curious about a smartphone made by Google rather than an Apple&rsquo;s iPhone or Samsung&rsquo;s Galaxy.</p>

<h3>PS Vita</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/ps_vita.jpg" alt="sony ps vita" /></p>

<p>I&rsquo;ve always been a fan of game consoles from Sony and their games are really good. Here are just some of the titles that I&rsquo;ve enjoyed playing on their PSP game console:</p>

<ul>
<li>Patapon &ndash; that&rsquo;s Patapon 1, 2 and 3</li>
<li>God Eater</li>
<li>Final Fantasy VII: Crisis Core</li>
<li>Harvest Moon &ndash; boy &amp; girl, innocent life and hero of the leaf valley</li>
<li>Ratchet and Clank</li>
<li>Naruto Ultimate Ninja Heroes &ndash; that&rsquo;s 1, 2 and 3</li>
<li>GTA: Vice City</li>
<li>Ratchet and Clank</li>
<li>Secret Agent Clank</li>
<li>Valhalla Knights</li>
</ul>


<h3>Nintendo 3ds</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/3ds.jpg" alt="Nintendo 3ds" /></p>

<p>To be honest I only really want this game console because of Pokemon. Nintendo 3ds have revolutionize the Pokemon gameplay in this console. There&rsquo;s a bunch of new stuff, and the best thing is that its 3D. So the Pokemon games created for this console won&rsquo;t really look like the Pokemon games created for Nintendo DS or Gameboy.</p>

<h3>Fitbit Flex</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/fitbit.jpg" alt="Fitbit" /></p>

<p>Fitbit is an all-in-one tracker for the body. With it you can do the following:</p>

<ul>
<li>track steps, distance and calories burned</li>
<li>monitor how long and well you sleep</li>
<li>silent wake alarm</li>
<li>logs food consumption, weight changes</li>
</ul>


<h3>Bose QuietComfort 25</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/bose.jpg" alt="Bose Noise Cancelling Headphones" /></p>

<p>I&rsquo;ve always wanted a noise cancelling headphones that I can use while working. Based on my research Bose is the best thing out there.</p>

<h3>Olympus ME-52W Noise Canceling Microphone</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/olympus_mic.jpg" alt="olympus microphone" /></p>

<p>Screencasting has always been on my TODO list. As a developer I wanted to create a Youtube Channel where I record screencasts of things I&rsquo;ve learned. The only thing that&rsquo;s stopping me is the not-so-quality sound recorder that comes with my laptop.</p>

<h3>Seagate Backup Plus 5TB Desktop External Hard Drive</h3>

<p><img src="http://anchetawern.github.io/images/posts/christmas_wishlist_2014/seagate.jpg" alt="seagate external hard drive" /></p>

<p>Last thing on this list is this 5TB External Hard Drive from Seagate. I download a lot of stuff from the internet to prepare for events where there is no internet and I have nothing to do on my computer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always scratch your developer itch]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch/"/>
    <updated>2014-10-25T07:31:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch</id>
    <content type="html"><![CDATA[<p>As developers, no matter how busy we are with our lives, its important for us to always scratch our developer itches every now and then. What I mean by itches are the things that you want to do as a developer. Be it working on a side-project that you&rsquo;ve been wanting to do for months, playing with a new technology, library or a programming language. Or reading an in-depth article about a new programming technique. Or watching a video tutorial about a framework that you&rsquo;ve been wanting to learn. Or watching recorded talks from developer conferences all over the world. Or writing an article about a cool technique you&rsquo;ve discovered recently. And other things that you always have at the back of your mind but never really got to do because of lack of time.</p>

<p>Lack of time is always the reason we give to ourselves. But time is not really the problem. We can always make time for something if we really love to do it. Yes we also have lives to live. But we also need to give priority to the things that matter to us as a developer. As a developers, we have the responsibility for continuous learning. To improve our craft for the better. And this is what it means to scratch your developer itch. If you have it, you&rsquo;ll always find time to scratch it no matter how busy you may be.</p>

<p>On the contrary, we also have lives to live. Nothing is more important than our families and our lives as actual people. So giving time to that is our priority as a human being. After all life is not all about work. Life is about living it in the best way possible. And that is through spending quality time with our loved one&rsquo;s.</p>

<p>In conclusion, its really all about balance. If you can&rsquo;t find time every weekend to scratch your own developer itch, then maybe do it once or twice a month. Maybe 4-8 hours twice a month doing a side project is a good start. You can also go to work early and read up on blogs before and after the alloted time for work. Listen to podcasts while commuting. Most podcasts provide download links to each episode which you can save into your mp3 player of smartphone. Watching a 5-minute video tutorial just before going to bed. Every bit of time counts. It doesn&rsquo;t matter how little or how much, what&rsquo;s important is to give time to scratch our developer itches whenever we can. If you do, you&rsquo;ll be a happier developer. Its like the feeling you get when you were finally able to get what you&rsquo;ve been wanting to buy for a long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Sleep]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/18/on-sleep/"/>
    <updated>2014-10-18T20:26:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/18/on-sleep</id>
    <content type="html"><![CDATA[<p>As developers we tend to not give much priority to sleep. Most of the time its due to a lot of responsibilities: work, family, and side-projects. And oftentimes we even bring in our todo list in our mind when we go to bed.
As a developer myself, I tend to get less sleep than what&rsquo;s required. Sometimes not enough to fully function and be productive during the day. In this blog post I&rsquo;m going to share some of the things I&rsquo;ve learned about sleep.</p>

<h3>Stages of Sleep</h3>

<p>There are actually stages to sleep, its not just being awake or asleep. It is important that we understand this concept because its the core of what sleep is all about.</p>

<ol>
<li><strong>Stage 1</strong> &ndash; also called light sleep. This is where we drift in and out of sleep.</li>
<li><strong>Stage 2</strong> &ndash; heart rate slows down and body temperature starts decreasing in preparation for deep sleep.</li>
<li><strong>Stage 3</strong> &ndash; breathing becomes slower, blood pressure begins to drop, muscles becomes relaxed, cell growth and restoration occurs.</li>
<li><strong>Stage 4</strong> &ndash; slow brain waves are produced.</li>
<li><strong>REM</strong> &ndash; Rapid Eye Movement sleep. This is where dreams usually occur. The body becomes immobile. Energy is provided to the brain and body.</li>
</ol>


<h3>Factors Affecting Sleep</h3>

<p>There are 5 factors which affects sleep:</p>

<ul>
<li>Light</li>
<li>Consistency</li>
<li>Activeness</li>
<li>Environment</li>
<li>Consumption</li>
</ul>


<h4>Light</h4>

<p>Light affects the production of melatonin, a sleep hormone. Ample exposure to light during the day, and minimal exposure during the night 1-2 hours before sleep is recommended. The best light source is sunlight in the morning around 6-8 AM. For rainy days you can use light boxes. The main idea is that exposure to light helps produce serotonin, a neurotransmitter which affects sleep.</p>

<p>Earlier I&rsquo;ve said that light exposure should be minimized during the night. But we haven&rsquo;t really defined what light is. Light is not just the fluorescent light, its also the light which is emmitted by electronic devices such as laptops, tablets and smartphones. And if its not already obvious, the light which comes from a television is also light. As a developer I want to maximize the amount of time I spend doing something productive. And that almost always means staring at the computer screen until I actually go to bed. This is not good for sleep as it decreases melatonin production. A good alternative is to install <a href="https://justgetflux.com/">flux</a>. What it does is adjust the color temperature to adapt to the time of the day. This effectively reduces the bluelight which is bad for sleep. If you&rsquo;re using a tablet or smartphone at night, simply look for similar apps. <a href="https://play.google.com/store/apps/details?id=jp.ne.hardyinfinity.bluelightfilter.free&amp;hl=en">Blue light filter</a> is a good one for android phones.</p>

<h4>Consistency</h4>

<p>Our bodies love consistency. The idea is that you should always sleep and wake at the same time. Our bodies have something like an internal clock. And if you&rsquo;re consistent with your sleep schedule, you almost always wake up or feel sleepy at the same time of the day. You wouldn&rsquo;t even need an alarm clock to wake you up if you&rsquo;re consistent.</p>

<h4>Activeness</h4>

<p>Regular exercise is important. As developers, were basically one of the people with the most sedentary job. Our brains and fingers are the only part of the body that is moving. So to get good sleep we must make it a habit to have exercise of around 20-30 minutes a day.
Quality sleep is all about temperature oscillation. The idea is that the higher the temperature our body reaches during the day, the lower it gets during the night. And the lower the temperature means more deep sleep.
Take note that exercise a few hours before sleep is bad as it makes you active. Personally I prefer exercising in the morning as it completely removes the possibility of exercising too near before bed time. And it hits 2 birds with one stone, as I also get some morning sunlight while exercising.
Jogging, cycling and running are good types of exercise.</p>

<h4>Environment</h4>

<p>The environment also affects sleep. The temperature should neither be too hot or too cold. Around 18-23 degree celsius is a good baseline. Turning on the AC is also good. It effectively lowers the room temperature and also blocks out outside noises because of its white noise. Its a no-brainer that to get quality sleep you must always sleep somewhere where you&rsquo;re comfortable.
Sleeping position affects the quality of sleep as well, the general rule is to always sleep in a position in which you are comfortable. But its always a good idea to avoid sleeping on your stomach, as it reduces the amount of oxygen that goes to your lungs.</p>

<h4>Consumption</h4>

<p>What we eat affects our sleep as well. Here are some foods which is good and bad for sleep.</p>

<h5>Foods to consume</h5>

<ul>
<li>Cherries</li>
<li>Milk</li>
<li>Jasmine Rice</li>
<li>Banana</li>
<li>Sweet Potato</li>
<li>Turkey</li>
<li>Valerian Tea</li>
<li>Walnuts</li>
<li>Almonds</li>
<li>Cheese and Crackers</li>
<li>Lettuce</li>
<li>Tuna</li>
<li>Garlic</li>
<li>Chamomile Tea</li>
<li>Honey</li>
<li>Shrimp</li>
</ul>


<p>Basically anything else which can help produce melatonin. Or foods which has sedative properties or natural muscle relaxant.</p>

<h5>Foods to avoid</h5>

<ul>
<li>Alcohol</li>
<li>Fat</li>
<li>Dark Chocolate</li>
<li>Coffee</li>
<li>Soda</li>
<li>Spices</li>
<li>Chicken</li>
<li>Celery</li>
<li>Ice Cream</li>
</ul>


<p>Avoid anything that is high on fat content or caffeine. Its best if you can avoid caffeine entirely as it stays on your body for long periods of time once consumed. Also avoid diuretics, a subtance which promotes the production of urine.</p>

<p>The general consumption rule is don&rsquo;t eat too close to bed time. Eating around 2-4 hours before sleep is a good idea. 2 hours for light meals, 4 hours for heavy meals (dinner buffet).
Another important thing is to stay hydrated, 8-10 glasses (8 ounces) of water is recommended. You can definitely consume more if you&rsquo;re an athletic type or you sweat a lot. Always remember to not drink too much near bed time to avoid waking up to go to the bathroom. As a rule, avoid drinking too much water 1-2 hours before sleep. You can consume in small amounts (half a glass) if you want.</p>

<h5>Sleep Supplements</h5>

<p>Sleep supplements helps you fall asleep easier. Here are some sleep supplements which you can try if you&rsquo;re having trouble falling asleep:</p>

<ul>
<li>Valerian</li>
<li>Melatonin</li>
<li>Magnesium</li>
<li>Theanine</li>
<li>5-HTP</li>
<li>Antihistamines</li>
<li>Anti-depressants</li>
</ul>


<p>You can look for these supplements on Amazon or Google. Just be sure to consult your doctor before taking any of these supplements. Because some might negatively affect an existing condition that you already have.</p>

<p>As a general rule, sleep supplements should be avoided and should only be taken when you really can&rsquo;t sleep. They are just short-term fix, and they can leave chemicals in your body which can take around a week to fully expel. These chemicals might make you feel sleepy during the day which is not good for productivity.</p>

<h3>Napping</h3>

<p>You can nap around 20-30 minutes to gain a boost of productivity and avoid feeling tired or sleepy during the day. The best time to nap is around 1pm after lunch.</p>

<h3>Sleep Tracking</h3>

<p>If you want to have an idea how much sleep do you get per night. You can buy a sleep tracking device. Currently there are two brands which dominates this market: Jawbone and Fitbit. Just search for those on Amazon and pick one that feels right for you.
These devices gives you a detailed look on how much sleep you get. That includes all stages of sleep that I&rsquo;ve mentioned earlier. Its basically a wearable device (wristband) which you can then connect to an app in your smartphone.</p>

<h3>Sleep Disorders</h3>

<p>There are lots of sleep disorder out there but I&rsquo;m only going to walk through these two: Insomnia and Sleep State Misperception.</p>

<h4>Insomnia</h4>

<p>Insomnia is a sleep disorder characterized by difficulty or inability to fall asleep. It can be either primary or secondary insomnia.</p>

<ul>
<li><strong>Primary insomnia</strong> &ndash; means that your insomnia isn&rsquo;t caused by any existing medical condition.</li>
<li><strong>Secondary insomnia</strong> &ndash; means that your insomnia is a result of an existing medical condition such as asthma.</li>
</ul>


<p>If you believe you have an insomnia, its better to consult it to a doctor. A psychiatrist can help in most cases. Because oftentimes what&rsquo;s causing you to not be able to sleep is only in the mind.
If a psychiatrist cannot help you, then look for a sleep specialist.</p>

<h4>Sleep State Misperception</h4>

<p>Sleep State Misperception is the inability to perceive sleep from wakefulness. People with this condition may report having only slept for a few hours but in fact they have slept more than that.</p>

<h3>Tips and tricks on falling asleep faster</h3>

<p>Finally here are some tips and tricks on how to fall asleep faster:</p>

<ul>
<li>Exercise in morning. Brisk walking, jogging or running will do. If you have a bicycle you can also use that.</li>
<li>Take a warm bath before going to bed.</li>
<li>Read a boring book.</li>
<li>Use a todo list, don&rsquo;t try to hold things in your brain too much. As a developer, I always have things I want to do. Be it playing around a new technology, a library or a programming language. Or watching video tutorials and recorded talks from conferences all over the world. Or finally start a side-project I&rsquo;ve been wanting to do for months. Or read an article about what&rsquo;s new in the world of web development. Or write an article for my blog. The list is endless. The idea of a todo list is to put as much things outside of your brain as possible. This way you don&rsquo;t have to think about it or maintain it on your brain like a file that&rsquo;s saved in a filesystem in your computer.</li>
<li>Get into a journaling habit. A bullet list of all the things you&rsquo;ve accomplished that day will make you feel at ease and awesome about yourself.</li>
<li>Picture yourself as dead tired.</li>
<li>Relax your mind. Imagine a beautiful and relaxing scenery such as the beach or mountain top. Basically anything that you find peaceful.</li>
<li>Use air-conditioning to lower the room temperature. A cool environment will make you fall asleep faster.</li>
<li>Turn off all the lights. If you can go pitch black or near pitch black do it.</li>
<li>Hypnotize yourself. Imagine a pendulum swinging in front of your eyes back and forth.</li>
<li>Listen to relaxing music. Look for soft piano pieces by mozart and put it into your phone or mp3 player.</li>
<li>Get out of bed if you really can&rsquo;t sleep. If you still can&rsquo;t sleep 30 minutes after going to bed then its best to get out and do something that would occupy your mind. Like watching TV or reading a book. Just go back to bed once you feel sleepy again.</li>
<li>Change position. Put your pillow to where your feet is currently pointing.</li>
<li>Take some deep breaths. Inhale then count up to four then expel it around 8 counts. Then repeat again until you feel relaxed.</li>
<li>Listen to a sleep hypnosis podcast.</li>
<li>Replay all the things you did in the morning in your head.</li>
<li>Stretch like a cat, curl your toes, or rub your belly. All of this somehow triggers us to yawn, which signals our bodies that hey its now time to fall asleep.</li>
<li>Don&rsquo;t watch the clock when you can&rsquo;t sleep. This will only make it worse as it makes you more anxious and pressured to fall asleep faster. Forcing yourself to sleep is no good. Just remember that it will to you eventually.</li>
</ul>


<h3>Resources</h3>

<ul>
<li><a href="http://sleepfoundation.org/how-sleep-works/what-happens-when-you-sleep">What happens when you sleep</a></li>
<li><a href="http://www.webmd.com/sleep-disorders/features/sleep-position-and-sleep-quality">The link between sleep position and sleep quality</a></li>
<li><a href="http://www.rd.com/slideshows/foods-that-help-you-sleep/">Foods that help you sleep</a></li>
<li><a href="http://www.thebetterhealthstore.com/Newsletter/030510_Top-5-Sleep-Supplements_08.html">Sleep Supplements</a></li>
<li><a href="https://www.bulletproofexec.com/sleep-hacking-part-3-falling-asleep-fast-with-biochemistry/">Sleep Hacking</a></li>
<li><a href="http://www.webmd.com/sleep-disorders/guide/insomnia-symptoms-and-causes">Insomnia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Driving]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/12/on-driving/"/>
    <updated>2014-10-12T18:24:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/12/on-driving</id>
    <content type="html"><![CDATA[<p>Its been a month since I started to learn how to drive. In this blog post I want to touch a bit on what I learned about driving so far.</p>

<h3>Before Starting</h3>

<ul>
<li>Check the wheels if they are on good condition.</li>
<li>Make sure that both side mirrors are set.</li>
<li>Make sure that the hand brake isn&rsquo;t currently active. In most cars all you have to do is hold the brake, press the button with your thumb and then push the lever down.</li>
<li>Just before you use the ignition key to turn on the engine, fully hold down the foot brake, set the car from park (P) to drive (D), then slowly release the foot brake.</li>
<li>Always remember to start slow. Apply as little pressure to the gas pedal as possible.</li>
</ul>


<h3>Overtaking</h3>

<ul>
<li>Don&rsquo;t try to overtake if you&rsquo;re not sure if there&rsquo;s an approaching vehicle on the other lane.</li>
<li>Do not try to overtake on curves.</li>
<li>Do not try to overtake inside a town or a city.</li>
<li>Before trying to overtake a vehicle, check both side mirrors if there&rsquo;s any other vehicle also trying to overtake.</li>
<li>Use the left signal light before trying to overtake to let others know that you&rsquo;re trying to overtake. Once you&rsquo;ve succeeded, use the right signal light and then go back to your lane.</li>
<li>When another vehicle tries to overtake yours, slow down a bit.</li>
</ul>


<h3>Emergencies</h3>

<ul>
<li>When an ambulance or police car is approaching or coming from your back, keep up with your normal speed and move the car to the side of the road to let them pass.</li>
</ul>


<h3>Curves</h3>

<ul>
<li>Slow down before approaching curves to avoid possible collision.</li>
</ul>


<h3>Intersections</h3>

<ul>
<li>Always slow down before approaching intersections. Around 20-30 kph. This is to make sure you don&rsquo;t collide with other vehicles. You can never really know what approaches you in intersections so slow down.</li>
</ul>


<h3>U-turn</h3>

<ul>
<li>When going from one lane to the other make sure that u-turn is allowed.</li>
<li>If you want to give yourself more space, park your car on the side of the road first then when the road is clear, maneuver the wheel to the left. Most of the time you&rsquo;ll have to turn the wheel to the left until its limit. If it isn&rsquo;t enough, stop the car with the foot brake and then use reverse mode to move the car backwards a bit. Use the foot brake again and then turn the car to drive mode and turn the wheel to the left as much as its needed. Just before the car is completely facing in the right direction, turn the wheel to the right until its in its neutral position. Most wheels in modern cars actually go back to neutral position automatically but its safer if you don&rsquo;t rely on that. Because most of the time you&rsquo;ll want to move it to neutral position as fast as you can.</li>
</ul>


<h3>Speed</h3>

<ul>
<li>Don&rsquo;t try to go faster than what you can handle. My personal limit is 60 kph, I don&rsquo;t try to go faster than that.</li>
</ul>


<h3>Rough Road</h3>

<ul>
<li>If you actually care for your car, slow down when approaching rough roads.</li>
</ul>


<h3>Horn</h3>

<ul>
<li>Only use the horn when its absolutely necessary. Sometimes its prohibited to use it on some areas.</li>
<li>Do not use the horn to vent out your frustration. An example of this is when bicycle riders or sidewalk vendors use the road as if they were riding a car. Just give the horn a light tap, and if the bicycle rider still doesn&rsquo;t move to the side simply go pass them if the situation allows.</li>
</ul>


<h3>Stay Cool</h3>

<ul>
<li>Be sure to keep your head cool at all times. You don&rsquo;t want your driving to be affected because of your frustration.</li>
</ul>


<h3>Parking</h3>

<ul>
<li>Be sure that you are only parking your car where it is allowed.</li>
<li>Completely stop the car with the foot brake before putting the car into park mode and pulling the hand brake.</li>
<li>Be sure to leave enough space to maneuver your car later on. You don&rsquo;t want to get to close to another car to avoid scratching it.</li>
<li>If the situation allows, use reverse mode when parking your car, this means that the tail of your car goes inside and the head is outside. This makes it easier for you to go out later on.</li>
</ul>


<p>That&rsquo;s it! I&rsquo;m still a beginner at this so I&rsquo;ll be adding more things to this blog post in future as I learn more things about driving. For now I&rsquo;m going to leave you with this saying:</p>

<blockquote><p>Better late than dead.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Laravel Bootstrap Starter]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3/"/>
    <updated>2014-10-04T19:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still on side-project frenzy. This week its the <a href="https://github.com/anchetaWern/laravel-bootstrap-starter">Laravel Bootstrap Starter</a>.
I created this project to make it easier for me to setup a Laravel project faster. I&rsquo;m using Laravel in the company that I work for and every time I start a new project I have to install it via composer, configure it so that it doesn&rsquo;t show <code>/public</code> in the URL. From there I add the default controllers, add the sign up and login code, add the functionality for updating and resetting password, install node, grunt and then bower. And then install the grunt plugins that I need for front-end performance optimization. The list goes on, and just setting up a project may take a whole day. That&rsquo;s why I decided to create this project.</p>

<h3>Features</h3>

<p>Like most of the projects that I decided to do so far. It only contains the essential features:</p>

<ul>
<li>sign up and login</li>
<li>resetting passwords</li>
<li>admin (updating account information)</li>
</ul>


<h3>Future Plans</h3>

<p>As I move along with this project I&rsquo;m gonna be adding the following features:</p>

<ul>
<li><strong>social login</strong> &ndash; google, twitter, facebook, linkedin</li>
<li><strong>database backup</strong> &ndash; every project must have an automated database backup functionality. I&rsquo;m thinking of using cron for running the backup script and then upload the backup to an Amazon s3 bucket.</li>
<li><strong>generators</strong> &ndash; there are 2 projects doing this already, one is <a href="https://github.com/JeffreyWay/Laravel-4-Generators">Jeffrey Way&rsquo;s Laravel 4 Generators</a> and the other is <a href="https://github.com/wdollar/Laravel-4-Generators-Bootstrap-3">Wes Dollar&rsquo;s forked version</a>, both looks pretty good. I think I&rsquo;ll be able to get some ideas from these projects. Basically the plan here is to be able to use the terminal for generating boilerplate code which I can then build upon.</li>
<li><strong>build tool integration</strong> &ndash; I want to be able to just hit one command and it will install and configure everything that I need to get the project started. Yeoman seems to be a very good fit for this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Ahead]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead/"/>
    <updated>2014-09-28T09:20:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been in side-project frenzy these past few weeks. And this time I&rsquo;m writing again about another side-project that I&rsquo;ve been working on, its called <a href="https://github.com/anchetaWern/ahead">Ahead</a>. Ahead is an app that allows you to schedule posts to your facebook, twitter and linkedin accounts. Pretty much like Buffer. But Buffer has limits for free accounts, that&rsquo;s why I built this app so I can schedule posts without limits.</p>

<h3>How to Use</h3>

<p>You can use Ahead by going to its <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">demo website</a>. Create and account then login. Once logged in, go to the networks page and connect the accounts where you want to publish by clicking on the connect button:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/networks.png" alt="networks" /></p>

<p>Once your accounts has been connected, you can now start scheduling posts:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/schedulenew_post.png" alt="schedule new post" /></p>

<p>You can check the time in which your post will be published from the posts page. From the published column you can also see if your post has already been published or not:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/posts.png" alt="posts" /></p>

<p>If you don&rsquo;t want to select the networks in which you want to publish all the time, you can visit the settings page and then select the networks which you want to select by default:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/settings.png" alt="settings" /></p>

<p>If you don&rsquo;t want your posts to be published one hour after another you can also add custom schedules by visiting the schedules page:</p>

<p><img src="http://anchetawern.github.io/images/posts/intro_to_ahead/schedule.png" alt="new schedule" /></p>

<p>Just select an interval that you want and it will be available as an option when you schedule a new post. Of course you can also select a default schedule from the settings page once you&rsquo;re done creating a schedule. Currently only the following intervals are supported:</p>

<ul>
<li>every 1 hour</li>
<li>every 2 hours</li>
<li>every 3 hours</li>
<li>every 4 hours</li>
<li>every 5 hours</li>
<li>random time in the next 72 hours (3 days)</li>
<li>random time in the next 168 hours (1 week)</li>
</ul>


<h3>Future Plans</h3>

<p>Ahead is still in early stages of development. Its already quite functional but I&rsquo;m planning to add the following features in the future:</p>

<ul>
<li><strong>Publish posts without links</strong> &ndash; currently it can only publish posts with links in it. I originally envisioned this project for my personal use only and I don&rsquo;t really schedule posts without links in it.</li>
<li><strong>Add social login</strong> &ndash; currently you can only start using the app by signing up with your email.</li>
<li><strong>Email verification</strong> &ndash; currently you can use fake emails when signing up.</li>
<li><strong>Editing and deleting posts</strong> &ndash; currently you can no longer edit posts that has already been scheduled. I&rsquo;m planning to add an edit or delete feature in order for users to be able to make changes to their scheduled posts.</li>
<li><strong>Immediate publishing</strong> &ndash; currently only scheduled posts are supported.</li>
<li><strong>Add custom intervals to schedules</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Publicizr]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr/"/>
    <updated>2014-09-21T09:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I started building a project called <a href="https://github.com/anchetaWern/publicizr">Publicizr</a>. I created it for the sole purpose of easily publishing a link to my Facebook, Twitter and LinkedIn profile whenever I publish a new post on this blog.</p>

<h3>Dependencies</h3>

<p>This project depends on the following Ruby gems in order to work:</p>

<ul>
<li><a href="https://github.com/hexgnu/linkedin">linkedin</a> &ndash; used for connecting/publishing to Linkedin.</li>
<li><a href="https://github.com/sferik/twitter">twitter</a> &ndash; used for connecting/publishing to Twitter.</li>
<li><a href="https://github.com/arsduo/koala">koala</a> &ndash; used for connecting/publishing to Facebook.</li>
<li><a href="https://github.com/mperham/em-resolv-replace">em-resolv-replace</a> &ndash; used for fixing the issue with koala not being able to publish to Facebook from the localhost.</li>
</ul>


<h3>How to Install</h3>

<p>You can install Publicizr by requiring the following Ruby gems in the Gemfile used by your static blogging engine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'linkedin', '~&gt; 1.0.0'
</span><span class='line'>gem 'twitter', '~&gt; 5.11.0'
</span><span class='line'>gem 'koala', '~&gt; 1.10.1'
</span><span class='line'>gem 'em-resolv-replace', '~&gt; 1.1.3'</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added those, save the changes to the Gemfile then execute <code>bundle install</code> on your terminal.</p>

<p>Once everything is installed, look for the <code>Rakefile</code> used in your static blogging engine. For Octopress/Jekyll its located in its root directory. Next add the following on the <code>Rakefile</code>. If the <code>Rakefile</code> is requiring other gems, just put these below those gems. If not then put it on the first line of the <code>Rakefile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require "twitter"
</span><span class='line'>require "koala"
</span><span class='line'>require "linkedin"
</span><span class='line'>require "resolv-replace"</span></code></pre></td></tr></table></div></figure>


<p>Next, put these on the last line of the <code>Rakefile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>desc "Publish post to facebook, twitter and linkedin"
</span><span class='line'>task :publish, :content do |t, args|
</span><span class='line'>
</span><span class='line'>  if args.content
</span><span class='line'>    post = args.content
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    #start post to twitter
</span><span class='line'>    tweet = Twitter::REST::Client.new do |config|
</span><span class='line'>      config.consumer_key        = "{twitter-app-key}"
</span><span class='line'>      config.consumer_secret     = "{twitter-app-secret}"
</span><span class='line'>      config.access_token        = "{twitter-user-token}"
</span><span class='line'>      config.access_token_secret = "{twitter-user-secret}"
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    tweet.update(post)
</span><span class='line'>    #end post to twitter
</span><span class='line'>
</span><span class='line'>    #start post to facebook
</span><span class='line'>    @graph = Koala::Facebook::API.new("{facebook-user-token}")
</span><span class='line'>    @graph.put_wall_post(post)
</span><span class='line'>    #end post to facebook
</span><span class='line'>
</span><span class='line'>    #start post to linkedin
</span><span class='line'>    linked_in = LinkedIn::Client.new('{linkedin-app-key}', '{linkedin-app-secret}')
</span><span class='line'>    linked_in.authorize_from_access('{linkedin-user-token}', '{linkedin-user-secret}')
</span><span class='line'>
</span><span class='line'>    linked_in.add_share(:comment =&gt; post)
</span><span class='line'>    #end post to linkedin
</span><span class='line'>
</span><span class='line'>    puts "Your post has been shared!"
</span><span class='line'>
</span><span class='line'>  else
</span><span class='line'>    puts "Supply your post!"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Basically what it does is declaring a rake task that will publish whatever content you pass into it. If you don&rsquo;t need to publish to all 3 (Facebook, Twitter, LinkedIn), feel free to comment out the lines between the lines which says &lsquo;#start post to facebook&rsquo; and &lsquo;#end post to facebook&rsquo;. Just replace &lsquo;facebook&rsquo; with your social network of choice.</p>

<p>At this point the project still requires you to create your own app on each of the social networks. You can do that by visiting the following links and then look for the page for creating a new app:</p>

<ul>
<li><a href="https://developers.facebook.com/">Facebook</a></li>
<li><a href="https://dev.twitter.com/">Twitter</a></li>
<li><a href="https://developer.linkedin.com/">LinkedIn</a></li>
</ul>


<p>Once that&rsquo;s done, you also need to create an app using your language of choice (PHP, Ruby, or Python) that will allow you to retrieve user tokens. If you&rsquo;re primarily a PHP developer you can use the following libraries to ease the work that you need to do:</p>

<ul>
<li><a href="https://github.com/thephpleague/oauth2-client">thephpleagues/oauth2-client</a> &ndash; supports facebook and linkedin.</li>
<li><a href="https://github.com/themattharris/tmhOAuth">thmOAuth</a> &ndash; supports twitter.</li>
</ul>


<p>Once you&rsquo;ve acquired the applications keys and user tokens you can now replace the values which says something like <code>{twitter-app-key}</code>, <code>{twitter-app-secret}</code> on the <code>publish</code> task in your <code>Rakefile</code>. Basically anything that&rsquo;s wrapped in curly brackets, you need to replace those in order for the plugin to fully function.</p>

<h3>How to Use</h3>

<p>You can use publicizr by executing the <code>publish</code> task then supplying the content of your post as an argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake publish["new blog post: newsletters I subscribe to http://wern-ancheta.com/blog/2014/09/07/newsletters-i-subscribe-to/"]</span></code></pre></td></tr></table></div></figure>


<h3>Support</h3>

<p>Any Ruby based static blogging engine is supported. You can check out this <a href="http://blog.iwantmyname.com/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html">big list of static blogging engines</a> and look for the ones that are built using Ruby.</p>

<h3>Future Plans</h3>

<p>Publicizr is already useable but still requires a bunch of work in order to get setup and running. That&rsquo;s why I plan to add the following features in the future:</p>

<ul>
<li>automatically detect last post that was created and publish it automatically when the blog is deployed.</li>
<li>website for retrieving user access tokens which you can then paste into the rake file. This removes the need for creating your own apps and retrieving your keys from it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletters I subscribe to]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/07/newsletters-i-subscribe-to/"/>
    <updated>2014-09-07T10:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/07/newsletters-i-subscribe-to</id>
    <content type="html"><![CDATA[<p>Following last weeks post on <a href="http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to">Podcasts I listen to</a>. This time I&rsquo;ll talk about some of the newsletters I subscribe to.</p>

<h3>Ruby Weekly</h3>

<p>Ruby Weekly is an email round-up of Ruby news and articles. This newsletter is mainly about Ruby but you can also find some interesting stuff here even if you&rsquo;re not a Ruby developer. Links to articles about command line tools, databases and version control are also included in every issue.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://rubyweekly.com/">Visit Site</a></p>

<h3>JavaScript Weekly</h3>

<p>JavaScript Weekly is an email round-up of interesting JavaScript news and articles. It also has a jobs section in which you can find jobs exclusively for JavaScript developers or engineers.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://javascriptweekly.com/">Visit Site</a></p>

<h3>Webtools Weekly</h3>

<p>Web Tools Weekly is a front-end development and web design newsletter with a focus on tools. Each issue features a brief tip or tutorial, followed by a weekly round-up of various apps, scripts, plugins, and other resources to help front-end developers solve problems and be more productive.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://webtoolsweekly.com/">Visit Site</a></p>

<h3>Gamedev.js Weekly</h3>

<p>Gamedev.js Weekly is a newsletter all about HTML5 game development. I&rsquo;m not really a game developer myself so reading articles from this newsletter is just for me to have an idea how games for the browser are being developed.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://gamedevjsweekly.com/">Visit Site</a></p>

<h3>StackExchange Programmers Newsletter</h3>

<p>A curated list of interesting programming questions from the programmers.stackexchange website.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://programmers.stackexchange.com/">Visit Site</a></p>

<h3>DB Weekly</h3>

<p>A weekly round-up of database technology news and articles covering new developments, SQL, NoSQL, document databases, graph databases, and more.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://dbweekly.com/">Visit Site</a></p>

<h3>Versioning</h3>

<p>A daily newsletter by Sitepoint. If you are tired of keeping yourself updated via your twitter feed, hacker news, and a bunch of other sources then Versioning is for you. As they curate a bunch of links that web developers might find useful.</p>

<p><a href="http://www.sitepoint.com/versioning/">Visit Site</a></p>

<h3>Hacker Newsletter</h3>

<p>If you can&rsquo;t keep up with Hacker News, Hacker Newsletter is the way to go. Kale Davis curates only the most interesting stuff that you might find on Hacker News.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://www.hackernewsletter.com/">Visit Site</a></p>

<h3>Responsive Design Weekly</h3>

<p>A free, once–weekly round-up of responsive design articles, tools, tips, tutorials and inspirational links.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://responsivedesignweekly.com/">Visit Site</a></p>

<h3>Node Weekly</h3>

<p>Node Weekly is a free, once–weekly e-mail round-up of Node.js news and articles. Its still from the same guy (Peter Cooper) who brought us the awesome JavaScript Weekly Newsletter. But this is primarily focused on Node.js.</p>

<p>Schedule: Every Friday</p>

<p><a href="A%20free,%20once%E2%80%93weekly%20e-mail%20round-up%20of%20Node.js%20news%20and%20articles">Visit Site</a></p>

<h3>WPMail.me</h3>

<p>WPMail.me is a free WordPress Newsletter, once a week, with a round-up of WordPress news and articles.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://wpmail.me/">Visit Site</a></p>

<h3>PyCoder&rsquo;s Weekly</h3>

<p>A free weekly e-mail newsletter, on Fridays, for those interested in python development and various topics around python.</p>

<p>Schedule: Every Saturday</p>

<p><a href="http://pycoders.com/">Visit Site</a></p>

<h3>Python Weekly</h3>

<p>If PyCoder&rsquo;s Weekly isn&rsquo;t enough, Python Weekly has got you covered. Its a free weekly e-mail newsletter, for those interested in python development and various topics around python.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://www.pythonweekly.com/">Visit Site</a></p>

<h3>PHP Weekly</h3>

<p>As the name suggests, PHP Weekly is a newsletter featuring the best articles, tutorials, talks, news, jobs, and tools about PHP. Based on my experience so far, every issue is a fat one. And when I say fat it means that there&rsquo;s bunch of stuff in there for you to consume. You couldn&rsquo;t ask for more from this newsletter. Its the best thing there is if you want to keep yourself updated about PHP stuff.</p>

<p>Schedule: Every Thursday</p>

<p><a href="http://www.phpweekly.com/">Visit Site</a></p>

<h3>Postgres Weekly</h3>

<p>Postgres Weekly is a free, once–weekly e-mail round-up of PostgreSQL news and articles.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://postgresweekly.com/">Visit Site</a></p>

<h3>Web Design Update</h3>

<p>Web Design Update is a plain text email digest dedicated to disseminating news and information about web design and development with emphasis on elements of user experience, accessibility, web standards and more</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://lists.d.umn.edu/mailman/listinfo/webdev">Visit Site</a></p>

<h3>ng-newsletter</h3>

<p>Ng-newsletter is a weekly newsletter of the best AngularJS content on the web.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://www.ng-newsletter.com/">Visit Site</a></p>

<h3>Ember Weekly</h3>

<p>Ember Weekly is a newsletter dedicated to bring you the latest Ember.js news, tips and libraries.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://emberweekly.com/">Visit Site</a></p>

<h3>HTML5 Weekly</h3>

<p>HTML5 Weekly is a newsletter that features HTML5 and Web Platform technology roundup, CSS 3, Canvas, WebSockets, WebGL, Native Client, and more. Basically all things HTML5 and related technologies.</p>

<p>Schedule: Every Wednesday</p>

<p><a href="http://html5weekly.com/">Visit Site</a></p>

<h3>Perl Weekly</h3>

<p>Perl Weekly features hand-picked news and articles about Perl.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://perlweekly.com/">Visit Site</a></p>

<h3>DevOps Weekly</h3>

<p>Devops Weekly curates the best and latest articles all about DevOps. If you&rsquo;re not familiar with DevOps, its basically a short term for Development and Operations. Its mainly focused on IT operations, tooling and collaboration.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://www.devopsweekly.com/">Visit Site</a></p>

<h3>UX Newsletter</h3>

<p>Another newsletter from Stackexchange which features the most interesting questions about User Experience in the past week.</p>

<p>Schedule: Every Monday</p>

<p><a href="http://ux.stackexchange.com/">Visit Site</a></p>

<h3>Web Developer Reading List</h3>

<p>An all in one newsletter for web developers. It contains news on both front-end and back-end stuff.</p>

<p>Schedule: Every Friday</p>

<p><a href="http://wdrl.info/">Visit Site</a></p>

<h3>CSS Weekly</h3>

<p>A weekly e-mail roundup of css articles, tutorials, experiments and tools curated by Zoran Jambor. There&rsquo;s not much in every issue but the quality makes up for it.</p>

<p>Schedule: Every Tuesday</p>

<p><a href="http://css-weekly.com/">Visit Site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts I listen to]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to/"/>
    <updated>2014-08-31T07:03:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/31/podcasts-i-listen-to</id>
    <content type="html"><![CDATA[<p>To take a bit of a break from the usual web development tutorials that I published. This week I&rsquo;ll be talking about some of the podcasts that I usually listen to when I&rsquo;m just chilling out doing nothing. Podcasts are a really good way to <a href="http://anchetawern.github.io/blog/2012/08/16/how-to-stay-updated-as-a-developer/">keep yourself updated as a developer</a> even if you&rsquo;re not in front of a computer.</p>

<h3>Shoptalkshow</h3>

<p>A podcast where they talk about front end web design, development and UX.
Its hosted by Chris Coyier and Dave Rupert. Each week they either interview someone from the industry or have a Rapidfire show in which they answer questions submitted by their listeners.</p>

<p><a href="http://shoptalkshow.com/">Visit Site</a></p>

<h3>Ruby Rogues</h3>

<p>Not like what the name of the podcast suggests, Ruby Rogues isn&rsquo;t exclusively for Ruby stuff. I&rsquo;m not a Ruby Developer myself but I often listen to this podcast because they usually talk about general stuff that developers would want to listen to. Things like <a href="http://rubyrogues.com/171-rr-evaluating-yourself/">self-evaluation</a>, <a href="http://rubyrogues.com/164-rr-staying-sharp-with-dave-thomas/">staying sharp</a>, and <a href="http://rubyrogues.com/163-rr-education-with-coraline-ada-ehmke-and-katrina-owen/">education</a>. They also usually invite someone from the industry to be in the show so that&rsquo;s a bonus as well. At the end of each episode they have a picks section in which each of the hosts pick anything that they want to plug into the show. Such as books, games, a random article.</p>

<p><a href="http://rubyrogues.com/">Visit Site</a></p>

<h3>JavaScript Jabber</h3>

<p>Pretty much like the Ruby Rogues podcast because its created by the same guy: Charles Maxwood. They mostly invite JavaScript developers to talk about their projects. Such as Guillermo Rauch of Socket.io, Jo Liss of Broccoli.js.</p>

<p><a href="http://javascriptjabber.com/">Visit Site</a></p>

<h3>Freelancer Show</h3>

<p>Another podcast from Charles Maxwood, the Freelancer Show. As the name suggests, its a podcast about freelancing. If you&rsquo;re looking into doing freelancing on your part-time or you want to do freelancing full-time then this podcast is for you.</p>

<h3>Three Devs and a Maybe</h3>

<p>A podcast about Web Development. Though if you visit their website they usually talk about PHP stuff. If you&rsquo;re a PHP developer then this podcast should definitely be on your listening list.</p>

<p><a href="http://threedevsandamaybe.com/">Visit Site</a></p>

<h3>This Developer&rsquo;s Life</h3>

<p>A podcast about developers and their lives. Though this podcast is not ongoing anymore, most of the things that you&rsquo;ll find in here are still relevant. Its about the daily lives of developers after all. Their content is mostly on story format. And each episode has a specific theme. Things like obsession, learning, competition, getting fired and many others.</p>

<p><a href="http://thisdeveloperslife.com/">Visit Site</a></p>

<h3>The JavaScript Show</h3>

<p>Though this podcast is no longer active, they have some good stuff in here that you might want to check out. Each episode is fully dedicated to JavaScript stuff, that is both client-side and server-side. Its from the same guy (Peter Cooper) who&rsquo;s curating the contents for the JavaScript Weekly Newsletter so the JavaScript Show is basically a JavaScript Weekly in audio format.</p>

<p><a href="http://javascriptshow.com/">Visit Site</a></p>

<h3>FaceOff Show</h3>

<p>Another podcast which is no longer active but still pretty useful is the FaceOff Show. They have a total of 126 episodes before they stopped but the content is still available on their website to download or to listen to. The FaceOff Show is a holistic podcast, its basically all of the podcast mentioned above combined into one. In other words, its all thing development.</p>

<p><a href="http://faceoffshow.com/">Visit Site</a></p>
]]></content>
  </entry>
  
</feed>
