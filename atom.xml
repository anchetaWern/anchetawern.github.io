<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-09-30T14:33:12+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Absentist]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/27/introduction-to-absentist/"/>
    <updated>2015-09-27T19:18:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/27/introduction-to-absentist</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been working on a few projects that will ease up all the housekeeping work that I need to do as a teacher. Things like checking the attendance of students and checking the works of students.</p>

<p>When I started working as a teacher, I used a spreadsheet to monitor attendance. There&rsquo;s a column for the name of the student and a column for meeting days. That&rsquo;s about 36 columns for the laboratory, where I meet them 2 times per week. And then 18 columns for the lecture, where I meet them once per week. What I do is to put an <em>A</em> in the cell where the student and the day intersects if the student is absent. And when a student accumulates 2 of those <em>A&rsquo;s</em> in the laboratory, then they&rsquo;re ripe for dropping. And for the lecture, they only need one. When I say drop, it means dropping the class card of the student to the Student Affairs Office. I won&rsquo;t dive in too much with the details but this process is implemented so the students wouldn&rsquo;t want to be absent too often. Because its really a pain to claim class cards.</p>

<p>Going back to my old process in monitoring attendance, here&rsquo;s what the spreadsheet that I used for monitoring looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/attendance.png" alt="attendance spreadsheet" /></p>

<p>Well, guess what. This quickly turned into a headache. Because there&rsquo;s no way to monitor which students are currently dropped, which one&rsquo;s are ripe for dropping and which one&rsquo;s has already returned their class cards to me.</p>

<p>As a programmer, I always want to make my work easy. Make the computer do most of the work as much as possible. So I decided to work on this project which I now call as Absentist. It&rsquo;s an attendance monitoring app which is custom built for my current needs. The way it works is simple. First, the teacher creates a class and adds the students. This part asks for the details such as the name of the class, some additional details that the teacher wants to enter, the number of absences needed before dropping the class card, the meeting days, then the start time and end time for each meeting day. Since the school already has a system for accessing class details. All I needed to do was to export it to a spreadsheet and then copy-paste it to a textarea. Then in the back-end, I simply parsed the pasted data so I can extract the ID Number, First Name, Last Name, Middle Initial and the gender of the student.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/newclass.png" alt="new class" /></p>

<p>Once a class has been created, it is listed in the classes page. This page has the links for updating a class, viewing students that are ripe for dropping and students that are already dropped.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/classes.png" alt="new class" /></p>

<p>Here&rsquo;s what the interface for dropping looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/todrop.png" alt="to drop" /></p>

<p>From here, the teacher can do two things: first is to mark the class card as dropped. This should be done once all the class cards has been dropped. Currently there&rsquo;s no button for dropping everything with a single click but this would do for now. There should only be a few clicks needed. Next is the absences link, this shows all the days that the student was absent.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/absences.png" alt="absences" /></p>

<p>Next is the page for viewing class card that has already been dropped. From here, the teacher can click on the <em>claim</em> button to mark that the student has returned their class card. When this button is clicked, the absences counter for that student goes back to 0.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/dropped.png" alt="dropped" /></p>

<p>But how is the attendance actually updated you ask? It is through the attendance page. This uses the days and time that has been entered on the class settings. When the attendance page is accessed in a time between the start time and end time that was entered and the day matches. Then it will automatically show a list of students in the class. From there, the teacher can call on the students one by one. If a student is absent but is not excused then the absent button beside that student is clicked. If excused then the excused button is clicked. The only difference between the 2 is that excused absences aren&rsquo;t counted as an actual absence. Its just there for the sake of recording.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/update-attendance.png" alt="update attendance" /></p>

<p>Once the roll call is done, the teacher can then filter the list to only show the students who are absent or excused. This is useful for verifying if all the students in the list are really absent or excused. If not then the absent or excused button is clicked again to remove the student from the list. Once that&rsquo;s done, the <em>update attendance</em> button is clicked to commit the changes to the database. This increments the absences counter for the student if they are absent. Or marks the student to be dropped if the absences counter becomes equal to that of what was added to the class settings.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/show-absent.png" alt="update attendance" /></p>

<h3>Future Plans</h3>

<p>Future plans for this project includes the following:</p>

<ul>
<li>Adding students one at a time. This would be useful for when a student comes in late or for instances where there&rsquo;s no available spreadsheet export for student data.</li>
<li>Different start and end times for each meeting day.</li>
<li>User Documentation</li>
</ul>


<p>That&rsquo;s it! If you want to use this project or contribute to it, you can <a href="https://github.com/anchetaWern/absentist">download it on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations in PHP with Phinx]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx/"/>
    <updated>2015-09-20T17:29:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx</id>
    <content type="html"><![CDATA[<p>Gone are the days where you use the export functionality of your database management tool and share the SQL file to your team mates. Most PHP frameworks today already comes with a database migration tool which you can use to construct and make changes to your database and easily share them through your version control system of choice. In this tutorial I&rsquo;ll be walking you through <a href="https://phinx.org/">Phinx</a>, a database migration tool for PHP.</p>

<p>If you don&rsquo;t know what a database migration is, it&rsquo;s basically a way to version your database. Pretty much like what you do with version control systems like Git, SVN or Mercurial. It allows you to make changes to your database and easily rollback any of those changes later on if you make a mistake or if there are some changes that needs to be implemented. You can then share the changes you&rsquo;ve made to your team by committing it to your version control system and pushing it to the main repository of your project. Your team mates can then pull those changes into their own copy and run the migrations so that they have the same state of the database as you do.</p>

<h3>Installation</h3>

<p>You can install Phinx through Composer by executing the following commands on your terminal. If you have an existing project, you can navigate to your project directory and execute it from there.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require robmorgan/phinx
</span><span class='line'>composer install --no-dev</span></code></pre></td></tr></table></div></figure>


<p>Next create a <code>migrations</code> folder. This is where the database migrations are going to be stored.</p>

<p>Finally, execute the following command to initialize Phinx.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php vendor/bin/phinx init</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>When Phinx was initialized, you might have noticed that it created a <code>phinx.yml</code> file on the root of your project. This file is the Phinx configuration. This is where you can modify the database used by Phinx for production, development and testing environments. By default Phinx uses the development environment so go ahead and modify the details for that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paths:
</span><span class='line'>    migrations: %%PHINX_CONFIG_DIR%%/migrations
</span><span class='line'>
</span><span class='line'>environments:
</span><span class='line'>    default_migration_table: phinxlog
</span><span class='line'>    default_database: development
</span><span class='line'>    production:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: production_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    development:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: development_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    testing:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: testing_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>Using Phinx mainly composed of the following workflow:</p>

<ol>
<li>Create a migration</li>
<li>Modify the migration class</li>
<li>Run the migration</li>
<li>If you need to make a change to a previous migration, roll it back, make the change to the migration class and run the migration again.</li>
</ol>


<h4>Creating Migrations</h4>

<p>To create a new migration, you use the Phinx shell script. Below is a migration for creating a users table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php vendor/bin/phinx create CreateUsersTable</span></code></pre></td></tr></table></div></figure>


<p>This creates a new file in the <code>migrations</code> directory. For me it created a file named <code>20150727004941_create_users_table.php</code>. The filename is made up of the timestamp and the machine-friendly version of the name of the migration that you provided.</p>

<p>It&rsquo;s best practice that you name your migrations based on what they do, so that you can easily look for them if you need to modify something. Each migration should only be doing one specific task so that you can easily roll them back without having to worry about side-effects. Creating a users table should add the fields that are necessary to that table. But if you&rsquo;re modifying a specific table, in most cases, you should only modify one field at a time. For example, you need to modify the data type from <code>INT</code> to <code>VARCHAR</code>. Only modify one field. But if it makes sense to change two or more fields in a single migration, then do so. For example, if you need to modify the length of the <code>username</code> and <code>password</code> fields so they can accomodate more data.</p>

<p>Going back to the migration file. Open it up if you haven&rsquo;t yet. Here&rsquo;s how it looks like by default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Phinx\Migration\AbstractMigration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateUsersTable</span> <span class="k">extends</span> <span class="nx">AbstractMigration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Change Method.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Write your reversible migrations using this method.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * More information on writing migrations is available here:</span>
</span><span class='line'><span class="sd">     * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">change</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Phinx already creates a skeleton class for you s you only need to modify what&rsquo;s in the <code>change</code> function. This is where you need to add the code for modifying your database. In this case the change is to create a <code>users</code> table. Add the following inside the <code>change</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$table</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The table is declared using the <code>table</code> function. This accepts the name of the table as its argument. The fields are then added by calling the <code>addColumn</code> method in the table. This accepts 2 required arguments: the name of the field and the data type. Finally, the <code>create</code> function is called to actually create the table. Once that&rsquo;s done, save the file.</p>

<p>Let&rsquo;s pretend we forgot to add the <code>photo</code> field, so create another migration to add that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx migrate AddPhotoFieldToUsersTable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following inside the <code>change</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$table = $this-&gt;table(&#39;users&#39;);</span>
</span><span class='line'><span class="x">$table-&gt;addColumn(&#39;photo&#39;, &#39;string&#39;, array(&#39;after&#39; =&gt; &#39;username&#39;))</span>
</span><span class='line'><span class="x">        -&gt;update();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing new here, the only thing that&rsquo;s changed is the method to be called to actually execute the change that you need to make. In this case instead of <code>create</code>, the <code>update</code> method is used. This is how Phinx will know that you are trying to update the <code>users</code> table by adding the <code>photo</code> field.</p>

<h4>Running Migrations</h4>

<p>You can run all the migrations that haven&rsquo;t been run yet by using the <code>migrate</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would output something similar to the following when the migration is run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">warning no environment specified, defaulting to: development</span>
</span><span class='line'><span class="x">using adapter mysql</span>
</span><span class='line'><span class="x">using database tester</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: migrating</span>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: migrated 0.3325s</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: migrating</span>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: migrated 0.5018s</span>
</span><span class='line'>
</span><span class='line'><span class="x">All Done. Took 0.6773s</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now check if the table was actually created by opening your database management tool of choice. Also notice that there is a <code>phinxlog</code> table in your database. This is used by Phinx to keep track of which specific migrations were run and the start and end time for each. The migration is determined by its version, which is basically the first part of the file name for a specific migration file. On my testing, the version is <code>20150727004941</code>.</p>

<h4>Rolling Back Changes</h4>

<p>To rollback changes you can use the <code>rollback</code> command which does exactly the opposite of the <code>migrate</code> command. All it does is rollback everything that has changed on the last migrate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx rollback</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command above outputs something similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">warning no environment specified, defaulting to: development</span>
</span><span class='line'><span class="x">using adapter mysql</span>
</span><span class='line'><span class="x">using database tester</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: reverting</span>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: reverted 0.4672s</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: reverting</span>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: reverted 0.1503s</span>
</span><span class='line'>
</span><span class='line'><span class="x">All Done. Took 0.6175s</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to create database migrations with Phinx. Be sure to check out the <a href="http://docs.phinx.org/en/latest/">official documentation</a> if you want to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with the Filesystem with Flysystem]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem/"/>
    <updated>2015-09-13T11:10:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>You can install Flysystem via <a href="https://getcomposer.org/">Composer</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require league/flysystem</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To use Flysystem, you first have to include the vendor autoload file which you got when you installed Flysystem on your working directory. After that, use the <code>Filesystem</code> class in the <code>League\Flysystem</code> namespace and the <code>Local</code> class in the <code>League\Flysystem\Adapter</code> namespace. The <code>Filesystem</code> class allows you to use the main Flysystem package. And the <code>Local</code> class allows you to use the local adapter. With Flysystem it&rsquo;s not just the local filesystem that you can work with. It has adapters for any cloud storage service that you can think of. Theres an adapter for Dropbox, FTP, AWS S3, Rackspace and even a Zip archive. So the <code>Local</code> class allows you to work with files in your local filesystem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">League\Flysystem\Filesystem</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">League\Flysystem\Adapter\Local</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a new instance of the <code>Local</code> class and pass in the path to the base path you want to work with. This allows you to create an adapter for a local path in your filesystem. In the example below, it&rsquo;s the <code>upload</code> directory located in the root of my working directory. After that, create a new instance of the <code>Filesystem</code> class and pass in the local adapter as the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Local</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/uploads&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$filesystem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Filesystem</span><span class="p">(</span><span class="nv">$adapter</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now use Flysystem to wreack havoc on your local filesystem.</p>

<h4>Check if File Exists</h4>

<p>To check if a file exists, you can use the <code>has</code> method and then pass in the path to the file. Remember that this uses the root path that you passed in when you created the local adapter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$exists</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">has</span><span class="p">(</span><span class="s1">&#39;path/to/image.png&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Read Files</h4>

<p>Reading files only really makes sense for text files. You can use the <code>read</code> method for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">read</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Write to Files</h4>

<p>When writing to files, the path doesn&rsquo;t need to already exist. You can pass in a long path and it will create the individual directories that precedes the actual file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Copy Files</h4>

<p>Copying files can work with any file type and the destination doesn&rsquo;t need to be the same path where the original file exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">copy</span><span class="p">(</span><span class="s1">&#39;original.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;path/to/copy.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Rename Files</h4>

<p>You can use the <code>rename</code> method to rename files. This also doubles as a move function because you can assign the same name to the file but have a different path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">rename</span><span class="p">(</span><span class="s1">&#39;original_name.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;new_name.txt&#39;</span><span class="p">);</span> <span class="c1">//rename</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">rename</span><span class="p">(</span><span class="s1">&#39;original_name.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;path/to/original_name.txt&#39;</span><span class="p">);</span> <span class="c1">//move</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Delete Files</h4>

<p>If you want to delete a file, use the <code>delete</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Listing Contents of a Directory</h4>

<p>To list the contents of the root directory, you need to call the <code>listContents</code> method. This returns an array containing the items in the root directory. Note that this isn&rsquo;t a recursive function. This means that only the direct children of the root directory is going to be listed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">listContents</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$contents</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$object</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;file&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$object</span><span class="p">[</span><span class="s1">&#39;basename&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Get File Information</h4>

<p>You can use any of the functions below to get specific information about the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mimetype</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getMimetype</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// image/jpeg</span>
</span><span class='line'><span class="nv">$timestamp</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getTimestamp</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// 1438143700</span>
</span><span class='line'><span class="nv">$size</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getSize</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// 101771</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Exceptions</h4>

<p>When performing an operation on the filesystem, be sure to wrap it in a <code>try..catch</code> block so that you can handle the errors accordingly. In the example below, if <code>file.txt</code> doesn&rsquo;t exists in the directory, it would return an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this tutorial, you&rsquo;ve learned how to ease filesystem work with the Flysystem library. You have barely scratch the surface with what&rsquo;s possible with Flysystem. Be sure to check out their <a href="http://flysystem.thephpleague.com/">official website</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ionic]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/05/getting-started-with-ionic/"/>
    <updated>2015-09-05T08:01:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/05/getting-started-with-ionic</id>
    <content type="html"><![CDATA[<p>Hybrid Mobile App Development has been gaining traction lately. With the advent of tools such as Cordova, Sencha Touch and Titanium. There&rsquo;s no more stopping web developers from creating their own mobile apps with web technologies. Yes I just said web technologies, that&rsquo;s HTML, CSS, JavaScript and a little bit of talking to a server and you can already create a fancy mobile app. And because of this, lots of mobile frameworks has popped out. There&rsquo;s Ionic, Onsen UI, Junior, Mobile Angular UI, and Kendo UI to name a few. Of those I&rsquo;ve only ever tried jQuery Mobile and Ionic. At first I tried jQuery Mobile since I was already using jQuery for a long time. But it didn&rsquo;t take me long to realize that it wasn&rsquo;t for me nor the project that I was working on at that time. It just didn&rsquo;t have what I need. jQuery Mobile is just a set of UI components that I could use in a mobile app. It didn&rsquo;t have the foundation in which I could build upon. What I needed was a framework that would allow me to just start writing the app without having to worry about laying out the structure myself. This is where Ionic came in. It didn&rsquo;t take me long to find it since it&rsquo;s the first result that came up when I googled &lsquo;mobile hybrid app framework&rsquo;. Ionic utilizes Angular for its UI interactions, gestures and animations. And the best part is you can also use it to structure your app, because Angular itself is a JavaScript framework.
Ok this intro is getting long. Let&rsquo;s proceed with the fun stuff.</p>

<h3>Setup</h3>

<h4>Node</h4>

<p>In order to start working with Ionic, you first have to install <a href="https://nodejs.org/download/">Node</a>. Go ahead and download the installer for your platform if you don&rsquo;t already have it. If you&rsquo;re an Ubuntu user, you can install Node using NVM (Node Version Manager). To install NVM, execute the following commands in order:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install build-essential libssl-dev
</span><span class='line'>
</span><span class='line'>curl https://raw.githubusercontent.com/creationix/nvm/v0.16.1/install.sh | sh
</span><span class='line'>
</span><span class='line'>source ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>The first command, installs the build tools and SSL development libraries. The second downloads the NVM installer, and the third sources the <code>~/.profile</code> file so that your current command-line session knows about the changes. This basically allows you to use the NVM command without having to logout.</p>

<p>Next, you can now list the available Node versions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls-remote</span></code></pre></td></tr></table></div></figure>


<p>This will list out a whole bunch of Node versions that are available. But usually you would want to install the current version, which is the last item on the list. At the time of writing of this article, the current version is <code>v0.12.7</code>. So you can go ahead and install that using the <code>nvm install</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install v0.12.7</span></code></pre></td></tr></table></div></figure>


<p>Now when you check the Node version installed on your machine, you would see <code>v0.12.7</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node -v</span></code></pre></td></tr></table></div></figure>


<p>Next you need to set this version as the default, otherwise you&rsquo;ll have to execute <code>nvm use v0.12.7</code> every time you need to use Node.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias default v0.12.7
</span><span class='line'>nvm use default</span></code></pre></td></tr></table></div></figure>


<h4>Cordova and Ionic</h4>

<p>Now we&rsquo;re ready to install Cordova and Ionic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done installing, you can create a new project using the <code>ionic start</code> command. There are currently 3 available starter templates you can use: blank, tabs, and sidemenu. In this tutorial we&rsquo;re going to use the tabs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic start demoApp tabs</span></code></pre></td></tr></table></div></figure>


<h4>Ionic Directory Structure</h4>

<p>The command above will create a <code>demoApp</code> directory which contains the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hooks
</span><span class='line'>plugins
</span><span class='line'>scss
</span><span class='line'>www
</span><span class='line'>bower.json
</span><span class='line'>config.xml
</span><span class='line'>gulpfile.js
</span><span class='line'>ionic.project
</span><span class='line'>package.json</span></code></pre></td></tr></table></div></figure>


<p>The <code>hooks</code> directory is where you will put the scripts for customizing Cordova commands. I&rsquo;ve never had the need to use this feature so I can&rsquo;t share anything about it. But if you&rsquo;re just getting started, you wouldn&rsquo;t normally need to touch this directory.</p>

<p>The <code>platforms</code> directory is where the different platforms in which your app will be compiled to is stored. Note that its not there by default, you have to install a platform first.</p>

<p>The <code>plugins</code> directory is where Cordova plugins gets installed.</p>

<p>The <code>scss</code> directory is where the main Ionic sass file (ionic.app.scss) is stored. It contains the primary variables for customizing the colors used in your app.</p>

<p>The <code>www</code> directory is where you would usually work. This contains the HTML, JavaScript and CSS files. I won&rsquo;t walk you through each of the contents of the <code>www</code> directory as they&rsquo;re pretty self-explanatory.</p>

<p>The <code>bower.json</code> file contains the front-end dependencies of your app. By default it depends on Ionic. All bower dependencies are installed on the <code>www/lib</code> directory by default. You can install new one&rsquo;s by using the <code>bower install</code> command and then link them on the <code>index.html</code> file in the <code>www</code> directory. When you install new libraries using bower, use the <code>--save</code> or <code>--saveDev</code> option so that it will save the package name on the <code>bower.json</code> file. The <code>--save</code> option is used to specify that the library you&rsquo;re installing is a front-end asset. For example, jQuery or Bootstrap. While the <code>--saveDev</code> option is used for development only. Things like jshint or jasmine.</p>

<p>The <code>config.xml</code> file is where you can change the name, description and author of your app. You can also set your preference for device orientation (either portrait or landscape), features and URL&rsquo;s which your app is allowed to access.</p>

<p>The <code>gulpfile.js</code> file is the Gulp config file used by Ionic. Normally you wouldn&rsquo;t need to touch this. What you need to understand is that this is used by Ionic to execute tasks such as compiling sass files to CSS or watching a specific directory for changes.</p>

<p>The <code>ionic.project</code> file is where you can update the name and app_id of your app. You won&rsquo;t really need to touch this.</p>

<p>Lastly, the <code>package.json</code> file. This contains the dependencies of the Ionic framework. You won&rsquo;t really need to touch this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;demoapp&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;demoApp: An Ionic project&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;gulp&quot;</span><span class="p">:</span> <span class="s2">&quot;^3.5.6&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-sass&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-concat&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-minify-css&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-rename&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.2.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;bower&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-util&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.14&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;shelljs&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.3.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;cordovaPlugins&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-device&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-console&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-whitelist&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-splashscreen&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;com.ionic.keyboard&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;cordovaPlatforms&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Platforms</h4>

<p>With Cordova there&rsquo;s only a select few platforms that it supports. So it&rsquo;s not completely write once, compile to all kind of thing. There are different sets of problems to solve for each platform in which you plan to release your app.
The common platforms that you may want to install are android, ios and browser. For a list of all the platforms supported by Cordova, you can check out the <a href="https://cordova.apache.org/docs/en/4.0.0/guide_platforms_index.md.html#Platform%20Guides">Cordova Platform Guides</a>. Each platform has a different dependency. Usually it&rsquo;s the SDK or the recommended developer tool for that platform. For Android, it&rsquo;s the Android SDK, for iOS it&rsquo;s Xcode, for Windows it&rsquo;s Visual Studio. I&rsquo;m only going to walk you through the Android platform in this tutorial.</p>

<p>You can download the Android SDK installer from <a href="https://developer.android.com/sdk/index.html#Other">this page</a>. Under the SDK Tools Only section, download the package for your platform. I&rsquo;m on Ubuntu so I will download the one for Linux. Once the download is done, extract the files using the <code>tar</code> command or you can also right click on the file and select the archive manager of your choice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">tar</span> <span class="err">-xvzf</span> <span class="err">android-sdk_r</span><span class="mf">24.3</span><span class="err">.</span><span class="mi">3</span><span class="err">-linux.tgz</span>
</span></code></pre></td></tr></table></div></figure>


<p>After extraction, it would yield an <code>android-sdk-linux</code> folder which contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">add-ons</span>
</span><span class='line'><span class="err">platforms</span>
</span><span class='line'><span class="err">tools</span>
</span><span class='line'><span class="err">SDK</span> <span class="err">Readme.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>From that directory, navigate to the <code>tools</code> directory and execute the <code>android</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">./tools/android</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will open up the Android SDK Manager which you can use to install the tools that you need to develop Android apps. At this point you might wonder why we need to install the same things that Android developers need to install. Well, that&rsquo;s because we&rsquo;re still subjected to the same rules even if we write our apps using HTML, CSS, and JavaScript. Since apps created with Cordova and Ionic are just utilizing the Android WebView. Which is basically just a browser without a frame. That&rsquo;s where the HTML, CSS and JavaScript are used. And Cordova just acts as a middleman between the WebView and the native Android functionalities. So if you need to use the camera for your app, Cordova uses the Android API to call for the camera. And once you&rsquo;re done taking a picture it&rsquo;s also the one responsible for returning the data back to your app. This means that Cordova just abstracts away the parts which we usually need to work on as native app developers so we can write our code in JavaScript instead of Java.</p>

<p>Back to where we left. Let&rsquo;s now install the tools we need to get Cordova do its job. Check the following items on the Android SDK Manager and click on Install. This might take a while depending on your download speed.</p>

<p><strong>Tools</strong>
&ndash; Android SDK Tools</p>

<p><strong>Android 5.1.1 (API 22)</strong>
&ndash; SDK Platform</p>

<p><strong>Android 5.0.1 (API 21)</strong>
&ndash; SDK Platform
&ndash; Google APIs</p>

<p><strong>Android 4.4W.2 (API 20)</strong>
&ndash; SDK Platform</p>

<p><strong>Android 4.4.2 (API 19)</strong>
&ndash; SDK Platform
&ndash; Google APIs (ARM System Image)</p>

<p><strong>Extras</strong>
&ndash; Android Support Repository
&ndash; Android Support Library
&ndash; Google Repository</p>

<p>Once that&rsquo;s done installing, add the path in which the Android SDK is installed to your environment. In Ubuntu and OSX, you can add the following on your <code>.bashrc</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">export</span> <span class="err">ANDROID_HOME=/path/to/android-sdk-linux/sdk</span>
</span><span class='line'><span class="err">PATH=$PATH:/path/to/android-sdk-linux/sdk/tools</span>
</span><span class='line'><span class="err">export</span> <span class="err">PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Windows, there&rsquo;s something called the Environment Variables. I&rsquo;ve written about it in my old blog: <a href="https://kyokasuigetsu25.wordpress.com/2010/10/29/how-to-set-environment-variables/">How to set environment variables</a>.</p>

<p>Once that&rsquo;s done, you can now install the Android platform, you can use the <code>ionic platform add</code> command followed by the name of the platform you want to install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">ionic</span> <span class="err">platform</span> <span class="err">add</span> <span class="err">android</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Sass</h3>

<p>You can use sass with ionic by executing the following command while inside your project directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">ionic</span> <span class="err">setup</span> <span class="err">sass</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is install the packages and tasks needed to compile sass. Then remove the following from your <code>index.html</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;lib/ionic/css/ionic.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also adds the link to the <code>ionic.app.css</code> file which is basically just the compiled version of the <code>ionic.app.scss</code> file found in the <code>scss</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it adds the following in your <code>ionic.project</code> file. This tells ionic to start the sass and watch command when gulp starts. It also specifies the watch patterns, so that every time you make a change to a file that matches the pattern, the sass command gets executed and compiles the sass files to css.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;gulpStartupTasks&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;sass&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watch&quot;</span>
</span><span class='line'>  <span class="p">]</span><span class="err">,</span>
</span><span class='line'>  <span class="s2">&quot;watchPatterns&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;www/**/*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;!www/lib/**/*&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to change the default colors used by Ionic, this is where you can do that. Be sure to uncomment the variables just like what we have below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c">To customize the look and feel of Ionic, you can override the variables</span>
</span><span class='line'><span class="c">in ionic&#39;s _variables.scss file.</span>
</span><span class='line'>
</span><span class='line'><span class="c">For example, you might change some of the default colors:</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span><span class="nt">light</span><span class="o">:</span>                           <span class="nf">#fff</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">stable</span><span class="o">:</span>                          <span class="nf">#f8f8f8</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">positive</span><span class="o">:</span>                        <span class="nf">#387ef5</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">calm</span><span class="o">:</span>                            <span class="nf">#11c1f3</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">balanced</span><span class="o">:</span>                        <span class="nf">#33cd5f</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">energized</span><span class="o">:</span>                       <span class="nf">#ffc900</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">assertive</span><span class="o">:</span>                       <span class="nf">#ef473a</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">royal</span><span class="o">:</span>                           <span class="nf">#886aea</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">dark</span><span class="o">:</span>                            <span class="nf">#444</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nt">The</span> <span class="nt">path</span> <span class="nt">for</span> <span class="nt">our</span> <span class="nt">ionicons</span> <span class="nt">font</span> <span class="nt">files</span><span class="o">,</span> <span class="nt">relative</span> <span class="nt">to</span> <span class="nt">the</span> <span class="nt">built</span> <span class="nt">CSS</span> <span class="nt">in</span> <span class="nt">www</span><span class="o">/</span><span class="nt">css</span>
</span><span class='line'><span class="err">$</span><span class="nt">ionicons-font-path</span><span class="o">:</span> <span class="s2">&quot;../lib/ionic/fonts&quot;</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nt">Include</span> <span class="nt">all</span> <span class="nt">of</span> <span class="nt">Ionic</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;www/lib/ionic/scss/ionic&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now anytime you make a change to the file while running <code>ionic serve</code>, it will compile it to the <code>ionic.app.css</code> found at the <code>www/css</code> directory.</p>

<h3>Developing an App</h3>

<p>You can start developing your app by executing <code>ionic serve</code> from the root directory of your project. This will launch a new browser tab containing the app. If you&rsquo;re using Chrome, you can click on the phone icon on the left of the elements tab when you open the developer tools. This would show your app inside a smaller screen depending on the device that you specify. You can change the device by clicking on the drawer icon which looks like this: <code>&gt;__</code>. And then click on the emulation tab then select the device from the model dropdown. You might need to refresh the page after doing this so that it will render correctly.</p>

<p><img src="http://wern-ancheta.com/images/posts/ionic/app-window.png" alt="app window" /></p>

<p>Now open the <code>index.html</code> file in the root directory of your project. This is where every thing is hooked up. If you have ever developed a single-page app before, this would be familiar to you. Basically how a single-page app works is that every script that you need is linked in the <code>index.html</code> file. You might be thinking this is a bad practice since it will take too long for the page to load. Well it&rsquo;s not since the front-end assets are included in the app locally. It wouldn&rsquo;t need to download it over the internet so it&rsquo;s fast even if we have a lot of files linked in there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- compiled css output --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ionic/angularjs js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/ionic/js/ionic.bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- cordova script (this will be a 404 during development) --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- your app&#39;s js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;starter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The nav bar that will be updated as we navigate between views.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-bar</span> <span class="na">class=</span><span class="s">&quot;bar-stable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-nav-back-button</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>/ion-nav-back-button&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-nav-bar&gt;
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The views will be rendered in the &lt;ion-nav-view&gt; directive below</span>
</span><span class='line'><span class="c">      Templates are in the /templates folder (but you could also</span>
</span><span class='line'><span class="c">      have templates inline in this html file if you&#39;d like).</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok let&rsquo;s break this file down. First we set the charset to utf-8 and viewport so that the initial and maximum scale is 1, we also set the <code>user-scalable</code> option to <code>no</code>. This basically means the user wouldn&rsquo;t be able to resize or zoom the app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the title. This means nothing since we&rsquo;re on an app not a website. So users wouldn&rsquo;t be able to see this. You can leave it as blank.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we also have the main ionic css file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="c">&lt;!-- compiled css output --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Angular is bundled together with the Ionic JavaScript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- ionic/angularjs js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/ionic/js/ionic.bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to link the <code>cordova.js</code> file so we can use Cordova within our app. This would allow us to use Cordova plugins as well via <code>cordova.plugins</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- cordova script (this will be a 404 during development) --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have our custom JavaScript files. This is where we put code that makes the app do things for us. Note that the <code>js/app.js</code> file is the main JavaScript file. It is where we link every thing together. This is where we intialize a new module in which we could hook up different parts of our app. If we need to use a new service, this is where we hook it up. If we want to add a new state, this is where we add it. If we need to call a specific function every time the app starts, this is where we do it. Next we have the <code>js/controllers.js</code> file, in the default controller created by Ionic, all the controllers are added in a single file. This is fine for really small apps but for medium to large size apps it&rsquo;s recommended to have a single controller for each entity in your app. For example, you might have a user controller where you put all the code that has something to do with the user. Things like updating user settings. The controller is where you usually put code that responds to a specific event such as clicking a button or pulling to refresh. Lastly, we have the <code>js/services.js</code> file. A service is responsible for adding a specific functionality to your app. You would want to create a service for making requests to your server, or storing data in local storage. It&rsquo;s recommended that you search for existing solutions first before writing your own services. So you won&rsquo;t waste time re-implementing the same thing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;starter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The nav bar that will be updated as we navigate between views.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-bar</span> <span class="na">class=</span><span class="s">&quot;bar-stable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-nav-back-button</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>/ion-nav-back-button&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-nav-bar&gt;
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The views will be rendered in the &lt;ion-nav-view&gt; directive below</span>
</span><span class='line'><span class="c">      Templates are in the /templates folder (but you could also</span>
</span><span class='line'><span class="c">      have templates inline in this html file if you&#39;d like).</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a typical Angular app we set the <code>ng-app</code> attribute to the name of the module. Ionic has used <code>starter</code> as the name of the module by default. You can change that on your <code>app.js</code> file. Here the name of the module is starter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;starter&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;starter.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;starter.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can change it to the following if you want. Here the name of the module is changed to <code>my_awesome_app</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you did change the name of the module. You also need to change the value of the <code>ng-app</code> attribute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;my_awesome_app&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As well as your controllers and services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to the <code>app.js</code> file. This is the code responsible for setting the name of the module and the services and controllers it depends on. By default it depends on the ionic service, and your custom controllers and services.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of <code>my_awesome_app.controllers</code> and <code>my_awesome_app.services</code> as a submodule of the <code>my_awesome_app</code> module. We declared those two modules in the <code>js/controllers.js</code> and <code>js/services.js</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering what&rsquo;s the need for these sub-modules? Well, their main purpose is to have a different parent module for each controller and service. So every controller would depend on the <code>my_awesome_app.controllers</code> module and all services would depend on the <code>my_awesome_app.services</code> module. We do this because simply depending on the main module wouldn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the <code>run</code> function. This is where Ionic executes functions which needs to be executed every time the app is opened. All function calls should be wrapped in the <code>$ionicPlatform.ready</code> event to make sure all the plugins and other features that we need are loaded. Inside the event, we check if the Cordova keyboard plugin is accessible. If it is then we hide the keyboard accessory bar. Finally we use the lightContent statusbar (light text for dark backgrounds) by calling the <code>styleLightContent</code> method provided by the <code>StatusBar</code> plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$ionicPlatform</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$ionicPlatform</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Hide the accessory bar by default (remove this to show the accessory bar above the keyboard</span>
</span><span class='line'>    <span class="c1">// for form inputs)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Keyboard</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Keyboard</span><span class="p">.</span><span class="nx">hideKeyboardAccessoryBar</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">StatusBar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// org.apache.cordova.statusbar required</span>
</span><span class='line'>      <span class="nx">StatusBar</span><span class="p">.</span><span class="nx">styleLightContent</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we set the app configuration by calling the <code>config</code> method in the Angular module. You can use this to set the routes of your app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ionic uses AngularUI Router which uses the concept of states</span>
</span><span class='line'>  <span class="c1">// Learn more here: https://github.com/angular-ui/ui-router</span>
</span><span class='line'>  <span class="c1">// Set up the various states which the app can be in.</span>
</span><span class='line'>  <span class="c1">// Each state&#39;s controller can be found in controllers.js</span>
</span><span class='line'>  <span class="nx">$stateProvider</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// setup an abstract state for the tabs directive</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tab&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kr">abstract</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;templates/tabs.html&quot;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Each tab has its own nav history stack:</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.dash&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dash&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-dash&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-dash.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;DashCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chats&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chat-detail&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats/:chatId&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/chat-detail.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatDetailCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.account&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/account&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-account&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-account.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;AccountCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if none of the above states are matched, use this as the fallback</span>
</span><span class='line'>  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">(</span><span class="s1">&#39;/tab/dash&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, we use the <code>$stateProvider</code> to set different states. A state is equivalent to a route in your app. You can call the <code>state</code> method to create a new route, this accepts the name of the state as its first argument and the config as its second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="c1">// setup an abstract state for the tabs directive</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tab&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kr">abstract</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;templates/tabs.html&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>A state can be abstract or not. You usually declare a state as an abstract one if it has a child state. In the above example the tab state is an abstract one. This means you don&rsquo;t access it directly from your browser. Instead, you access its child states. In this case the child states are <code>dash</code>, <code>chats</code>, <code>chat-detail</code> and <code>account</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.dash&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dash&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-dash&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-dash.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;DashCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'> <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chats&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chat-detail&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats/:chatId&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/chat-detail.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatDetailCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.account&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/account&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-account&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-account.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;AccountCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>An abstract state takes the following options:</p>

<ul>
<li><strong>url</strong> &ndash; the URL that you will use to access the state. For an abstract state, this would be the parent URL that each child state will use.</li>
<li><strong>abstract</strong> &ndash; a boolean value that is set to <code>true</code> to specify that the state is an abstract one.</li>
<li><strong>templateUrl</strong> &ndash; the path to where the template is located locally.</li>
</ul>


<p>A child state would accept the same options, the only difference is that you have to set the <code>views</code> option and the add a single property with the name of the view. Then that property would have the <code>templateUrl</code> property and <code>controller</code> which is basically the name of the controller that the state uses. The <code>controller</code> property is optional, you can set this on the template if you want. But you have to note that you can&rsquo;t specify the controller name on both the template and the <code>app.js</code> file. Otherwise methods that run every time the controller is executed is called twice. Here is a sample child state. As you can see the <code>url</code> is set to <code>/chats</code> but you would need to specify the URL of the abstract state first. So accessing it in the brower would be <code>tab/chats</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we specify the views with the <code>view</code> property. As I&rsquo;ve said earlier, this accepts the name of the view as its property. This is tied with the name of the view in the <code>ion-tabs</code> directive. You can find it in the <code>templates/tabs.html</code> file. The view <code>name</code> property in the <code>ion-nav-view</code> directive should be the same as the name of view in your state declaration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">Create tabs with an icon and label, using the tabs-positive style.</span>
</span><span class='line'><span class="c">Each tab&#39;s child &lt;ion-nav-view&gt; directive will have its own</span>
</span><span class='line'><span class="c">navigation history that also transitions its views in and out.</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'><span class="nt">&lt;ion</span><span class="na">-tabs</span> <span class="na">class=</span><span class="s">&quot;tabs-icon-top tabs-color-active-positive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Dashboard Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Status&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-pulse&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-pulse-strong&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/dash&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-dash&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Chats Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Chats&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-chatboxes-outline&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-chatboxes&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/chats&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-chats&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Account Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Account&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-gear-outline&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-gear&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/account&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-account&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>/ion-tabs&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now open up the <code>controllers.js</code> file. On the first line we&rsquo;re declaring a new module called <code>my_awesome_app.controllers</code>. If you remember from earlier, this is one of the modules that we specified as a dependency for the main module in the <code>app.js</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we create a new controller by using the <code>controller</code> method. This accepts the name of the controller as its first argument and the function to execute when the controller is accessed as its second. For the <code>DashCtrl</code>, we have an empty function body as we do not need to execute anything.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;DashCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>ChatCtrl</code>, we get a list of chat messages using the <code>Chats</code> services. We&rsquo;ll go through that in a moment, but for now understand that to use a service you need to declare it as a parameter in the function body of the controller. This way you can access it from inside the function and call the different methods that are accessible from that service. Also notice that we have also declared a <code>$scope</code> variable as a parameter. This allows us to pass in data to the current scope. We do this so we can access the data in the view. Back to the <code>Chats</code> service, we are calling the <code>all</code> method in the <code>Chats</code> service. This returns an array of messages. We then assign whatever it returns to the <code>chats</code> property in the <code>$scope</code>. Note that you can name it anything you want. Next we&rsquo;re also assigning a <code>remove</code> method to the <code>$scope</code>. What this does is remove a specific chat message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatsCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Chats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// With the new view caching in Ionic, Controllers are only called</span>
</span><span class='line'>  <span class="c1">// when they are recreated or on app start, instead of every page change.</span>
</span><span class='line'>  <span class="c1">// To listen for when this page is active (for example, to refresh data),</span>
</span><span class='line'>  <span class="c1">// listen for the $ionicView.enter event:</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">//$scope.$on(&#39;$ionicView.enter&#39;, function(e) {</span>
</span><span class='line'>  <span class="c1">//});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">chats</span> <span class="o">=</span> <span class="nx">Chats</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Chats</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">chat</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the view utilizing the <code>ChatsCtrl</code>. It&rsquo;s in the <code>templates/tab-chats.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;Chats&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-list</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-item</span> <span class="na">class=</span><span class="s">&quot;item-remove-animate item-avatar item-icon-right&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;chat in chats&quot;</span> <span class="na">type=</span><span class="s">&quot;item-text-wrap&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/chats/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h2&gt;</span><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon ion-chevron-right icon-accessory&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ion</span><span class="na">-option-button</span> <span class="na">class=</span><span class="s">&quot;button-assertive&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;remove(chat)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Delete
</span><span class='line'>        <span class="err">&lt;</span>/ion-option-button&gt;
</span><span class='line'>      <span class="err">&lt;</span>/ion-item&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-list&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ChatDetailCtrl</code> is the controller responsible for showing the details of a specific chat message. Here we&rsquo;re using a new parameter in the function body called <code>$stateParams</code>. This allows us to get the value of a specific route parameter. Route parameters are passed in the URL of the app. If you go back to the <code>app.js</code> file, you can see from the <code>tab.chat-detail</code> state&rsquo;s URL is <code>/chats/:chatId</code>. The <code>:chatId</code> here is the route parameter. Every route parameter in Angular always starts in a colon followed by the name. So in the <code>ChatDetailCtrl</code> we are merely getting the value passed in this route parameter and then using it as an argument for the <code>get</code> method in the <code>Chats</code> service. This method basically fetches a specific chat message from the array of chats. We then just assign the value to the <code>chat</code> variable in the <code>$scope</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatDetailCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">,</span> <span class="nx">Chats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">chat</span> <span class="o">=</span> <span class="nx">Chats</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">$stateParams</span><span class="p">.</span><span class="nx">chatId</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see this being used in the <code>templates/chat-detail.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span> <span class="na">class=</span><span class="s">&quot;padding&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;&quot;</span> <span class="na">style=</span><span class="s">&quot;width: 64px; height: 64px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have the <code>AccountCtrl</code>. Nothing fancy here. All we&rsquo;re doing is passing in an object to the scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;AccountCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enableFriends</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see this being used from the view in <code>templates/tab-account.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;Account&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-list</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-toggle</span>  <span class="na">ng-model=</span><span class="s">&quot;settings.enableFriends&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Enable Friends
</span><span class='line'>    <span class="err">&lt;</span>/ion-toggle&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-list&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>From the above HTML, the <code>enableFriends</code> property is used as the model for the <code>ion-toggle</code> directive which basically just outputs a switch UI. In this case the switch should be turned on since the value of the <code>enableFriends</code> property is <code>true</code>.</p>

<p>Now we take a look at the service file at <code>js/services.js</code>. Same with the controllers, we declare a new module called <code>my_awesome_app.services</code>. From there we call the <code>factory</code> method in order to create a service. We call this service <code>Chats</code>. Inside the function body, we have an array of objects containing the details for each chat message. After that, we expose the methods that we want the controllers that will use this service to use by returning them. Here we have 3 methods, the <code>all</code> method which just returns all the chat messages. The <code>remove</code> method which removes a specific chat message from the array of chat messages. And last is the <code>get</code> method, which returns a specific chat message based on the id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Chats&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Might use a resource here that returns a JSON array</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Some fake testing data</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">chats</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ben Sparrow&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;You on your way?&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/514549811765211136/9SgAuHeY.png&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Max Lynx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;Hey, it\&#39;s me&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://avatars3.githubusercontent.com/u/11214?v=3&amp;s=460&#39;</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Adam Bradleyson&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;I should buy a boat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/479090794058379264/84TKj_qa.jpeg&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Perry Governor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;Look at my mukluks!&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/598205061232103424/3j5HUXMY.png&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mike Harrington&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;This is wicked good ice cream.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/578237281384841216/R3ae1n61.png&#39;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">all</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">chats</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">chats</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">chats</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">chat</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chatId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">chats</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">chats</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">===</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">chatId</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">chats</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Plugins</h3>

<p>Plugins allows you to add native functionalities to your app. Things like the camera, calendar, contacts, or flashlight can be controlled using JavaScript through the use of plugins.</p>

<p>You can install plugins by using the <code>ionic plugin add</code> command. Here&rsquo;s an example of how we might add the camera plugin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ionic</span> <span class="nx">plugin</span> <span class="nx">add</span> <span class="nx">cordova</span><span class="o">-</span><span class="nx">plugin</span><span class="o">-</span><span class="nx">camera</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decide later on that you no longer need a plugin, you can use the <code>ionic plugin rm</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ionic</span> <span class="nx">plugin</span> <span class="nx">rm</span> <span class="nx">cordova</span><span class="o">-</span><span class="nx">plugin</span><span class="o">-</span><span class="nx">camera</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every plugin already has the necessary instructions which will setup everything that is needed in order for it to work when installed. Things like putting the necessary permissions in the <code>AndroidManifest.xml</code> file so that you can use specific features of the device.</p>

<p>I won&rsquo;t dive in much into plugins, what&rsquo;s important is that you know they are available and you can use Google to look for them. There&rsquo;s the <a href="http://plugins.cordova.io/#/">Cordova Plugin Repository</a> and Github if you want to look for a plugin that can solve your specific problem.</p>

<h3>Changing the App Icon and Splash Screens</h3>

<p>To change the icon of the app, simply put an <code>icon.png</code>, <code>icon.psd</code>, or <code>icon.ai</code> on the <code>resources</code> directory in the root of your app. For the splash it&rsquo;s <code>splash.png</code>, <code>splash.psd</code>, or <code>splash.ai</code>. The recommended icon size is 500x500 and the splash image is 1200x1200. Once you&rsquo;ve added the files, execute <code>ionic resources</code> from the terminal to generate your icons and splash screens.</p>

<h3>Compiling to Android</h3>

<p>You can create an apk file using the <code>ionic build android</code> command. This will create the <code>android-debug.apk</code> file under the <code>platforms/android/build/outputs/apk</code> directory. Note that this is the debug version of the app. You can use this for testing on your mobile device. But you cannot submit it to the Google Play Store. To do that you&rsquo;ll have to build a release version for your apk by adding the <code>--release</code> option when using the <code>cordova build</code>. Note that we&rsquo;re using <code>cordova</code> instead of <code>ionic</code>. Ionic simply wraps the Cordova commands so you can use them interchangeably.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cordova</span> <span class="nx">build</span> <span class="o">--</span><span class="nx">release</span> <span class="nx">android</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, generate a keystore for the app by using <code>keytool</code>. Breaking down the command below, we&rsquo;re setting the following options:</p>

<ul>
<li><strong>genkey</strong> &ndash; not actually an option, but a command to generate the key.</li>
<li><strong>keystore</strong> &ndash; the file name you want to give to the keystore</li>
<li><strong>alias</strong> &ndash; the alias of the key.</li>
<li><strong>keyalg</strong> &ndash; the algorithm to be used to generate the key.</li>
<li><strong>keysize</strong> &ndash; the size of the key in bytes.</li>
<li><strong>validity</strong> &ndash; the number of days in which this keystore will be valid.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keytool</span> <span class="o">-</span><span class="nx">genkey</span> <span class="o">-</span><span class="nx">v</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="o">-</span><span class="nx">alias</span> <span class="nx">demoApp</span> <span class="o">-</span><span class="nx">keyalg</span> <span class="nx">RSA</span> <span class="o">-</span><span class="nx">keysize</span> <span class="mi">2048</span> <span class="o">-</span><span class="nx">validity</span> <span class="mi">10000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will ask you for the keystore password and some questions. Just provide an answer to each question since the information that you supply will be used to generate the keystore. Here&rsquo;s how it looks like in my machine:</p>

<p><img src="http://wern-ancheta.com/images/posts/ionic/keytool.png" alt="keytool" /></p>

<p>If you cannot use keytool, then maybe you don&rsquo;t have Java installed yet. You can install it by executing the following commands in order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="k">default</span><span class="o">-</span><span class="nx">jre</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="k">default</span><span class="o">-</span><span class="nx">jdk</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">openjdk</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="nx">jre</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">openjdk</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="nx">jdk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re ready to sign the apk file with the keystore that we generated. To do that, first copy the <code>demoApp.keystore</code> to the <code>platforms/android/build/outputs/apk</code> directory, open a terminal on that directory then execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jarsigner</span> <span class="o">-</span><span class="nx">verbose</span> <span class="o">-</span><span class="nx">sigalg</span> <span class="nx">SHA1withRSA</span> <span class="o">-</span><span class="nx">digestalg</span> <span class="nx">SHA1</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="nx">android</span><span class="o">-</span><span class="nx">release</span><span class="o">-</span><span class="nx">unsigned</span><span class="p">.</span><span class="nx">apk</span> <span class="nx">demoApp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will ask you for the password that you entered earlier when you created the keystore.</p>

<p>Finally, to generate the apk that you can submit in the Google Play Store, use <code>zipalign</code>. This accepts the name of the unsigned apk file and the name of the signed apk which it will generate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">zipalign</span> <span class="o">-</span><span class="nx">v</span> <span class="mi">4</span> <span class="nx">android</span><span class="o">-</span><span class="nx">release</span><span class="o">-</span><span class="nx">unsigned</span><span class="p">.</span><span class="nx">apk</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">apk</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need the key you can execute the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keytool</span> <span class="o">-</span><span class="nx">exportcert</span> <span class="o">-</span><span class="nx">alias</span> <span class="nx">demoApp</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="o">|</span> <span class="nx">openssl</span> <span class="nx">sha1</span> <span class="o">-</span><span class="nx">binary</span> <span class="o">|</span> <span class="nx">openssl</span> <span class="nx">base64</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned the basics of working with the Ionic framework. We have only scratched the surface in this tutorial, be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://ionicframework.com/docs/">Ionic Docs</a></li>
<li><a href="http://learn.ionicframework.com/formulas/">Ionic Formulas</a></li>
<li><a href="http://cordova.apache.org/docs/en/5.0.0/">Cordova Docs</a></li>
<li><a href="http://ngcordova.com/">Ng-Cordova</a></li>
<li><a href="http://plugins.cordova.io/#/">Cordova Plugin Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Twig Templating Engine in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php/"/>
    <updated>2015-08-31T21:40:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php</id>
    <content type="html"><![CDATA[<p>Separation of concerns is a design principle in Computer Science for separating a program into sections, each with their own responsibility. MVC, an architectural pattern used in most PHP frameworks allows developers to implement separation of concerns. One part of MVC is the View which handles the presentation layer of the application. In this tutorial I&rsquo;ll walk you through Twig, a templating engine for PHP. This allows us to separate the view from the business logic of the app.</p>

<h3>Installation</h3>

<p>Execute the following on your terminal to install Twig.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require twig/twig</span></code></pre></td></tr></table></div></figure>


<p>In your working directory, create a <code>template</code> folder for storing the Twig templates and a <code>cache</code> folder for storing the cached templates. Twig puts the compiled version of templates into this folder so that the next time it&rsquo;s requested and there&rsquo;s no change in the template, it serves the cached version instead. Be sure to change the file permissions of the <code>cache</code> folder so that Twig can write into it. I had to do the following to have it work.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod -R 777 cache</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To use Twig, include the vendor autoload file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a new instance of the <code>Twig_Loader_Filesystem</code> class and supply the path to the <code>templates</code> directory as its argument. After that, create a new instance of the <code>Twig_Environment</code> class and pass in the loader and an array of options as its argument. In this case, only the <code>cache</code> item is specified. This allows you specify the path of the <code>cache</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Filesystem</span><span class="p">(</span><span class="s1">&#39;templates&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$loader</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;cache&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;cache&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To load a template, use the <code>loadTemplate</code> method on the Twig instance that you created earlier. Then pass in the path to the template that you want to use. After that, you can now output the view by calling the <code>render</code> method on the template. This accepts the data that you want to pass in to the view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">19</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>On the <code>templates</code> directory, create the <code>index.html</code> file that you were referring to in the <code>loadTemplate</code> method and then add the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>twig<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hi {{ name }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>You are {{ age }} years old<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>From the above code, you can see that the way the individual items in the array that you passed in the <code>render</code> method is by wrapping the name of the item in double curly braces. Here&rsquo;s how it&rsquo;s going to look like when access from the browser.</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/twig-first.png" alt="twig hello world" /></p>

<p>Note that Twig is pretty forgiving when it comes to data that you pass in to the template. For example, if you do not pass in the <code>age</code>, it wouldn&rsquo;t throw an error at you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Outputting Raw HTML</h4>

<p>Twig automatically escapes HTML so if you pass in HTML as data for your template, it is outputted as is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="s1">&#39;html_string&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;h3&gt;hi Im an html inside a template&lt;/h3&gt;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to get the HTML interpreted by the browser, you have to use the <code>raw</code> filter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hi {{ name }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>You are {{ age }} years old<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    {{ html_string | raw }}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>Looping through Arrays</h4>

<p>You can also load arrays for the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;users&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Yoh Asakura&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ash Ketchum&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">14</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Naruto Uzumaki&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">25</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And the way you output them in your template is by using the <code>for</code> tag. Here&rsquo;s an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Users<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Age<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% for user in users %}
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>{{ user.name }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>{{ user.age }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        {% endfor %}
</span><span class='line'>        
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the <code>for</code> tag, assign an alias for each item in the array that you specified. In this case, the array is <code>users</code> and each item is represented by the <code>user</code> variable. Inside the <code>for</code> tag, you can then access each user field. After you have outputted all the user details, close it with the <code>endfor</code> tag.</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/array.png" alt="for" /></p>

<h4>Conditions</h4>

<p>Twig allows you to use tags such as <code>if</code>, <code>else</code>, <code>elseif</code>, and <code>if not</code> for checking for simple conditions in your templates. Here&rsquo;s an example of using the <code>if</code> tag for checking if the age of the user is greater than or equal to 14.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Users<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Age<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% for user in users %}
</span><span class='line'>            {% if user.age &gt;= 14 %}
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>{{ user.name }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>{{ user.age }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>            {% endif %}
</span><span class='line'>        {% endfor %}
</span><span class='line'>        
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wern-ancheta.com/images/posts/twig/if.png" alt="if" /></p>

<h4>Layouts</h4>

<p>Layouts can be used in order to avoid repitition of re-occurring elements of the page such as the header and the footer. To use layouts, you need a base template (<code>base.html</code>). This is the template that contains all the re-occurring elements of the page. This is essentially the main template in which all the other templates (child templates) inherits from. Your main template is where you usually declare the content block. This is the block that&rsquo;s going to get replaced by the content that you supply on your child template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span><span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% block content %}{% endblock %}
</span><span class='line'>        
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From your child template (<code>child.html</code>), use the <code>extends</code> tag to let Twig know which template you want to inherit from. Below it, you use the same block that you used in your main template. In this case the name of the block is <code>content</code>. Inside the block, you put in the contents that you want to get rendered.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% extends &quot;base.html&quot; %}
</span><span class='line'>{% block content %}
</span><span class='line'>   <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that in the main template there&rsquo;s also a stylesheet. You need to create it on the <code>assets/css</code> directory. Here&rsquo;s the contents of the <code>style.css</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, from your PHP file, all you need to do is render the child template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;child.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my page&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s how its going to look like:</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/layouts.png" alt="layouts" /></p>

<h4>Filters</h4>

<p>Twig also comes with filters. Filters as the name suggests, allows you to filter the content that you pass into it.</p>

<h5>Format</h5>

<p>If you need to perform a find and replace on a string, you can use the <code>format</code> filter. Here&rsquo;s how you can use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ami Damaru&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">110</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'>{{ &quot;Hi I&#39;m %s, I am %s years old&quot; | format(name, age) }}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you have seen above, to use the <code>format</code> filter, simply pipe it to the string that you want to perform find and replace on. Each string that you want to replace within the string should be <code>%s</code>. So in this case, the name and age is substituted for that value. It should result in the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Hi I&#39;m Ami Damaru, I am 110 years old
</span></code></pre></td></tr></table></div></figure>


<h5>nl2br</h5>

<p>The <code>nl2br</code> filter allows you to replace line breaks (<code>\n</code>) in your string with <code>&lt;br /&gt;</code> tags. This is useful if you want to output a string which uses line breaks instead of <code>&lt;br /&gt;</code> tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;string&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;The quick brown fox</span><span class="se">\n</span><span class="s2"> jumps over the heade</span><span class="se">\n</span><span class="s2"> of the lazy dog&quot;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'>    {{ string | nl2br }}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>date and date_modify</h5>

<p>The <code>date</code> and <code>date_modify</code> filters allows you to modify the formatting of a date.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$date</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2015-03-17&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{ date | date_modify(&quot;+1 week&quot;) | date(&#39;M d, Y&#39;) }}
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Aug 03, 2015
</span></code></pre></td></tr></table></div></figure>


<h5>upper and lower</h5>

<p><code>upper</code> and <code>lower</code> filters allows you to change the individual letters in a string into uppercase or lowercase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{{ &#39;MAKE ME LOWER&#39; | lower }}
</span><span class='line'>{{ &#39;make me higher&#39; | upper }}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The output will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>make me lower MAKE ME HIGHER
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with Twig, a templating engine for PHP. For more information about Twig, check out the <a href="http://twig.sensiolabs.org/documentation">official docs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Playing Clash of Clans Can Teach You About Life]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/23/what-playing-clash-of-clans-can-teach-you-about-life/"/>
    <updated>2015-08-23T12:33:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/23/what-playing-clash-of-clans-can-teach-you-about-life</id>
    <content type="html"><![CDATA[<ol>
<li><p><strong>You need to prioritize</strong>. There&rsquo;s only like 2 or 3 builder huts when you start playing the game.
That&rsquo;s why it&rsquo;s important to prioritize which things you upgrade. This is because upgrading takes time. And cancelling an upgrade will only return you half of the original resources you spent on the upgrade.
This usually means there&rsquo;s no turning back after you&rsquo;ve clicked on that upgrade button.
Just like in life you have to prioritize. You can&rsquo;t just aimlessly be doing everything that seems interesting.</p></li>
<li><p><strong>You need the right strategy for every raid that you do</strong>. Not every base is the same. There are those whose traps are laid outside the walls. This usually means that it will be triggered the moment your troops lay their first step to loot the resources. There are traps that are laid right before key defenses such as the mortar or air defense. Just like in life you need to carefully plan out your every move, especially the most important one&rsquo;s such as career decisions.</p></li>
<li><p><strong>You can&rsquo;t protect everything</strong>. Put your town hall outside in order to protect what&rsquo;s really important. Some players might disagree to this and say that if you have designed your base well then that&rsquo;s the ultimate defense that keeps other players from attacking your village. Some players might also be prioritizing trophies instead of loots and that&rsquo;s why they keep their town halls at the very center of their village. Those are all valid arguments. Some players might value trophies more than the loots. But come to think of it. There&rsquo;s over 6 million people who have it installed on Android. I don&rsquo;t know about iOS but 6 million people is a lot. This means that no matter how strong you think your village is. There&rsquo;s always someone who can 3-star it effortlessly and take away a ton of loot. So it&rsquo;s important to realize that you can&rsquo;t protect everything. You have to prioritize what you really want to protect and design your village in such a way that what you want to protect is protected in the best possible way. Just like in life you can&rsquo;t get everything that you want. It&rsquo;s important to love what you currently have.</p></li>
<li><p><strong>There&rsquo;s always someone out there whose stronger than you</strong>. There&rsquo;s no need to feel bad whenever some other 3-starred your village. Just like in life you don&rsquo;t need to feel bad about yourself whenever you see someone who is effortlessly better than you at the thing you&rsquo;re good at. What&rsquo;s important is that you work hard to get better each day.</p></li>
<li><p><strong>Revenge is for the weak</strong>. I don&rsquo;t know for other players but I pretty much don&rsquo;t care about other players attacking my village. It doesn&rsquo;t really matter whether they 3-starred me or they took a whole bunch of loot. They&rsquo;re just playing the game just like me. It&rsquo;s natural for your village to get attacked. It&rsquo;s natural for other players to take some resources out of your village. Just like it&rsquo;s natural for you take others as well. But maybe it&rsquo;s just me. I heard you would get a lot more trophies if you revenge on someone. But trophies aren&rsquo;t really important to me. I pretty much gave up on trying to go higher when I reached the crystal league. I tried going higher in order to get the gems as the reward but it&rsquo;s just hard to look for town halls that are unprotected.</p></li>
<li><p><strong>Time is money but you can also use money to buy time</strong>. When I gave up on reaching the master league in order to get the gem reward for reaching it. And eventually buy the 5th builder with it. I just bought some gems with some real money in order to buy the 5th builder. I don&rsquo;t really regret it since I just saved myself a lot of time trying to find unprotected town halls and get a measely amount of trophy. This is an example of buying time with money. With the 5th builder upgrades would be faster. And I no longer need to aim to get the gem reward for entering the master, champion, titan or legend leagues.</p></li>
<li><p><strong>Patience</strong>. Upgrades takes time, creating troops and spells takes time. Gold mines, elixir collectors, heck dark elixir drills takes time. Heroes takes time to sleep. Cool-down for requesting clan castle troops takes time. Searching for a good village to raid takes time. Patience is really a virtue. Especially so when it comes to playing clash of clans. Where every move you do takes time.</p></li>
<li><p><strong>Collaboration</strong>. It&rsquo;s important to collaborate with your clan mates during a war. You can&rsquo;t always have a mirror that directly matches yours. Often times your mirror is far stronger than you are. Sometimes the town hall doesn&rsquo;t even match. That&rsquo;s why it&rsquo;s important to collaborate with your clan mates so that you can adjust accordingly. Just like in life it&rsquo;s important to collaborate with your fellow employees, with your community and with your family.</p></li>
<li><p><strong>Progress will come naturally if you just stick to it</strong>. When I first started I really envied my friends on facebook because their villages looks so strong and tough and mine looks really week. But 6 months later I saw that my village is pretty much already on par with them or even stronger. I&rsquo;m not addicted to the game though. I really only play on my free time. But I always stick to it every day. And that is why I can see that I&rsquo;ve come a long way since I first started. This is similar to anything that you want to achieve in life. As a developer I always see to it that I learn something new each day. Or have a better understanding of what I previously learned. Just stick to doing something each day and progress will come naturally.</p></li>
<li><p><strong>Even heroes needs sleep</strong>. So do you. Sleep is needed in order to recharge your mind and body. The brain needs sleep in order to consolidate the things you&rsquo;ve learned during the day. So even if you think you&rsquo;re a superhero who only needs 3 hours of sleep in order to get by. You&rsquo;re not. You can&rsquo;t really hack your way out of sleep. That&rsquo;s what makes us human. We need rest in order to recharge.</p></li>
<li><p><strong>Donate and you will be rewarded</strong>. In clash of clans there is this donation system wherein a clan member can ask for troops to be put in the clan castle. Those troops will serve as guards for your village. If you always donate troops whenever someone asks for it, you will be remembered and your clan mates would love to donate troops to you as well. The same is true in life as well. Always donate to the less fortunate people and you will be rewarded.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Naughtyfire]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/15/introduction-to-naughtyfire/"/>
    <updated>2015-08-15T14:36:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/15/introduction-to-naughtyfire</id>
    <content type="html"><![CDATA[<p>Welcome to yet another introduction to a side-project of mine. This time I&rsquo;d like to talk about Naughtyfire.</p>

<p>Naughtyfire allows remote (home-based) developers to automatically notify their boss that they are taking a day off for a specific date. Settings, clients and events can be set in the web interface. All you need to do is to put it in the <code>www</code> or <code>public_html</code> directory in your home folder.</p>

<p>Notifications are done via email through a mail provider of your choice. I&rsquo;ve only tested Mandrill configuration but it should work with other mail service providers supported by SwiftMailer.</p>

<p>This project is meant to be used locally on your own computer. But you can also upload it on a server and set it up from there.</p>

<h3>Dependencies</h3>

<ul>
<li>Apache</li>
<li>MySQL</li>
<li>Composer</li>
<li>SwiftMailer</li>
<li>Phinx</li>
</ul>


<h3>How to Use</h3>

<ul>
<li>Put it on your <code>www</code> or <code>public_html</code> directory</li>
<li>If you have installed it on a folder under your <code>www</code> or <code>public_html</code> directory, you have to setup a virtual host for that path and then use it when accessing it from the browser. Accessing it via <code>http://localhost/naughtyfire</code> wouldn&rsquo;t work since the assets are linked using an absolute path. I recommend seetting the host name to <code>naughtyfire.dev</code>.</li>
<li>Navigate to the naughtyfire root directory then install the libraries by executing <code>composer install</code> on your terminal.</li>
<li>Create the database that naughtyfire will use.</li>
<li>Create a <code>phinx.yml</code> file and update the database credentials. You only have to update the values under the <code>development</code> configuration. Specifically the <code>name</code>, <code>user</code> and <code>pass</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paths:
</span><span class='line'>    migrations: %%PHINX_CONFIG_DIR%%/migrations
</span><span class='line'>
</span><span class='line'>environments:
</span><span class='line'>    default_migration_table: phinxlog
</span><span class='line'>    default_database: development
</span><span class='line'>    production:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: production_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    development:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: naughtyfire
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    testing:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: testing_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Access the host that you have selected (e.g. <code>naughtyfire.dev</code>) from your browser. The default page is the page for creating new events. But you can also access the following pages.</p>

<ul>
<li><code>/settings</code> &ndash; for updating the settings. Here you can set the twilio credentials and mail settings. If you leave the twilio credentials or mail settings blank, the notification wouldn&rsquo;t work. Choose either one of those or both and then supply the correct values.</li>
<li><code>/recepients</code> &ndash; for listing current recepients.</li>
<li><code>/recepients/new</code> &ndash; for creating a new recepient.</li>
</ul>
</li>
<li><p>Open cron.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crontab -e</span></code></pre></td></tr></table></div></figure>


<p>Use <code>wget</code> to request for the notifer URL once a day.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 0 * * * wget -O - http://naughtyfire.dev/notify &gt;/dev/null 2&gt;&1</span></code></pre></td></tr></table></div></figure>


<p>Here are a couple of screenshots of the app.</p>

<p><img src="http://wern-ancheta.com/images/posts/naughtyfire/new-event.png" alt="new event" /></p>

<p><img src="http://wern-ancheta.com/images/posts/naughtyfire/mail-sample.png" alt="mail sample" /></p>

<p>You can find more details about this project on <a href="http://wern-ancheta.com/projects/naughtyfire/">its project page</a>.</p>

<p>If you have an idea or you want to contribute to this project, feel free to check it out, fork it, or create an issue in its <a href="https://github.com/anchetaWern/naughtyfire">github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My OSX Development Environment]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment/"/>
    <updated>2015-08-09T20:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had my fair share of <a href="http://wern-ancheta.com/blog/2013/07/13/my-linux-development-environment/">Windows</a> and <a href="http://wern-ancheta.com/blog/2013/05/19/my-windows-development-environment/">Linux</a> development. This time I&rsquo;d like to share with you the development tools I use in my OSX machine.</p>

<h3>Homebrew</h3>

<p>A must have for every Mac Developer, the missing package manager for OS X. If you came from Ubuntu, this is basically the same as <code>apt-get</code>. You can install it using ruby. Ruby already comes pre-installed in mac so you can execute the following command directly.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done you can now install every developer that you can think of by using <code>brew install</code>. Packages in Homebrew are called formulas, you can find them on <a href="http://brewformulas.org/">homebrewformulas.org</a> or in the <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">Homebrew repository at Github</a>.</p>

<h3>MAMP</h3>

<p>MAMP is the equivalent of the LAMP stack on Mac. It basically stands for Mac Apache MySQL PHP. You can install it by downloading the installer from the <a href="https://www.mamp.info/en/downloads/">MAMP downloads page</a>. These days I only use A of MAMP for testing scripts. Since I usually develop PHP applications using the Laravel framework which can already serve your project while you&rsquo;re developing. This basically takes care of the A and P part of MAMP.</p>

<h3>Sublime Text</h3>

<p>I&rsquo;m not a big fan of IDE&rsquo;s (Integrated Development Environment) so I use a plain old text editor when writing code. My text editor of choice is still Sublime Text mainly due to how its simplicity and good performance. It just allows me to code without having to think too much about how I can use the different bells and whistles. You can download the installer from the <a href="http://www.sublimetext.com/2">downloads page</a>.</p>

<h3>Node</h3>

<p>Node has become quite the dependency for every thing. Development tools such as Gulp and Sass requires Node.js to be installed. Well not exactly Node.js but NPM. But why would you want to install Node without NPM? They&rsquo;re like inseparable twin brothers. So better install Node which already comes with NPM since sooner or later you would also need Node anyway. You can install Node by using the Node Version Manager (NVM). You can download it by using curl and then piping it to the shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can list the node versions that are currently available.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls-remote</span></code></pre></td></tr></table></div></figure>


<p>From there you can install the version that you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install v0.12.7</span></code></pre></td></tr></table></div></figure>


<p>And then finally set it as default.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias default v0.12.7
</span><span class='line'>nvm use default</span></code></pre></td></tr></table></div></figure>


<h3>Git</h3>

<p>Git is my version control system of choice. You can install it via homebrew.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install git</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to set your global config after installing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "Wern Ancheta"
</span><span class='line'>git config --global user.email "myemail@gmail.com"</span></code></pre></td></tr></table></div></figure>


<p>You can also set the credential helper to use osxkeychain. This allows you to cache your password so that you don&rsquo;t need to enter it every time you push to the server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global credential.helper osxkeychain</span></code></pre></td></tr></table></div></figure>


<h3>Xcode</h3>

<p>I needed Xcode to compile and build the Cordova app that I was developing. Xcode comes with an iOS simulator which is great for testing Cordova apps to be deployed on an iOS device. You can install it using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcode-select --install</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t want to deal with the command-line, you can simply get it from <a href="https://developer.apple.com/downloads/">the apple developer downloads page</a> and look for the most recent version of Xcode. Be warned that Xcode is 2.6GB in size so it might take a while to download depending on your download speed.</p>

<h3>Cordova</h3>

<p>Cordova is a set of device APIs that allows mobile app developers to access native device functions such as the camera through JavaScript. You can install it by using npm. Cordova basically does all the heavy-lifting when it comes to developing Hybrid Mobile Apps.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cordova</span></code></pre></td></tr></table></div></figure>


<h3>Ionic</h3>

<p>Ionic is my Hybrid Mobile App Framework of choice. You can also install it with npm.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g ionic</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Staticizer]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer/"/>
    <updated>2015-08-02T19:33:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer</id>
    <content type="html"><![CDATA[<p>Welcome to yet another promotional post on another side-project of mine. This time it&rsquo;s Staticizer, a static site generator.</p>

<h3>Yet Another Static Site Generator?</h3>

<p>No. This isn&rsquo;t unlike any static site generator out there. I created this project to create a static version for my <a href="https://github.com/anchetaWern/antares">antares project</a>. So you can use this to create a static version of an existing project. All it really does is request a URL in your local machine and create an HTML file out of it. This works best for websites that has only a few pages.</p>

<h3>How to Use</h3>

<p>First you have to update the <code>index.php</code> file and write your own code for fetching the pages in the website you want to convert to a static one.</p>

<p>Next, update the <code>config.php</code> file and change the values for the <code>BASE_URL</code>, <code>STATIC_PATH</code> and <code>JSON_PATH</code>. The <code>BASE_URL</code> is the base URL of the website you want to convert. The <code>STATIC_PATH</code> is the base directory where you want to save the generated HTML files. The <code>JSON_PATH</code> is the path to the json files inside the <code>STATIC_PATH</code> that you specified. This is optional. Only use this if you are serving json files on the original website.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;BASE_URL&#39;</span><span class="p">,</span> <span class="s1">&#39;http://antaresapp.dev/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;STATIC_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;site&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;JSON_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you have to manually copy front-end assets (css, script, images) in the <code>STATIC_PATH</code>.</p>

<h4>Deployment</h4>

<p>This works best with Github pages. Just create a new Github account that directly matches the name of the website. As an example, I created a Github account and named it antaresapp. I then created a new repository named <a href="https://github.com/antaresapp/antaresapp.github.io">antaresapp.github.io</a>. This will serve as the repository that the Github page will use. Remember that you can only create a single Github page for every Github account.</p>

<p>On your static path, initialize a new Git repo and add the Github page repository as a remote.</p>

<p>Lastly, you can use this project by executing the following commands from your terminal.</p>

<p>To update the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php update.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate the static HTML files and JSON files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php generate.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To push the changes to the Github repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php push.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know more about the project, you can check it out <a href="https://github.com/anchetaWern/staticizer">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Video Calls with PeerJS]]></title>
    <link href="http://wern-ancheta.com/blog/2015/07/26/implementing-video-calls-with-peerjs/"/>
    <updated>2015-07-26T16:31:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/07/26/implementing-video-calls-with-peerjs</id>
    <content type="html"><![CDATA[<p>Picking up from where we left off <a href="http://wern-ancheta.com/blog/2015/05/03/implementing-audio-calls-with-peerjs/">last time</a>. Let&rsquo;s now try to add a video on our simple calling app with PeerJS. If you haven&rsquo;t read my previous tutorial, go ahead and read it as this article wouldn&rsquo;t make sense if you haven&rsquo;t yet.</p>

<p>First, we still need to use the same scripts we used on the last tutorial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdn.peerjs.com/0.3/peer.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//www.WebRTC-Experiment.com/RecordRTC.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But for our HTML, we need to replace the <code>audio</code> element with <code>video</code>. We also set the video to autoplay so that as soon as the stream becomes available, the video starts playing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;start-call&quot;</span><span class="nt">&gt;</span>start call<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;video</span> <span class="na">controls</span> <span class="na">autoplay</span><span class="nt">&gt;&lt;/video&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For our custom script, we still have the <code>getParameterByName</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\[]/</span><span class="p">,</span> <span class="s2">&quot;\\[&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\]]/</span><span class="p">,</span> <span class="s2">&quot;\\]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[\\?&amp;]&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;=([^&amp;#]*)&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">results</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the <code>getAudio</code> function that we previously used for getting the audio input from the users device. We now replace it with <code>getVideo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getVideo</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span><span class="nx">audio</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">video</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the call is received, we now call the <code>getVideo</code> function instead of <code>getAudio</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onReceiveCall</span><span class="p">(</span><span class="nx">call</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;peer is calling...&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">call</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">getVideo</span><span class="p">(</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">call</span><span class="p">.</span><span class="nx">answer</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;answering call started...&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;an error occured while getting the video&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">call</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">,</span> <span class="nx">onReceiveStream</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once a stream is received, we also need to replace the element that we&rsquo;re selecting. So we now select the video element instead of audio.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onReceiveStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">video</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;video&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">video</span><span class="p">.</span><span class="nx">onloadedmetadata</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;loaded&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code for getting the current user and the peer is also the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">from</span> <span class="o">=</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="s1">&#39;from&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">to</span> <span class="o">=</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But for the creation of the peer, we now use the PeerServer Cloud service instead of our own since we already did that last time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">peer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Peer</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;Your PeerJS API Key&#39;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we listen for the open event on the peer just so we can check if the peer has actually been created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">peer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;My peer ID is: &#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also listen to the call event so we can receive incoming calls.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">peer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;call&#39;</span><span class="p">,</span> <span class="nx">onReceiveCall</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the start call button click event, we use the <code>getVideo</code> function and proceed as usual.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#start-call&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;starting call...&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">getVideo</span><span class="p">(</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;now calling &#39;</span> <span class="o">+</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">call</span> <span class="o">=</span> <span class="nx">peer</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">MediaStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">call</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">,</span> <span class="nx">onReceiveStream</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;an error occured while getting the video&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! We have implemented video calling using peerJS. Do note that this will consume more bandwidth than audio calls so the performance might be affected depending on the network.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I Learned While Writing for Sitepoint]]></title>
    <link href="http://wern-ancheta.com/blog/2015/07/18/things-i-learned-while-writing-for-sitepoint/"/>
    <updated>2015-07-18T14:30:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/07/18/things-i-learned-while-writing-for-sitepoint</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been more than a year since I started writing articles for <a href="http://www.sitepoint.com/">Sitepoint</a>. For those who don&rsquo;t know, Sitepoint is a provider of awesome content for web professionals. Anything web which you can think of, they have it. They have tutorials on HTML &amp; CSS, JavaScript, PHP, Ruby, Mobile, Design &amp; UX, Wordpress and even for web entrepreneurs. And they&rsquo;ve been doing it since the year 2000, I believe.
Going back to the main topic of this article, the things I learned while writing for Sitepoint. There&rsquo;s a lot that I&rsquo;ve learned especially on my writing skills. When I first started, I thought my grammar was already perfect. But I&rsquo;ve never been so wrong. Here&rsquo;s a list of things that I wish I knew when I first started:</p>

<ul>
<li>When using PHP libraries, always install it via Composer whenever possible.</li>
<li>When installing a single PHP library, it should be done via the command line using the <code>composer require</code> instead of adding the configuration in the <code>composer.json</code> file. Here&rsquo;s an example when installing the guzzle http library:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require guzzle/guzzle</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re using <a href="https://packagist.org">packagist</a>, you can easily install the package by using the command they have provided if you open a link to a specific library.</p>

<ul>
<li><p>Sharing files that are used in articles (SQL files, project files) should be done with <a href="https://github.com/">Github</a> if it&rsquo;s a whole project or <a href="https://gist.github.com/">Gist</a> if it&rsquo;s just a single file. I made a mistake of uploading it to the public folder in my Dropbox before.</p></li>
<li><p>Use shorthand echo when outputting something with PHP. So instead of using <code>&lt;?php echo 'hello world!'; ?&gt;</code>, it should be done with <code>&lt;?= 'hello world!' ?&gt;</code>.</p></li>
<li><p>Always use a framework when the examples gets too big so that the readers can easily try out the demo.</p></li>
<li><p>When using a framework, exercise separation of concerns. All routes should be in the routes file, and the routes file shouldn&rsquo;t contain anything else. I made a mistake of using a closure in the routes to respond to HTTP requests. This shouldn&rsquo;t be. Best practices should always be used even the code isn&rsquo;t used for a real project. So the routes should use a controller which will return the view or execute a specific function.</p></li>
<li><p>When making HTTP requests, such as when the article talks about a specific API. Guzzle should be used or some other HTTP library instead of Curl. Some readers might not have Curl installed.</p></li>
<li><p>In every article, the convenience of the readers should always be the priority. This means that it should be easy to read. If the article includes a sample project, it should be hosted using Github or Bitbucket. Some authors prefer having a single repository for each article. But for me I prefer having everything inside a <a href="https://github.com/anchetaWern/sitepoint_codes">single repository</a>. This is because the projects or sample codes that I host in there aren&rsquo;t really updated that much. I think there&rsquo;s no point having each one in it&rsquo;s own repository. My main purpose in hosting with Github is to give the readers a place to examine the code with syntax highlighting and the way each files relates to all the other files. So that they can easily setup a demo which they could play on in there local machine.</p></li>
<li><p>Write your article as if the reader is a beginner. Don&rsquo;t make assumptions on the skills of the reader. But this doesn&rsquo;t mean to say that you have to walk the reader through the installation of PHP or talk about the basics when you&rsquo;re writing an article about a specific API that uses PHP to make HTTP requests. Every PHP developer would already know that. In the first place, the reader shouldn&rsquo;t be reading your article while not knowing anything about PHP. There&rsquo;s always a minimum amount of requisite knowledge. Another example is when telling a reader to install a specific library using Composer. Not all PHP developer knows about Composer. I can&rsquo;t point you out to a statistic but always assume that there&rsquo;s someone out there who still installs libraries using Pear or zip files. In those cases you don&rsquo;t have to walk the reader through how to install Composer. Simply pointing the website out or linking to the page which shows how to install Composer should suffice.</p></li>
<li><p>Always try to include a demo as a supplement to the article. This is not something I&rsquo;ve personally done. Because most of the articles I write is about PHP, which runs on the server. With client-side articles (HTML, CSS and JavaScript) this is easy since there&rsquo;s Codepen, jsFiddle, jsbin, and many others which allows you to easily create a demo which the reader can use to have an idea what the output would be like.</p></li>
<li><p>Always give some time for the title of the article and the introduction. These are really important, this is what the readers sees the first when they come across your article in social media sites like Twitter. It&rsquo;s the first selling point of the article so it&rsquo;s important that it&rsquo;s catchy.</p></li>
<li><p>Include screenshots to supplement a specific instruction or to show the readers the output.</p></li>
<li><p>Don&rsquo;t just paste big blocks of code and explain it in a really long paragraph. Break down the block into parts and explain each part. Then you can paste the big block of code so the reader sees how it all comes together. Often times I do the alternate, so I paste the big block of code first and do a summary of what it does and then I break it down into multiple parts.</p></li>
<li><p>Always participate in the comments. It&rsquo;s not just about writing the article, and having it published. If readers comments on your article or asks a question, you should try to answer the best way possible even if you don&rsquo;t know the answer. Even if it&rsquo;s not a direct question or it&rsquo;s just an opinion by the reader. You should try to participate and include your own opinions as well. Honestly this is a part that I need to improve on. I don&rsquo;t always participate in the comments.</p></li>
<li><p><a href="https://medium.com/@hayley_mullen/beyond-youre-vs-your-a-grammar-cheat-sheet-even-the-pros-can-use-c2b90dae85ef">Common grammatical errors</a>. The common one&rsquo;s for me were the use of were vs. we&rsquo;re, its vs. it&rsquo;s. Everyday vs. every day. And where to place the comma or if it&rsquo;s even needed. I think I&rsquo;ve improved when it comes to this. But it&rsquo;s always nice to have a second pair of eyes looking at your work. For this I use the <a href="http://www.hemingwayapp.com/">hemmingway editor</a>. It grades the readability of an article, marks potential errors, and provides some really good tips about your article.</p></li>
<li><p>Use a bullet list instead of saying &lsquo;next&rsquo; or &lsquo;and then&rsquo; all the time. If a bullet list doesn&rsquo;t feel right, connect sentences with commas.</p></li>
<li><p>Property casing. Use all-caps when referring to an acronym. One of those acronyms is ID. It should be ID instead of id.</p></li>
<li><p>Needless words should always be ommitted. Common offenders include the words: &lsquo;always&rsquo;, &lsquo;just&rsquo;, &lsquo;basically&rsquo;, and &lsquo;simply&rsquo;.</p></li>
<li><p>Be consistent with the use of &lsquo;we&rsquo; or &lsquo;you&rsquo; when referring to the reader. You will often see these 2 words in tutorials. But if you have started using &lsquo;you&rsquo; to refer to the reader or &lsquo;we&rsquo; if you&rsquo;re a merry person who wants to include yourself while telling something to the reader. It&rsquo;s important that you stick with whatever you started using. I prefer to use &lsquo;we&rsquo; in most cases since &lsquo;you&rsquo; sounds really lonely. Whereas if you use &lsquo;we&rsquo;, it has the connotation that you have gone through the same process that the reader is going through when you were writing the article.</p></li>
<li><p>Proofread your article 3 or more times to ensure that common grammatical errors were caught and the wording is easy in the eyes or comfortable to read. This means that the article should be readable without having to exert much mental effort or having to go back to a sentence you&rsquo;ve just read because it didn&rsquo;t make sense.</p></li>
<li><p>When referring to a specific library such as jQuery, always be mindful of how it&rsquo;s written on the website of that specific library. For jQuery, the &lsquo;j&rsquo; is a small letter and the &lsquo;Q&rsquo; is a capital letter.</p></li>
<li><p>Always be mindful of the word count. If an article is meant to be a series then each part should have a word count of not greater than 3000 words.</p></li>
<li><p>Always strive to make the work of the editor easier so that they will be more motivated to review your work.</p></li>
<li><p>Recently, Sitepoint implemented the peer reviews which utilizes Github. How this works is that all the articles are stored in a Github repository. Every new article is a separate branch that&rsquo;s going to be merged in the main branch. A pull request is created for each new article which is then reviewed by the other authors. The other authors will comment on your work or make the changes on their end. The original author can then make use of these comments to improve the original article. This kind of workflow has levelled up my Git skills. And through the help of the other authors, I&rsquo;ve learned how to improve my articles by altering the wording, providing screenshots and using Frameworks when presenting code. The next step that I&rsquo;m looking into is to also review the works of other authors. As a means of giving back and learning how the other authors construct their articles as well.</p></li>
</ul>


<p>That&rsquo;s it! I won&rsquo;t treat this section as the conclusion as there will always be new things to learn. I&rsquo;ll update this article in the future once I learn some more. Be sure to check out the resources below if you also want to level up your writing skills. And if you&rsquo;re a web professional, you&rsquo;re welcome to <a href="http://www.sitepoint.com/write-for-us/">join Sitepoint</a>. They&rsquo;re always looking
for new authors. It doesn&rsquo;t matter if you&rsquo;re new to the industry or an experienced one. As long as you have something to share, you&rsquo;re welcome to write for Sitepoint. Oh and articles are paid really well so it&rsquo;s worth the time investment.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.impressivewebs.com/how-to-write-great-web-development-articles-tutorials/">How to Write Great Web Development Articles and Tutorials</a></li>
<li><a href="http://www.sitepoint.com/writing-guidelines/">Sitepoint Writing Guidelines</a></li>
<li><a href="http://www.sitepoint.com/introduction-to-sitepoints-peer-review/">Introduction to Sitepoint Peer Review</a></li>
<li><a href="https://medium.com/@hayley_mullen/beyond-youre-vs-your-a-grammar-cheat-sheet-even-the-pros-can-use-c2b90dae85ef">Beyond You&rsquo;re vs. Your: A Grammar Cheat Sheet Even the Pros Can Use</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon Cloudfront]]></title>
    <link href="http://wern-ancheta.com/blog/2015/07/11/getting-started-with-amazon-cloudfront/"/>
    <updated>2015-07-11T08:01:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/07/11/getting-started-with-amazon-cloudfront</id>
    <content type="html"><![CDATA[<p>When developing websites, it&rsquo;s important to deliver front-end assets as fast as possible to the client. One tool that web developers use is the Content Delivery Network (CDN). Which is basically a way of distributing front-end assets (scripts, stylesheets and images) on servers across the globe so that the files will have to travel less distance. This works by having the nearest server deliver the file to the client. Nicholas Zakas has written a really good article on <a href="http://www.nczonline.net/blog/2011/11/29/how-content-delivery-networks-cdns-work/">how content delivery networks work</a>. You can check that out if you want to dive deeper.
In this article we&rsquo;re going to take a look at Amazon Cloudfront, which is the content delivery network offered by Amazon Web Services.</p>

<h3>Setting Up a New Distribution</h3>

<p>Amazon Cloudfront utilizes the files from your S3 bucket.
First thing that you need to do is to go to the Amazon Web Services console, select Cloudfront from the list of services, select create distribution, then click on the &lsquo;Get Started&rsquo; button under the Web section.</p>

<p><img src="http://wern-ancheta.com/images/posts/cloudfront/step-one.png" alt="getting started" /></p>

<p>Once you&rsquo;re redirected to the next page, you will be greeted by a form where you enter the details of your new distribution.</p>

<p><img src="http://wern-ancheta.com/images/posts/cloudfront/step-two.png" alt="distribution details" /></p>

<p>Each distribution uses a specific S3 bucket and you can pick that on Origin Domain Name. It would look something like <code>app-name.s3.amazonaws.com</code>. Once you have selected the Origin Domain Name, the Origin ID will automatically get filled up. You can click on the help icon on each field to get information on what they are. Knowing that, you can just leave the optional fields as blank and stick with the default values. Once you&rsquo;re done filling out the form, you can click on the &lsquo;Create Distribution&rsquo; button. After creation, it will be listed as the top item in your list of distributions. Your new distribution won&rsquo;t be immediately useable. You can see it from the status field in the table. Right after creation, its status would be &lsquo;In Progress&rsquo;. I&rsquo;m not really sure what goes on behind the scenes during this time, but I assume it&rsquo;s distributing all the files that is stored on the S3 bucket that you selected across different servers around the globe. Once your new distribution is ready, you can now use the domain name assigned to your distribution as the domain name when linking your files. Do note that files distributed using Cloudfront should be invalidated every time you make a change to them. So it&rsquo;s not recommended to use Cloudfront when you&rsquo;re still developing your app. As you frequently have to invalidate the files as you make changes to your code.</p>

<h3>Invalidating Files</h3>

<p>You will need to invalidate files when you make changes to a file in your S3 bucket. The changes won&rsquo;t take effect in the distribution that&rsquo;s why you need to invalidate. To do that, click the distribution on the list. Once in there, click the invalidations tab, click &lsquo;create invalidation&rsquo; and enter the path of the file you want to invalidate. The path is relative to the root of your bucket. So if your bucket is named <code>bookr</code> and your file is at <code>/uploads/users/image/image-001.jpg</code> then use that as the path. Do note that invalidating a file can take a while so use it sparingly.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you have learned how to use Amazon&rsquo;s Cloudfront as a solution for your CDN needs. It&rsquo;s really easy to get setup if you&rsquo;re already using S3 to serve your front-end assets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Anime of All Time]]></title>
    <link href="http://wern-ancheta.com/blog/2015/06/24/best-anime-of-all-time/"/>
    <updated>2015-06-24T20:17:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/06/24/best-anime-of-all-time</id>
    <content type="html"><![CDATA[<p>I decided to give my blog 3 weeks break so I could make time for the 200 other things that I want to do. But then I said &ldquo;fuck it&rdquo;. Its not just programming stuff that I can publish here on this blog. Its my personal blog after all. I can always publish some other stuff that won&rsquo;t take much of my time to write. So this time I decided to disguise the list of the best anime of all time as an actual blog post. But of course, this is all just my opinion. We all have different taste so don&rsquo;t take my word for it. Try watching 2 or 3 episodes and see for yourself. Ok here goes:</p>

<ul>
<li>Psycho Pass</li>
<li>Code Geass</li>
<li>Samurai Champloo</li>
<li>Anohana</li>
<li>Guilty Crown</li>
<li>Xam&rsquo;d: Lost Memories</li>
<li>Parasyte the Maxim</li>
<li>Durarara!!</li>
<li>Eden of the East</li>
<li>Darker than Black</li>
<li>Full Metal Alchemist: Brotherhood</li>
<li>Steins;Gate</li>
<li>DGray Man</li>
<li>Hunter X Hunter</li>
<li>The Melancholy of Haruhi Suzumiya</li>
<li>K-on</li>
<li>Hajime no Ippo</li>
<li>Katanagatari</li>
<li>Tengen Toppa Gurren Lagan</li>
<li>Kill la Kill</li>
<li>Haikyuu!!</li>
<li>Kuroko no Basket</li>
<li>Gatchaman Crowds</li>
<li>Tsuritama</li>
<li>Death Note</li>
<li>Yu Yu Hakusho</li>
<li>Attack on Titan</li>
<li>Avatar: The Last Airbender</li>
<li>Avatar: The Legend of Korra</li>
<li>Mirai Nikki</li>
<li>Toradora!</li>
<li>Kaichou wa Maid-sama!</li>
<li>Medaka Box</li>
<li>Accel World</li>
<li>Deadman Wonderland</li>
<li>Magi</li>
<li>Shaman King</li>
<li>Baccano!</li>
<li>Sket Dance</li>
<li>Akame Ga Kill</li>
<li>Nanatsu no Taizai</li>
<li>Slam Dunk</li>
<li>Assasination Classroom</li>
<li>Oregairu</li>
<li>Shokugeki no Soma</li>
<li>Hitsugi no Chaika</li>
<li>One Week Friends</li>
<li>Kakumeiki Valvrave</li>
<li>Yowamushi Pedal</li>
<li>Hamatora</li>
<li>Zankyou no Terror</li>
<li>Bakuman</li>
<li>Usagi Drop</li>
<li>Hanasaku Iroha</li>
<li>Tiger &amp; Bunny</li>
<li>A-Channel</li>
</ul>


<p>That&rsquo;s all I can think of for now. I really have a bad memory so even if I&rsquo;ve watched a really really good anime, it might not have made it in this list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: How to Add Custom Pages in Wordpress]]></title>
    <link href="http://wern-ancheta.com/blog/2015/06/11/quick-tip-how-to-add-custom-pages-in-wordpress/"/>
    <updated>2015-06-11T11:37:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/06/11/quick-tip-how-to-add-custom-pages-in-wordpress</id>
    <content type="html"><![CDATA[<p>In this quick-tip I&rsquo;ll be showing you the easiest and quickest way to create custom pages under a specific theme in Wordpress. When I say custom, its a page where you can put anything you want using HTML, CSS, JavaScript and PHP Code. The page would also have access to the various APIs that Wordpress provides.</p>

<p>To start, create a new file under your theme folder. In this case I&rsquo;ll be creating a <code>custom-page.php</code> file under the <code>wp-content/themes/twentyfifteen</code> directory of my Wordpress installation. Then add the following code in the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Template Name: My Awesome Custom Page</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;h1&gt;This is my awesome custom page&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, that&rsquo;s all there is to it. Note that the <code>Template Name:</code> part is very important. You can assign any value that you want as long as its descriptive. This specific comment is used by Wordpress to recognize your file.</p>

<p>To assign this page to a specific Wordpress page. You can add a new page from Wordpress admin page and select the page that we have created under the Template drop-down:</p>

<p><img src="http://wern-ancheta.com/images/posts/quicktip_wordpress_custom_page/custom-wp-page.png" alt="custom wordpress page" /></p>

<p>Now when you access the page from your browser, you will get that awesome heading. From your custom page you can also use the methods available on all the Wordpress APIs and also the built-in theme functions such as the <code>get_header</code> and <code>get_footer</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon S3]]></title>
    <link href="http://wern-ancheta.com/blog/2015/06/05/getting-started-with-amazon-s3/"/>
    <updated>2015-06-05T05:28:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/06/05/getting-started-with-amazon-s3</id>
    <content type="html"><![CDATA[<p>Amazon S3 is Amazon&rsquo;s file storage service. It allows users to upload their files to their server, for later access or for sharing to other people. In this tutorial I&rsquo;m going to walk you through how to use amazon s3 within your PHP applications.</p>

<p>First thing that you need to do is create a <code>composer.json</code> file and add the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "aws/aws-sdk-php": "2.7.*@dev"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Next execute <code>composer install</code> from your terminal to install the Amazon Web Service SDK.</p>

<p>Once the installation is done you can now create a <code>tester.php</code> file which we will use for interacting with the Amazon AWS API. Add the following code to the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Aws\S3\Exception\S3Exception</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Aws\Common\Aws</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>What the code above does is include the autoload file so that we can use the AWS SDK from our file. Next we set to use the <code>Aws\S3\Exception\S3Exception</code> and <code>Aws\Common\Aws</code> namespace so can access the different classes that are available in those namespaces. One of which classes is the <code>Aws</code> class which we can use to set the configuration options for the Bucket where we are trying to connect to. All we have to do is call the <code>factory</code> method and pass in the path to the configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$aws</span> <span class="o">=</span> <span class="nx">Aws</span><span class="o">::</span><span class="na">factory</span><span class="p">(</span><span class="s1">&#39;config.php&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The configuration file contains the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;includes&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;_aws&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;services&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;default_settings&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;params&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;credentials&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;key&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_AWS_API_KEY&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;secret&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_AWS_API_SECRET&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;region&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_BUCKET_REGION&#39;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The configuration file basically just returns an array that contains the options that we need. First of those is the <code>includes</code>, which allows us to bootstrap the configuration file with AWS specific features. Next is the <code>services</code> where we specify the API credentials and region.</p>

<h4>Uploading Files</h4>

<p>Once that&rsquo;s done we can now upload files to the s3 bucket of your choice by using the <code>$aws</code> object and calling the <code>get</code> method. This method takes up the name of the AWS service you want use. In this case were using s3 so we put in <code>s3</code>. Next we call the <code>putObject</code> method on the <code>$s3</code> object and pass in the required parameters as an array. The required keys are <code>Bucket</code>, <code>Key</code>, <code>Body</code> and <code>ACL</code>. <code>Bucket</code> is the name of the bucket where you want to upload the file. <code>Key</code> is the path to the file. With s3 you don&rsquo;t have to worry if the directory where you are uploading the file already exists. No matter how deep it is, s3 automatically creates the directories for you. Next is the <code>Body</code> which takes up the results of the <code>fopen</code> method call. This method takes up the path to the file in your local computer and the operation you want to perform. In this case we just want to read the file contents so we specify <code>r</code>. Next is the <code>ACL</code> or the Access Control List of an object. Its basically like a file permission. Here we specified <code>public-read</code> which means that the file can be read publically. For more information about ACL, you can check out <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">this page</a>. We wrap all of those code inside a try catch so we can handle errors gracefully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$s3</span> <span class="o">=</span> <span class="nv">$aws</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;s3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$s3</span><span class="o">-&gt;</span><span class="na">putObject</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Bucket&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;NAME_OF_BUCKET&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/path/to/file/filename&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Body&#39;</span> <span class="o">=&gt;</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;/path/to/file_to_uploads&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s1">&#39;ACL&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;public-read&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">S3Exception</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;There was an error uploading the file.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deleting Files</h3>

<p>Next here&rsquo;s how to delete existing files from your s3 bucket. This uses the <code>deleteObject</code> method which takes up the name of the bucket and the path to the file as its argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$s3</span><span class="o">-&gt;</span><span class="na">deleteObject</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Bucket&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;NAME_OF_BUCKET&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/path/to/file/filename&#39;</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">S3Exception</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;There was an error deleting the file.&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Listing Buckets</h3>

<p>Lastly here&rsquo;s how to get a list of buckets that are currently in your Amazon Account:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$s3</span><span class="o">-&gt;</span><span class="na">listBuckets</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="s1">&#39;Buckets&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$bucket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$bucket</span><span class="p">[</span><span class="s1">&#39;Name&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="nv">$bucket</span><span class="p">[</span><span class="s1">&#39;CreationDate&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to work with Amazon S3 from within your PHP applications. Specifically, we&rsquo;ve taken a look at how to upload files, delete files and list buckets.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-s3.html">Amazon Simple Storage Service PHP Guide</a></li>
<li><a href="http://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.S3.S3Client.html">AWS S3 API Reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Nearby Places Search App with Google Places API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/30/building-a-nearby-places-search-app-with-google-places-api/"/>
    <updated>2015-05-30T07:52:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/30/building-a-nearby-places-search-app-with-google-places-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to build an app that would allow users to search for a specific place and then find nearby places based on a specific category. Such as restaurants, churches, and schools. We will implement the app with Google Maps, Google Places and PHP.</p>

<h3>Getting API Credentials</h3>

<p>First you need to get API Credentials from your Google Console and then enable the Google Maps and Google Places API. If you don&rsquo;t know how to do that, feel free to ask Google. I believe this topic has already been written before. Here are the APIs that you need to enable:</p>

<ul>
<li>Google Maps JavaScript API</li>
<li>Google Places API Web Service</li>
</ul>


<h3>Building the App</h3>

<p>Now were ready to build the app. First lets work on the back-end side of things.</p>

<h4>Getting Results from the Places API</h4>

<p>To make our life easier, were going to use a library for making the request to the Google Places API. Add the following in your <code>composer.json</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "joshtronic/php-googleplaces": "dev-master"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done, execute <code>composer install</code> on your terminal to install the library. Now we can use the library like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$google_places</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">joshtronic\GooglePlaces</span><span class="p">(</span><span class="s1">&#39;YOUR_GOOGLE_API_KEY&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$lat</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;lat&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nv">$lng</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;lng&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$place_types</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;place_types&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">location</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$lat</span><span class="p">,</span> <span class="nv">$lng</span><span class="p">);</span>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">radius</span> <span class="o">=</span> <span class="mi">8046</span><span class="p">;</span> <span class="c1">//hard-coded radius</span>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">types</span> <span class="o">=</span> <span class="nv">$place_types</span><span class="p">;</span>
</span><span class='line'><span class="nv">$nearby_places</span> <span class="o">=</span> <span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">nearbySearch</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down. First we include the autoload file so we can access the library from our file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we created a new instance of the <code>GooglePlaces</code> class. You need supply the API Key that you got earlier from your Google Console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$google_places</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">joshtronic\GooglePlaces</span><span class="p">(</span><span class="s1">&#39;YOUR_GOOGLE_API_KEY&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we get the data that we will be supplying later on in the client-side and assign them to their own variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$lat</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;lat&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nv">$lng</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;lng&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$place_types</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;place_types&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we make the actual request to the Google Places API. This library works a little bit different from your usual one. In the sense that we pass in the parameters needed by the actual search method using the object that we got from declaring a new instance of the <code>GooglePlaces</code> class. The first thing that we need to pass is the <code>location</code>, this takes up an array containing the coordinates (latitude and longitude) of the place that we are using as a reference point. This is basically the place where we are at, the place where we want to find nearby places on. Next you need to supply the <code>radius</code>. This is how many meters from your reference point you want your search to be limited. In this case we supplied a hard-coded value of 8046 meters, which is about 8 kilometers. If you want the user to have more control over this value, you can try adding a slider that the user can use to change the radius. And the last one is the <code>types</code>, this is an array of the types of places you want to see in the results. An example of this is restaurants (yeah I&rsquo;m hungry so I mentioned this twice now), parks, shopping center, etc. Once you&rsquo;ve supplied those, you can now call the <code>nearbySearch</code> method. This will make the request to the API and return the data that we need. We just have to turn it into a JSON string so it can be parsed and read later on from the client-side.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">location</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$lat</span><span class="p">,</span> <span class="nv">$lng</span><span class="p">);</span>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">radius</span> <span class="o">=</span> <span class="mi">8046</span><span class="p">;</span> <span class="c1">//hard-coded radius</span>
</span><span class='line'><span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">types</span> <span class="o">=</span> <span class="nv">$place_types</span><span class="p">;</span>
</span><span class='line'><span class="nv">$nearby_places</span> <span class="o">=</span> <span class="nv">$google_places</span><span class="o">-&gt;</span><span class="na">nearbySearch</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$nearby_places</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Creating the Map</h4>

<p>Next we move on to the client-side. Create a new <code>index.html</code> file and put the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>gmap<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&amp;sensor=false&amp;libraries=places&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-canvas&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;place-types&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span> bar
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;bus_station&quot;</span><span class="nt">&gt;</span> bus station
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;hospital&quot;</span><span class="nt">&gt;</span> hospital
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;health&quot;</span><span class="nt">&gt;</span> health
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;police&quot;</span><span class="nt">&gt;</span> police
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;post_office&quot;</span><span class="nt">&gt;</span> post office
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;store&quot;</span><span class="nt">&gt;</span> store
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;library&quot;</span><span class="nt">&gt;</span> library
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;fire_station&quot;</span><span class="nt">&gt;</span> fire station
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;gas_station&quot;</span><span class="nt">&gt;</span> gas station
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;convenience_store&quot;</span><span class="nt">&gt;</span> convenience store
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;school&quot;</span><span class="nt">&gt;</span> school
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;find-places&quot;</span><span class="nt">&gt;</span>Find Places<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;map.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down. We include the stylesheet in the page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we include jQuery and the Google Maps JavaScript library. Be sure to update the code so it uses your Google API Key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&amp;sensor=false&amp;libraries=places&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the map container where we have <code>map-canvas</code> that will serve as the element where the map will be created. And the search box where the user will search for the place that will be used as a reference point:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-canvas&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the type of places that we can find. Note that this isn&rsquo;t everything we can find in Google Places API. I just picked some of the places that I think are essential. For a more complete list you can check <a href="https://developers.google.com/places/supported_types">this page</a>. Here we added the <code>data-type</code> attribute which represents the place type. And then after the list we have the &lsquo;Find Places&rsquo; button which basically just triggers the search:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;place-types&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span> bar
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;bus_station&quot;</span><span class="nt">&gt;</span> bus station
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;hospital&quot;</span><span class="nt">&gt;</span> hospital
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;health&quot;</span><span class="nt">&gt;</span> health
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;police&quot;</span><span class="nt">&gt;</span> police
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;post_office&quot;</span><span class="nt">&gt;</span> post office
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;store&quot;</span><span class="nt">&gt;</span> store
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;library&quot;</span><span class="nt">&gt;</span> library
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;fire_station&quot;</span><span class="nt">&gt;</span> fire station
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;gas_station&quot;</span><span class="nt">&gt;</span> gas station
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;convenience_store&quot;</span><span class="nt">&gt;</span> convenience store
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-type=</span><span class="s">&quot;school&quot;</span><span class="nt">&gt;</span> school
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;find-places&quot;</span><span class="nt">&gt;</span>Find Places<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then lastly we include the <code>map.js</code> file which will make this all work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;map.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create the <code>style.css</code> file and put the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#map-container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#map-canvas</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">500px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">1000px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#place-types</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#place-types</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we move on to the <code>map.js</code> file. First declare the default coordinate of the place that the map will display:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="mf">18.35827827454</span><span class="p">;</span> <span class="c1">//default latitude</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="mf">121.63744354248</span><span class="p">;</span> <span class="c1">//default longitude</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">home_coordinates</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">);</span> <span class="c1">//set default coordinates</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, assign it to the map:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">map_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">center</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">),</span> <span class="c1">//set map center</span>
</span><span class='line'>  <span class="nx">zoom</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span> <span class="c1">//set zoom level to 17</span>
</span><span class='line'>  <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span> <span class="c1">//set map type to road map</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we set the search box as an auto-complete element. This will allow the user to see suggestions of matching locations as he types in the search box. We also need to bind it to the map so the auto-complete bounds are driven by the current viewport of the map.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;search&#39;</span><span class="p">);</span> <span class="c1">//get element to use as input for autocomplete</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">places</span><span class="p">.</span><span class="nx">Autocomplete</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span> <span class="c1">//set it as the input for autocomplete</span>
</span><span class='line'><span class="nx">autocomplete</span><span class="p">.</span><span class="nx">bindTo</span><span class="p">(</span><span class="s1">&#39;bounds&#39;</span><span class="p">,</span> <span class="nx">map</span><span class="p">);</span> <span class="c1">//bind auto-complete object to the map</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we listen for the <code>place_changed</code> event that is triggered from the search box. If this event happens then we get the place information using the <code>getPlace</code> method available on the auto-complete object. This allows us to check if the place being searched is within the current map viewport. If it is then we just call the <code>fitBounds</code> method on the map object and pass in the <code>geometry.viewport</code> attribute from the <code>place</code> object. This sets the map center to the coordinates of the location. If its not within the current viewport then we call the <code>setCenter</code> method in the map object and pass in the <code>geometry.location</code> attribute in the <code>place</code> object. We also call the <code>setZoom</code> method in the map to ensure we still got the same zoom level. Lastly we set the position of the <code>home_marker</code> to the <code>geometry.location</code> in the <code>place</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//executed when a place is selected from the search field</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">autocomplete</span><span class="p">,</span> <span class="s1">&#39;place_changed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get information about the selected place in the autocomplete text field</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">place</span> <span class="o">=</span> <span class="nx">autocomplete</span><span class="p">.</span><span class="nx">getPlace</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">){</span> <span class="c1">//for places within the default view port (continents, countries)</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">fitBounds</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">);</span> <span class="c1">//set map center to the coordinates of the location</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//for places that are not on the default view port (cities, streets)</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setCenter</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span>  <span class="c1">//set map center to the coordinates of the location</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setZoom</span><span class="p">(</span><span class="mi">17</span><span class="p">);</span> <span class="c1">//set a custom zoom level of 17</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">home_marker</span><span class="p">.</span><span class="nx">setMap</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span> <span class="c1">//set the map to be used by the  marker</span>
</span><span class='line'>    <span class="nx">home_marker</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span> <span class="c1">//plot marker into the coordinates of the location</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare an array that will store the markers for the places that will be searched. Don&rsquo;t confuse this with the place used as the reference point, the <code>home_marker</code> is used for this. The places I&rsquo;m referring to are the place types such as grocery, church, etc. For convenience I&rsquo;ll be referring to those markers as place type markers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">markers_array</span> <span class="o">=</span> <span class="p">[];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create the method that would remove the place type markers from the map. We would need to call this every time the user clicks on the &lsquo;Find Places&rsquo; button so that the previous search results will be removed from the map.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">removeMarkers</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">markers_array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">markers_array</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setMap</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have the method that listens for the click event on the &lsquo;Find Places&rsquo; button. The first thing it does is to get the coordinates of the <code>home_marker</code>. This represents the coordinates of the reference point. After that, we declare an empty array, this is where we will store the place types selected by the user. We do that by looping through all the place types selected by the user and then we push the value for their <code>data-type</code> attribute in the array. Next we call the <code>removeMarkers</code> method to remove the place types markers that are currently plotted on the map. Next we make a <code>POST</code> request to the server and then passing in the coordinates of the reference point and the place types array. Once we get a response, we call the <code>JSON.parse</code> method so we can extract the results from the response. From there we loop through all the results and get the coordinates for each and then we plot the marker into the map. After that we assign an infowindow to each of the markers to that when its clicked it shows the name of the place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#find-places&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">home_marker</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">().</span><span class="nx">lat</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">home_marker</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">().</span><span class="nx">lng</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">place_types</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//loop through all the place types that has been checked and push it to the place_types array</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#place-types input:checked&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">place_types</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">removeMarkers</span><span class="p">();</span> <span class="c1">//remove the current place type markers from the map</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//make a request to the server for the matching places</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;places.php&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;lat&#39;</span><span class="o">:</span> <span class="nx">lat</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;lng&#39;</span><span class="o">:</span> <span class="nx">lng</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;place_types&#39;</span><span class="o">:</span> <span class="nx">place_types</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">response_data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">response_data</span><span class="p">.</span><span class="nx">results</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">response_data</span><span class="p">.</span><span class="nx">results</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">result_count</span> <span class="o">=</span> <span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">result_count</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//get coordinates of the place</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">results</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;geometry&#39;</span><span class="p">][</span><span class="s1">&#39;location&#39;</span><span class="p">][</span><span class="s1">&#39;lat&#39;</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">results</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;geometry&#39;</span><span class="p">][</span><span class="s1">&#39;location&#39;</span><span class="p">][</span><span class="s1">&#39;lng&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//create a new infowindow</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">infowindow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">InfoWindow</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//plot the marker into the map</span>
</span><span class='line'>          <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">position</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">icon</span><span class="o">:</span> <span class="nx">results</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;icon&#39;</span><span class="p">]</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">markers_array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">marker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//assign an infowindow to the marker so that when its clicked it shows the name of the place</span>
</span><span class='line'>          <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">marker</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">marker</span><span class="p">,</span> <span class="nx">x</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="nx">infowindow</span><span class="p">.</span><span class="nx">setContent</span><span class="p">(</span><span class="s2">&quot;&lt;div class=&#39;no-scroll&#39;&gt;&lt;strong&gt;&quot;</span> <span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/strong&gt;&lt;br&gt;&quot;</span> <span class="o">+</span> <span class="nx">results</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;vicinity&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">infowindow</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span> <span class="nx">marker</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">})(</span><span class="nx">marker</span><span class="p">,</span> <span class="nx">x</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a screenshot of the final output:</p>

<p><img src="http://wern-ancheta.com/images/posts/google_places/google-places.png" alt="google places" /></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to work with the Google Place API in PHP. We have also create a simple app that would allow users to search specific types of places that is near the location used as a reference point. If you want to learn more, be sure to check out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/places/webservice/intro">Google Places API</a></li>
<li><a href="https://developers.google.com/places/supported_types">Place Types</a></li>
<li><a href="https://developers.google.com/maps/documentation/javascript/examples/places-searchbox">Places Search box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Youtube Data API in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/24/working-with-youtube-api-in-php/"/>
    <updated>2015-05-24T16:28:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/24/working-with-youtube-api-in-php</id>
    <content type="html"><![CDATA[<p>Decades ago I got this project where I needed to work with the Youtube API to get the details of videos uploaded by a specific channel. And then create something like a mini-youtube website out of it. Just kidding about the decades part, it was probably 4-6 months ago. Anyway its only this time that I got the time to actually write about it. So here it goes.</p>

<h3>Getting API Credentials</h3>

<p>First you need to get the API credentials from your Google Console. There&rsquo;s only a single API credential for all of the APIs that Google offers. So you might already have one. If you do then all you have to do is enable the API in your Google Console page. Currently you would see something like this when you go to APIs &amp; Auth and then click on APIs on your Google Console:</p>

<p><img src="http://wern-ancheta.com/images/posts/youtube_api/google-apis.png" alt="google apis" /></p>

<p>What we need is the Youtube Data API v3. Click that and enable it. If you do not have an API credential then you can click on &lsquo;Credentials&rsquo; under the APIs &amp; Auth and click on &lsquo;Create new Key&rsquo; under the Public API Access section. Choose Server Key as the key type since were working primarily on the server. Don&rsquo;t take my word for it though. Based on my experience sometimes this doesn&rsquo;t work and you actually need to select Browser Key. I just hope google has fixed this already. Server keys are only supposed to be used in the server and browser keys on the client side. Clicking on either browser key or server key will generate an API Key for you. This is the key that you will use when you need to talk to the Youtube API.</p>

<h3>Dependencies</h3>

<p>As we are primarily going to be requesting data from another server, we will need curl. If you don&rsquo;t have it yet, install it on your system. Here&rsquo;s how you install it on Ubuntu:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install libcurl3 php5-curl</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re using another Operating System then feel free to ask Google.</p>

<h3>Playing with the API</h3>

<p>To make things easier we need a library that will do most of the heavy-lifting for us. Things like signing the request, constructing it and actually making the request to the server. Because were lazy folks we don&rsquo;t need to do that every time we need to talk to an API. Thankfully an awesome guy in the alias of <a href="https://github.com/madcoda">madcoda</a> has already done that work for us. If you already have <a href="getcomposer.org">composer</a> installed, simply execute the following command inside your project directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require madcoda/php-youtube-api</span></code></pre></td></tr></table></div></figure>


<p>This will install the library into your <code>vendor</code> directory, autoload it and add it to your <code>composer.json</code> file.</p>

<p>Once its done you can now use the library by including the <code>autoload.php</code> file under the <code>vendor</code> directory and then use the <code>Madcoda\Youtube</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Madcoda\Youtube</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a new instance of the Youtube class and pass in the API Key that you acquired earlier as the <code>key</code> item in an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$youtube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Youtube</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_API_KEY&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Searching</h4>

<p>With this library you can search for videos, playlists and channels by using the <code>search</code> method. This method takes up your query as its argument. For example you want to find &lsquo;Awesome&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">search</span><span class="p">(</span><span class="s1">&#39;Awesome&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return something similar to the following if you use <code>print_r</code> on the <code>$results</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">[0] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">    (</span>
</span><span class='line'><span class="x">        [kind] =&gt; youtube#searchResult</span>
</span><span class='line'><span class="x">        [etag] =&gt; &quot;tbWC5XrSXxe1WOAx6MK9z4hHSU8/xBkrpubrM2M6Xi88aNBfaVJV6gE&quot;</span>
</span><span class='line'><span class="x">        [id] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">            (</span>
</span><span class='line'><span class="x">                [kind] =&gt; youtube#video</span>
</span><span class='line'><span class="x">                [videoId] =&gt; qmTDT92VIRc</span>
</span><span class='line'><span class="x">            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">        [snippet] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">            (</span>
</span><span class='line'><span class="x">                [publishedAt] =&gt; 2015-01-23T23:03:31.000Z</span>
</span><span class='line'><span class="x">                [channelId] =&gt; UCZpKcVBccIjO9n0RXx3ZGFg</span>
</span><span class='line'><span class="x">                [title] =&gt; PEOPLE ARE AWESOME 2015 (UNBELIEVABLE)</span>
</span><span class='line'><span class="x">                [description] =&gt; People are Awesome 2015 unbelievable talent and natural skills! Subscribe to NcCrullex for more people are awesome videos. Chris Samba Art Channel: ...</span>
</span><span class='line'><span class="x">                [thumbnails] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">                    (</span>
</span><span class='line'><span class="x">                        [default] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">                            (</span>
</span><span class='line'><span class="x">                                [url] =&gt; https://i.ytimg.com/vi/qmTDT92VIRc/default.jpg</span>
</span><span class='line'><span class="x">                            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                        [medium] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">                            (</span>
</span><span class='line'><span class="x">                                [url] =&gt; https://i.ytimg.com/vi/qmTDT92VIRc/mqdefault.jpg</span>
</span><span class='line'><span class="x">                            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                        [high] =&gt; stdClass Object</span>
</span><span class='line'><span class="x">                            (</span>
</span><span class='line'><span class="x">                                [url] =&gt; https://i.ytimg.com/vi/qmTDT92VIRc/hqdefault.jpg</span>
</span><span class='line'><span class="x">                            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                    )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                [channelTitle] =&gt; NcCrulleX</span>
</span><span class='line'><span class="x">                [liveBroadcastContent] =&gt; none</span>
</span><span class='line'><span class="x">            )</span>
</span><span class='line'>
</span><span class='line'><span class="x">    )</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see most of the data that you might want is stored in the <code>snippet</code> item. Things like the title, description and URL to the thumbnails.</p>

<p>You might ask, how you would know if the item is a video, playlist or channel? You might have already noticed based on the results above. Its located under the id &ndash;> kind. It would have a kind of <code>youtube#video</code> if its a video. <code>youtube#channel</code> if its a channel and <code>youtube#playlist</code> if its a playlist. Don&rsquo;t believe me? Try using the API to search for &lsquo;the new boston&rsquo; and you&rsquo;ll see.</p>

<p>If you only want to search for videos then you can use the <code>searchVideos</code> method. Just like the <code>search</code> method this takes up your query as its argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">searchVideos</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you only want to get videos from a specific channel, you can do it in 2 calls. First you need to get the channel id by using the <code>getChannelByName</code> method and then extract the id from the result that you get and then use the id for the <code>searchChannelVideos</code> to search for videos in a specific channel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getChannelByName</span><span class="p">(</span><span class="s1">&#39;thenewboston&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">searchChannelVideos</span><span class="p">(</span><span class="s1">&#39;ruby&#39;</span><span class="p">,</span> <span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above would return the first page of results for the &lsquo;ruby&rsquo; videos in &lsquo;thenewboston&rsquo; channel.</p>

<p>If you only want to return playlists on a specific channel, you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getChannelByName</span><span class="p">(</span><span class="s1">&#39;thenewboston&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getPlaylistsByChannelId</span><span class="p">(</span><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to get the items in a playlist, you can do it in 3 calls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getChannelByName</span><span class="p">(</span><span class="s1">&#39;thenewboston&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$playlists</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getPlaylistsByChannelId</span><span class="p">(</span><span class="nv">$channel</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'><span class="nv">$playlist_items</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">getPlaylistItemsByPlaylistId</span><span class="p">(</span><span class="nv">$playlists</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to be more liberal with your search, you can use the <code>searchAdvanced</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">searchAdvanced</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;q&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;fruits&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;part&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;snippet&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;order&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rating&#39;</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a breakdown of the parameters we&rsquo;ve just used:</p>

<ul>
<li><code>q</code> &ndash; your query</li>
<li><code>part</code> &ndash; the part of the result which you want to get. Earlier in the sample result we saw that there are only 2 parts. <code>id</code> and <code>snippet</code>. This parameter allows you to specify that. If you only need the video, playlist or channel id then supply <code>id</code> as the <code>part</code>. If you need the full details then use <code>snippet</code>. If you need both then you can use a comma-separated list: <code>id, snippet</code>.</li>
<li><code>order</code> &ndash; the basis of the ordering. In the example we used <code>rating</code>. This orders the results based on the highest ratings to the lowest. Not really sure what the ratings is. But the first thing that comes to mind is the number of likes in the video. You can also use <code>viewCount</code> if you want. This will order the results with the videos, playlists or channels which has the highest number of views to the lowest.</li>
<li><code>type</code> &ndash; the type of item. This can either be <code>video</code>, <code>playlist</code>, or <code>channel</code>.</li>
</ul>


<p>There&rsquo;s a whole bunch more which you can specify as a parameter. Be sure to check out the <a href="https://developers.google.com/youtube/v3/docs/search/list">search reference</a>.</p>

<h4>Pagination</h4>

<p>You can also paginate results. First you need to make an initial request so you can get the <code>nextPageToken</code>. Then check if the page token exists, if it does then add a <code>pageToken</code> item to the parameters that you supplied earlier. And then make another request. Since we supplied the <code>nextPageToken</code>, this will now navigate to the second page of the same result set. By default the youtube data api only returns 10 rows per request. This means that the second page will show you row 11 up to 21.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;q&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ruby&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;video&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;part&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id, snippet&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;maxResults&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">searchAdvanced</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//check for a page token</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$search</span><span class="p">[</span><span class="s1">&#39;info&#39;</span><span class="p">][</span><span class="s1">&#39;nextPageToken&#39;</span><span class="p">])){</span>
</span><span class='line'>    <span class="nv">$params</span><span class="p">[</span><span class="s1">&#39;pageToken&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$search</span><span class="p">[</span><span class="s1">&#39;info&#39;</span><span class="p">][</span><span class="s1">&#39;nextPageToken&#39;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//make another request with the page token added</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">searchAdvanced</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//do something with the search results her</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">         </span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the <code>paginateResults</code> method to implement pagination. Just like the method above, we need to make an initial request to get the <code>nextPageToken</code>. We then store it to an array so we can navigate through the results easily. The <code>paginateResults</code> method takes up the original search parameters as its first argument and the page token as its second. So all you have to do is supply the <code>nextPageToken</code> that you got from the previous results as the second argument for the <code>paginateResults</code> method to navigate to the next page. Note that in the example below, the indexes for the <code>$page_tokens</code> are just hard-coded. You will have to implement the generation of pagination links yourself and then use their index when navigating through the results. Also note that the results aren&rsquo;t cached, this means that whenever you paginate through the results a new request is made to the youtube data api. You will also need to implement caching if you don&rsquo;t want to easily run out of requests you can make.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//your search parameters</span>
</span><span class='line'><span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;q&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;video&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;part&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id, snippet&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;maxResults&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//array for storing page tokens</span>
</span><span class='line'><span class="nv">$page_tokens</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//make initial request</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">paginateResults</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//store page token</span>
</span><span class='line'><span class="nv">$page_tokens</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$search</span><span class="p">[</span><span class="s1">&#39;info&#39;</span><span class="p">][</span><span class="s1">&#39;nextPageToken&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//navigate to the next page</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">paginateResults</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="nv">$page_tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//store page token token</span>
</span><span class='line'><span class="nv">$page_tokens</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$search</span><span class="p">[</span><span class="s1">&#39;info&#39;</span><span class="p">][</span><span class="s1">&#39;nextPageToken&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//navigate to the next page</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">paginateResults</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="nv">$page_tokens</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//store page token</span>
</span><span class='line'><span class="nv">$page_tokens</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$search</span><span class="p">[</span><span class="s1">&#39;info&#39;</span><span class="p">][</span><span class="s1">&#39;nextPageToken&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//navigate to the previous page</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="nv">$youtube</span><span class="o">-&gt;</span><span class="na">paginateResults</span><span class="p">(</span><span class="nv">$params</span><span class="p">,</span> <span class="nv">$page_tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//do something with the search results here</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to work with the Youtube Data API in PHP. You&rsquo;ve learned how to get the info of a specific video, get general details about videos in a specific channel, get the videos in a specific playlist, and also search for videos, playlists and channels using a query. Don&rsquo;t forget to work through the API request limits though. The limit information can be found on the Youtube Data API page on your Google Console.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/youtube/v3/code_samples/php">Youtube DATA API: PHP Code Samples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Chrome Extension]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/16/creating-a-chrome-extension/"/>
    <updated>2015-05-16T15:54:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/16/creating-a-chrome-extension</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how to create a very basic chrome extension. One that would allow us to schedule posts with the <a href="http://wern-ancheta.com/projects/ahead/">Ahead project</a> that I created. Here&rsquo;s how it will work:</p>

<ol>
<li>User clicks on the extension on a page that he wants to share on a future time.</li>
<li>The extension makes a request to the server where Ahead is currently hosted.</li>
<li>The server returns a response and it is then outputted by the extension.</li>
</ol>


<h3>Creating the Extension</h3>

<p>Before anything else we need to create the <code>manifest.json</code> file. This is the most important file since chrome won&rsquo;t be able to recognize our extension if we do not have this file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "manifest_version": 2,
</span><span class='line'>  "name": "Ahead",
</span><span class='line'>  "version": "1.0",
</span><span class='line'>  "description": "Easily schedule posts",
</span><span class='line'>
</span><span class='line'>  "browser_action": {
</span><span class='line'>    "default_icon": "icon.png"
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  "background": {
</span><span class='line'>    "scripts": ["background.js"]
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  "content_scripts": 
</span><span class='line'>    [
</span><span class='line'>        {
</span><span class='line'>            "matches":["&lt;all_urls&gt;"],
</span><span class='line'>            "js":["content.js"],
</span><span class='line'>            "run_at": "document_end"
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>  
</span><span class='line'>  "permissions": ["&lt;all_urls&gt;", "storage"],
</span><span class='line'>  "options_page": "options.html"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down:</p>

<ul>
<li><p><code>manifest_version</code> &ndash; this is the version of the manifest file. The Chrome browser has been around for quite a while now. So are the extensions that have been written when it first came out. Currently the latest version that we can assign to a manifest file is <code>2</code>.</p></li>
<li><p><code>name</code> &ndash; the name you want to give to the extension.</p></li>
<li><code>version</code> &ndash; the version of the extension.</li>
<li><code>description</code> &ndash; a descriptive text you want to show your users. This is the text that will show right under the name of the extension when the user accesses the <code>chrome://extensions</code> page.</li>
<li><code>browser_action</code> &ndash; used to specify the element which will trigger the extension. In this case we want an icon to be the trigger so we set the <code>default_icon</code>. The value would be the filename of the icon.</li>
<li><code>content_scripts</code> &ndash; these are the scripts that run in the context of the current web page. The <code>matches</code> property is where you specify an array of URL&rsquo;s where the content scripts can run. In this case we just set a special value called <code>"&lt;all urls&gt;"</code>. This way the script can run from any webpage. Next is the <code>js</code> property where we specify an array of items containing the path to the content scripts. Last is the <code>run_at</code> property where we specify when to run the content scripts. We just set it to <code>document_end</code> so we can make sure that the whole page is loaded before we execute our script.</li>
<li><code>background</code> &ndash; used to specify the background scripts. Content scripts only has access to the elements in the current page but not the Chrome API methods. So we need a background script in order to access those methods. This property simply takes up a single property called <code>scripts</code> where you specify an array of the background scripts you wish to use. In thise case were just going to use a single <code>background.js</code> file.</li>
<li><code>permissions</code> &ndash; this is where we can specify an array containing the list of items that the extension needs to use or has access in. In this case were just going to use <code>"&lt;all_urls&gt;"</code> and <code>storage</code>. We use <code>storage</code> to have access to the methods used for saving custom settings for the extension. In our case the setting would be the api key required by Ahead.</li>
<li><code>options_page</code> &ndash; used for specifying which HTML file will be used for the options page.</li>
</ul>


<p>Next let&rsquo;s proceed with the options page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;title&gt;</span>Ahead<span class="nt">&lt;/title&gt;&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>    API Key:
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;api_key&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;save&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;options.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use css just like you would in a normal HTML page if you want. But for this tutorial we won&rsquo;t. The options page is pretty minimal. All we need is the actual field, a button to save the settings and then a link to the options page JavaScript file.</p>

<p>Here&rsquo;s the <code>options.js</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">save_options</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">api_key</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;api_key&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">sync</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>    <span class="s1">&#39;api_key&#39;</span><span class="o">:</span> <span class="nx">api_key</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;API Key Saved!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">restore_options</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">sync</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span>
</span><span class='line'>    <span class="s1">&#39;api_key&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;api_key&#39;</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">api_key</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="nx">restore_options</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">save_options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above file we declared 2 methods. <code>save_options</code> and <code>restore_options</code>. <code>save_options</code> is used for saving the settings to chrome storage. And <code>restore_options</code> is for retrieving the settings from the storage and populating the value for each of the fields. In the <code>options.js</code> file we got access to the chrome storage API. The main methods that were using are the <code>sync.set</code> and <code>sync.get</code>. We use <code>sync.set</code> to save the settings in the chrome storage and then output an alert box saying the settings are saved when its successful. <code>sync.get</code> on the other hand is used for retrieving the existing setting from chrome storage and then we use the retrieved value to populate the text field. The <code>save_options</code> method is called when the save button is clicked. And the <code>restore_options</code> method is called when the DOM of the options page has been fully loaded.</p>

<p>Next is the <code>background.js</code> file. We primarily use this file to listen for the click event on the <code>browser_action</code> which is basically the icon of extension that is located on the upper right corner of Chrome:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">browserAction</span><span class="p">.</span><span class="nx">onClicked</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tab</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">chrome</span><span class="p">.</span><span class="nx">tabs</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span><span class="nx">active</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">currentWindow</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tabs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">activeTab</span> <span class="o">=</span> <span class="nx">tabs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="p">.</span><span class="nx">tabs</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">activeTab</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;message&quot;</span><span class="o">:</span> <span class="s2">&quot;clicked_browser_action&quot;</span><span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&rsquo;t need to worry about the code above too much. All it does is listen for the click event on the icon of the extension. It then uses the <code>tabs.sendMessage</code> method to send a message to the current tab that hey the icon extension has been clicked. This then brings us to the <code>content.js</code> file which basically just waits for this message to be sent. Once it receives the message we then retrieve the api key using the <code>sync.get</code> method. Once we retrieved the api key we make a POST request to the Ahead URL which is responsible for accepting POST requests for posts to be published. The content would be the title of the current page and then its URL. We then construct a new form data and supply the <code>queue</code>, <code>api_key</code> and <code>content</code> as the fields. We set the <code>queue</code> to <code>true</code> because we want to schedule the post to be published later. If you set it to <code>false</code> then it will be published immediately. Next is the <code>api_key</code>. We simply supply what we got from chrome storage as the value. And last is the <code>content</code>. We then send this form data to the Ahead URL. Finally we listen for the <code>onload</code> event on the request. This event is fired up whenever the request is successful. All we have to do is parse the response since its a JSON string. We then alert the value for the <code>text</code> property. Which is basically just a message saying that the post was scheduled and when it will be published. If we do get an error, the <code>onerror</code> event is fired and we simply tell the user to try again by using an alert.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">onMessage</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">sendResponse</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">sync</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span>
</span><span class='line'>        <span class="s1">&#39;api_key&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">api_key</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">api_key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">http_request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">http_request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/api/post&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">form_data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">form_data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;queue&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">form_data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;api_key&#39;</span><span class="p">,</span> <span class="nx">api_key</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">form_data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">,</span> <span class="nx">content</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">http_request</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">form_data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">http_request</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">http_request</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">400</span><span class="p">){</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">response_data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">http_request</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">alert</span><span class="p">(</span><span class="nx">response_data</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nx">http_request</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Something went wrong while trying to post. Please try again&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Installing the Extension</h3>

<p>Now were ready to actually install the extension. You can do that by enabling developer mode on the chrome extensions page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">chrome</span><span class="o">:</span><span class="c1">//extensions/</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will show you 3 new buttons: load unpacked extension, pack extension and update extensions now. All we need is the first one. Click on it then select the folder that contains the <code>manifest.json</code> file on its root directory. Chrome will then list it as one of the available extensions:</p>

<p><img src="http://wern-ancheta.com/images/posts/creating_chrome_extension/ahead.png" alt="extensions" /></p>

<p>Once its loaded, click on the &lsquo;options&rsquo; link to access the options page. From there add the api key which you can get from the <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">Ahead website</a>.</p>

<p>At this point all of the new tabs that you open or the existing tabs which you reload would be useable with the extension. Just click on the extension icon and it will schedule a post using the title of the page and its URL as the content.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned the basics of how to create a chrome extension. You&rsquo;ve learned how to listen for the click event on the extension icon, how to add an options page and how to get the details from the current page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Lumen]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/09/getting-started-with-lumen/"/>
    <updated>2015-05-09T13:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/09/getting-started-with-lumen</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through Lumen, a lightweight framework from the same guys that made Laravel. Lumen is basically a lighter version of Laravel.</p>

<h3>Installation</h3>

<p>You can install Lumen by using composer&rsquo;s <code>create-project</code> command. Simply execute the following command on your preferred install directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer create-project laravel/lumen --prefer-dist</span></code></pre></td></tr></table></div></figure>


<p>Once the installation is done, you can navigate to the <code>lumen</code> directory and execute the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan serve --port=7771</span></code></pre></td></tr></table></div></figure>


<p>This will serve the project on port 7771 of your localhost:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:7771/</span></code></pre></td></tr></table></div></figure>


<p>If the installation completed successfully, you will be greeted by the default screen.</p>

<h3>Using Third Party Libraries</h3>

<p>You can use third party libraries with Lumen by adding the package that you want to install in the <code>composer.json</code> file. Here&rsquo;s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"require": {
</span><span class='line'>    "laravel/lumen-framework": "5.0.*",
</span><span class='line'>    "vlucas/phpdotenv": "~1.0",
</span><span class='line'>    "elasticsearch/elasticsearch": "~1.0",
</span><span class='line'>    "guzzlehttp/guzzle": "~5.0"
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p>Note that the lumen-framework and phpdotenv is there by default since those are needed in order for Lumen to work. In the above file we have added elasticsearch and guzzlehttp as our dependencies.</p>

<p>You can then make Lumen aware of these libraries by initializing them on the files where you want to use them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$http_client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\GuzzleHttp\Client</span><span class="p">();</span>
</span><span class='line'><span class="nv">$es_client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Elasticsearch\Client</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>By default Lumen is pretty bare-bones. Which means that we need to do some configuration if we want to use some of the features that we usually have in Laravel. In Lumen you can enable most of those functionalities by editing the <code>bootstrap/app.php</code> file.</p>

<h4>Enabling Sessions</h4>

<p>You can enable sessions by removing the comment on the middleware which says <code>Illuminate\Session\Middleware\StartSession</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">middleware</span><span class="p">([</span>
</span><span class='line'>    <span class="c1">//&#39;Illuminate\Cookie\Middleware\EncryptCookies&#39;,</span>
</span><span class='line'>    <span class="c1">//&#39;Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse&#39;,</span>
</span><span class='line'>    <span class="s1">&#39;Illuminate\Session\Middleware\StartSession&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//&#39;Illuminate\View\Middleware\ShareErrorsFromSession&#39;,</span>
</span><span class='line'>    <span class="c1">//&#39;Laravel\Lumen\Http\Middleware\VerifyCsrfToken&#39;,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enabling Eloquent</h3>

<p>If you need to use Eloquent in your app, you can enable it by removing the comment on the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">withFacades</span><span class="p">();</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">withEloquent</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dot Env</h3>

<p>Lumen uses a <code>.env</code> file to set the environment configuration for the project. This way you can have a different <code>.env</code> file on your local machine and on your server. And then you can set git to ignore this file so that it doesn&rsquo;t get pushed along to the server when you deploy your changes. Here&rsquo;s how the <code>.env</code> file looks by default:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">APP_ENV=local</span>
</span><span class='line'><span class="x">APP_DEBUG=false</span>
</span><span class='line'><span class="x">APP_KEY=SomeRandomKey!!!</span>
</span><span class='line'>
</span><span class='line'><span class="x">APP_LOCALE=en</span>
</span><span class='line'><span class="x">APP_FALLBACK_LOCALE=en</span>
</span><span class='line'>
</span><span class='line'><span class="x">DB_CONNECTION=mysql</span>
</span><span class='line'><span class="x">DB_HOST=localhost</span>
</span><span class='line'><span class="x">DB_DATABASE=homestead</span>
</span><span class='line'><span class="x">DB_USERNAME=homestead</span>
</span><span class='line'><span class="x">DB_PASSWORD=secret</span>
</span><span class='line'>
</span><span class='line'><span class="x">CACHE_DRIVER=memcached</span>
</span><span class='line'><span class="x">SESSION_DRIVER=memcached</span>
</span><span class='line'><span class="x">QUEUE_DRIVER=database</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the file above, you can set the name of the environment by setting the value for <code>APP_ENV</code>. The next one right after that is the <code>APP_DEBUG</code> configuration which is set to <code>false</code> by default. If you&rsquo;re developing you need to set this to <code>true</code> so you have an idea what&rsquo;s wrong when testing your app. Next is <code>APP_KEY</code> which is basically used as a salt for sessions. You can use a random string generator for this. <code>APP_LOCALE</code> and <code>APP_FALLBACK_LOCALE</code> are used for setting the language of your app. This is set to english by default. Next are the database configuration. Anything which starts with <code>DB_</code> is the database configuration. By default its expecting to connect to a <code>mysql</code> database. <code>DB_HOST</code> is the host in which the database is running. <code>DB_DATABASE</code> is the name of the database you want to connect to. <code>DB_USERNAME</code> is the username of the user you want to use for logging in. <code>DB_PASSWORD</code> is the password of the user. After the database configuration are the cache, session and queue driver configuration. The cache and session driver are using memcached by default so you&rsquo;ll have to install memcached if you&rsquo;re using caching and session functionalities. If memcached is not present in the system then it will just fallback to the default one which is the filesystem.</p>

<p>Note that before you can use the <code>.env</code> file, you need to uncomment the following line in your <code>bootstrap/app.php</code> file. This way Lumen will load the <code>.env</code> file on the root of your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Dotenv::load(__DIR__.&#39;/../&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Directory Structure</h3>

<p>Here&rsquo;s what the default directory structure looks like in Lumen. The one&rsquo;s with * are files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">app</span>
</span><span class='line'><span class="x">bootstrap</span>
</span><span class='line'><span class="x">database</span>
</span><span class='line'><span class="x">public</span>
</span><span class='line'><span class="x">resources</span>
</span><span class='line'><span class="x">storage</span>
</span><span class='line'><span class="x">tests</span>
</span><span class='line'><span class="x">vendor</span>
</span><span class='line'><span class="x">*artisan</span>
</span><span class='line'><span class="x">*server.php</span>
</span><span class='line'><span class="x">*composer.json</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>app</code> directory is where you will usually work with. This is where the routes, controllers and middlewares are stored.</p>

<p>The <code>bootstrap</code> directory only contains one file by default, the <code>app.php</code> file. As you have seen earlier, its where you can configure and add new functionality to Lumen.</p>

<p>The <code>database</code> directory is where the database migrations and seeders are stored. You use migrations to easily jump from previous database version to another. Its like version control for your database. Seeds on the other hand are used to populate the database with dummy data so that you can easily test your app without having to enter the information through the app itself.</p>

<p>The <code>public</code> directory is where your public assets are stored. Things like css, javascript and images are stored in this directory.</p>

<p>The <code>resources</code> directory is where you store the views that you use for your app.</p>

<p>The <code>storage</code> directory is where logs, sessions and cache files are stored.</p>

<p>The <code>tests</code> directory is where you put your test files.</p>

<p>The <code>vendor</code> directory is where the dependencies of your app is stored. This is where composer installs the packages that you specified in your <code>composer.json</code> file.</p>

<p>The <code>artisan</code> file is the file that is used for command line tasks for your project. We have used it earlier when we served the project. The artisan file can also be used to create migrations, seeds and other tasks that you usually perform through the command line.</p>

<p>The <code>server.php</code> file is used for serving the files without the use of a web server like Apache.</p>

<h3>Routes</h3>

<p>Routes are stored in the <code>app/Http/routes.php</code> file. Here&rsquo;s how you would declare a route in Lumen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">functionn</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;Hello World!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use a controller method to handle the response for a specific route then you can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;App\Http\Controllers\HomeController@index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you would need to create a <code>HomeController</code> controller and then declare an <code>index</code> method. This will then be used to return a response.</p>

<h3>Controllers</h3>

<p>Controllers are stored in the <code>app/Http/Controllers</code> directory. Needless to say, the convention is one file per controller. Otherwise it would be really confusing. Here&rsquo;s the basic structure of a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">namespace</span> <span class="nx">App\Http\Controllers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Http\Request</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Laravel\Lumen\Routing\Controller</span> <span class="k">as</span> <span class="nx">BaseController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="k">extends</span> <span class="nx">BaseController</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we need to use <code>Illuminate\Http\Request</code> to be able to access the request parameters for each request. We also need to use <code>Laravel\Lumen\Routing\Controller</code>. This allows us to extend the functionality of the base controller class.</p>

<h3>Views</h3>

<p>Lumen still comes with blade templating, all you have to do is create your views under the <code>resources/views</code> directory and then use <code>.blade.php</code> as the file extension. Though unlike Laravel you return views this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above were returning the <code>index</code> view that is stored in the root of the <code>resources/views</code> directory. If we want to return some data, then we can pass it by supplying the array or object that we want to pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ash Ketchum&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;pokemon&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Pikachu&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="nv">$array</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>It can then be rendered in the view like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    Hi my name is , my Pokemon is 
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Database</h3>

<p>When working with a database you first need to edit the database configuration values in your <code>.env</code> file.</p>

<h4>Migrations</h4>

<p>Once that&rsquo;s done you can try if your app can connect to your database by creating a database migration. You can do that by executing the following command in the root directory of your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>php artisan migrate:install
</span></code></pre></td></tr></table></div></figure>


<p>The command above creates the migration table in your database. The migration table is used by Lumen to keep track of which database migrations are currently applied to your database. If that worked without problem and you see that a <code>migrations</code> table has been created in your database then you&rsquo;re good to go.</p>

<p>Next you can create a new table by using the <code>make:migration</code> command. This takes up the action that you wish to do. In this case we want to create a new table so we use <code>--create</code> and then supply the name of the table as the value. The second argument will be the name that will be assigned to the migration class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>php artisan make:migration --create=users create_users_table
</span></code></pre></td></tr></table></div></figure>


<p>The command above will create a file which looks like the following in the <code>database/migrations</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateUsersTable</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Run the migrations.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return void</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Reverse the migrations.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @return void</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">Schema</span><span class="o">::</span><span class="na">drop</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing that we need to edit here are the method calls inside the <code>up</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">integer</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>That is where we specify the fields that we need to add to the <code>users</code> table.</p>

<p>Once you&rsquo;re happy with the file, save it and then run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php artisan migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create the table in your database and add a new row to the migrations table.</p>

<h4>Seeds</h4>

<p>You can create a new database seeder file inside the <code>database/seeds</code> directory. Here&rsquo;s the usual structure of a seeder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Seeder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserTableSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//seeding code       </span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the <code>run</code> method is the actual seeding code. We can use your usual Laravel flavored database queries inside of it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ash Ketchum&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Brock&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">15</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Misty&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">12</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, save the file and open up the <code>DatabaseSeeder.php</code> file. This is where you specify which seeders you want to execute whenever you execute the <code>php artisan db:seed</code> command. In this case we want to add the <code>UserTableSeeder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$this-&gt;call(&#39;UserTableSeeder&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we execute the <code>php artisan db:seed</code> command we will first need to reload the autoloaded files by executing the <code>composer dump-autoload</code> command. We need to do this every time we add a new seeder so that Lumen will take care of loading the seeder.</p>

<h4>Getting Data</h4>

<p>From your routes file you can now try fetching the users that we&rsquo;ve added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/db-testing&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$users</span> <span class="o">=</span> <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$users</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>With Lumen you can use the <a href="http://laravel.com/docs/5.0/queries">query builder</a>, <a href="http://laravel.com/docs/database#running-queries">basic queries</a> and even <a href="http://laravel.com/docs/eloquent">Eloquent</a>. So if you already know how to work with those then you&rsquo;re good to go.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial I&rsquo;ve walked you through Lumen and how you can install, configure and work with the different functionalities that it can offer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Audio Calls with PeerJS]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/03/implementing-audio-calls-with-peerjs/"/>
    <updated>2015-05-03T06:37:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/03/implementing-audio-calls-with-peerjs</id>
    <content type="html"><![CDATA[<p>These past few days I&rsquo;ve been playing around with WebRTC. For the uninitiated, WebRTC basically means Web Real Time Communication.
Things like chat, audio or video calling comes to mind when you say real time. And that is what really WebRTC is. It gives real time super powers for the web.
In this tutorial I&rsquo;ll be showing you how to implement audio calls with PeerJS. PeerJS is a JavaScript library that allows us to easily implement peer to peer communications with WebRTC.</p>

<h3>Things We Need</h3>

<p>Before we start, go ahead and download the things we&rsquo;ll need for this tutorial:</p>

<ul>
<li><p><strong>jQuery</strong> &ndash; I know right! who still uses jQuery these days? Raise your left foot. Kidding aside, yes we still need jQuery. In this tutorial we&rsquo;ll only be using it to handle click events. So if you&rsquo;re confident with your Vanilla JavaScript-Fu then feel free to skip it.</p></li>
<li><p><strong>PeerJS</strong> &ndash; In case you missed it earlier, were gonna need PeerJS so that we can easily implement WebRTC.</p></li>
<li><p><strong>RecordRTC.js</strong> &ndash; This library mainly provides recording functionalities (e.g taking screenshots and webcam photos, recording audio and video) but it also doubles as a shim provider. We won&rsquo;t really use the recording functionalities in this tutorial so were only using it to be able to request the use of the microphone in the device.</p></li>
</ul>


<h3>Overview of the App</h3>

<p>Were going to build an app that would allow 2 users to call each other through the web via WebRTC. This app can use the PeerServer Cloud or you can implement your own PeerJS server. As for the outputting the audio coming from the microphones of each peer, we will use HTML5 Audio. So all we have to do is convert the audio stream to a format that HTML5 Audio can understand so that we can have each of the users listen to the audio coming from the other side.</p>

<h3>Building the App</h3>

<p>Now that have a basic overview of how the app will work, its time to actually build it.</p>

<p>First, link all the things that we&rsquo;ll need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdn.peerjs.com/0.3/peer.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//www.WebRTC-Experiment.com/RecordRTC.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, you can also put those script tags right before the closing body tag if performance is your thing.</p>

<p>Next is the HTML that the user will actually see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;start-call&quot;</span><span class="nt">&gt;</span>start call<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;audio</span> <span class="na">controls</span><span class="nt">&gt;&lt;/audio&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup! I didn&rsquo;t miss anything. That&rsquo;s all we need. A button to start the call to another peer and an HTML5 audio tag to output the audio on the other end.</p>

<p>Now let&rsquo;s proceed with the JavaScript. First declare a method that will get the query parameters by name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\[]/</span><span class="p">,</span> <span class="s2">&quot;\\[&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\]]/</span><span class="p">,</span> <span class="s2">&quot;\\]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[\\?&amp;]&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;=([^&amp;#]*)&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">results</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way this app works is by using <code>from</code> and <code>to</code> as query parameters. Where <code>from</code> is the id that you want to give to the peer whose currently using the device and <code>to</code> is the id of the peer on the other side. So we use the method above to easily get those values. To emphasize further, here&rsquo;s how the URL that we will use to access the app will look like on our side (john):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//mysite.com/call-app.html?from=john&amp;to=jane</span>
</span></code></pre></td></tr></table></div></figure>


<p>And on the other side (jane), it would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//mysite.com/call-app.html?from=jane&amp;to=john</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve basically just interchanged the two peers so we know exactly where the request is coming from and where its going to.</p>

<p>Next we declare the method that will ask a permission to the user for the page to use the microphone. This method takes up 2 parameters, the <code>successCallback</code> and the <code>errorCallback</code>. The <code>successCallback</code> is called when the page has been granted permission to use the microphone. And the <code>errorCallback</code> is called when the user declined.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getAudio</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">audio</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">video</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next declare the method that will be called when a call is received from a peer. This method has the <code>call</code> object as its parameter. We use this <code>call</code> object to initiate an answer to the call. But first we need to ask permission to the user to use the microphone by calling the <code>getAudio</code> method. Once we get the permission, we can then answer the call by calling the <code>answer</code> method in the <code>call</code> object. This method takes up the <code>MediaStream</code> as its argument. If we didn&rsquo;t get the permission to use the microphone, we just log that an error occurred and then output the actual error. Finally, we listen to the <code>stream</code> event in the call and then we call the <code>onReceiveStream</code> method when the event happens. This <code>stream</code> event can be triggered in 2 ways. First is when a peer initiates a call to another peer. And the second is when the other peer actually answers the call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onReceiveCall</span><span class="p">(</span><span class="nx">call</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;peer is calling...&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">call</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">getAudio</span><span class="p">(</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">call</span><span class="p">.</span><span class="nx">answer</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;answering call started...&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;an error occured while getting the audio&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">call</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">,</span> <span class="nx">onReceiveStream</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>onReceiveStream</code> method. This method is called when a media stream is received from the other peer. This is where we convert the media stream to a URL which we use as the source for the audio tag. The stream is basically an object which contains the current audio data. And we convert it to a URL by using the <code>window.URL.createObjectURL</code> method. Once all the meta data is loaded, we then play the audio.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onReceiveStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;audio&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">audio</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">audio</span><span class="p">.</span><span class="nx">onloadedmetadata</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;now playing the audio&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">audio</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that were done with all the method declarations, its time to actually call them. First we need to know where the request is coming from and who will it be sent to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">from</span> <span class="o">=</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="s1">&#39;from&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">to</span> <span class="o">=</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="s1">&#39;to&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new peer. This takes up the <code>id</code> of the peer as its first argument and the second argument is an object containing the PeerJS key. If you do not have a key yet, you can register for the <a href="http://peerjs.com/peerserver">PeerJS Cloud Service</a>. Its free for up to 50 concurrent connections. After that, we also need to set the ice server config. This ensures that we can get the peers to connect to each other without having to worry about external IP&rsquo;s assigned by routers, firewalls, proxies and other kinds of network security which can get in the way. You need to have at least one stun server and one turn server configuration added. You can get a list of freely available stun and turn servers <a href="https://gist.github.com/yetithefoot/7592580">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">peer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Peer</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">from</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;Your PeerJS API Key&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">config</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;iceServers&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;stun:stun1.l.google.com:19302&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;turn:numb.viagenie.ca&#39;</span><span class="p">,</span> <span class="nx">credential</span><span class="o">:</span> <span class="s1">&#39;muazkh&#39;</span><span class="p">,</span> <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;webrtc@live.com&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use your own server and get through the 50 concurrent connections limit of the PeerServer cloud. You can install PeerJS Server on your existing Express app in node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">peer</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then use it like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express_peer_server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;peer&#39;</span><span class="p">).</span><span class="nx">ExpressPeerServer</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">peer_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/peerjs&#39;</span><span class="p">,</span> <span class="nx">express_peer_server</span><span class="p">(</span><span class="nx">server</span><span class="p">,</span> <span class="nx">peer_options</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from the client side you can now use your shiny new PeerJS server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">peer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Peer</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;your-peerjs-server.com&#39;</span><span class="p">,</span> <span class="nx">port</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/peerjs&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">config</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;iceServers&#39;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;stun:stun1.l.google.com:19302&#39;</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;turn:numb.viagenie.ca&#39;</span><span class="p">,</span> <span class="nx">credential</span><span class="o">:</span> <span class="s1">&#39;muazkh&#39;</span><span class="p">,</span> <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;webrtc@live.com&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is an optional code. We only use it to determine if the peer we created was actually created. Here we simply listen to the <code>open</code> event on the peer object. And once it happens, we just output the peer id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">peer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;My peer ID is: &#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we listen to the <code>call</code> event. This is triggered when a peer tries to make call to the current user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">peer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;call&#39;</span><span class="p">,</span> <span class="nx">onReceiveCall</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, here&rsquo;s the code we use when we initiate the call ourselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#start-call&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;starting call...&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">getAudio</span><span class="p">(</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">MediaStream</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;now calling &#39;</span> <span class="o">+</span> <span class="nx">to</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">call</span> <span class="o">=</span> <span class="nx">peer</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">MediaStream</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">call</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">,</span> <span class="nx">onReceiveStream</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;an error occured while getting the audio&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is listen to the <code>click</code> event on the <code>start-call</code> button. It then calls the <code>getAudio</code> method to ask the user for permission to use the microphone. If the user allows then the call is made to the peer using the <code>call</code> method. This takes up the id of the peer on the other side and the <code>MediaStream</code>. Next, we just listen for the <code>stream</code> event and then call the <code>onReceiveStream</code> method if it happens. Note that this stream would be the audio stream from the peer on the other side and not the audio stream of the current user. Otherwise we would also hear our own voice. The same is true with the stream that were getting from the <code>onReceiveCall</code> method.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial we&rsquo;ve learned how to implement audio calls with WebRTC and PeerJS. Be sure to check out the resources below if you want to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/">Getting Started with WebRTC</a></li>
<li><a href="http://peerjs.com/docs/#start">PeerJS Documentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
