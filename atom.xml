<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-12-18T14:44:42+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Security Best Practices]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/12/15/php-security-best-practices/"/>
    <updated>2013-12-15T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/12/15/php-security-best-practices</id>
    <content type="html"><![CDATA[<p>In this post were going to have a look at some of the best practices in PHP when it comes to security.</p>

<blockquote><p>Disclaimer: I am not a security expert. This guide is purely based on the practices that I&#8217;m currently following that I believe to be secure. I&#8217;ve done a lot of research before putting any of the information here. But if you find something that you consider to be insecure please do share in the comments.</p></blockquote>


<h3>Always Update</h3>

<p>If possible always use the latest stable release of PHP because it contains some security updates and bug fixes. This will make applications written on top of it more secure.</p>

<h3>Secure Configuration</h3>

<ul>
<li>Disable exposure of which PHP version your server is using. You can do it by searching for <code>expose_php</code> in your <code>php.ini</code> file and set it to <code>Off</code>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expose_php = Off </span></code></pre></td></tr></table></div></figure>


<p>This will disable the inclusion of the PHP version in the response headers under the <code>X-Powered-By</code> attribute.
Here&rsquo;s an example of a site which has set <code>expose_php</code> to <code>On</code>. As you can see the value <code>X-Powered-By</code> attribute is <code>PHP/5.4.17</code> so we pretty much know which PHP version the server is running. An attacker can use this information to exploit the security vulnerabilities of this specific PHP version.</p>

<p><img src="http://anchetaWern.github.io/images/posts/php_security_best_practices/response_headers.png" alt="response headers" /></p>

<ul>
<li><p>Make sure that you don&rsquo;t have any files in your server that calls the <code>phpinfo()</code> function. If you want to make use of it, make sure the filename can&rsquo;t easily be guessed like <code>phpinfo.php</code> and don&rsquo;t store it on the root of your web accessible directory. Don&rsquo;t forget to delete it once you&rsquo;re done.</p></li>
<li><p>Log errors instead of displaying them. Errors, notices and warnings in your web application can provide valuable information to attackers such as filenames and the name of fields that you used on your tables. Make sure you set the following in your <code>php.ini</code> file:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>display_startup_errors = Off #disable displaying of startup errors
</span><span class='line'>display_errors = Off #disable displaying of errors
</span><span class='line'>html_errors = Off #disable formatting of errors in HTML
</span><span class='line'>error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT #report all errors, warnings and notices including coding standards
</span><span class='line'>log_errors = On #log errors to a file</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Disable file uploads when not needed.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file_uploads = Off</span></code></pre></td></tr></table></div></figure>


<p>If your web application has a file upload feature then you need to make sure that you know some of the best practices in securing file uploads. Here&rsquo;s a good article from Sitepoint on <a href="http://www.sitepoint.com/file-uploads-with-php/">how to create a secure file upload in PHP</a>. You can also make use of a library that&rsquo;s specifically created for handling file uploads such as the <a href="https://packagist.org/packages/codeguy/upload">Upload library from Josh Lockhart(Codeguy)</a>.</p>

<ul>
<li>Disable remote file execution. If you don&rsquo;t need to use functions such as <code>fopen</code>, <code>fsockopen</code> or <code>file_get_contents</code> then you can just set <code>allow_url_fopen</code> to <code>Off</code>. <code>Curl</code> can provide with similar functionality so most of the time you won&rsquo;t really need it.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>allow_url_fopen = Off #disables processing of urls
</span><span class='line'>allow_url_include = Off #disable including of urls to files (e.g include 'http://iamanevilfile.php')</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Limit the maximum size of POST data to a value that you think is enough for your web application needs. This is to prevent attackers from flooding your web application by POSTing huge amount of data. Note that this can be expressed in kilo (K), mega (M) or giga (G).</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_max_size = 10M</span></code></pre></td></tr></table></div></figure>


<p>Do note that the value that you set for <code>post_max_size</code> should be larger than the <code>upload_max_filesize</code> since uploaded files are also submitted via POST.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upload_max_filesize = 5M </span></code></pre></td></tr></table></div></figure>


<p><code>memory_limit</code> should also be larger than the <code>post_max_size</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>memory_limit = 25M</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Limit maximum input time. This will limit the amount of time for PHP to parse input data from either <code>$_POST</code> or <code>$_GET</code>.
Note that the value is expressed in seconds.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>max_input_time = 5</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Limit maximum execution time to a reasonable value. The default value of 30 seconds seems reasonable enough.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>max_execution_time = 30</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Limit the use of shell functions such as <code>exec</code>, <code>passthru</code>, <code>shell_exec</code>, <code>proc_open</code>, and <code>popen</code>. If there&rsquo;s no other option for implementing something and you absolutely need to use it make sure that users of your web application will not be able to execute any system commands. If you need user input for executing system commands then make sure that you&rsquo;re validating the data correctly.</p></li>
<li><p>Only allow execution of PHP files on a specific directory.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open_basedir = /var/www/public_html</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set temporary upload directory to a path outside of the <code>open_base_dir</code>. This prevents files in the temporary upload directory from being executed.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upload_tmp_dir = /var/www/uploads/tmp</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Make sure that your web accessible directory is set to <code>read-only</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod -R 0444 /var/www/public_html</span></code></pre></td></tr></table></div></figure>


<h3>Use CURL</h3>

<p>Always use the CURL extension when making requests to other servers especially if you&rsquo;re working with sensitive data.
This is because CURL is by default makes requests securely over SSL/TLS (Secure Socket Layer/Transport Security Layer).
Here&rsquo;s an example of how to perform requests using CURL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;https://bitpay.com/api/invoice&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$req</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$req</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$req</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Also make sure to set the following options when you&rsquo;re working with sensitive data:</p>

<ul>
<li><strong>CURLOPT_SSL_VERIFYPEER</strong> &ndash; should be set to <code>TRUE</code> always. This will tell CURL to check if the remote certificate of the server where you&rsquo;re performing a request is valid.</li>
<li><strong>CURLOPT_SSL_VERIFYHOST</strong> &ndash; should be set to <code>TRUE</code> always. This tells CURL to check that the Certificate was issued to the entity that you&rsquo;re requesting to.</li>
</ul>


<h3>Input Validation and Filtering</h3>

<p>Input validation is the first layer of defense when it comes to securing your PHP applications. User input should never be trusted thus we need to filter and validate. But first lets differentiate filtering from validation:</p>

<ul>
<li><p><strong>Filtering</strong> &ndash; also called sanitization. This is used for ensuring that the data is properly formatted before we try to validate. An example of filtering is removing whitespaces from a string or removing any invalid characters from an email address.</p></li>
<li><p><strong>Validation</strong> &ndash; the process of making sure that the data is what you expect it to be. For example if the web form asks for the age then you expect the age to be a number so the code must validate that what is inputted in the age field is indeed a number. And not just any number. If you expect the users who will fill out the form to be between ages 20 &ndash; 40 then you must also validate that the age that was inputted falls within that range. There are lots of things to consider when validating user input, as programmers its our duty to ensure that we&rsquo;ve covered most of the use cases.</p></li>
</ul>


<h4>Filtering</h4>

<p>PHP comes with filtering functions that you can use to sanitize data before saving into the database.</p>

<ul>
<li><strong>addslashes</strong> &ndash; adds a backslash before a single quote (<code>'</code>), double quote (<code>"</code>), and NULL byte (<code>\</code>).</li>
<li><strong>filter_var</strong> &ndash; sanitizes strings based on the filters listed <a href="http://www.php.net/manual/en/filter.filters.sanitize.php">here</a></li>
<li><strong>htmlspecialchars</strong> &ndash; converts HTML strings into their corresponding entity.</li>
<li><strong>htmlentities</strong> &ndash; the same as <code>htmlspecialchars</code> the only difference is that <code>htmlentities</code> try to encode all characters which have HTML character entity equivalents. What this means is that you will have a much longer resulting string if the string that you&rsquo;re trying to use contains not only HTML but also characters which has an HTML entity equivalents.</li>
<li><strong>preg_replace</strong> &ndash; replaces all the string that matches the pattern that you specify.</li>
<li><strong>strip_tags</strong> &ndash; strips all HTML and PHP tags from the original string.</li>
<li><strong>trim</strong> &ndash; used for trimming leading and trailing whitespaces from the original string.</li>
</ul>


<p>What function you use depends on your specific needs. If you need to save a string into the database and you expect that there will be a single quote or double quote on that string then you should call <code>addslashes</code> before saving into the database. This ensures that you won&rsquo;t get any unexpected character errors when inserting the string.</p>

<h4>Validation</h4>

<p>PHP also comes with validation functions one of those is the <code>filter_var</code>. You can use it to validate different types of data:</p>

<ul>
<li><strong>FILTER_VALIDATE_BOOLEAN</strong> &ndash; used for validating if the value is either <code>true</code> or <code>false</code></li>
<li><strong>FILTER_VALIDATE_EMAIL</strong> &ndash; used for validating if the value is a valid email</li>
<li><strong>FILTER_VALIDATE_REGEXP</strong> &ndash; used for validating if the value matches a specific expression</li>
<li><strong>FILTER_VALIDATE_URL</strong> &ndash; used for validating if the value matches the accepted pattern of a URL</li>
<li><strong>FILTER_VALIDATE_INT</strong> &ndash; used for validating if the value is an integer</li>
<li><strong>FILTER_VALIDATE_FLOAT</strong> &ndash; used for validating if the value is a float or a decimal number</li>
<li><strong>FILTER_VALIDATE_IP</strong> &ndash; used for validating if the value is a valid IPv4 or IPv6 IP address</li>
</ul>


<p>Here&rsquo;s how to use the <code>filter_var</code> function to validate user input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$email</span> <span class="o">=</span> <span class="nb">filter_var</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;email&#39;</span><span class="p">],</span> <span class="nx">FILTER_VALIDATE_EMAIL</span><span class="p">);</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="nb">filter_var</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">],</span> <span class="nx">FILTER_VALIDATE_INT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$email</span> <span class="o">&amp;&amp;</span> <span class="nv">$age</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$age</span> <span class="o">&gt;=</span> <span class="mi">14</span> <span class="o">&amp;&amp;</span> <span class="nv">$age</span> <span class="o">&lt;=</span> <span class="mi">30</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>filter_var</code> function returns the original value that you specified as the first argument if the value is valid and returns <code>false</code> if its not valid.</p>

<p>There are also a bunch of PHP functions that checks for a specific data type and returns <code>true</code> if the value meets</p>

<ul>
<li><strong>is_array</strong></li>
<li><strong>is_bool</strong></li>
<li><strong>is_double</strong></li>
<li><strong>is_float</strong></li>
<li><strong>is_integer|is_long|is_int</strong> &ndash; checks if value is a valid integer. Note that this doesn&rsquo;t check for the data type since all user input is always in string so either the value <code>'1'</code> or simply <code>1</code> will pass.</li>
<li><strong>is_null</strong> &ndash; checks if a variable is <code>NULL</code></li>
<li><strong>is_numeric</strong> &ndash; checks if a value is a valid number, the main difference of this function with <code>is_int</code> is that it also checks for the data type so string numbers such as <code>'1'</code>, <code>'23'</code>, or <code>'14'</code> will return <code>false</code>.</li>
<li><strong>is_object</strong></li>
<li><strong>is_resource</strong></li>
<li><strong>is_scalar</strong></li>
<li><strong>is_string</strong></li>
</ul>


<p>And there are also those that checks for the presence of a specific value:</p>

<ul>
<li><strong>isset</strong> &ndash; checks if a specific variable has been set or declared. Note that this disregards the actual value so if the variable in question doesn&rsquo;t have a value assigned to it (aka <code>undefined</code>) then it will still return <code>true</code>.</li>
<li><strong>empty</strong> &ndash; checks if a specific variable has a truthy value. Here&rsquo;s a good reference on this subject: <a href="http://www.php.net/manual/en/types.comparisons.php">type comparisons</a></li>
</ul>


<h4>Input Filtering and Validation Libraries</h4>

<p>Here are some libraries that you can use for input validation and filtering:</p>

<ul>
<li><a href="http://documentup.com/Respect/Validation/">Respect\Validation</a></li>
<li><a href="https://github.com/ircmaxell/filterus">Filterus</a></li>
<li><a href="https://github.com/vlucas/valitron">Valitron</a></li>
<li><a href="http://htmlpurifier.org/">HTML Purifier</a></li>
</ul>


<h3>Working with Databases</h3>

<h4>Limit User Privileges</h4>

<p>When working with databases its a good practice to not use the root user as the user of the database. Sometimes out of laziness we tend to use the default database user in MySQL when connecting to the database like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mysqli</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;my_db&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not a good practice since the root user has the privilege to perform almost all the operations that you can perform in all of the database that&rsquo;s currently residing in the MySQL server. Selecting data, inserting new data, updating, deleting, truncating tables, dropping tables, dropping a whole database you name it all of these can be performed by the root user so a successful SQL injection attack can pretty much give an attacker the privilege to do all of these operations.</p>

<p>Limiting the user privileges is really simple. In the screenshot below I&rsquo;m using a tool called phpmyadmin to create a user that has only read privileges:</p>

<p><img src="http://anchetaWern.github.io/images/posts/php_security_best_practices/mysql-privileges.png" alt="mysql read privileges" /></p>

<p>While you&rsquo;re there you can also set resource limit to the user. Setting a reasonable resource limit reduces the possibility of malicious users flooding your database with lots of queries. Just be sure to do your research first before setting resource limits to a specific database user, you don&rsquo;t want the limit to run out on genuine users of your application:</p>

<p><img src="http://anchetaWern.github.io/images/posts/php_security_best_practices/resource-limits.png" alt="limit" /></p>

<p>Limiting user privileges effectively reduces the risk of a successful SQL injection attack. It means that even if an attacker manages to execute a query like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">DROP TABLE tbl_users</span>
</span></code></pre></td></tr></table></div></figure>


<p>It won&rsquo;t be allowed by the database if the database user that was used doesn&rsquo;t have a privilege to drop a table.
But what if an attacker successfully gains access to a database user that has all the privileges to make a successful attack? For example a System Administrator user account has been hacked and now the attacker can simply use SQL injection to do all sorts of evil stuff with the database. That&rsquo;s where the use of PDO and prepared statements comes in.</p>

<h4>Use PDO Or MySQLi</h4>

<p>Use the PDO or MySqli extension when building applications that connect to the MySQL database. The original PHP MySQL API is already deprecated and therefore no longer recommended. Using PDO or MySqli will give you the benefit of using parametrized queries which effectively reduces the risk of SQL injection attacks if used correctly. Here&rsquo;s an example on how to perform database queries using PDO:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$user_id</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">is_int</span><span class="p">(</span><span class="nv">$user_id</span><span class="p">)){</span> <span class="c1">//check if id is an integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span><span class="p">{</span>
</span><span class='line'>      <span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s2">&quot;mysql:host=localhost;dbname=my_db&quot;</span><span class="p">,</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;db_user&#39;</span><span class="p">],</span> <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;db_password&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_ERRMODE</span><span class="p">,</span> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_EXCEPTION</span><span class="p">);</span> <span class="c1">//tell PDO to throw exceptions  </span>
</span><span class='line'>  
</span><span class='line'>      <span class="nv">$sql</span> <span class="o">=</span> <span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT username, role FROM tbl_users WHERE user_id = :user_id&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$sql</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="s1">&#39;:user_id&#39;</span><span class="p">,</span> <span class="nv">$user_id</span><span class="p">,</span> <span class="nx">PDO</span><span class="o">::</span><span class="na">PARAM_INT</span><span class="p">);</span> <span class="c1">//safely substitute the placeholder(:user_id) to the real value ($_GET[&#39;id&#39;])</span>
</span><span class='line'>      <span class="nv">$sql</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span> <span class="c1">//execute the query</span>
</span><span class='line'>  
</span><span class='line'>      <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$sql</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">log_exception</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span> <span class="c1">//log the exception, don&#39;t echo </span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>How does PDO make things more secure you ask? Its more secure in the sense that it sends the query and data (user input) separately to MySQL. So what happens is that the SQL string that you supplied as the argument for the <code>prepare</code> method is parsed and then later on using <code>bindParam</code> the placeholder is safely substituted to the user input. Finally the query is executed. In simple terms MySQL considers every user input as a string with no meaning when PDO is used so SQL injection is effectively prevented.</p>

<p>If you want to learn more about PDO be sure to check out the <a href="http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers">PDO tutorial for MySQL Developers</a></p>

<h4>Storing Passwords</h4>

<p>One more thing to consider when working with databases is how to safely store passwords. You probably already know that its a bad practice to simply store passwords in plain text. Because this means that when attackers were successfully able to dump the contents of a user table then they will basically have access to all of the users information which includes things such as credit card numbers, favorite TV show or the name of your first crush.</p>

<p>And it might already be old news to you but these functions for hashing passwords isn&rsquo;t safe either as attackers can use brute force attack or rainbow tables in order to determine a password:</p>

<ul>
<li><strong>md5</strong></li>
<li><strong>sha1</strong></li>
</ul>


<p>You can use the following functions instead:</p>

<ul>
<li><strong>hash_pbkdf2</strong></li>
<li><strong>crypt</strong></li>
<li><strong>password_hash</strong></li>
</ul>


<p>Note that some of the hashing functions like <code>hash_pbkdf2</code> and <code>password_hash</code> are only available on PHP 5.5. <code>crypt</code> is available on PHP 4 and 5.</p>

<p>Here are some examples on how to use each of the above hashing methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mySupeRandomPassword&#39;</span><span class="p">;</span> <span class="c1">//note: don&#39;t use a password like this</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using hash_pbkdf2</span>
</span><span class='line'><span class="nv">$salt</span> <span class="o">=</span> <span class="nb">mcrypt_create_iv</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="nx">MCRYPT_DEV_URANDOM</span><span class="p">);</span> <span class="c1">//generate a random salt</span>
</span><span class='line'><span class="nv">$iterations</span> <span class="o">=</span> <span class="s1">&#39;1525&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">hash_pbkdf2</span><span class="p">(</span><span class="s2">&quot;sha256&quot;</span><span class="p">,</span> <span class="nv">$password</span><span class="p">,</span> <span class="nv">$salt</span><span class="p">,</span> <span class="nv">$iterations</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span> <span class="c1">//hashing algorithm, raw password, random salt, iterations, hash length</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using crypt</span>
</span><span class='line'><span class="nv">$salt</span> <span class="o">=</span> <span class="nb">mcrypt_create_iv</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="nx">MCRYPT_DEV_URANDOM</span><span class="p">);</span> <span class="c1">//generate a random salt</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nb">crypt</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$salt</span><span class="p">);</span> <span class="c1">//raw password, random salt</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//using password_hash</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_DEFAULT</span><span class="p">);</span> <span class="c1">//PASSWORD_DEFAULT uses the Bcrypt alogrithm, you can also use PASSWORD_BCRYPT if you want to use the CRYPT_BLOWFISH algorithm for hashing the password</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can implement the <code>hash_pbkdf2</code> method by storing both the hash and the salt in a single field (prepend the salt to the hash).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//verifying using hash_pbkdf2</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">get hash and salt from database</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">hash_pbkdf2</span><span class="p">(</span><span class="s2">&quot;sha256&quot;</span><span class="p">,</span> <span class="nv">$password</span><span class="p">,</span> <span class="nv">$salt_from_db</span><span class="p">,</span> <span class="nv">$iterations</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$hash_from_db</span> <span class="o">==</span> <span class="nv">$hash</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Some people say that you should store your salt strings to a database separate from the database where you store your hashes. Maybe this is true if you don&rsquo;t use random salts for each of the passwords. An attacker would still have difficulty in cracking a password even if he has access to both salt and hash as long as the salt is random.</p>

<p>For <code>crypt</code> and <code>password_hash</code> there&rsquo;s no need to store the random salts separately since you can verify if the password is valid without specifying the salt that was used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//verifying using crypt</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm">get hash from database</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">crypt</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)</span> <span class="o">==</span> <span class="nv">$hash</span><span class="p">){</span> <span class="c1">//check if password is valid</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//verifying using password hash</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">password_verify</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can also use the <code>password_verify</code> method for verifying hashes that are created by using the <code>crypt</code> method <code>password_hash</code> and <code>crypt</code> methods as they both use the <a href="http://en.wikipedia.org/wiki/Crypt_(C">C Crypt Scheme</a>).</p>

<p>You can also use password hashing libraries like <a href="https://github.com/hautelook/phpass/">PHPAss</a> or <a href="https://github.com/ircmaxell/password_compat">Password-Compat</a> if you want. The main benefit of using libraries is that they&rsquo;re often compatible with lower PHP versions but are still secure. Here&rsquo;s an example on how to use each of those:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//using password-compat</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/ircmaxell/password-compat/lib/password.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_BCRYPT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verifying</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">password_verify</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//using PHPAss</span>
</span><span class='line'><span class="nv">$cost</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="c1">//algorithmic cost that should be used, you can play around this value but this is mostly dependent on your servers hardware</span>
</span><span class='line'><span class="nv">$portable_hash</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">//do not store salts along with hash</span>
</span><span class='line'><span class="nv">$phpass</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordHash</span><span class="p">(</span><span class="nv">$cost</span><span class="p">,</span> <span class="nv">$portable_hash</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nv">$phpass</span><span class="o">-&gt;</span><span class="na">HashPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//verifying</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$phpass</span><span class="o">-&gt;</span><span class="na">CheckPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the password-compat library uses the same syntax as the password hashing method <code>password_hash</code> in PHP 5.5. But this library works for PHP 5.3.7 and above. So this library is intended for providing forward compatibility to PHP versions lower than 5.5. This means that there&rsquo;s no real need to use this library if you&rsquo;re already using PHP 5.5.</p>

<p>Other things to remember when storing passwords:</p>

<ul>
<li>Do not email or log passwords if your users forgot their password just email them a link that will allow them to update their password.</li>
<li>Do not store passwords in plain text (yeah I know I said this already)</li>
<li>Use random password salts</li>
<li>Do not limit the length of passwords that can be entered by your users</li>
<li>Encourage your users to use long, secure and random passwords by implementing password strength meters on the front-end of your application. Passwords doesn&rsquo;t really need to be memorable as users can pretty much use password managers like <a href="http://keepass.info/">keepas</a> to store their passwords.</li>
</ul>


<h3>Working with Uploaded Files</h3>

<p>When working with uploaded files do not use the <code>$_FILE</code> super global in determining the type of the file as the can be easily spoofed by simply changing the file extension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&quot;file&quot;</span><span class="p">][</span><span class="s2">&quot;type&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;jpg&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something with the file</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>finfo</code> class to determine the actual mime type of a file instead. This is slower than simply checking the file type from the <code>$_FILE</code> super global but it does the job of determinining the real file type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$file_info</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">finfo</span><span class="p">(</span><span class="nx">FILEINFO_MIME_TYPE</span><span class="p">);</span>
</span><span class='line'><span class="nv">$file_contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;iamnotanevilfile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$mime_type</span> <span class="o">=</span> <span class="nv">$file_info</span><span class="o">-&gt;</span><span class="na">buffer</span><span class="p">(</span><span class="nv">$file_contents</span><span class="p">);</span>
</span><span class='line'><span class="c1">//this will return any valid mime type listed here: http://en.wikipedia.org/wiki/Internet_media_type</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Better yet use a library that&rsquo;s especially created for this type of task like the <a href="https://github.com/codeguy/Upload">upload library</a> by Josh Lockhart. Here&rsquo;s how you can use it to verify that the file that was uploaded is an image file that&rsquo;s not greater than 2 MB in size.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span> <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;some_file&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Upload File&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$upload_path</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Upload\Storage\FileSystem</span><span class="p">(</span><span class="s1">&#39;/upload_path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$file</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Upload\File</span><span class="p">(</span><span class="s1">&#39;some_file&#39;</span><span class="p">,</span> <span class="nv">$upload_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$image_types</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;image/gif&#39;</span><span class="p">,</span> <span class="s1">&#39;image/png&#39;</span><span class="p">,</span> <span class="s1">&#39;image/jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;image/bmp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$file</span><span class="o">-&gt;</span><span class="na">addValidations</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">\Upload\Validation\Mimetype</span><span class="p">(</span><span class="nv">$image_types</span><span class="p">),</span> <span class="c1">//can also supply a string</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">\Upload\Validation\Size</span><span class="p">(</span><span class="s1">&#39;2M&#39;</span><span class="p">)</span> <span class="c1">//size should be 2 MB or less, you can also use B, K, G as the size unit</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//try to upload the file</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">upload</span><span class="p">();</span> <span class="c1">//the file is uploaded if it successfully pass through the validation</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getErrors</span><span class="p">();</span> <span class="c1">//the file upload failed</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We&rsquo;ve barely scratch the surface with this guide. There&rsquo;s a lot more you can do to improve the security of the applications that you&rsquo;re writing. Be sure to check out the resources below if you want to learn more about securing PHP applications.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP Security Cheat Sheet</a></li>
<li><a href="http://phpsecurity.readthedocs.org/">Survive the Deep End: PHP Security</a></li>
<li><a href="http://www.php.net/manual/en/security.php">PHP.Net Security Manual</a></li>
<li><a href="http://phpsec.org/">PHP Security Guide</a></li>
<li><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html">PHP Security Best Practices for Sys Admins</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Bitpay API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/12/01/getting-started-with-bitpay-api/"/>
    <updated>2013-12-01T11:49:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/12/01/getting-started-with-bitpay-api</id>
    <content type="html"><![CDATA[<p>Bitcoin is really trending these days with its value now over <a href="http://www.extremetech.com/extreme/171762-bitcoin-hits-1000-but-how-far-can-it-go">$1000 per coin</a>. I think its timely to explore some of the services which uses Bitcoin as a form of payment. Last time I also showed you how to <a href="http://anchetawern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/">get started with the Coinbase API</a> which is also another service which allows you to use Bitcoins as a means of payment for goods and services. This time we will be exploring Bitpay. But first lets determine what&rsquo;s the difference between the Coinbase and Bitpay. Here&rsquo;s a really good answer to <a href="http://bitcoin.stackexchange.com/questions/7544/what-are-the-differences-and-similarities-among-paymium-bitpay-coinbase-etc">this question</a>:</p>

<blockquote><p>BitPay is a payment processor for E-Commerce as well as for bricks and mortar / point-of-sale. This allows a business to accept bitcoins for payment and the proceeds are delivered to the merchant as directed. This could be 100% fiat (e.g., all bitcoin sales get converted to USDs immediately, or a mix, .. like 30% USD, 70% BTCs, etc.) The currently can send payments to merchants in U.S., Mexico, Canada and several nations in Europe.</p></blockquote>




<blockquote><p>Coinbase is an EWallet provider and provides a service for buying and selling bitcoins. They do not operate a market, but instead use the exchange rate from the leading exchange (Mt. Gox) for customer buying and selling. They charge just 1% to buy or sell, but they have low limits (i.e., buy a max of $100 USD per-day) for new customers still in the 30-day probationary period.</p></blockquote>


<p>So what service you use basically depends on what you need.</p>

<h3>Signing Up</h3>

<p>First you need to <a href="https://bitpay.com/start">sign up at Bitpay</a> in order to get an API key which you can use for interacting with their API. Bitpay is really strict when it comes to the registration so you really have to provide real information about your business so that you can actually confirm it when they need some confirmation.</p>

<h3>Connecting to Bitpay API</h3>

<p>The Bitpay API only requires basic HTTP authentication so the process of connecting to the API is really simple.
All you have to do is to call the <code>base64_encode()</code> method on the API key that you acquire from Bitpay and then pass it as one of the HTTP header fields. Under the <code>Authorization</code> field use <code>Basic</code> followed by the base 64 encoded string representation of the API key. Here&rsquo;s how to do it using <code>file_get_contents()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$api_key</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'><span class="nv">$context_options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;http&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;method&quot;</span> <span class="o">=&gt;</span> <span class="nv">$method</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;header&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;Content-type: application/json</span><span class="se">\r\n</span><span class="s2">&quot;</span> <span class="o">.</span>
</span><span class='line'>          <span class="s2">&quot;Content-Length: </span><span class="si">$length</span><span class="se">\r\n</span><span class="s2">&quot;</span> <span class="o">.</span>
</span><span class='line'>          <span class="s2">&quot;Authorization: Basic </span><span class="si">$user</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>     
</span><span class='line'>
</span><span class='line'><span class="nv">$context</span> <span class="o">=</span> <span class="nb">stream_context_create</span><span class="p">(</span><span class="nv">$context_options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the $url here is the API resource that you&#39;re trying to request from</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Creating an Invoice</h3>

<p>You can create an Invoice via by using the following resource in the Bitpay API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">https://bitpay.com/api/invoice</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then passing in all the fields required by the resource:</p>

<ul>
<li><strong>price</strong> &ndash; the price of the service or good.</li>
<li><strong>currency</strong> &ndash; any valid currency short name (USD, GBP, EUR, JPY). Here&rsquo;s a <a href="http://www.casi.org.uk/info/1051list/annexd.html">full list of valid currency short names</a>. This will be automatically converted to the corresponding value in Bitcoins (BTC) depending on the <a href="https://bitpay.com/bitcoin-exchange-rates">current Bitcoin exchange rates</a>.</li>
</ul>


<p>You can also pass in some optional fields:</p>

<ul>
<li><strong>posData</strong> &ndash; this is normally used for passing in some additional information regarding the service or good that a customer is trying to purchase</li>
<li><p><strong>notificationURL</strong> &ndash; the URL that will be pinged by Bitpay everytime the transaction status changes. Note that a change from <code>new</code> to <code>expired</code> doesn&rsquo;t count as a transaction status change. Bitpay will only ping the URL when the transaction status changes from <code>new</code> to <code>paid</code>, <code>confirmed</code>, or<code>complete</code>.</p></li>
<li><p><strong>transactionSpeed</strong> &ndash; this can be set to <code>high</code>, <code>medium</code> or <code>low</code>. High means that the invoice is considered to be confirmed after a payment has been received. Medium means it will be considered confirmed after 10 minutes. And low means it will be considered confirmed after an hour.</p></li>
<li><p><strong>fullNotifications</strong> &ndash; this can be set to <code>true</code> or <code>false</code>. If you want Bitpay to notify via email or via the notification url that you have set every time the transaction status changes then use <code>true</code>. If you only want Bitpay to notify once the transaction status becomes confirmed then set to <code>false</code>.</p></li>
<li><p><strong>notificationEmail</strong> &ndash; the email address that Bitpay will notify on every transaction status change.</p></li>
<li><strong>redirectURL</strong> &ndash; the URL in which Bitpay will display in the receipt after a payment has been made.</li>
</ul>


<p>And here are some fields which you can use to supply information regarding the product or the customer:</p>

<ul>
<li><strong>orderID</strong></li>
<li><strong>itemDesc</strong></li>
<li><strong>itemCode</strong></li>
<li><strong>physical</strong></li>
<li><strong>buyerName</strong></li>
<li><strong>buyerAddress1</strong></li>
<li><strong>buyerAddress2</strong></li>
<li><strong>buyerCity</strong></li>
<li><strong>buyerState</strong></li>
<li><strong>buyerZip</strong></li>
<li><strong>buyerCountry</strong></li>
<li><strong>buyerEmail</strong></li>
<li><strong>buyerPhone</strong></li>
</ul>


<h3>Invoice Status</h3>

<p>The invoice status is the status of the invoice at any given time. Here are some of the invoice states:</p>

<ul>
<li><strong>new</strong> &ndash; Initially the invoice status is <code>new</code>. This means that someone can still initiate a payment to the Bitcoin address that is associated with the invoice.</li>
<li><strong>paid</strong> &ndash; when an invoice becomes fully paid its status changes to <code>paid</code></li>
<li><strong>confirmed</strong> &ndash; an invoice is considered confirmed depending on the transaction speed that was set on the creation of invoice. If the transaction speed is set to low then it will be confirmed after an hour or 6 blocks in the Bitcoin network, if the transaction speed is set to medium then it will be confirmed after 1 block (10 minutes) in the Bitcoin network, if its set to high then it will be confirmed right after full payment has been made.</li>
<li><strong>complete</strong> &ndash; this means that Bitpay has credited the merchant&rsquo;s account for the invoice.</li>
<li><strong>expired</strong> &ndash; this means that no payment has been received after the 15 minute limit alloted by Bitpay.</li>
<li><strong>invalid</strong> &ndash; this means that the invoice has been paid but has not been confirmed after an hour.</li>
</ul>


<p>Now were ready to actually make a request to the Bitpay API. You can start by downloading the official <a href="https://github.com/bitpay/php-client">PHP client</a> provided by Bitpay for interacting with the Bitpay API. There&rsquo;s also a <a href="https://github.com/bitpay/ruby-client">Ruby</a> and <a href="https://github.com/bitpay/nodejs-client">Node.js</a> client if you&rsquo;re developing for those.</p>

<p>Once you&rsquo;ve downloaded it on your working directory open up the <code>bp_options.php</code> file and supply a value for the <code>apiKey</code>, <code>currency</code> or any of the optional fields that you would like to supply.</p>

<p>Create a new PHP file which we will be using to call the methods from <code>bp_lib.php</code>. To create an invoice call the <code>bpCreateInvoice()</code> method. It needs 4 arguments. The first one is the order ID which we will just supply <code>null</code> since we really don&rsquo;t have a system for generating order IDs. The second is the amount or the cost of the product or service.
The third is the optional post data in which we can provide additional information for the product or service in key-value pairs. The fourth is the additional options which is primarily used for supplying information regarding the product or the customer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;bp_lib.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$amount</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nv">$post_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;excalibur&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;level&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;999&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$addl_options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;itemDesc&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Anime Figurine&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nx">bpCreateInvoice</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="nv">$amount</span><span class="p">,</span> <span class="nv">$post_data</span><span class="p">,</span> <span class="nv">$addl_options</span><span class="p">);</span>                   
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$response</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Bitpay returns a response similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [id] =&gt; xxx</span>
</span><span class='line'><span class="x">    [url] =&gt; https://bitpay.com/invoice?id=xxx</span>
</span><span class='line'><span class="x">    [posData] =&gt; {&quot;posData&quot;:{&quot;name&quot;:&quot;excalibur&quot;,&quot;level&quot;:999},&quot;hash&quot;:&quot;xxxx-xx&quot;}</span>
</span><span class='line'><span class="x">    [status] =&gt; new</span>
</span><span class='line'><span class="x">    [btcPrice] =&gt; 0.0009</span>
</span><span class='line'><span class="x">    [price] =&gt; 1</span>
</span><span class='line'><span class="x">    [currency] =&gt; USD</span>
</span><span class='line'><span class="x">    [invoiceTime] =&gt; 1385885490958</span>
</span><span class='line'><span class="x">    [expirationTime] =&gt; 1385886390958</span>
</span><span class='line'><span class="x">    [currentTime] =&gt; 1385885491133</span>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>id</strong> &ndash; the unique id of the invoice</li>
<li><strong>url</strong> &ndash; the URL in which the invoice can be viewed</li>
<li><strong>posData</strong> &ndash; the additional data that we provided earlier</li>
<li><strong>status</strong> &ndash; the invoice status</li>
<li><strong>btcPrice</strong> &ndash; the corresponding amount in Bitcoins of the amount supplied earlier</li>
<li><strong>price</strong> &ndash; the amount that was supplied earlier when the invoice was created</li>
<li><strong>currency</strong> &ndash; the currency of the price</li>
<li><strong>invoiceTime</strong> &ndash; the time the invoice was created since January 1, 1970 midnight. This is in a UNIX timestamp format.</li>
<li><strong>expirationTime</strong> &ndash; the time in which the invoice will expire. When the invoice expires payments can no longer be accepted.</li>
<li><strong>currentTime</strong> &ndash; the current time in the Bitpay server. This is primarily used for determining the time remaining before the invoice expires.</li>
</ul>


<p>Accessing the invoice URL will give you a page similar to the following:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_bitpay/bitpay-donation.png" alt="invoice url" /></p>

<p>Customers can then use a Bitcoin client such as <a href="http://bitcoin.org/en/download">Bitcoin Qt</a>, <a href="http://electrum.org/">Electrum</a>, <a href="https://multibit.org/">Multibit</a>, or <a href="https://bitcoinarmory.com/">Armory</a> to pay you the merchant.</p>

<h3>Getting Invoice Status</h3>

<p>You can also get the status of an invoice by calling the <code>bpGetInvoice()</code> method and supplying the invoice ID as the argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$invoice</span> <span class="o">=</span> <span class="nx">bpGetInvoice</span><span class="p">(</span><span class="s1">&#39;85AHEqCRaT2aZ3xAMpK8fQ&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The method will return something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [id] =&gt; xxx</span>
</span><span class='line'><span class="x">    [url] =&gt; https://bitpay.com/invoice?id=xxx</span>
</span><span class='line'><span class="x">    [posData] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [name] =&gt; excalibur</span>
</span><span class='line'><span class="x">            [age] =&gt; 27</span>
</span><span class='line'><span class="x">        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">    [status] =&gt; new</span>
</span><span class='line'><span class="x">    [btcPrice] =&gt; 0.0009</span>
</span><span class='line'><span class="x">    [price] =&gt; 1</span>
</span><span class='line'><span class="x">    [currency] =&gt; USD</span>
</span><span class='line'><span class="x">    [invoiceTime] =&gt; 1385885490958</span>
</span><span class='line'><span class="x">    [expirationTime] =&gt; 1385886390958</span>
</span><span class='line'><span class="x">    [currentTime] =&gt; 1385886420720</span>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its basically the same as the response that we get when creating an invoice.</p>

<h3>Bitpay Class</h3>

<p>Before I end this tutorial here&rsquo;s the modified version of the Bitpay client provided by Bitpay that works with servers without CURL support:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bitpay</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$options</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$options</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpLog</span><span class="p">(</span><span class="nv">$contents</span><span class="p">){</span>
</span><span class='line'>      <span class="nv">$file</span> <span class="o">=</span> <span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/bplog.txt&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;m-d H:i:s&#39;</span><span class="p">)</span><span class="o">.</span><span class="s2">&quot;: &quot;</span><span class="p">,</span> <span class="nx">FILE_APPEND</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$contents</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">var_export</span><span class="p">(</span><span class="nv">$contents</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> 
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$contents</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="nv">$contents</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nx">FILE_APPEND</span><span class="p">);</span>         
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpfilegetcontents</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="nv">$apiKey</span><span class="p">,</span> <span class="nv">$post</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$bpOptions</span><span class="p">;</span>    
</span><span class='line'>          
</span><span class='line'>      <span class="nv">$length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$method</span> <span class="o">=</span> <span class="s2">&quot;GET&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$post</span><span class="p">){</span> 
</span><span class='line'>          <span class="nv">$length</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$method</span> <span class="o">=</span> <span class="s2">&quot;POST&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$uname</span> <span class="o">=</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$apiKey</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$context_options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;http&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s2">&quot;method&quot;</span> <span class="o">=&gt;</span> <span class="nv">$method</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;header&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;Content-type: application/json</span><span class="se">\r\n</span><span class="s2">&quot;</span> <span class="o">.</span>
</span><span class='line'>                  <span class="s2">&quot;Content-Length: </span><span class="si">$length</span><span class="se">\r\n</span><span class="s2">&quot;</span> <span class="o">.</span>
</span><span class='line'>                  <span class="s2">&quot;Authorization: Basic </span><span class="si">$uname</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">);</span>       
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$context_options</span><span class="p">[</span><span class="s2">&quot;http&quot;</span><span class="p">][</span><span class="s2">&quot;content&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$post</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$context</span> <span class="o">=</span> <span class="nb">stream_context_create</span><span class="p">(</span><span class="nv">$context_options</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$response</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpCreateInvoice</span><span class="p">(</span><span class="nv">$orderId</span><span class="p">,</span> <span class="nv">$price</span><span class="p">,</span> <span class="nv">$posData</span><span class="p">,</span> <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span> <span class="p">{</span> 
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$options</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">,</span> <span class="nv">$options</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$pos</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;posData&#39;</span> <span class="o">=&gt;</span> <span class="nv">$posData</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;verifyPos&#39;</span><span class="p">])</span>
</span><span class='line'>          <span class="nv">$pos</span><span class="p">[</span><span class="s1">&#39;hash&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bpHash</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$posData</span><span class="p">),</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;apiKey&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$pos</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;orderID&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$orderId</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$postOptions</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;orderID&#39;</span><span class="p">,</span> <span class="s1">&#39;itemDesc&#39;</span><span class="p">,</span> <span class="s1">&#39;itemCode&#39;</span><span class="p">,</span> <span class="s1">&#39;notificationEmail&#39;</span><span class="p">,</span> <span class="s1">&#39;notificationURL&#39;</span><span class="p">,</span> <span class="s1">&#39;redirectURL&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;posData&#39;</span><span class="p">,</span> <span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="s1">&#39;currency&#39;</span><span class="p">,</span> <span class="s1">&#39;physical&#39;</span><span class="p">,</span> <span class="s1">&#39;fullNotifications&#39;</span><span class="p">,</span> <span class="s1">&#39;transactionSpeed&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerName&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;buyerAddress1&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerAddress2&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerCity&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerState&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerZip&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerEmail&#39;</span><span class="p">,</span> <span class="s1">&#39;buyerPhone&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$postOptions</span> <span class="k">as</span> <span class="nv">$o</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$o</span><span class="p">,</span> <span class="nv">$options</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">$post</span><span class="p">[</span><span class="nv">$o</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">[</span><span class="nv">$o</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$post</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bpfilegetcontents</span><span class="p">(</span><span class="s1">&#39;https://bitpay.com/api/invoice/&#39;</span><span class="p">,</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;apiKey&#39;</span><span class="p">],</span> <span class="nv">$post</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpVerifyNotification</span><span class="p">(</span><span class="nv">$apiKey</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$apiKey</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">$apiKey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;apiKey&#39;</span><span class="p">];</span>      
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$post</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;php://input&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$post</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;No post data&#39;</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nv">$json</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$post</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$json</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="nv">$json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="s1">&#39;posData&#39;</span><span class="p">,</span> <span class="nv">$json</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;no posData&#39;</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nv">$posData</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">],</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;verifyPos&#39;</span><span class="p">]</span> <span class="k">and</span> <span class="nv">$posData</span><span class="p">[</span><span class="s1">&#39;hash&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bpHash</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$posData</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">]),</span> <span class="nv">$apiKey</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;authentication failed (bad hash)&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$json</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$posData</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">];</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">return</span> <span class="nv">$json</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpGetInvoice</span><span class="p">(</span><span class="nv">$invoiceId</span><span class="p">,</span> <span class="nv">$apiKey</span> <span class="o">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$apiKey</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">$apiKey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;apiKey&#39;</span><span class="p">];</span>      
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bpfilegetcontents</span><span class="p">(</span><span class="s1">&#39;https://bitpay.com/api/invoice/&#39;</span><span class="o">.</span><span class="nv">$invoiceId</span><span class="p">,</span> <span class="nv">$apiKey</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">))</span>
</span><span class='line'>          <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$response</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">],</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$response</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$response</span><span class="p">[</span><span class="s1">&#39;posData&#39;</span><span class="p">][</span><span class="s1">&#39;posData&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span> 
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">bpHash</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$hmac</span> <span class="o">=</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">hash_hmac</span><span class="p">(</span><span class="s1">&#39;sha256&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$key</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">strtr</span><span class="p">(</span><span class="nv">$hmac</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;+&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="s1">&#39;=&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="https://bitpay.com/downloads/bitpayApi.pdf">Bitpay API Documentation</a></li>
<li><a href="https://github.com/bitpay/php-client">Bitpay PHP Client</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Shopify App Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development/"/>
    <updated>2013-11-09T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to start developing apps for Shopify.
But first of all what is Shopify?</p>

<blockquote><p>Shopify is an online e-commerce platform, you can use Shopify to create online stores to sell goods and services.<br/>The only difference between Shopify and other e-commerce solutions like Wordpress or Joomla is that you don&#8217;t have to install anything yourself. Every store is hosted by Shopify. But you can use a custom domain if you want.</p></blockquote>


<p>As were going to create a Shopify App its also important that we understand what a Shopify app is:</p>

<blockquote><p>Shopify apps are used for adding extra features and capabilities to Shopify.</p></blockquote>


<p>If you&rsquo;ve ever used a Content Management System like Wordpress or Drupal you might have noticed that the plugin or modules are uploaded into the site were Wordpress or Drupal is running.</p>

<p>But in Shopify you don&rsquo;t need to upload anything. Shopify apps are basically hosted on a different server. So the creators of the App takes care of all the resources needed by the app to run.</p>

<h3>Register as a Shopify Partner</h3>

<p>The first thing that you need to do is to register a Shopify Partner Account.
This will allow you to create Apps for Shopify.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/shopify_partner_registration.png" alt="register as a shopify partner" /></p>

<p>After you have filled up and successfully submitted the form go ahead and verify your email address.</p>

<h3>Create an App</h3>

<p>Once you&rsquo;re done verifying you can now login to your Shopify partners account.</p>

<p>Once you&rsquo;re logged in click on the <code>Apps</code> tab. This is where the apps that you have created using your account will be listed.</p>

<p>Click on the <code>create app</code> button to create a new app.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/shopify_apps.png" alt="your apps" /></p>

<p>The form for creating a new app asks for some information regarding the app that you want to create. But the only one&rsquo;s which are required is the <code>Name of app</code> and the <code>Application Callback URL</code>. As this is only a getting started tutorial were just going to fill up what&rsquo;s required. The <code>app name</code> is simply a human readable name for the app. Make sure that it directly describes what the app does so you can easily make sense of what it does by just reading its name. The <code>Application Callback URL</code> is the URL where the merchant will be redirected after he installs your app.
As we are only getting started we can actually put in the url in your local development server. So something like: <code>http://localhost/shopify_testing/shopify_app.php</code></p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/create_app.png" alt="create app" /></p>

<p>Once the app is created the API Key and Shared Secret will be generated by Shopify. You can use this later on to authenticate requests to the Shopify API.</p>

<h3>Create a Dev Shop</h3>

<p>Now that you&rsquo;re done creating an App we can now create a Dev Shop. A Dev Shop as the name suggests is a Shopify Shop used for testing the apps that you develop. Unlike real Shopify Shops a Dev Shop has no time restrictions and all the functionality available to a normal Shop is also available. The only difference is that a Dev Shop cannot accept payments. Although Shopify has provided a <a href="http://docs.shopify.com/manual/your-store/orders/test-orders">bogus payment gateway</a> so developers can still test out the actual checkout process even when using a Dev Shop.</p>

<p>To create a Dev Shop, just click on the <code>Dev Shops</code> tab then click on the <code>create new dev shop</code> button.
Then fill up the form for creating a new Dev Shop. Everything is required:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/create_devshop.png" alt="create dev shop" /></p>

<p>Once you&rsquo;re done just click on the <code>create dev shop</code> button to finish creating the dev shop.
After that you can now access your dev shop by accessing a url similar to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://shop-name.myshopify.com/admin</span></code></pre></td></tr></table></div></figure>


<h3>Dev Shop Settings</h3>

<p>As were going to do some API calls using the app later on. Its useful to set some of the General Settings on your dev shop. I suggest supplying information for the following fields:</p>

<ul>
<li>Store name</li>
<li>Homepage title</li>
<li>Account email</li>
<li>Customer email</li>
<li>Phone</li>
<li>Street</li>
<li>City</li>
<li>Postal/Zip Code</li>
<li>Country</li>
<li>Currency</li>
</ul>


<p>You can also setup the checkout settings. Like I said earlier, a dev shop can only accept payments via the Bogus Gateway.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/bogus_gateway.png" alt="Bogus Gateway" /></p>

<p>When testing payment via bogus gateway the credit card number will always be <code>1</code> and the card security code is <code>111</code>.</p>

<h3>Installing the Dependencies</h3>

<p>Now were ready to develop the app. To make things easier we will be using a library that will interact with the Shopify API.</p>

<p>First create a <code>composer.json</code> file and put the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "minimum-stability": "dev",
</span><span class='line'>    "require": {
</span><span class='line'>        "sandeepshetty/shopify_api": "dev-master"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you haven&rsquo;t already installed Composer, go ahead and install it by executing the following command from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<p>Once Composer is installed execute the following command in the same directory where the <code>composer.json</code> file is. This will install all the Shopify API library along with all of its dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php composer.phar install</span></code></pre></td></tr></table></div></figure>


<p>Once everything is installed by Composer you will see the following directories under the <code>vendor</code> directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-composer
</span><span class='line'>-sandeepshetty
</span><span class='line'>-autoload.php</span></code></pre></td></tr></table></div></figure>


<h3>Database</h3>

<p>Were going to use the database for storing the general app data and store specific data.</p>

<h4>App Settings</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">tbl_appsettings</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">api_key</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">redirect_url</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">permissions</span><span class="o">`</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">shared_secret</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>api key</strong> &ndash; the API key that you got earlier when you created an app</li>
<li><strong>redirect_url</strong> &ndash; the url where the merchant will be redirected after installing your app. This is also the url where the merchant will be redirected when he accesses your app from his store.</li>
<li><strong>permissions</strong> &ndash; an array of permissions allowed in your app. These are specific data that your app has access to when a merchant installs your app into his Shop. Some examples are read orders and read products.</li>
<li><strong>shared_secret</strong> &ndash; your apps shared secret. This identifies you as the app owner so only you as the app creator should have access to it.</li>
</ul>


<h4>Store Settings</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">tbl_usersettings</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">access_token</span><span class="o">`</span> <span class="nb">text</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">store_name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>access_token</strong> &ndash; the permanent access token associated with the store to be used when authenticating API requests. This is saved into the database so that there will be no need to generate the access token everytime the merchant uses the application.</li>
<li><strong>store_name</strong> &ndash; the name of the store under the myshopify domain. For example: mystore.myshopify.com</li>
</ul>


<h3>Getting App Permissions</h3>

<p>Now were ready to actually develop the app. Start by creating the file that you used earlier for the callback URL. In this case were simply going to call it <code>shopify_app.php</code>.
Include the library that we downloaded earlier using Composer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">sandeepshetty\shopify_api</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next check if the shop name is passed in the URL. When the app is accessed from the shop it will always have the shop name passed as an argument along with the callback URL that you specified in the app settings. We then use this shop name to query the database if the shop already exists.</p>

<p>If the shop already exists then we verify if the request is a valid request from Shopify. We can do that by calling the <code>is_valid_request()</code> method from the Shopify API library so were sure that not just anyone can access the app by directly inputting the URL and the required arguments.</p>

<p>If the request is valid we simply save the <code>shopify signature</code> and <code>shop name</code> to the session so it can be accessed on each subsequent request to the app. This will be used to determine if a user is currently logged in to the app.</p>

<p>This means that there&rsquo;s no need to have a separate login feature for the app. As long as the merchant has properly gone through the process of accessing the app. That is by first</p>

<p>If the shop doesn&rsquo;t exist in the database yet we simply get the specific permissions stored in the database, convert it to an array then supply it as an argument along with the shop name and api key to the <code>permission_url()</code> method. The <code>permission_url()</code> method generates the URL to the page which asks the merchant to give the app the permission to get specific data from the merchant&rsquo;s store.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span> <span class="c1">//start a session</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mysqli</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;shopify_app&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">connect_errno</span><span class="p">){</span>
</span><span class='line'>  <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Connect Error: &#39;</span> <span class="o">.</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">connect_errno</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$select_settings</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM tbl_appsettings WHERE id = 1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$app_settings</span> <span class="o">=</span> <span class="nv">$select_settings</span><span class="o">-&gt;</span><span class="na">fetch_object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">])){</span> <span class="c1">//check if the shop name is passed in the URL</span>
</span><span class='line'>  <span class="nv">$shop</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">];</span> <span class="c1">//shop-name.myshopify.com</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$select_store</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT store_name FROM tbl_usersettings WHERE store_name = &#39;</span><span class="si">$shop</span><span class="s2">&#39;&quot;</span><span class="p">);</span> <span class="c1">//check if the store exists</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$select_store</span><span class="o">-&gt;</span><span class="na">num_rows</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">shopify_api\is_valid_request</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">,</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">shared_secret</span><span class="p">)){</span> <span class="c1">//check if its a valid request from Shopify        </span>
</span><span class='line'>          <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;shopify_signature&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;signature&#39;</span><span class="p">];</span>
</span><span class='line'>          <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$shop</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: http://localhost/shopify_testing/admin.php&#39;</span><span class="p">);</span> <span class="c1">//redirect to the admin page</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>     
</span><span class='line'>
</span><span class='line'>      <span class="c1">//convert the permissions to an array</span>
</span><span class='line'>      <span class="nv">$permissions</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">permissions</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//get the permission url</span>
</span><span class='line'>      <span class="nv">$permission_url</span> <span class="o">=</span> <span class="nx">shopify_api\permission_url</span><span class="p">(</span>
</span><span class='line'>          <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">],</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">,</span> <span class="nv">$permissions</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>      <span class="nv">$permission_url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;redirect_uri=&#39;</span> <span class="o">.</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">redirect_url</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: &#39;</span> <span class="o">.</span> <span class="nv">$permission_url</span><span class="p">);</span> <span class="c1">//redirect to the permission url</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the merchant has granted the permission for your app to access specific data he will be redirected to the URL you specify as the value for the <code>redirect_uri</code> argument passed in the permission URL.</p>

<p>As you can see were getting the redirect URL from the database. This redirect URL shouldn&rsquo;t necessarily be the same as the URL that you used for the callback URL in your app settings.
This redirect URL has the responsibility of saving the shop&rsquo;s details into the database. This is because the merchant will only be redirected to this URL the first time he installs your app.</p>

<p>You will know that the merchant has already been redirected to this page when both a code and the shop name is passed as an argument to the URL. A permanent access token can then be generated by passing in the name of the shop, api key, shared secret and the temporary code generated by shopify to the <code>oauth_access_token()</code> method.</p>

<p>Then we save the shop details to the database and to the current session. Finally we redirect to the admin page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">])){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$shop</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">];</span> <span class="c1">//shop name</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//get permanent access token</span>
</span><span class='line'>  <span class="nv">$access_token</span> <span class="o">=</span> <span class="nx">shopify_api\oauth_access_token</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">],</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">,</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">shared_secret</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//save the shop details to the database</span>
</span><span class='line'>  <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     INSERT INTO tbl_usersettings </span>
</span><span class='line'><span class="s2">     SET access_token = &#39;</span><span class="si">$access_token</span><span class="s2">&#39;,</span>
</span><span class='line'><span class="s2">     store_name = &#39;</span><span class="si">$shop</span><span class="s2">&#39;</span>
</span><span class='line'><span class="s2"> &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//save the signature and shop name to the current session</span>
</span><span class='line'>  <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;shopify_signature&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;signature&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;shop&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$shop</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: http://localhost/shopify_testing/shopify_app.php/admin.php&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve gone through the process of getting permissions for the app and written the code for it. It&rsquo;s time for you to actually install the app to the dev shop that you created earlier.
Apps are normally installed from the Shopify app store but we haven&rsquo;t submitted our app to the Shopify app store yet. So what we&rsquo;ll do is to go ahead and access the install URL for the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://shop-name.myshopify.com/admin/api/auth?api_key=xyz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to replace <code>shop-name</code> with the actual name of the dev shop that you created earlier. And the value for the <code>api_key</code> to be the actual api key for your app.</p>

<p>That specific URL is where the merchants will be ultimately redirected to once they install your app from the Shopify app store so we don&rsquo;t really need to submit our app to the app store yet. And Shopify won&rsquo;t really approve the app unless its well done. It has to go through some sort of review process to make sure that its safe for shop owners(merchants) to install it.</p>

<h3>Making API Requests</h3>

<p>Now that were done with the authentication part we can now make requests to the API.
Go ahead and create the <code>admin.php</code> file. That is where we make requests to the API to get some data about the shop were it is installed. But wait, we don&rsquo;t have any data to fetch from the shop yet. For starters go ahead and create some products on the dev shop that you created earlier. Come back here after you&rsquo;ve done that.</p>

<h4>Products</h4>

<p>Cool! Now you&rsquo;ve added some products to your shop. We can now fetch some of those products by talking to the API.
First you have to call the <code>client</code> method from the Shopify API library passing along the shop name, access token, api key and the shared secret. All of this data is already present in the database as long as the merchant has gone through the install process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$shopify</span> <span class="o">=</span> <span class="nx">shopify_api\client</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$shop</span><span class="p">,</span> <span class="nv">$shop_data</span><span class="o">-&gt;</span><span class="na">access_token</span><span class="p">,</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">api_key</span><span class="p">,</span> <span class="nv">$app_settings</span><span class="o">-&gt;</span><span class="na">shared_secret</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done with that you can now use the <code>$shopify</code> variable to call methods from the API.
Here were getting a list of products that are published in the shop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$products</span> <span class="o">=</span> <span class="nv">$shopify</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/products.json&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;published_status&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;published&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument that we specify above is the request method. It can either be <code>GET</code> or <code>POST</code> depending on what&rsquo;s included in the documentation. Some methods require <code>GET</code> as the request method and some require <code>POST</code>. But the common pattern is that when you&rsquo;re modifying or creating something the request method to use is <code>POST</code>, but when only retrieving specific data you use <code>GET</code>.</p>

<p>The second argument is the resource that you&rsquo;re trying to access. In this case were accessing <code>products.json</code> which refers to the products in the shop.</p>

<p>The third argument is an array of arguments that you want to pass. There&rsquo;s a bunch of arguments that you can pass with the <code>products</code> resource. In the above example we used the <code>published_status</code> and supplied <code>published</code> as its value. This is like saying to the API that we only want to get the products which are published. In shopify products can either be draft or published. Published means that its already viewable by customers in your shop. It means that the merchant is already displaying the product for sale.
There&rsquo;s also the <code>product_type</code> argument this allows you to limit the products returned for a specific product type only. For example you only want to return perishable goods.</p>

<p>Here&rsquo;s a sample response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [0] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [body_html] =&gt; Crested shirt</span>
</span><span class='line'><span class="x">            [created_at] =&gt; 2013-10-13T23:09:53-04:00</span>
</span><span class='line'><span class="x">            [handle] =&gt; crested-shirt</span>
</span><span class='line'><span class="x">            [id] =&gt; 164668989</span>
</span><span class='line'><span class="x">            [product_type] =&gt; t-shirts</span>
</span><span class='line'><span class="x">            [published_at] =&gt; 2013-10-13T23:09:13-04:00</span>
</span><span class='line'><span class="x">            [published_scope] =&gt; global</span>
</span><span class='line'><span class="x">            [template_suffix] =&gt; </span>
</span><span class='line'><span class="x">            [title] =&gt; Crested shirt</span>
</span><span class='line'><span class="x">            [updated_at] =&gt; 2013-10-14T01:31:44-04:00</span>
</span><span class='line'><span class="x">            [vendor] =&gt; zentopia</span>
</span><span class='line'><span class="x">            [tags] =&gt; </span>
</span><span class='line'><span class="x">            [variants] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [barcode] =&gt; </span>
</span><span class='line'><span class="x">                            [compare_at_price] =&gt; </span>
</span><span class='line'><span class="x">                            [created_at] =&gt; 2013-10-13T23:09:53-04:00</span>
</span><span class='line'><span class="x">                            [fulfillment_service] =&gt; manual</span>
</span><span class='line'><span class="x">                            [grams] =&gt; 234</span>
</span><span class='line'><span class="x">                            [id] =&gt; 378254785</span>
</span><span class='line'><span class="x">                            [inventory_management] =&gt; </span>
</span><span class='line'><span class="x">                            [inventory_policy] =&gt; deny</span>
</span><span class='line'><span class="x">                            [option1] =&gt; Default Title</span>
</span><span class='line'><span class="x">                            [option2] =&gt; </span>
</span><span class='line'><span class="x">                            [option3] =&gt; </span>
</span><span class='line'><span class="x">                            [position] =&gt; 1</span>
</span><span class='line'><span class="x">                            [price] =&gt; 322.00</span>
</span><span class='line'><span class="x">                            [product_id] =&gt; 164668989</span>
</span><span class='line'><span class="x">                            [requires_shipping] =&gt; 1</span>
</span><span class='line'><span class="x">                            [sku] =&gt; </span>
</span><span class='line'><span class="x">                            [taxable] =&gt; 1</span>
</span><span class='line'><span class="x">                            [title] =&gt; Default Title</span>
</span><span class='line'><span class="x">                            [updated_at] =&gt; 2013-10-13T23:09:53-04:00</span>
</span><span class='line'><span class="x">                            [inventory_quantity] =&gt; 0</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [options] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [id] =&gt; 197676733</span>
</span><span class='line'><span class="x">                            [name] =&gt; Title</span>
</span><span class='line'><span class="x">                            [position] =&gt; 1</span>
</span><span class='line'><span class="x">                            [product_id] =&gt; 164668989</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [images] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [created_at] =&gt; 2013-10-14T01:31:39-04:00</span>
</span><span class='line'><span class="x">                            [id] =&gt; 330590691</span>
</span><span class='line'><span class="x">                            [position] =&gt; 1</span>
</span><span class='line'><span class="x">                            [product_id] =&gt; 164668989</span>
</span><span class='line'><span class="x">                            [updated_at] =&gt; 2013-10-14T01:31:39-04:00</span>
</span><span class='line'><span class="x">                            [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [image] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [created_at] =&gt; 2013-10-14T01:31:39-04:00</span>
</span><span class='line'><span class="x">                    [id] =&gt; 330590691</span>
</span><span class='line'><span class="x">                    [position] =&gt; 1</span>
</span><span class='line'><span class="x">                    [product_id] =&gt; 164668989</span>
</span><span class='line'><span class="x">                    [updated_at] =&gt; 2013-10-14T01:31:39-04:00</span>
</span><span class='line'><span class="x">                    [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">        )</span>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can also specify the fields that you want to return by using the <code>fields</code> as an argument and supply a comma-separated list of the fields that you want to return. Something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;published_status&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;published&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;body_html,created_at,handle,id,title,image&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$products</span> <span class="o">=</span> <span class="nv">$shopify</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/products.json&#39;</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The documentation for the products is available <a href="http://docs.shopify.com/api/product#index">here</a>.
Go through it so you know what other methods you can call that involves the products in the shop.</p>

<h4>Orders</h4>

<p>You can also access information about <a href="http://docs.shopify.com/api/order">orders</a> using the API.</p>

<p>To get a list of orders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;limit&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span> <span class="c1">//default: 50</span>
</span><span class='line'>  <span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="c1">//default: 1</span>
</span><span class='line'>  <span class="s1">&#39;status&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$orders</span> <span class="o">=</span> <span class="nv">$shopify</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/orders.json&#39;</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a sample response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [0] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [buyer_accepts_marketing] =&gt; 1</span>
</span><span class='line'><span class="x">            [cancel_reason] =&gt; </span>
</span><span class='line'><span class="x">            [cancelled_at] =&gt; </span>
</span><span class='line'><span class="x">            [cart_token] =&gt; ba56ddbaab418b79566316fe5e99e4e3</span>
</span><span class='line'><span class="x">            [checkout_token] =&gt; 2b4ef76523c1bb6fc6e6825a97a4c992</span>
</span><span class='line'><span class="x">            [closed_at] =&gt; </span>
</span><span class='line'><span class="x">            [confirmed] =&gt; 1</span>
</span><span class='line'><span class="x">            [created_at] =&gt; 2013-10-17T00:13:59-04:00</span>
</span><span class='line'><span class="x">            [currency] =&gt; PHP</span>
</span><span class='line'><span class="x">            [email] =&gt; vbcanc@gmail.com</span>
</span><span class='line'><span class="x">            [financial_status] =&gt; authorized</span>
</span><span class='line'><span class="x">            [fulfillment_status] =&gt; </span>
</span><span class='line'><span class="x">            [gateway] =&gt; bogus</span>
</span><span class='line'><span class="x">            [id] =&gt; 188680051</span>
</span><span class='line'><span class="x">            [landing_site] =&gt; /</span>
</span><span class='line'><span class="x">            [location_id] =&gt; </span>
</span><span class='line'><span class="x">            [name] =&gt; #1001</span>
</span><span class='line'><span class="x">            [note] =&gt; </span>
</span><span class='line'><span class="x">            [number] =&gt; 1</span>
</span><span class='line'><span class="x">            [reference] =&gt; </span>
</span><span class='line'><span class="x">            [referring_site] =&gt; </span>
</span><span class='line'><span class="x">            [source] =&gt; browser</span>
</span><span class='line'><span class="x">            [subtotal_price] =&gt; 322.00</span>
</span><span class='line'><span class="x">            [taxes_included] =&gt; </span>
</span><span class='line'><span class="x">            [test] =&gt; 1</span>
</span><span class='line'><span class="x">            [token] =&gt; 35330c6d0bb04c0198ab94b04317e1af</span>
</span><span class='line'><span class="x">            [total_discounts] =&gt; 0.00</span>
</span><span class='line'><span class="x">            [total_line_items_price] =&gt; 322.00</span>
</span><span class='line'><span class="x">            [total_price] =&gt; 342.00</span>
</span><span class='line'><span class="x">            [total_price_usd] =&gt; 7.93</span>
</span><span class='line'><span class="x">            [total_tax] =&gt; 0.00</span>
</span><span class='line'><span class="x">            [total_weight] =&gt; 234</span>
</span><span class='line'><span class="x">            [updated_at] =&gt; 2013-10-17T00:13:59-04:00</span>
</span><span class='line'><span class="x">            [user_id] =&gt; </span>
</span><span class='line'><span class="x">            [browser_ip] =&gt; 180.191.38.211</span>
</span><span class='line'><span class="x">            [landing_site_ref] =&gt; </span>
</span><span class='line'><span class="x">            [order_number] =&gt; 1001</span>
</span><span class='line'><span class="x">            [discount_codes] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [note_attributes] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [processing_method] =&gt; direct</span>
</span><span class='line'><span class="x">            [checkout_id] =&gt; 140790649</span>
</span><span class='line'><span class="x">            [source_name] =&gt; web</span>
</span><span class='line'><span class="x">            [line_items] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [fulfillment_service] =&gt; manual</span>
</span><span class='line'><span class="x">                            [fulfillment_status] =&gt; </span>
</span><span class='line'><span class="x">                            [grams] =&gt; 234</span>
</span><span class='line'><span class="x">                            [id] =&gt; 328820335</span>
</span><span class='line'><span class="x">                            [price] =&gt; 322.00</span>
</span><span class='line'><span class="x">                            [product_id] =&gt; 164668989</span>
</span><span class='line'><span class="x">                            [quantity] =&gt; 1</span>
</span><span class='line'><span class="x">                            [requires_shipping] =&gt; 1</span>
</span><span class='line'><span class="x">                            [sku] =&gt; </span>
</span><span class='line'><span class="x">                            [title] =&gt; Crested shirt</span>
</span><span class='line'><span class="x">                            [variant_id] =&gt; 378254785</span>
</span><span class='line'><span class="x">                            [variant_title] =&gt; </span>
</span><span class='line'><span class="x">                            [vendor] =&gt; zentopia</span>
</span><span class='line'><span class="x">                            [name] =&gt; Crested shirt</span>
</span><span class='line'><span class="x">                            [variant_inventory_management] =&gt; </span>
</span><span class='line'><span class="x">                            [properties] =&gt; Array</span>
</span><span class='line'><span class="x">                                (</span>
</span><span class='line'><span class="x">                                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                            [product_exists] =&gt; 1</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [shipping_lines] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [code] =&gt; International Shipping</span>
</span><span class='line'><span class="x">                            [price] =&gt; 20.00</span>
</span><span class='line'><span class="x">                            [source] =&gt; shopify</span>
</span><span class='line'><span class="x">                            [title] =&gt; International Shipping</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [tax_lines] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [payment_details] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [avs_result_code] =&gt; </span>
</span><span class='line'><span class="x">                    [credit_card_bin] =&gt; 1</span>
</span><span class='line'><span class="x">                    [cvv_result_code] =&gt; </span>
</span><span class='line'><span class="x">                    [credit_card_number] =&gt; XXXX-XXXX-XXXX-1</span>
</span><span class='line'><span class="x">                    [credit_card_company] =&gt; Bogus</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [billing_address] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey</span>
</span><span class='line'><span class="x">                    [address2] =&gt; </span>
</span><span class='line'><span class="x">                    [city] =&gt; Coulsdon</span>
</span><span class='line'><span class="x">                    [company] =&gt; doble</span>
</span><span class='line'><span class="x">                    [country] =&gt; United Kingdom</span>
</span><span class='line'><span class="x">                    [first_name] =&gt; sfs</span>
</span><span class='line'><span class="x">                    [last_name] =&gt; rew</span>
</span><span class='line'><span class="x">                    [latitude] =&gt; 51.314819</span>
</span><span class='line'><span class="x">                    [longitude] =&gt; -0.12435</span>
</span><span class='line'><span class="x">                    [phone] =&gt; 3252325</span>
</span><span class='line'><span class="x">                    [province] =&gt; Surrey</span>
</span><span class='line'><span class="x">                    [zip] =&gt; CR5 2NG</span>
</span><span class='line'><span class="x">                    [name] =&gt; sfs rew</span>
</span><span class='line'><span class="x">                    [country_code] =&gt; GB</span>
</span><span class='line'><span class="x">                    [province_code] =&gt; </span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [shipping_address] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey</span>
</span><span class='line'><span class="x">                    [address2] =&gt; </span>
</span><span class='line'><span class="x">                    [city] =&gt; Coulsdon</span>
</span><span class='line'><span class="x">                    [company] =&gt; doble</span>
</span><span class='line'><span class="x">                    [country] =&gt; United Kingdom</span>
</span><span class='line'><span class="x">                    [first_name] =&gt; sfs</span>
</span><span class='line'><span class="x">                    [last_name] =&gt; rew</span>
</span><span class='line'><span class="x">                    [latitude] =&gt; 51.314819</span>
</span><span class='line'><span class="x">                    [longitude] =&gt; -0.12435</span>
</span><span class='line'><span class="x">                    [phone] =&gt; 3252325</span>
</span><span class='line'><span class="x">                    [province] =&gt; Surrey</span>
</span><span class='line'><span class="x">                    [zip] =&gt; CR5 2NG</span>
</span><span class='line'><span class="x">                    [name] =&gt; sfs rew</span>
</span><span class='line'><span class="x">                    [country_code] =&gt; GB</span>
</span><span class='line'><span class="x">                    [province_code] =&gt; </span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [fulfillments] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [client_details] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [accept_language] =&gt; en-US,en;q=0.8</span>
</span><span class='line'><span class="x">                    [browser_ip] =&gt; xxx.xxx.xx.xxx</span>
</span><span class='line'><span class="x">                    [session_hash] =&gt; 4bb858f172df6367b05ab424f9c6bd0f778e711e9046c5a13833cc91bc33a237</span>
</span><span class='line'><span class="x">                    [user_agent] =&gt; Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.71 Chrome/28.0.1500.71 Safari/537.36</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">            [customer] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [accepts_marketing] =&gt; 1</span>
</span><span class='line'><span class="x">                    [created_at] =&gt; 2013-10-15T21:26:24-04:00</span>
</span><span class='line'><span class="x">                    [email] =&gt; vbcanc@gmail.com</span>
</span><span class='line'><span class="x">                    [first_name] =&gt; wef</span>
</span><span class='line'><span class="x">                    [id] =&gt; 148878735</span>
</span><span class='line'><span class="x">                    [last_name] =&gt; rew</span>
</span><span class='line'><span class="x">                    [last_order_id] =&gt; </span>
</span><span class='line'><span class="x">                    [multipass_identifier] =&gt; </span>
</span><span class='line'><span class="x">                    [note] =&gt; </span>
</span><span class='line'><span class="x">                    [orders_count] =&gt; 0</span>
</span><span class='line'><span class="x">                    [state] =&gt; disabled</span>
</span><span class='line'><span class="x">                    [total_spent] =&gt; 0.00</span>
</span><span class='line'><span class="x">                    [updated_at] =&gt; 2013-10-17T00:14:01-04:00</span>
</span><span class='line'><span class="x">                    [verified_email] =&gt; 1</span>
</span><span class='line'><span class="x">                    [tags] =&gt; </span>
</span><span class='line'><span class="x">                    [last_order_name] =&gt; </span>
</span><span class='line'><span class="x">                    [image_url] =&gt; //gravatar.com/avatar/aba221e4cb888289b95b7864d754c4ce?default=http%3A%2F%2Fcdn.shopify.com%2Fs%2Fimages%2Fadmin%2Fcustomers%2Fcustomers_avatar_england_londonbridge.png</span>
</span><span class='line'><span class="x">                    [default_address] =&gt; Array</span>
</span><span class='line'><span class="x">                        (</span>
</span><span class='line'><span class="x">                            [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey</span>
</span><span class='line'><span class="x">                            [address2] =&gt; </span>
</span><span class='line'><span class="x">                            [city] =&gt; Coulsdon</span>
</span><span class='line'><span class="x">                            [company] =&gt; doble</span>
</span><span class='line'><span class="x">                            [country] =&gt; United Kingdom</span>
</span><span class='line'><span class="x">                            [first_name] =&gt; sfs</span>
</span><span class='line'><span class="x">                            [id] =&gt; 193735639</span>
</span><span class='line'><span class="x">                            [last_name] =&gt; rew</span>
</span><span class='line'><span class="x">                            [phone] =&gt; 3252325</span>
</span><span class='line'><span class="x">                            [province] =&gt; Surrey</span>
</span><span class='line'><span class="x">                            [zip] =&gt; CR5 2NG</span>
</span><span class='line'><span class="x">                            [name] =&gt; sfs rew</span>
</span><span class='line'><span class="x">                            [province_code] =&gt; </span>
</span><span class='line'><span class="x">                            [country_code] =&gt; GB</span>
</span><span class='line'><span class="x">                            [country_name] =&gt; United Kingdom</span>
</span><span class='line'><span class="x">                            [default] =&gt; 1</span>
</span><span class='line'><span class="x">                        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'>
</span><span class='line'><span class="x">        )</span>
</span><span class='line'>
</span><span class='line'><span class="x">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the above response all information about a specific order is returned. The line items, payment details, billing address and customer information are all included in the default response.
Information about the device (IP address, browser) were the order was made is also captured by Shopify.</p>

<h4>Webhooks</h4>

<p>The Shopify API also supports webhooks. In case you don&rsquo;t know what a webhook is here&rsquo;s a good definition from <a href="http://en.wikipedia.org/wiki/Webhook">Wikipedia</a>:</p>

<blockquote><p>A Webhook, in web development, is a method of augmenting or altering the behavior of a web page, or web application, with custom callbacks. These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application.</p></blockquote>


<p>In simple terms a webhook is used to perform specific actions when a certain event happens. In Shopify there are a number of events which you can hook into to perform specific action:</p>

<p>Webhooks can be set from the dev shop or from the app. To set a webhook from the dev shop go to the admin page of your shop, click on the settings tab then click on notifications tab. Scroll down until you find the webhooks section. To create a new webhook just click on the <code>create a webhook</code> button. Then select the event in which you want to add a webhook then enter the complete URL of the page where you want to submit the data when the specific event happens.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_shopify_app_development/webhook.png" alt="Webhook" /></p>

<p>To add a webhook via the API simply make a <code>POST</code> request to the <code>webhooks</code> resource and passing in the <code>topic</code> and <code>address</code>. The <code>topic</code> is the actual event and the <code>address</code> is the URL which you want to submit the data returned from the specific event when it happens. Do note that we can&rsquo;t use the local server URL for this. It must be a URL that&rsquo;s actually accessible from the internet. In the example below were submitting the data to the address specified when a cart is created or updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//when cart is created</span>
</span><span class='line'><span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;topic&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;cart/creation&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;address&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://somewhere.com/update_inventory.php&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$webhooks</span> <span class="o">=</span> <span class="nv">$shopify</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/webhooks.json&#39;</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//when cart is updated</span>
</span><span class='line'><span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;topic&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;cart/update&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;address&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://somewhere.com/update_inventory.php&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$webhooks</span> <span class="o">=</span> <span class="nv">$shopify</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/webhooks.json&#39;</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that every event where you can hook upon in the admin interface you can also create a hook on it using the API. You can read more about webhooks <a href="http://docs.shopify.com/api/tutorials/using-webhooks">here</a>.</p>

<p>If you want to check what specific data is being passed to the URL that you specify for a specific webhook you can use a service like <a href="http://requestb.in/">request bin</a></p>

<p>Heres a sample request for when a cart is created. You can use the properties under the <code>data</code> property as a basis for the data that you&rsquo;re going to access from the address that you specified in your webhook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://api.yourapihere.com/&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;headers&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Connection&quot;</span><span class="p">:</span> <span class="s2">&quot;close&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;X-Shopify-Topic&quot;</span><span class="p">:</span> <span class="s2">&quot;carts/create&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Host&quot;</span><span class="p">:</span> <span class="s2">&quot;api.yourapihere.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Accept-Encoding&quot;</span><span class="p">:</span> <span class="s2">&quot;gzip, deflate, compress&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;X-Shopify-Shop-Domain&quot;</span><span class="p">:</span> <span class="s2">&quot;test-shop.myshopify.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;User-Agent&quot;</span><span class="p">:</span> <span class="s2">&quot;Ruby&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Content-Type&quot;</span><span class="p">:</span> <span class="s2">&quot;application/json&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Content-Length&quot;</span><span class="p">:</span> <span class="s2">&quot;281&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Accept&quot;</span><span class="p">:</span> <span class="s2">&quot;*/*&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="s2">&quot;{\&quot;id\&quot;:\&quot;carts:eeafa272cebfd4b22385bc4b645e762c\&quot;,\&quot;token\&quot;:\&quot;eeafa272cebfd4b22385bc4b645e762c\&quot;,\&quot;line_items\&quot;:[{\&quot;id\&quot;:null,\&quot;title\&quot;:\&quot;Example T-Shirt\&quot;,\&quot;price\&quot;:\&quot;19.99\&quot;,\&quot;line_price\&quot;:\&quot;59.97\&quot;,\&quot;quantity\&quot;:3,\&quot;sku\&quot;:\&quot;example-shirt-s\&quot;,\&quot;grams\&quot;:200,\&quot;vendor\&quot;:\&quot;Acme\&quot;,\&quot;properties\&quot;:null,\&quot;variant_id\&quot;:null}]}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;origin&quot;</span><span class="p">:</span> <span class="s2">&quot;54.236.226.56&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;form&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nt">&quot;files&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nt">&quot;json&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;carts:eeafa272cebfd4b22385bc4b645e762c&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;line_items&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sku&quot;</span><span class="p">:</span> <span class="s2">&quot;example-shirt-s&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;variant_id&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;quantity&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;vendor&quot;</span><span class="p">:</span> <span class="s2">&quot;Acme&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;grams&quot;</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Example T-Shirt&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;properties&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="s2">&quot;19.99&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;line_price&quot;</span><span class="p">:</span> <span class="s2">&quot;59.97&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;token&quot;</span><span class="p">:</span> <span class="s2">&quot;eeafa272cebfd4b22385bc4b645e762c&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data that is passed to the address that you specified is an <a href="http://php.net/manual/en/wrappers.php.php">input stream</a>. It&rsquo;s not passed using the common <code>GET</code> or <code>POST</code> request method. You can use the <code>fopen()</code> method in PHP and pass in the <code>php://input</code> stream. Then pass in <code>rb</code> as the mode. <code>rb</code> means read-only in binary mode.
Then we just loop through the input stream until we reach the end of the file. Inside the loop we also use the <code>fread()</code> method to read from the resource created when we called <code>fopen()</code> earlier. We also pass the maximum number of bytes to read which is 4096 (approximately 4Mb). Finally we close the resource and convert the webhook content to an array using the <code>json_decode()</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$webhook_content</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$webhook</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;php://input&#39;</span> <span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nv">$webhook</span><span class="p">)){</span> <span class="c1">//loop through the input stream while the end of file is not reached</span>
</span><span class='line'>    <span class="nv">$webhook_content</span> <span class="o">.=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$webhook</span><span class="p">,</span> <span class="mi">4096</span><span class="p">);</span> <span class="c1">//append the content on the current iteration</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$webhook</span><span class="p">);</span> <span class="c1">//close the resource</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$webhook_content</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">//convert the json to array</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//do whatever you want with the data</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>That&rsquo;s it! You&rsquo;ve learned how to create a Shopify app. Creating a shopify app involves creating a Shopify partners account, a dev shop and an app. You&rsquo;ve also learned that Shopify apps aren&rsquo;t directly integrated into a shop, instead it is hosted somewhere else. Shopify apps are a nice way to extend the functionality that is already available to Shopify.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://docs.shopify.com/api/the-basics/getting-started">The basics of Building a Shopify App</a></li>
<li><a href="http://www.shopify.com/technology/3671962-developing-shopify-apps-part-1-the-setup#axzz2itCLJCrk">Developing Shopify Apps</a></li>
<li><a href="https://github.com/sandeepshetty/shopify_api">Sandeepshetty/shopify_api</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gettting Started with Coinbase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/"/>
    <updated>2013-11-03T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started developing applications which communicates with the Coinbase API. But first what is Coinbase?</p>

<blockquote><p>Coinbase is a service that allows you to use bitcoins as a means of payment for goods and services. <br/>Its like Paypal but for bitcoins.</p></blockquote>


<p>First thing that you need to do is to register an account with Coinbase.</p>

<p><img src="http://anchetaWern.github.io/images/posts/coinbase_api/coinbase-register.png" alt="register account" /></p>

<p>Then go to your email and verify the account.</p>

<p>Accept the license.</p>

<p><img src="http://anchetaWern.github.io/images/posts/coinbase_api/coinbase-license.png" alt="accept license" /></p>

<p>Next, click on account settings and then click on the integrations tab:</p>

<p><img src="http://anchetaWern.github.io/images/posts/coinbase_api/coinbase-api.png" alt="integrations" /></p>

<p>Next, click on show my API key. You would need to enter your password to verify that you are indeed the account owner. Initially the API key is disabled so you need to enable it as well.</p>

<p><img src="http://anchetaWern.github.io/images/posts/coinbase_api/enable-apikey.png" alt="enable api key" /></p>

<p>After that, simply copy the API key that&rsquo;s displayed.</p>

<p><img src="http://anchetaWern.github.io/images/posts/coinbase_api/copy-apikey.png" alt="copy api key" /></p>

<p>The API key will be used for authenticating requests to the Coinbase API.</p>

<h3>Authentication</h3>

<p>There are 2 ways in which a request to the API can be authenticated:</p>

<ol>
<li>API key</li>
<li>OAuth2</li>
</ol>


<h4>Authentication using API Key</h4>

<p>Authenticating a request via the API Key is the easier way of making requests to the API. All you have to do is to append the api key on each request. The cool thing is you can directly execute a request to the API directly from the browser for methods that can be called via <code>GET</code>.</p>

<p>For example when you want to get the account balance, you simply do something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://coinbase.com/api/v1/account/balance?api_key=xyz</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a bunch of other methods which you can call directly from the browser. They&rsquo;re all listed <a href="https://coinbase.com/api/doc/1.0.html">here</a>. Do note that you can only call a method directly from the browser when its request method is <code>GET</code>. <code>POST</code> methods cannot be called directly from the browser, you need to use <code>curl</code> or <code>file_get_contents()</code> to be able to make the request.</p>

<p>Here&rsquo;s an example of using <code>curl</code> to generate  a payment button, remember to pass the API Key along with the parameters required by the specific API method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$request</span> <span class="o">=</span> <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">     &quot;api_key&quot; : &quot;xyz&quot;, </span>
</span><span class='line'><span class="s1">     &quot;button&quot;: {</span>
</span><span class='line'><span class="s1">         &quot;name&quot;: &quot;test&quot;,</span>
</span><span class='line'><span class="s1">         &quot;price_string&quot;: &quot;1.23&quot;,</span>
</span><span class='line'><span class="s1">         &quot;price_currency_iso&quot;: &quot;USD&quot;</span>
</span><span class='line'><span class="s1">         }</span>
</span><span class='line'><span class="s1"> }&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$post_fields</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">//convert json string to an object</span>
</span><span class='line'>    <span class="nv">$post_fields</span> <span class="o">=</span> <span class="nb">http_build_query</span><span class="p">(</span><span class="nv">$post_fields</span><span class="p">);</span> <span class="c1">//urlencode for arrays</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_POST</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">//tell curl that were posting some data along with the request </span>
</span><span class='line'>    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="nv">$post_fields</span><span class="p">);</span> <span class="c1">//the data that we want to post</span>
</span><span class='line'>    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="s1">&#39;https://coinbase.com/api/v1/buttons&#39;</span><span class="p">);</span> <span class="c1">//the request url</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">//return the transfer, by default its being echoed out</span>
</span><span class='line'>  <span class="nv">$response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span> <span class="c1">//execute the request</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The method that we have used above is the <code>buttons</code> method. It only requires 3 arguments:</p>

<ul>
<li><p><strong>button[name]</strong> &ndash; the name of the item or service for which you are collecting bitcoins.</p></li>
<li><p><strong>button[price_string]</strong> &ndash; the total price of the item or service.</p></li>
<li><p><strong>button[price_currency_iso]</strong> &ndash; the currency of the price used in the <code>button[price_string]</code> argument. Examples are <code>USD</code>, <code>PHP</code>, <code>SGD</code>, <code>CAD</code>, or <code>BTC</code> for the bitcoin currency. It would be easier if <code>BTC</code> isn&rsquo;t used so you won&rsquo;t have to convert. Simply use your local currency and the API will automatically convert it to <code>BTC</code> depending on the current exchange rate.</p></li>
</ul>


<p>The response would be formatted in JSON:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;success&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;button&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="s2">&quot;93865b9cae83706ae59220c013bc0afd&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;buy_now&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;style&quot;</span><span class="p">:</span> <span class="s2">&quot;buy_now_large&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;text&quot;</span><span class="p">:</span> <span class="s2">&quot;Pay With Bitcoin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Sample description&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;custom&quot;</span><span class="p">:</span> <span class="s2">&quot;Order123&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;cents&quot;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;currency_iso&quot;</span><span class="p">:</span> <span class="s2">&quot;USD&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate the payment button, simply create a div with a class of <code>coinbase-button</code> then give it a data attribute <code>data-code</code> using the button code as its value. After that create a new script element and use the <code>button.js</code> from coinbase:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;coinbase-button&quot;</span> <span class="na">data-code=</span><span class="s">&quot;&lt;?php echo $response-&gt;button-&gt;code; ?&gt;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://coinbase.com/assets/button.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response returned above can also be used for generating payment pages.
All you have to do is append the button code to the coinbase checkout url:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cp">$response = json_decode($response); //convert json string to an object</span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://coinbase.com/checkouts/&lt;?php echo $response-&gt;button-&gt;code; ?&gt;&quot;</span><span class="nt">&gt;</span>Checkout<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Authentication using OAuth2</h4>

<p>Authentication using OAuth2 is a bit difficult. Thankfully there are good people out there who creates libraries that makes our lives easier. One of those libraries is the <a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a> library.</p>

<p>To use it, simply download the zip file from the Github repository or clone it on your machine. Once the download is done, you can just include it on your working script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;libs/coinbase/Coinbase.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, you can go ahead and call the methods available from the library. In the example below were calling the <code>getOrders()</code> method which simply returns all the orders received by the merchant who owns the API Key that is used in the code. This means that every merchant who plans to integrate Coinbase in their application has to create their own Coinbase app in order to receive an API Key. The API Key will then serve as their identification for each request that is made to the API. Yes this is a bit of a drag for the merchants but that&rsquo;s just how it works so there&rsquo;s no choice but to stick with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$api_key</span> <span class="o">=</span> <span class="s1">&#39;xyz&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$coinbase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Coinbase</span><span class="p">(</span><span class="nv">$api_key</span><span class="p">);</span>
</span><span class='line'><span class="nv">$orders</span> <span class="o">=</span> <span class="nv">$coinbase</span><span class="o">-&gt;</span><span class="na">getOrders</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The response returned from the code above is not the same as the response that you directly get from the API.
The library already converts it to an object so there&rsquo;s no need to. Here&rsquo;s an example of looping through the orders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$orders</span><span class="o">-&gt;</span><span class="na">total_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$orders</span><span class="o">-&gt;</span><span class="na">orders</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>                  
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">order</span><span class="o">-&gt;</span><span class="na">created_at</span><span class="p">;</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">order</span><span class="o">-&gt;</span><span class="na">button</span><span class="o">-&gt;</span><span class="na">description</span><span class="p">;</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">order</span><span class="o">-&gt;</span><span class="na">status</span><span class="p">;</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">order</span><span class="o">-&gt;</span><span class="na">total_native</span><span class="o">-&gt;</span><span class="na">cents</span><span class="p">;</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">order</span><span class="o">-&gt;</span><span class="na">button</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to perform requests to the Coinbase API. Requests can be performed directly from the browser or via Curl. You have also learned how to generate payment buttons via the API.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://coinbase.com/api/doc/1.0.html">API Documentation</a></li>
<li><a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to perform cross-domain AJAX requests]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests/"/>
    <updated>2013-10-24T18:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how you can perform cross-domain AJAX requests.
There&rsquo;s really no bullet-proof method of doing this. It might work, it might not since AJAX requests should only be performed within the same domain due to security concerns.</p>

<p>Note that I&rsquo;m not going to show how to perform an AJAX request to any domain from any domain. What I&rsquo;m going to show you is how to perform an AJAX request to a different domain which you have control over the code.</p>

<p>For example you want to get some data via AJAX from <code>xyz.com</code>. You are making the request from <code>abc.com</code> so it wouldn&rsquo;t work if you do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://xyz.com/get_data&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;data&#39;</span> <span class="o">:</span> <span class="s1">&#39;abc&#39;</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something with the response</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have control over the code that returns the response that you need, all you need to do is to convert the data that you&rsquo;re returning to JSON string and then wrap it up with a function call. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;fname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;haru&#39;</span><span class="p">,</span> <span class="s1">&#39;lname&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tora&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;parse_results(&quot;</span> <span class="o">.</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>When calling the method from <code>abc.com</code> all you have to do is to use the <code>$.getJSON()</code> method and declare the same function that you used on <code>xyz.com</code>. In this case the name of the function is <code>parse_results()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">parse_results</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something with the response</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;http://xyz.com/get_data&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;data&#39;</span> <span class="o">:</span> <span class="s1">&#39;abc&#39;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the more robust <code>$.ajax()</code> method if you want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">parse_results</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something with the response</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:</span> <span class="s1">&#39;http://xyz.com/get_data&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span> <span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;data&#39;</span> <span class="o">:</span> <span class="s1">&#39;abc&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Delicious API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api/"/>
    <updated>2013-10-20T13:17:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get the links that you have bookmarked using Delicious using the Delicious API.</p>

<p>The Delicious API unlike other Web API&rsquo;s that&rsquo;s using either OAuth, OAuth2 or their custom Authentication method is using <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Basic Access Authentication</a>. This means that performing API calls requires the username and the password of the user whose bookmarks you want to have access to.
This means that there&rsquo;s no confidentiality with this Authentication method. Without you knowing, the application that&rsquo;s going to do the talking with the Delicious API can just save your username and password in a database and the developers can have access to the links that you&rsquo;ve bookmarked in your account whether public or private. So as a user its recommended that you only bookmark links that doesn&rsquo;t contain any confidential or classified information.</p>

<h3>Delicious Class</h3>

<p>First let&rsquo;s go ahead and create the class that we will be using to access the Delicious API. Let&rsquo;s name it <code>class.delicious.php</code>. Then declare the 4 private variables that we will be using throughout the class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">delicious</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$curl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$curl_options</span><span class="p">;</span> <span class="c1">//options that will be used for curl</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$username</span><span class="p">;</span> <span class="c1">//delicious username</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$password</span><span class="p">;</span> <span class="c1">//delicious password</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The constructor will accept 2 arguments, the delicious username and password. We&rsquo;ll also initialize <code>curl</code> so we don&rsquo;t have to initialize it on every method call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span> <span class="o">=</span> <span class="nv">$username</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create the <code>set_options()</code> method. This method will simply set the curl options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">set_options</span><span class="p">(){</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//return the response from the delicious API.</span>
</span><span class='line'>        <span class="nx">CURLOPT_SSL_VERIFYPEER</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span> <span class="c1">//disable verification of the peer&#39;s certificate </span>
</span><span class='line'>        <span class="nx">CURLOPT_USERPWD</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span> <span class="o">.</span> <span class="s1">&#39;:&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span> <span class="c1">//set the username and password to be used for authentication</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>execute()</code> method. This method is called from every method calls that are responsible for calling a specific method from the API. What it does is to assign the curl options to the curl object, executes it and then returns the response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(){</span>
</span><span class='line'>    <span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$response</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//terminate the execution of the script if there&#39;s no response</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Error: &quot;&#39;</span> <span class="o">.</span> <span class="nb">curl_error</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;&quot; - Code: &#39;</span> <span class="o">.</span> <span class="nb">curl_errno</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">curl_close</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl</span><span class="p">);</span> <span class="c1">//close the connection              </span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting all Bookmarks</h4>

<p>We can now create the methods for actually getting the bookmarks. The first method that we will create is the <code>get_all()</code> method. As the name suggests, the <code>get_all()</code> method simply gets everything that you have ever bookmarked on your delicious account. This might take some time to execute depending on the number of links that you have bookmarked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_all</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/all&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$xml</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span> <span class="c1">//converts the string response into an xml object      </span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$xml</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we proceed with the next method, I&rsquo;d like you to take a few minutes to observe what were doing here.
Because the pattern that we&rsquo;ve used here will be used on other methods that we will be creating later.</p>

<p>As you can see, were calling the <code>set_options()</code> method to set the arguments that will be needed for the request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we set the main URL that were requesting from. In this cae were requesting the <code>https://api.del.icio.us/v1/posts/all</code> url. At the time of writing of this article, the main request url is <code>https://api.del.icio.us</code> The version of the API is <code>v1</code> and the method is <code>posts/all</code>. You can see the full list of API methods that you can call <a href="https://github.com/avos/delicious-api/blob/master/APIs.md">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/all&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we execute the request. The <code>execute()</code> method returns the response from the API. The response is basically in string format so we have to process it further to really get into the details that we want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to do that we call the <code>simplexml_load_string()</code> method. It&rsquo;s a built-in PHP method which you can call to convert a string response into an XML object. You can read more about it <a href="http://php.net/manual/en/function.simplexml-load-string.php">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$xml</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After converting the response to an XML object, we simply return it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$xml</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting Bookmarks by Tag</h4>

<p>We can also get bookmarks by tag name. All we have to do is to specify the <code>tag</code> argument to the <code>posts/all</code> method and supply a url encoded value as the query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_by_tag</span><span class="p">(</span><span class="nv">$tag</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$request_url</span> <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/all?tag=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$tag</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$request_url</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$xml</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$xml</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting Bookmarks by Offset</h4>

<p>We can also get by a certain limit and offset. All we have to do is supply a value for the <code>start</code> argument (offset), and the <code>results</code> argument (limit).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_by_offset</span><span class="p">(</span><span class="nv">$start</span><span class="p">,</span> <span class="nv">$limit</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$request_url</span>  <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/all?start=&#39;</span> <span class="o">.</span> <span class="nv">$start</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;results=&#39;</span> <span class="o">.</span> <span class="nv">$limit</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$request_url</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$xml</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$xml</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting Recently Bookmarked Links</h4>

<p>Recently bookmarked links can also be fetched from the API. The method to be used is the <code>posts/recent</code> method.
You can also supply an optional <code>tag</code> or <code>count</code> argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_recent</span><span class="p">(</span><span class="nv">$tag</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$request_url</span>  <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/recent?&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$tag</span><span class="p">)){</span> <span class="c1">//limit results by tag</span>
</span><span class='line'>      <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;tag=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$tag</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$count</span><span class="p">)){</span> <span class="c1">//limit results by bookmark count</span>
</span><span class='line'>      <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;count=&#39;</span> <span class="o">.</span> <span class="nv">$count</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$request_url</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$xml</span> <span class="o">=</span> <span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$xml</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Bookmarking Links</h4>

<p>Bookmarking new links can also be done from the API. The method to be used is the <code>posts/add</code> method.
The <code>url</code> argument is required and you can also set an optional <code>description</code> or <code>tags</code>. If there are more than one tags you can separate them using a comma (E.g php, web-development)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="nv">$description</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$tags</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$request_url</span>  <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/add?&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;url=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;description=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$description</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$request_url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;tags=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$tags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$request_url</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Deleting Bookmarks</h4>

<p>You can also delete links that were previously bookmarked. The request method is <code>posts/delete</code>.
You have to pass in the <code>url</code> of the link that you wish to delete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">$url</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set_options</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">curl_options</span><span class="p">[</span><span class="nx">CURLOPT_URL</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;https://api.del.icio.us/v1/posts/delete?url=&#39;</span> <span class="o">.</span> <span class="nv">$url</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a bunch of other methods which you can use so be sure to check out the Delicious API documentation.</p>

<h3>Using the Class</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;class.delicious.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s1">&#39;XYZ&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;secret&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$deli</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Delicious</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$links</span> <span class="o">=</span> <span class="nv">$deli</span><span class="o">-&gt;</span><span class="na">get_by_tag</span><span class="p">(</span><span class="s1">&#39;php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$links</span><span class="o">-&gt;</span><span class="na">post</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;href&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Resources</h3>

<ul>
<li><a href="https://github.com/avos/delicious-api/blob/master/APIs.md">Delicious API</a></li>
<li><a href="https://github.com/anchetaWern/delicious-php">Delicious-PHP</a> &ndash; a little PHP class that I created for interacting with the Delicious API</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to modify the results from the Search API Solr Module]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/how-to-modify-the-results-from-the-search-api-solr-module/"/>
    <updated>2013-10-13T13:15:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/how-to-modify-the-results-from-the-search-api-solr-module</id>
    <content type="html"><![CDATA[<p>The <a href="https://drupal.org/project/search_api_solr">Search API Solr module</a> for Drupal is a nice way to use Solr as the server for the <a href="https://drupal.org/project/search_api">Search API module</a>. Its pretty flexible with customizing the data that you want to return from the server but what if you need something that&rsquo;s not directly available from the Solr server? What if you also need the data to be available to the client side and do some kind of data manipulation from there?</p>

<p>In this article I&rsquo;ll be showing you how to do just that. We will be creating a custom module that will tap into the API of the Search API Solr Module to modify the default results that are returned and make it available to the client side.</p>

<h4>Module Information</h4>

<p>Let&rsquo;s begin by creating the <code>.info</code> file for our custom module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>name = searchapisolrmod
</span><span class='line'>description = "Modifies the results returned from the Search API Solr Module"
</span><span class='line'>package = Nrue
</span><span class='line'>core = 7.x 
</span><span class='line'>files[] = searchapisolrmod.module
</span><span class='line'>files[] = searchapisolrmod.install</span></code></pre></td></tr></table></div></figure>


<h4>Use Case</h4>

<p>Before we dive into the &lsquo;how&rsquo; let me tell you about a sample use case first.
For example, we have the following data stored in the Solr server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="err">id:</span> <span class="err">&#39;123&#39;,</span>
</span><span class='line'>      <span class="err">business_name:</span> <span class="err">&#39;Antares&#39;,</span>
</span><span class='line'>      <span class="err">business_address:postal_code:</span> <span class="err">&#39;2500</span> <span class="err">AC&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="err">id:</span> <span class="err">&#39;456&#39;,</span>
</span><span class='line'>      <span class="err">business_name:</span> <span class="err">&#39;Aldebaran&#39;,</span>
</span><span class='line'>      <span class="err">business_address:postal_code:</span> <span class="err">&#39;3420</span> <span class="err">AD&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="err">id:</span> <span class="err">&#39;352&#39;,</span>
</span><span class='line'>      <span class="err">business_name:</span> <span class="err">&#39;Cassiopeia&#39;,</span>
</span><span class='line'>      <span class="err">business_address:postal_code:</span> <span class="err">&#39;1288</span> <span class="err">XD&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="err">id:</span> <span class="err">&#39;93&#39;,</span>
</span><span class='line'>      <span class="err">business_name:</span> <span class="err">&#39;Regulus&#39;,</span>
</span><span class='line'>      <span class="err">business_address:postal_code:</span> <span class="err">&#39;671</span> <span class="err">CC&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we want to display the location of the business in Google Maps by using the postal code as the query.
Normally we would want to actually update the data that&rsquo;s in the Solr server so there will be no need to modify the results from it. But what if we don&rsquo;t have access to the Solr server? What if its a remote server run by someone else? For that we will need to actually modify the results as they are returned.</p>

<h4>Module File</h4>

<p>Now were ready to create the <code>.module</code> file which will contain the code that will tap into the search api solr module. The search api solr search module already provides a hook that we can tap into to modify the search results. It&rsquo;s called the <code>search_api_solr_search_results_alter()</code>. This takes up 3 arguments, the first one is the <code>$results</code> which contains the current result set. As you can see its an argument that&rsquo;s passed by reference so we don&rsquo;t really have to return it. The second is the <code>$query</code>, we won&rsquo;t really use it in our custom module but its the variable that contains the current query. The third argument is the <code>$response</code>, this is the response object returned from Solr.</p>

<p>In the code below we first have to check whether we are in the specific view in which we want to execute our script.
In this case were checking if we are in the <code>q</code> view.
Next we declare a variable called <code>$locations</code>, this will store the modified version of the results returned from the Solr server.
Next we loop through the results and get the business name and the postal code.
We then use the postal code to query the Google Geocoding API.
After that, we simply convert the results returned from the Google Geocoding API to an array so we could extract
the coordinates (latitude and longitude). The coordinates is what we ultimately need in order to display the location of the businesses in a Google Map.
Finally we assign the modified data to the Drupal JavaScript object so that we could access it from the client-side.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Implements hook_search_api_solr_search_results_alter().</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">function</span> <span class="nf">searchapisolrmod_search_api_solr_search_results_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$results</span><span class="p">,</span> <span class="nv">$query</span><span class="p">,</span> <span class="nv">$response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;q&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;q&#39;</span><span class="p">){</span> <span class="c1">//only execute this script if we are in the q view</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$locations</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$rest</span> <span class="o">=</span> <span class="nv">$results</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$rest</span><span class="p">)){</span>    
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$rest</span> <span class="k">as</span> <span class="nv">$r</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$place</span> <span class="o">=</span> <span class="nv">$r</span><span class="p">[</span><span class="s1">&#39;fields&#39;</span><span class="p">][</span><span class="s1">&#39;business_name&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//encode the postal code to be used as a query for the geocoding api</span>
</span><span class='line'>          <span class="nv">$postal_code</span> <span class="o">=</span>   <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$r</span><span class="p">[</span><span class="s1">&#39;fields&#39;</span><span class="p">][</span><span class="s1">&#39;business_address:postal_code&#39;</span><span class="p">]);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nv">$api</span> <span class="o">=</span> <span class="s1">&#39;http://maps.googleapis.com/maps/api/geocode/json?address=&#39;</span> <span class="o">.</span>  <span class="nv">$postal_code</span> <span class="o">.</span> <span class="s1">&#39;&amp;sensor=false&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$api_results</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$api</span><span class="p">);</span> <span class="c1">//get the results from the google geocoding api</span>
</span><span class='line'>          <span class="nv">$api_data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$api_results</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nv">$api_data</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;OK&#39;</span><span class="p">){</span>
</span><span class='line'>              <span class="nv">$location</span> <span class="o">=</span> <span class="nv">$api_data</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;geometry&#39;</span><span class="p">][</span><span class="s1">&#39;location&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>              <span class="nv">$locations</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                  <span class="s1">&#39;place&#39;</span> <span class="o">=&gt;</span> <span class="nv">$place</span><span class="p">,</span>
</span><span class='line'>                  <span class="s1">&#39;lat&#39;</span> <span class="o">=&gt;</span> <span class="nv">$location</span><span class="p">[</span><span class="s1">&#39;lat&#39;</span><span class="p">],</span>
</span><span class='line'>                  <span class="s1">&#39;lng&#39;</span> <span class="o">=&gt;</span> <span class="nv">$location</span><span class="p">[</span><span class="s1">&#39;lng&#39;</span><span class="p">]</span>
</span><span class='line'>              <span class="p">);</span>   
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;searchapisolrmod&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="c1">//namespacing is very important</span>
</span><span class='line'>          <span class="s1">&#39;locations&#39;</span> <span class="o">=&gt;</span> <span class="nv">$locations</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;results&#39;</span> <span class="o">=&gt;</span> <span class="nv">$rest</span> <span class="c1">//store the original result set that was returned</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">drupal_add_js</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="s1">&#39;setting&#39;</span><span class="p">);</span> <span class="c1">//add the data to the Drupal JavaScript object</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Accessing the data from the client-side</h4>

<p>The modified results is now available from the client side via the <code>Drupal</code> object.
You can make use of this data however you want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Drupal.settings.searchapisolrmod.results</span>
</span><span class='line'><span class="x">Drupal.settings.searchapisolrmod.locations</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Flickr</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$flickr_key</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$flickr_secret</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$format</span> <span class="o">=</span> <span class="s1">&#39;json&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$flickr_key</span><span class="p">,</span> <span class="nv">$flickr_secret</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">flickr_key</span> <span class="o">=</span> <span class="nv">$flickr_key</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">flickr_secret</span> <span class="o">=</span> <span class="nv">$flickr_secret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">searchPhotos</span><span class="p">(</span><span class="nv">$query</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$tags</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$urlencoded_tags</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$tags</span><span class="p">)){</span>    
</span><span class='line'>      <span class="nv">$tags_r</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="nv">$tags</span><span class="p">);</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$tags_r</span> <span class="k">as</span> <span class="nv">$tag</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$urlencoded_tags</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$tag</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>
</span><span class='line'>  <span class="c1">//construct the url</span>
</span><span class='line'>  <span class="nv">$url</span>  <span class="o">=</span> <span class="s1">&#39;http://api.flickr.com/services/rest/?&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;method=flickr.photos.search&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;text=&#39;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;tags=&#39;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="nv">$urlencoded_tags</span><span class="p">);</span> <span class="c1">//convert the array of url encoded tags back to a string</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;sort=relevance&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;safe_search=1&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;content_type=4&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;api_key=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">flickr_key</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;format=&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;per_page=10&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//get the results</span>
</span><span class='line'>  <span class="nv">$result</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//remove the unneccessary strings that wraps the result returned from the API</span>
</span><span class='line'>  <span class="nv">$json</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="s2">&quot;jsonFlickrApi(&quot;</span><span class="p">),</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$result</span><span class="p">)</span> <span class="o">-</span> <span class="nb">strlen</span><span class="p">(</span><span class="s2">&quot;jsonFlickrApi(&quot;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$photos</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//check if the status didn&#39;t fail</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;stat&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;fail&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//return only the data for the photos as that&#39;s the only thing that we need</span>
</span><span class='line'>      <span class="nv">$photos</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;photos&#39;</span><span class="p">][</span><span class="s1">&#39;photo&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$photos</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$json</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="s2">&quot;jsonFlickrApi(&quot;</span><span class="p">),</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$result</span><span class="p">)</span> <span class="o">-</span> <span class="nb">strlen</span><span class="p">(</span><span class="s2">&quot;jsonFlickrApi(&quot;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$photos</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//check if the status didn&#39;t fail</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;stat&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;fail&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//return only the data for the photos as that&#39;s the only thing that we need</span>
</span><span class='line'>  <span class="nv">$photos</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;photos&#39;</span><span class="p">][</span><span class="s1">&#39;photo&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$photos</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$src</span> <span class="o">=</span> <span class="s2">&quot;http://farm&quot;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;farm&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;.static.flickr.com/&quot;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;server&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;/&#39;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;_m.jpg&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;class.flickr.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$flickr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Flickr</span><span class="p">(</span><span class="nv">$api_key</span><span class="p">,</span> <span class="nv">$api_secret</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$flickr</span><span class="o">-&gt;</span><span class="na">searchPhotos</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nv">$tags</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$results</span><span class="p">)){</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$results</span> <span class="k">as</span> <span class="nv">$photo</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$src</span> <span class="o">=</span> <span class="s2">&quot;http://farm&quot;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;farm&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;.static.flickr.com/&quot;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;server&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;/&#39;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;secret&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;_m.jpg&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;img src=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$src</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; alt=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$photo</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Wordpress Plugins]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/09/29/unit-testing-wordpress-plugins/"/>
    <updated>2013-09-29T15:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/09/29/unit-testing-wordpress-plugins</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how to do unit testing in Wordpress plugins.
Previously I&rsquo;ve written an article on <a href="http://anchetawern.github.io/blog/2013/05/26/getting-started-with-wordpress-plugin-development/">Getting Started with Wordpress Plugin Development</a> and in that article I&rsquo;ve created a simple Wordpress plugin that saves some tweets in the Wordpress database and displays them on a widget.
This time I&rsquo;m going to walk you through setting up unit testing in Wordpress then write some tests for that specific plugin. If you want to follow along you can download the source from <a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/zam.7z">here</a>.</p>

<h3>Installing Composer</h3>

<p>First you have to install composer. From your terminal execute the following command to install composer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<h3>Installing PHPUnit</h3>

<p>Next on your project directory. In my case its in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>home/wern/web_files/wordpress/wp-content/plugins/zam</span></code></pre></td></tr></table></div></figure>


<p>Create a <code>composer.json</code> file then put the following contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "EHER/PHPUnit": "dev-master"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;re done, save the file then execute the following command from your terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer install</span></code></pre></td></tr></table></div></figure>


<p>This will install PHPUnit which we will be using for unit testing.</p>

<h3>Setting Up Wordpress Tests</h3>

<p>Another prerequisite before we can start writing our unit tests is installing <a href="https://github.com/nb/wordpress-tests">Wordpress Tests</a> which is a tool that was created to help in unit testing Wordpress plugins. The main benefit of using this tool is that it has access to all the Wordpress classes so the unit testing environment is pretty much the same as the environment where your Wordpress plugins runs.</p>

<p>Next create a <code>src</code> folder from the root directory of your plugin.
Then install Wordpress Tests inside of it. You can install by cloning the repo by executing the following command from the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/nb/wordpress-tests.git</span></code></pre></td></tr></table></div></figure>


<p>Or simply download the <code>master.zip</code> file from the master branch of the project if you don&rsquo;t have <a href="http://git-scm.com/">Git</a> installed.</p>

<p>Next create a <code>tests</code> directory (still on the root directory of your plugin). Then inside it create another directory and name it the same name where your Wordpress plugin is stored. In this case I&rsquo;ve named it <code>zam</code> since its the name of the directory where the main plugin file is located.</p>

<p>Then create a <code>bootstrap.php</code> file just beside the directory that you&rsquo;ve just created and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$path</span> <span class="o">=</span> <span class="s1">&#39;/home/wern/web_files/wordpress/wp-content/plugins/zam/src/wordpress-tests/bootstrap.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="nb">file_exists</span><span class="p">(</span> <span class="nv">$path</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">require_once</span> <span class="nv">$path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">exit</span><span class="p">(</span> <span class="s2">&quot;Couldn&#39;t find path to wordpress-tests/bootstrap.php</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok not exactly the same contents but at least the same format. All you&rsquo;re going to need to have to change here is the value for the <code>$path</code>. It should be where the main <code>bootstrap.php</code> file is stored. Not the <code>bootstrap.php</code> that you&rsquo;ve just created but the <code>bootstrap.php</code> file that&rsquo;s inside the <code>wordpress-tests</code> project which you cloned earlier.</p>

<p>Next inside the <code>tests/zam</code> directory create the file were we are going to write all the tests later on. As a convention the naming should be the name of the plugin followed by the word <code>Test</code>. So for the sample plugin that were going to test the name would be <code>zamTest.php</code>.</p>

<p>Next navigate to the root directory of your plugin and create a <code>phpunit.xml</code> file and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;phpunit</span> <span class="na">backupGlobals=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">backupStaticAttributes=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">colors=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertErrorsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertNoticesToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertWarningsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">processIsolation=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnFailure=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">syntaxCheck=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">bootstrap=</span><span class="s">&quot;tests/bootstrap.php&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;testsuites&gt;</span>
</span><span class='line'>        <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;Ecom Test Suite&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directory&gt;</span>tests/<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/testsuite&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/testsuites&gt;</span>
</span><span class='line'><span class="nt">&lt;/phpunit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>phpunit.xml</code> file simply points out where the test directory is located and some options for PHPUnit.
In the <code>phpunit.xml</code> file above we&rsquo;ve used the following options:</p>

<ul>
<li><strong>backupGlobals</strong> &ndash; setting this to <code>false</code> tells PHPUnit to disable global state between tests</li>
<li><strong>backupStaticAttributes</strong> &ndash; setting this to <code>false</code> disables the backup and restore operations for static class attributes</li>
<li><strong>colors</strong> &ndash; setting this to <code>true</code> enables syntax highlighting when running tests on the terminal</li>
<li><strong>convertErrorsToExceptions</strong> &ndash; setting this to <code>true</code> converts errors to exceptions</li>
<li><strong>convertNoticesToExceptions</strong> &ndash; setting this to <code>true</code> converts notices to exceptions</li>
<li><strong>convertWarningsToExceptions</strong> &ndash; setting this to <code>true</code> converts warnings to exceptions</li>
<li><strong>processIsolation</strong> &ndash; setting this to <code>false</code> disables running each test in a separate PHP process</li>
<li><strong>stopOnFailure</strong> &ndash; setting this to <code>false</code> disables stopping of execution upon first error or failure. This means that the test will continue to run even after encountering a failure</li>
<li><strong>syntaxCheck</strong> &ndash; setting this to <code>false</code> disables checking of syntax</li>
<li><strong>bootstrap</strong> &ndash; where the <code>bootstrap.php</code> file is located</li>
</ul>


<h3>Setting Up the Test Database</h3>

<p>If your plugin uses the Wordpress database then its a requirement that you also have to setup the testing database so that running the tests won&rsquo;t affect your actual database.</p>

<p>To do that go ahead and backup your Wordpress database using a tool like <a href="http://www.phpmyadmin.net/home_page/index.php">Phpmyadmin</a>.
Then restore the backup this time giving it a different name, something like <code>wp_db_tests</code> to indicate that its a database that will be used for testing.
Next modify <code>wp-config.php</code> to make use of the test database temporarily.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;wp_db_tests&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>After that you can install the <a href="http://wordpress.org/plugins/wordpress-reset/">Wordpress reset plugin</a> to reset the database that will be used for testing.</p>

<p>Once the test database has been successfully reset you can now revert the changes to <code>wp-config.php</code> and use your old database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;wp_db&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unit Test Configuration</h3>

<p>Next we can now specify the options to the unit test configuration file (<code>unittests-config.php</code>) which you can find inside the <code>src/wordpress-tests</code> directory.
The only things that you might want to change here are the values for <code>ABSPATH</code>, <code>DB_NAME</code>, <code>DB_USER</code>, <code>DB_HOST</code>, <code>WP_TESTS_DOMAIN</code>, <code>WP_TESTS_EMAIL</code>, <code>WP_TESTS_TITLE</code>, and <code>WP_TESTS_NETWORK_TITLE</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/* Path to the WordPress codebase you&#39;d like to test. Add a backslash in the end. */</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;ABSPATH&#39;</span><span class="p">,</span> <span class="s1">&#39;/home/wern/web_files/wordpress/&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;wp_db_tests&#39;</span> <span class="p">);</span> <span class="c1">//the database that will be used for testing</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_USER&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_PASSWORD&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_HOST&#39;</span><span class="p">,</span> <span class="s1">&#39;localhost&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_CHARSET&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DB_COLLATE&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_DEBUG&#39;</span><span class="p">,</span> <span class="k">true</span> <span class="p">);</span> <span class="c1">//display all errors, warnings and notices</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_DEBUG_DISPLAY&#39;</span><span class="p">,</span> <span class="k">true</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_TESTS_DOMAIN&#39;</span><span class="p">,</span> <span class="s1">&#39;localhost/wordpress&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_TESTS_EMAIL&#39;</span><span class="p">,</span> <span class="s1">&#39;youremail@gmail.com&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_TESTS_TITLE&#39;</span><span class="p">,</span> <span class="s1">&#39;Some Site&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_TESTS_NETWORK_TITLE&#39;</span><span class="p">,</span> <span class="s1">&#39;Test Network&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_TESTS_SUBDOMAIN_INSTALL&#39;</span><span class="p">,</span> <span class="k">true</span> <span class="p">);</span>
</span><span class='line'><span class="nv">$base</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Cron tries to make an HTTP request to the blog, which always fails, because tests are run in CLI mode only */</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;DISABLE_WP_CRON&#39;</span><span class="p">,</span> <span class="k">true</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$table_prefix</span>  <span class="o">=</span> <span class="s1">&#39;wp_&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">define</span><span class="p">(</span> <span class="s1">&#39;WP_PHP_BINARY&#39;</span><span class="p">,</span> <span class="s1">&#39;php&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Examining the Testing Suite</h3>

<p>Now were ready to write some unit tests. Go ahead and navigate to the following directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">/home/wern/web_files/wordpress/wp-content/plugins/zam/tests/zam/zamTest.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open up the <code>zamTest.php</code> file and put the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Zam Tests</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;/home/wern/web_files/wordpress/wp-content/plugins/zam/zam.php&#39;</span><span class="p">);</span> <span class="c1">//path to the main plugin file</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ZamTest</span> <span class="k">extends</span> <span class="nx">WP_UnitTestCase</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$zam</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$plugin_slug</span> <span class="o">=</span> <span class="s1">&#39;zam&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$options</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//unit tests here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The unit testing class will simply extend the <code>WP_UnitTestCase</code> class which is inside the <code>src/wordpress-tests/lib/testcase.php</code> file.</p>

<p>Let&rsquo;s take a moment to inspect it before proceeding with writing our tests.
As you can see the <code>WP_UnitTestCase</code> class is simply extending the <code>PHPUnit_Framework_TestCase</code> which is the main testing suite that is used for most PHPUnit based test classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">WP_UnitTestCase</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">suppress_errors</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">show_errors</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">db_connect</span><span class="p">();</span>
</span><span class='line'>      <span class="nb">ini_set</span><span class="p">(</span><span class="s1">&#39;display_errors&#39;</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">clean_up_global_scope</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">start_transaction</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span> <span class="s1">&#39;ROLLBACK&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">clean_up_global_scope</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$_GET</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$_POST</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">flush_cache</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">flush_cache</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$wp_object_cache</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wp_object_cache</span><span class="o">-&gt;</span><span class="na">group_ops</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$wp_object_cache</span><span class="o">-&gt;</span><span class="na">stats</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$wp_object_cache</span><span class="o">-&gt;</span><span class="na">memcache_debug</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$wp_object_cache</span><span class="o">-&gt;</span><span class="na">cache</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nb">method_exists</span><span class="p">(</span> <span class="nv">$wp_object_cache</span><span class="p">,</span> <span class="s1">&#39;__remoteset&#39;</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$wp_object_cache</span><span class="o">-&gt;</span><span class="na">__remoteset</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">wp_cache_flush</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">start_transaction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span> <span class="s1">&#39;SET autocommit = 0;&#39;</span> <span class="p">);</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span> <span class="s1">&#39;START TRANSACTION;&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">assertWPError</span><span class="p">(</span> <span class="nv">$actual</span><span class="p">,</span> <span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span> <span class="nx">is_wp_error</span><span class="p">(</span> <span class="nv">$actual</span> <span class="p">),</span> <span class="nv">$message</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">assertEqualFields</span><span class="p">(</span> <span class="nv">$object</span><span class="p">,</span> <span class="nv">$fields</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span> <span class="nv">$fields</span> <span class="k">as</span> <span class="nv">$field_name</span> <span class="o">=&gt;</span> <span class="nv">$field_value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="nv">$object</span><span class="o">-&gt;</span><span class="nv">$field_name</span> <span class="o">!=</span> <span class="nv">$field_value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fail</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">assertDiscardWhitespace</span><span class="p">(</span> <span class="nv">$expected</span><span class="p">,</span> <span class="nv">$actual</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span> <span class="nb">preg_replace</span><span class="p">(</span> <span class="s1">&#39;/\s*/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$expected</span> <span class="p">),</span> <span class="nb">preg_replace</span><span class="p">(</span> <span class="s1">&#39;/\s*/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$actual</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">checkAtLeastPHPVersion</span><span class="p">(</span> <span class="nv">$version</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nb">version_compare</span><span class="p">(</span> <span class="k">PHP_VERSION</span><span class="p">,</span> <span class="nv">$version</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">markTestSkipped</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">go_to</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// note: the WP and WP_Query classes like to silently fetch parameters</span>
</span><span class='line'>      <span class="c1">// from all over the place (globals, GET, etc), which makes it tricky</span>
</span><span class='line'>      <span class="c1">// to run them more than once without very carefully clearing everything</span>
</span><span class='line'>      <span class="nv">$_GET</span> <span class="o">=</span> <span class="nv">$_POST</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;query_string&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;postdata&#39;</span><span class="p">,</span> <span class="s1">&#39;authordata&#39;</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="s1">&#39;currentmonth&#39;</span><span class="p">,</span> <span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="s1">&#39;pages&#39;</span><span class="p">,</span> <span class="s1">&#39;multipage&#39;</span><span class="p">,</span> <span class="s1">&#39;more&#39;</span><span class="p">,</span> <span class="s1">&#39;numpages&#39;</span><span class="p">,</span> <span class="s1">&#39;pagenow&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="nb">isset</span><span class="p">(</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="nv">$v</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="nb">unset</span><span class="p">(</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="nv">$v</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nv">$parts</span> <span class="o">=</span> <span class="nb">parse_url</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;scheme&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$req</span> <span class="o">=</span> <span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;query&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nv">$req</span> <span class="o">.=</span> <span class="s1">&#39;?&#39;</span> <span class="o">.</span> <span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;query&#39;</span><span class="p">];</span>
</span><span class='line'>              <span class="c1">// parse the url query vars into $_GET</span>
</span><span class='line'>              <span class="nb">parse_str</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;query&#39;</span><span class="p">],</span> <span class="nv">$_GET</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;query&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$req</span> <span class="o">=</span> <span class="nv">$url</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REQUEST_URI&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$req</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">unset</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">flush_cache</span><span class="p">();</span>
</span><span class='line'>      <span class="nb">unset</span><span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp_query&#39;</span><span class="p">],</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp_the_query&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp_the_query&#39;</span><span class="p">]</span> <span class="o">=&amp;</span> <span class="k">new</span> <span class="nx">WP_Query</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp_query&#39;</span><span class="p">]</span> <span class="o">=&amp;</span> <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp_the_query&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp&#39;</span><span class="p">]</span> <span class="o">=&amp;</span> <span class="k">new</span> <span class="nx">WP</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// clean out globals to stop them polluting wp and wp_query</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">public_query_vars</span> <span class="k">as</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">unset</span><span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="nv">$v</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">private_query_vars</span> <span class="k">as</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">unset</span><span class="p">(</span><span class="nv">$GLOBALS</span><span class="p">[</span><span class="nv">$v</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;wp&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">main</span><span class="p">(</span><span class="nv">$parts</span><span class="p">[</span><span class="s1">&#39;query&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>setUp</code> method sets the <code>supress_errors</code> attribute of the <code>$wpdb</code> object to <code>false</code> this means that all database errors will be displayed if there are any. The <code>$wpdb</code> variable is an instance of the Wordpress database class. It&rsquo;s also setting the <code>show_errors</code> attribute to <code>true</code>. Then it connects to the database that we have set on the <code>unittests-config.php</code> file earlier using the <code>db_connect()</code> method. It also sets <code>display_errors</code> to <code>1</code> which basically means that all errors, warnings and notices will be displayed if there are any.
Then the <code>clean_up_global_scope()</code> method is called, this simply empties out global variables such as <code>$_GET</code> or <code>$_POST</code>. This method also calls up another method which is the <code>flush_cache()</code> which simply resets the Wordpress object cache. All of this is done to prevent any external variable or cached data from interfering with the values used for the current test. The <code>setUp</code> method also calls up the <code>start_transaction()</code> method which sets database <code>autocommit</code> to <code>0</code>. This means that even if you execute a query like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">INSERT INTO wp_tbl_users SET name = &#39;matthew&#39;, age = 21</span>
</span></code></pre></td></tr></table></div></figure>


<p>It won&rsquo;t actually commit the changes to the database. This means that the changes aren&rsquo;t permanently added into the database. After that it also starts a transaction using the <code>START_TRANSACTION</code> command. What this does is to ensure that the <code>autocommit</code> remains disabled while the transaction hasn&rsquo;t been ended yet. You can only end a transaction using either the <code>COMMIT</code> or <code>ROLLBACK</code> command. The <code>COMMIT</code> command simply commits all the changes in the database. The <code>ROLLBACK</code> command rolls back everything that was done after the <code>START_TRANSACTION</code> command.</p>

<p>When you check out the <code>tearDown()</code> method you will see that the <code>WP_UnitTestCase</code> class uses the <code>ROLLBACK</code> command. This means that every change brought by each test is rolled back to its previous state.</p>

<p>So even if a test method does a couple of queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO wp_postmeta SET post_id = &#39;23&#39;, meta_key = &#39;somekey&#39;, meta_value = &#39;somevalue&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO wp_options SET option_name = &#39;some_option&#39;, option_value = &#39;some_optionvalue&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the the execution of the test method ends, the <code>tearDown()</code> method will be called and the database will be rolled back to its previous state before any of the queries above were executed.
This effectively brings back the test database to a state similar to that of when your first installed Wordpress on every test.</p>

<p>There&rsquo;s also the <code>assertWPError()</code> method which simply asserts a Wordpress error if its <code>true</code>.</p>

<p>The <code>assertEqualFields()</code> method simply checks if each key-value pair that you supply it has equal values. If not the test will fail.</p>

<p>The <code>assertDiscardWhitespace()</code> method simply removes all the whitespace from 2 strings and compare it with each other.</p>

<p>The <code>checkAtLeastPHPVersion()</code> method checks if the PHP Version number that you specify as its argument is higher than that of PHP Version in the machine where you are running the tests.</p>

<p>Lastly there&rsquo;s the <code>go_to()</code> method which sets up the objects which you might want to check when navigating a specific URL. For example if you want to assert the title of a specific page you do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$this-&gt;go_to(&#39;http://mysite.me/?p=125&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you simply use an instance of the <code>$wp_query</code> class to get the queried objects from that specific URL.
This will then contain some attributes like the <code>post_title</code> or <code>post_content</code> which you can assert:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testPostTitle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wp_query</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$wp_query</span><span class="o">-&gt;</span><span class="na">get_queried_object</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s1">&#39;Zup World!&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_title</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Writing Unit Tests</h3>

<p>Now that we know what the <code>WP_UnitTestCase</code> class does we can now proceed with writing the actual tests for our simple plugin.</p>

<h4>The Setup</h4>

<p>The <code>setUp</code> method is where we setup the things that the plugin needs during its runtime. For example if the plugin that you are testing involves creating database tables or adding new entries to the <code>wp_options</code> table then you set those all up in the <code>setUp</code> method. Think of it as emulating what would usually happen once the plugin is activated on a Wordpress site. The same thing should happen in the <code>setUp</code> method.</p>

<p>The first thing that we need to do inside the <code>setUp</code> method is call the <code>setUp</code> method in the <code>WP_UnitTestCase</code> class. This simply cleans up the global scope and start a database transaction as we discussed earlier.</p>

<p>Next we create a new object for the <code>Zam</code> plugin class and call its <code>installation_housekeeping()</code> method which creates the tables that will be needed by the plugin. Finally, we set the option that will be used by the plugin.
Here were setting the <code>zam_twitter_id</code> under the <code>zam_options</code> option group to be equal to <code>Wern_Ancheta</code>. This should be a valid twitter username otherwise it wouldn&rsquo;t work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">parent</span><span class="o">::</span><span class="na">setUp</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$z</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Zam</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$z</span><span class="o">-&gt;</span><span class="na">installation_housekeeping</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">update_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;zam_twitter_id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Wern_Ancheta&#39;</span>
</span><span class='line'>  <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>Remember that the `setUp` method runs before every test is executed.</p></blockquote>


<h4>Teardown</h4>

<p>Next is the <code>tearDown()</code> method. This is the opposite of the <code>setUp</code> method in that it is run after every test has been executed. What it does is to simply clean up the things which aren&rsquo;t cleaned up by the <code>setUp</code> method. In this case were simply calling the <code>uninstall_housekeeping()</code> method which drops the tables that are used by the plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Zam</span><span class="o">::</span><span class="na">uninstall_housekeeping</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now were ready to test the actual methods in the plugin. For this tutorial were only going to test 2 core methods which the plugin uses, the <code>get_tweets()</code> and <code>save_tweets()</code> method.</p>

<p>The convention that I&rsquo;ve used in the following methods is to prefix the actual name of the methods that I&rsquo;m testing with the word <code>test_</code>. Of course you can use other conventions but remember to use one that&rsquo;s already followed by your plugin. For example here I&rsquo;ve used underscores to separate each word in the method. You can also use camel casing or hungarian notation if you&rsquo;re already using it. What&rsquo;s important is that the test should follow the convention used by the actual class that you&rsquo;re testing.</p>

<h4>Get Tweets Test</h4>

<p>To test the <code>get_tweets()</code> method first you have to instantiate the plugin.
This should be true for every method to avoid storing of values in the class itself.
Once you&rsquo;ve instantiated the class, call the <code>get_tweets()</code> method using the object that you&rsquo;ve used.</p>

<p>We expect the <code>get_tweets()</code> method to return 11 tweets by default so we use <code>assertCount</code> to assert that the number of items stored in the <code>$tweets</code> variable is indeed 11.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">test_get_tweets</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$z</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Zam</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$tweets</span> <span class="o">=</span> <span class="nv">$z</span><span class="o">-&gt;</span><span class="na">get_tweets</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertCount</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nv">$tweets</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Save Tweets Test</h4>

<p>Finally we test the <code>save_tweet</code> method. This method saves a random tweet from a page specified by the user in a specific Wordpress post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">test_save_tweets</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$z</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Zam</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$page</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$post</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;post_title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sample save tweet&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;post_content&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[zam_tweets page=&#39;</span> <span class="o">.</span> <span class="nv">$page</span> <span class="o">.</span> <span class="s1">&#39;]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;post_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;post&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$post_id</span> <span class="o">=</span> <span class="nx">wp_insert_post</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_var</span><span class="p">(</span><span class="s2">&quot;SELECT tweet FROM </span><span class="si">$tweets_table</span><span class="s2"> WHERE post_id = &#39;</span><span class="si">$post_id</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$tweets</span> <span class="o">=</span> <span class="nv">$z</span><span class="o">-&gt;</span><span class="na">get_tweets</span><span class="p">(</span><span class="nv">$page</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$content</span><span class="p">,</span> <span class="nv">$tweets</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This method is using the <a href="http://codex.wordpress.org/Shortcode_API">Shortcode API</a> which has a general syntax similar to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">[zam_tweets page=3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>zam_tweets</code> is the specific shortcode ID used by the plugin. And <code>page</code> is the attribute and <code>3</code> is the value for that attribute.</p>

<p>What were doing here is simply emulating what would actually happen in an actual scenario. First the user creates a new post, puts in the shortcode then publish the post. But when testing we can take shortcuts as we don&rsquo;t need to navigate to the post page and click on the add new post. All that we need to do is to publish the actual post and that is done by calling the <code>wp_insert_post()</code> method. This takes a couple of arguments but here were only specify the <code>post_title</code> or the actual title of the post, the <code>post_content</code> or the shortcode itself, and the <code>post_type</code> which is <code>post</code>.</p>

<p>Then we get the tweet from the tweets table, call the <code>get_tweets()</code> method, this time specifying the same page that was used in the shortcode. Finally we simply assert that the <code>in_array()</code> method which checks if the tweet that was found in the database is in the array of tweets returned by the <code>get_tweets()</code> method is <code>true</code>.</p>

<h3>Running the Tests</h3>

<p>Once you&rsquo;re done writing the tests you can simply open up the terminal on the root directory of the plugin and execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">phpunit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once its done running you will see a screen similar to this:</p>

<p><img src="http://anchetaWern.github.io/images/posts/unit_testing_wordpress_plugins/terminal.png" alt="passing tests" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Real Time Chat Application With Socket.io]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/25/creating-a-real-time-chat-application-with-socket-dot-io/"/>
    <updated>2013-08-25T13:58:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/25/creating-a-real-time-chat-application-with-socket-dot-io</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through the process of building a real time chat application using Socket.io.
I just said Socket.io but socket.io isn&rsquo;t the only technology that were going to use for this mini project. Basically were going to make use of the following technologies:</p>

<ul>
<li><strong>Node JS</strong> &ndash; this is the core technology that were gonna be using. Its basically just JavaScript on the server side</li>
<li><strong>Redis</strong> &ndash; were going to use it to store the messages sent by each user</li>
<li><strong>Socket.io</strong> &ndash; for real-time goodness!</li>
<li><strong>Express JS</strong> &ndash; a framework for Node JS, were going to use express JS for a more cleaner and expressive syntax</li>
</ul>


<h3>Installation</h3>

<p>First let&rsquo;s go ahead and install the things that we need for this project.</p>

<h4>Redis</h4>

<p>You can install redis by downloading the latest stable release from the <a href="http://redis.io/download">redis website</a>.
After that you can use <code>tar</code> to extract its contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xvzf redis-stable.tar.gz
</span><span class='line'>cd redis-stable
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p>Then try if the build works by executing <code>make test</code> from the terminal to test if you have successfully installed redis.</p>

<p>If you&rsquo;re on Windows you can follow the instructions from here: <a href="http://codingsteps.com/install-redis-on-windows/">install redis on Windows</a></p>

<p>Once you have installed redis, you can test it out by opening a terminal and execute <code>redis-cli</code>.
This will allow you to interact with redis. You can try inserting a new record by using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set name "iron man"</span></code></pre></td></tr></table></div></figure>


<p>Then retrieve it using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get name //outputs: iron man</span></code></pre></td></tr></table></div></figure>


<h4>Node JS</h4>

<p>You can install node js through the terminal using <code>apt-get</code> if you&rsquo;re on linux:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-software-properties python g++ make
</span><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<p>If you are on Windows you can simply download the installer from the <a href="http://nodejs.org/download/">node js website</a></p>

<h3>Setting Up the Application</h3>

<p>Next we can now create the directory where our little chat application will reside. You can create it anywhere you want since Node.js doesn&rsquo;t need a server like Apache or Nginx to work. But for me I&rsquo;ll just be putting it on the web accessible folder intended for my Apache server. This won&rsquo;t have any effect since we&rsquo;ll be serving the chat application in its own port.</p>

<h4>Specify Dependencies</h4>

<p>Next specify the dependencies of our little chat application. Simply create a <code>package.json</code> file and put in the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "name": "realtime_chat_app",
</span><span class='line'>   "description": "real time chat application",
</span><span class='line'>   "version": "0.0.1",
</span><span class='line'>   "dependencies": {
</span><span class='line'>      "express": "3.x",
</span><span class='line'>      "socketio" : "latest",
</span><span class='line'>      "redis" : "latest"
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>To break it down:</p>

<ul>
<li><strong>name</strong> &ndash; this is the name of the application that you&rsquo;re trying to create.</li>
<li><strong>description</strong> &ndash; a short description of what the application is.</li>
<li><strong>version</strong> &ndash; the version number of the application, you can have any version number you want.</li>
<li><strong>dependencies</strong> &ndash; the node packages in which the application depends on in order to work. This takes up a set of key-value pairs. With the key being the name of the package and the value being the version number of the package. Here we&rsquo;ve specified <code>express</code>, <code>socketio</code>, and <code>redis</code> as the dependencies. It&rsquo;s a good practice to actually specify the actual version number of the dependency instead of just specifying <code>latest</code> since there might be some breaking changes to the API in the future and your application will simply refuse to work by that time. But I don&rsquo;t think <code>socketio</code> and the redis client for node js is going to change its API anytime soon so let&rsquo;s stick with using the latest version for now. If you are not sure of the name of the dependency that you are trying to install, you can always make use of the <a href="https://npmjs.org/">npm website</a> to find dependencies and their actual names.</li>
</ul>


<p><img src="http://anchetaWern.github.io/images/posts/realtime_chat_socketio/npm.png" alt="npm website" /></p>

<p>Once you&rsquo;re done with that, save the file and open up the terminal in the same location where you have the <code>package.json</code> file then execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install</span></code></pre></td></tr></table></div></figure>


<p>This will install the dependencies under the <code>node_modules</code> directory.</p>

<h3>Building the Application</h3>

<h4>Directory Structure</h4>

<p>Now were ready to build the application. But first go ahead and create the following files and directories in your working directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> - chat_app (your working directory)
</span><span class='line'>  - public
</span><span class='line'>      - css
</span><span class='line'>          - main.css (the main css file for styling the chat app)
</span><span class='line'>      - img
</span><span class='line'>      - js
</span><span class='line'>          - vendor
</span><span class='line'>              - jquery.min.js (you can download it from jquery.com or simply load it from a cdn)
</span><span class='line'>  - views - index.html
</span><span class='line'>  - app.js
</span></code></pre></td></tr></table></div></figure>


<h4>Server-side Code</h4>

<h5>Initializing the Application</h5>

<p>Open up the <code>app.js</code> file and initialize the app by declaring the following variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app_port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span> <span class="c1">//the port in which the application will run</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io_port</span> <span class="o">=</span> <span class="mi">3333</span><span class="p">;</span> <span class="c1">//the port in which socket io will run</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span> <span class="c1">//include the express js framework</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)();</span> <span class="c1">//create an app using express js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span> <span class="c1">//create an express js server</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span> <span class="c1">//start socket io</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;redis&quot;</span><span class="p">);</span> <span class="c1">//include the redis client</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">redis_client</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span> <span class="c1">//create a redis client</span>
</span></code></pre></td></tr></table></div></figure>


<p>What you have just declared are the variables that&rsquo;s going to be used throughout the app.
The <code>app_port</code> is the port in which our app will run. So if you start the app by executing the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access it by going to <code>http://localhost:8000</code>. You can also use other ports aside from <code>8000</code> as long as its not already used by another running process.</p>

<p>The <code>io_port</code> is the port in which socket io will run. In this case were using port <code>3333</code>. Again you have to make sure that the port is not already in use by another process otherwise it wouldn&rsquo;t work.</p>

<p>The <code>express</code> variable contains the reference to the express js framework.
The <code>app</code> variable stores the reference to the new app created using express js.
The <code>server</code> variable contains the reference to the server that we create using express js.</p>

<p>The <code>io</code> variable contains the reference to socket io. We then immediately let it listen for events triggered from the express js server.</p>

<p>The <code>redis</code> variable contains the reference to the redis client. The redis client is a means of interacting with the redis server that we installed earlier. Its like an interface between node js and the redis server.</p>

<p>Then we create redis client and store it on the <code>redis_client</code> variable.</p>

<p>Then we set our app to use the <code>bodyParser</code>. The main usage for the <code>bodyParser</code> in our app is for parsing the request parameters when were sending parameters to the server. We also set the directory for static files to be served by the server using the <code>static()</code> method. The <code>static()</code> method takes up the name of the directory which contains the static files that you want to serve. In this case its the <code>public</code> directory in the root of our app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we create the variables that will store the names of the people who are currently on the chat and the chat messages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">chatters</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chat_messages</span> <span class="o">=</span> <span class="p">[];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Getting Users from Redis</h5>

<p>Then we get the names of the people in the chat that are stored in the database. If it exists then we assign it to the <code>chatters</code> variable. We only store the stringified version of the JavaScript Object so we need to use <code>JSON.parse()</code> before assigning it to the variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">redis_client</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;chat_app_chatters&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">reply</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">reply</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chatters</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">reply</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Getting Messages from Redis</h5>

<p>We also get the messages stored in the database and assign it to the <code>chat_messages</code> variable if it exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">redis_client</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;chat_app_messages&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">reply</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">reply</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chat_messages</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">reply</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Index Page</h5>

<p>Next let&rsquo;s set what happens when users try to access the root url (<a href="http://localhost:8000">http://localhost:8000</a>).
Here were using the <code>get()</code> method which takes up 2 arguments. The first argument is the path, and the second argument is the callback function in which the request (req) and response (res) are passed behind the scenes.
All you need to remember here is that the <code>req</code> variable stores the request parameters such as the form data that you pass when requesting for the specified path (/). And the <code>res</code> variable contains methods which you can use for the response. In this case were simply sending the static <code>index.html</code> file. This means that when users request for <code>http://localhost:8000</code> the <code>index.html</code> under the <code>public/views</code> directory will be rendered in the browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">sendfile</span><span class="p">(</span><span class="s1">&#39;./views/index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Initializing Socket.IO</h5>

<p>Next we initialize socket io. Here were listening to 2 events, the <code>message</code> event and the <code>update_chatter_count</code> event. These 2 events are custom events so you can name it anything you want as long as it has a reciprocal event on the client side. When the <code>message</code> event happens we immediately emit the <code>send</code> event to each of the users that are currently on the chat room. The same is true with the <code>update_chatter_count</code> event, we immediately emit the <code>count_chatters</code> event to the rest of the clients when this event happens. But we don&rsquo;t just emit the event, we also pass in the data that come from the client who emmited the event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;update_chatter_count&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;count_chatters&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes I know this is really confusing, I also got confused at first so I recommend you to just play around with the code until it finally ticks.
What you have to remember is that both the server and the client should have the code that both listens and emit the events. What you emit in the client side you should listen for it on the server side, and what you listen for in the client side should be emitted from the server side.</p>

<h5>Joining the Chat Room</h5>

<p>Next is the code for joining the chat room. What were doing here is to get the username passed in from the client side, then check if the username already exists in the array of usernames by using the <code>indexOf()</code> method.
The <code>indexOf()</code> method returns a value of <code>-1</code> if the value that you specified doesn&rsquo;t exists yet.
If the user doesn&rsquo;t exists yet we simply push it into the <code>chatters</code> array which stores a list of usernames. Then we also save it into the database. The way we save into redis is to call the <code>set</code> method provided by the redis client for node. The <code>set</code> method takes up a <code>key</code> and a <code>value</code> as its arguments. Here were storing the stringified version of the <code>chatters</code> array. Finally we send a response to the client containing the current value of the <code>chatter</code> array and a <code>status</code> of <code>ok</code>. Otherwise we send a <code>failed</code> status if the user already exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/join_chat&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">chatters</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chatters</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;chat_app_chatters&#39;</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">chatters</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;chatters&#39;</span> <span class="o">:</span> <span class="nx">chatters</span><span class="p">,</span> <span class="s1">&#39;status&#39;</span> <span class="o">:</span> <span class="s1">&#39;ok&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;status&#39;</span> <span class="o">:</span> <span class="s1">&#39;failed&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Leaving the Chat Room</h5>

<p>Next is the code for leaving the chat room.
This takes up the username of the user whose going to leave the chat room.
We simply remove it from the array of chatters by using the <code>splice</code> method which takes up the index of the item that we want to remove in the array and the number of items that we want to remove. We then commit it back to the database and send an ok status to the client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/leave_chat&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">chatters</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">chatters</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">username</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>   
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;chat_app_chatters&#39;</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">chatters</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;status&#39;</span> <span class="o">:</span> <span class="s1">&#39;ok&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Sending Messages</h5>

<p>Next is the code that handles the messages that are sent from the client side.
This takes up the username (sender) and the actual message. We then push these values to the <code>chat_messages</code> array which stores the sender names and their messages. Then we also commit the stringified version back to the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/send_message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">chat_messages</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="s1">&#39;sender&#39;</span> <span class="o">:</span> <span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span> <span class="o">:</span> <span class="nx">message</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">redis_client</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;chat_app_messages&#39;</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">chat_messages</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;status&#39;</span> <span class="o">:</span> <span class="s1">&#39;ok&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Getting Messages</h5>

<p>Next is the code that returns the messages. This doesn&rsquo;t take up any parameters from the client side, it simply returns the <code>chat_messages</code> array. This will be used in the client side to load the messages for a person who enters the chat room later than the others. If you remember earlier were updating the database every time a message is sent. And on every page load were assigning the value for the <code>chat_messages</code> array to be equal to the messages that are currently on the database. This means that all the messages that has been previously sent by other users in the chat room will be stored in the <code>chat_messages</code> array which we are returning here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/get_messages&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">chat_messages</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Getting the People in the Chatroom</h5>

<p>We also have this code for returning the people who are currently on the chat room.
This will be used in the client side to determine the number of people who are currently on the chat room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/get_chatters&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">chatters</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we make our server listen to port 8000 so that we actually see something once we access <code>http://localhost:8000</code> in the browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Client-side Code</h4>

<h5>Markup</h5>

<p>Next is the markup for our simple chat application. I tried to make it as simple as possible so we only have a simple form in here that asks for the username, then a join chat button to actually join the chat room. We also have this <code>.chat-info</code> div which we will use later on to show the number of users that are currently on the chat room. Then we have this <code>.chat</code> div which serves as a container for everything that has something to do with the chat.
The <code>.messages</code> div which is directly inside of it will be used as a container for all the messages sent by each of the users in the chat room. Then we also have this <code>#message</code> textarea which will be used by users to input their messages. Then we have buttons for leaving the chat room and sending the message. Finally we include the socket io client side script, jquery, and our main JavaScript file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Simple Chat Application<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Simple Chat Application<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;join-chat&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>Username:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;join-chat&quot;</span> <span class="na">value=</span><span class="s">&quot;Join Chat&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;chat-info&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;chat&quot;</span><span class="nt">&gt;</span>       
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">id=</span><span class="s">&quot;message&quot;</span> <span class="na">cols=</span><span class="s">&quot;93&quot;</span> <span class="na">rows=</span><span class="s">&quot;5&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;leave-chat&quot;</span> <span class="na">data-username=</span><span class="s">&quot;&quot;</span> <span class="na">value=</span><span class="s">&quot;Leave Chat&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;send-message&quot;</span> <span class="na">data-username=</span><span class="s">&quot;&quot;</span> <span class="na">value=</span><span class="s">&quot;Send Message&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/vendor/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Styling</h5>

<p>For the stylesheet. The main container would be at the center of the screen.
The container for the messages will have a border of black.
For the chat container its initially set to be not displayed as users would have to join the chat first before they can see what&rsquo;s going on in the chat room. The container for an individual message sent by a user is going to have a width which occupies the entire width of its parent which is the div with a class of <code>messages</code>.
Finally, each <code>user</code> container would be floated to the left so that the username would always appear on the left side of the screen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">777px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.messages</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">769px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">240px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.chat</span><span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.msg</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.user</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-right</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On our main JavaScript file <code>main.js</code> we declare the <code>socket</code> variable globally.
It would be a good practice to actually enclose it inside an immediately invoked function expression so that it won&rsquo;t be accessed from the outside but for this tutorial let&rsquo;s just stick with declaring it globally.
The <code>socket</code> variable is our means of connecting to the socket io server which is running on the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;http://localhost&#39;</span><span class="p">);</span> <span class="c1">//connect to the socket io server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chatter_count</span><span class="p">;</span> <span class="c1">//stores the current number of users in the chat room</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Getting Current Users</h6>

<p>Next we get the users who are currently on the chat room. Here were using the <code>$.get</code> jQuery method to request the data from the server using the <code>GET</code> method. If you remember earlier we used <code>app.get('/get_chatters')</code> on our server-side code. Here were simply telling the server to give us the value returned from that function that we declared earlier. So the <code>response</code> here is actually the array of users that are currently on the chat room.
We simply get the built-in attribute for arrays which is <code>length</code> to get the number of users who are currently in the chat room. We then use this value to update the contents of the <code>.chat-info</code> div and the <code>chatter_count</code> variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/get_chatters&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.chat-info&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;There are currently &quot;</span> <span class="o">+</span> <span class="nx">response</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s2">&quot; people in the chat room&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">chatter_count</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">//update chatter count</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Joining the Chat Room</h6>

<p>Next is the code for joining the chat room. Here were simply requesting for the <code>/join_chat</code> path that we declared earlier on the server. If you go back to that code you&rsquo;ll see that were getting <code>req.param('username')</code>. That&rsquo;s exactly what were passing in here, the username of the user who wants to join the chat room.
If the username doesn&rsquo;t already exists  we emit the <code>update_chatter_count</code> event passing in an object which contains the specific action that we want to perform with the <code>chatter_count</code> variable. In this case were telling it to increase since a new user just joined the chat room. We also update the UI to show the chat container. We also update the buttons for leaving the chat room and sending a message to include a data attribute of <code>username</code> which simply stores the username of the user who just joined the chat room.
After that we request for the chat messages from the server. If there&rsquo;s actually a message returned we update the chat box to include these messages. It&rsquo;s a good practice to store the html for updating the UI in a variable then updating the UI after you already got everything to reduce the need to update the browser. It&rsquo;s also a good practice to use templating engines such as Mustache or Handlebars but let&rsquo;s just stick with appending HTML this time to keep things simple. After that we simply hide the container for joining the chat room so that the user cannot join again.
If the username already exists then we simply <code>alert</code> the user that the username that he inputted already exists, then we re-focus to the username input field to make it easier to input a username again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#join-chat&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#username&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/join_chat&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;username&#39;</span> <span class="o">:</span> <span class="nx">username</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>       
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;ok&#39;</span><span class="p">){</span> <span class="c1">//username doesn&#39;t already exists</span>
</span><span class='line'>              
</span><span class='line'>              <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;update_chatter_count&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;action&#39;</span> <span class="o">:</span> <span class="s1">&#39;increase&#39;</span><span class="p">});</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.chat&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#leave-chat&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#send-message&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/get_messages&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                      
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                      <span class="kd">var</span> <span class="nx">message_count</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                      <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">message_count</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                          <span class="nx">html</span> <span class="o">+=</span> <span class="s2">&quot;&lt;div class=&#39;msg&#39;&gt;&lt;div class=&#39;user&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">response</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;sender&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&lt;div class=&#39;txt&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">response</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;message&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.messages&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">});</span>          
</span><span class='line'>              
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.join-chat&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span> <span class="c1">//hide the container for joining the chat room.</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;failed&#39;</span><span class="p">){</span> <span class="c1">//username already exists</span>
</span><span class='line'>              <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Sorry but the username already exists, please choose another one&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#username&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Leaving the Chat Room</h6>

<p>For the code for leaving the chat room, we simply pass in the <code>username</code> to the server side.
If the response is <code>ok</code> we emit the <code>message</code> event containing an object that contains the <code>username</code> of the user who left the chat room along with a final message which simply says <code>user x has left the chat room</code> so that other users will also know that a specific user has already left. Then we also emit the <code>update_chatter_count</code> event and pass the object which simply tells to every listener to <code>decrease</code> the chatter count. Finally we simply hide the chat container, show the join chat container, empty the username field and alert the user that he has successfully left the chat room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#leave-chat&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/leave_chat&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;username&#39;</span> <span class="o">:</span> <span class="nx">username</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;ok&#39;</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;username&#39;</span> <span class="o">:</span> <span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span> <span class="o">:</span> <span class="nx">username</span> <span class="o">+</span> <span class="s2">&quot; has left the chat room..&quot;</span><span class="p">});</span>
</span><span class='line'>              <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;update_chatter_count&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;action&#39;</span> <span class="o">:</span> <span class="s1">&#39;decrease&#39;</span><span class="p">});</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.chat&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.join-chat&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#username&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;You have successfully left the chat room&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Sending Messages</h6>

<p>Next is the code for sending a message.
Here were passing along the <code>username</code> of the user who sent the message along with his <code>message</code>.
If the response from the server is <code>ok</code> then we simply emit the <code>message</code> event containing an object which contains the username of the sender and his actual message. All the listeners to this event would be able to get this data and do something with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#send-message&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/send_message&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;username&#39;</span> <span class="o">:</span> <span class="nx">username</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;message&#39;</span> <span class="o">:</span> <span class="nx">message</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;ok&#39;</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;username&#39;</span> <span class="o">:</span> <span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;message&#39;</span> <span class="o">:</span> <span class="nx">message</span><span class="p">});</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Updating the UI</h6>

<p>Next is the code for listening to the <code>send</code> event.
This is responsible for updating the UI every time the <code>message</code> event is emitted.
What it does is to simply append another row which contains the sender name and the actual message to the chat box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s2">&quot;&lt;div class=&#39;msg&#39;&gt;&lt;div class=&#39;user&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&lt;div class=&#39;txt&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s2">&quot;&lt;/div&gt;&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.messages&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the code for listening for the <code>count_chatters</code> event. This is responsible for updating the UI every time the <code>update_chatter_count</code> event is emitted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;count_chatters&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">action</span> <span class="o">==</span> <span class="s1">&#39;increase&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chatter_count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">chatter_count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.chat-info&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;There are currently &quot;</span> <span class="o">+</span> <span class="nx">chatter_count</span> <span class="o">+</span> <span class="s2">&quot; people in the chat room&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is what our simple chat application would look like once its done:</p>

<p><img src="http://anchetaWern.github.io/images/posts/realtime_chat_socketio/simple-chat-app.png" alt="Simple Chat Application" /></p>

<h2>Resources</h2>

<ul>
<li><a href="http://nodejs.org/">Node JS</a></li>
<li><a href="http://expressjs.com/">ExpressJS</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/introduction-to-express/">Introduction to Express</a></li>
<li><a href="http://socket.io/">Socket IO</a></li>
<li><a href="http://try.redis.io/">Try Redis</a></li>
<li><a href="http://codertalks.com/long-polling-vs-short-polling/">Long Polling VS Short Polling</a></li>
</ul>


<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to create a simple chat application using NodeJS, ExpressJs, Socket.IO, Redis and jQuery.
As you can see from the code that we&rsquo;ve written its very easy to create real-time applications with these technologies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I use Git as a Solo Developer]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/25/how-i-use-git-as-a-solo-developer/"/>
    <updated>2013-08-25T11:31:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/25/how-i-use-git-as-a-solo-developer</id>
    <content type="html"><![CDATA[<p>Git is a distributed version control system mostly used by software teams to manage and maintain snapshots of their code. It has benefits like avoiding overwriting changes of another member of the team since you have to <code>pull</code> in their changes before you can <code>push</code> your changes. Git automatically merges your changes with the changes made by another member. If Git encounters a problem, for example when the other member in your team has updated the same line that you have updated. Git prompts you to resolve the issue by letting you decide which specific change to commit.</p>

<p>This is all well and good but what about for the solo developer?
In this article I&rsquo;m going to share to you some of the practices that I&rsquo;m observing while working with Git as a solo developer.</p>

<p>In our company, I&rsquo;m currently working on a Wordpress project alone. In the sense that I&rsquo;m the only one whose actually building the project. Here are some of the practices that I&rsquo;m currently observing:</p>

<ul>
<li>Create a branch for every big feature</li>
<li>Commit for every logical update</li>
<li>Commit for every bug fix</li>
<li>Delete feature branch after merging to master</li>
<li>A separate branch for unit testing code</li>
<li>Master branch is for stable code</li>
</ul>


<h3>Create a branch for every big feature</h3>

<p>I create a new branch for every big feature. But how do I determine if something is a big feature or not?
If something actually takes a week or more to code.</p>

<h3>Commit for every logical update</h3>

<p>Once I&rsquo;m done with a specific logical update to the code and I&rsquo;m happy with the changes I commit it.
But what makes a logical update? For me a logical update is a change in the code that can be explained in a single sentence. Here are some examples:</p>

<ul>
<li>add a method for saving images</li>
<li>add an location indicator using Google Maps</li>
<li>update cart code to include an image of the product added to the cart</li>
</ul>


<h3>Commit for every bug fix</h3>

<p>I also commit the code for every bug fix. Here are some examples:</p>

<ul>
<li>fix bug on the form for creating of users</li>
<li>fix bug on creating a new blog post</li>
</ul>


<p>Services like <a href="https://bitbucket.org">Bitbucket</a> makes bug tracking a bit easier since they have integrated an issue tracker along with their DVCS hosting. I can just have a commit message like <code>solved issue #10</code> and the details are already in Bitbucket.</p>

<h3>Delete feature branch after merging to master</h3>

<p>Once I&rsquo;m done with a big feature I merge it to the master branch then delete the feature branch.
I only merge it once I&rsquo;ve thoroughly tested all the possible actions for a specific feature.</p>

<h3>A separate branch for unit testing code</h3>

<p>I also create a separate branch for unit testing code. Unit testing code is not actually a feature but I feel like its huge enough to be on its own separate branch. Once I&rsquo;m done writing the unit testing code I also merge it back to the master branch then delete it.</p>

<h3>Master branch is for stable code</h3>

<p>The master branch is only for stable and thoroughly tested code. This means that when I start development of a project I immediately create a new branch for development and then commit code on it. Once I&rsquo;ve throughly tested the code I then merge it into the master branch.</p>

<p>Those are just some of the practices that I&rsquo;m currently observing when using Git. How about you? What practices do you observe when using Git? Do you also use it as a solo developer?</p>

<h2>Resources</h2>

<ul>
<li><a href="http://sethrobertson.github.io/GitBestPractices/">Git Best Practices</a></li>
<li><a href="http://programmers.stackexchange.com/questions/129407/best-version-control-habits-for-solo-developer">Best Version Control Habits for Solo Developer</a></li>
<li><a href="A%20successful%20git%20branching%20model">http://nvie.com/posts/a-successful-git-branching-model/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Portfolio plugin for Octopress]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/18/introduction-to-portfolio-plugin-for-octopress/"/>
    <updated>2013-08-18T20:19:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/18/introduction-to-portfolio-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to introduce Portfolio, an Octopress plugin that I created for easily creating portfolio pages based on the images on your filesystem.</p>

<p>The portfolio plugin is a liquid tag type of plugin which means that it gives you the ability to use the tag to generate a specific content. In this case the portfolio plugin allows you to generate image tags based on the images in a directory that you specify.</p>

<h3>How to Install</h3>

<p>You can install the portfolio plugin by simply copying the <code>portfolio.rb</code> file into the <code>plugins</code> directory of your Octopress installation.</p>

<h3>How to Setup</h3>

<p>You can setup the plugin by opening up the <code>_config.yml</code> file and specify the root directories in which the plugin will look for the files that it will be using.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>portfolio_root: /portfolio
</span><span class='line'>portfolio_img_root: /images/pages/portfolio
</span><span class='line'>portfolio_path: /web_files/blog/octopress/source/images/pages/portfolio
</span><span class='line'>portfolio_url: images/posts/pages/portfolio</span></code></pre></td></tr></table></div></figure>


<p>The <code>portfolio_root</code> is the name of the directory where your portfolio is saved.
The <code>portfolio_img_root</code> is where the images for your portfolio is saved.
The <code>portfolio_path</code> is the actual path in your filesystem where your portfolio is saved.
And the <code>portfolio_url</code> is the address where you can access your portfolio from the browser.</p>

<p>The plugin doesn&rsquo;t come with a default styling so you have to add them on your own. You can simply hook up to the markup that has been provided,
that is the <code>gallery-item</code> class.
In the example above I gave it a default <code>width</code> and <code>height</code>.
The <code>overflow</code> is set to hidden so that the image that it contains won&rsquo;t overflow.
The <code>margin</code> is <code>10px</code> all around. Lastly, its floated to the left so it would align nicely.
You can add this on the <code>sass/base/_layout.scss</code> file or anywhere you feel would be appropriate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#content</span> <span class="nc">.gallery-item</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">390px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="n">lightgray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a directory where the details of your projects will reside. The ideal location would be in the <code>octopress/source</code> directory. This should be the same as the value of the <code>portfolio_path</code> that you have included in your <code>_config.yml</code> file earlier. Each of your project will have its own directory, so if you have a project named <code>echo</code> then you have to create the following directory: <code>octopress/source/portfolio/echo</code>.</p>

<p>Also create the directory where the images for each of your project will reside. Following the path that we specified earlier we should have the following directory for project <code>echo</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">octopress</span><span class="o">/</span><span class="nt">source</span><span class="o">/</span><span class="nt">images</span><span class="o">/</span><span class="nt">pages</span><span class="o">/</span><span class="nt">portfolio</span><span class="o">/</span><span class="nt">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>echo</code> directory is where you will save your images. If you intend to use lightbox or any other alternative you can simply put <code>small-</code> as a prefix to the name of your image files. The images with this prefix will automatically be used as the initial image and the one without it will be larger image. So if you have an image file named <code>index.png</code> you also need to have <code>small-index.png</code> file. Of course this should also be resized. Having the browser do the resizing for you by setting the width and height of the image using css is not a good idea.</p>

<p>It&rsquo;s also recommended that you run your images through an image optimizer before you actually add them to the directory as Octopress won&rsquo;t optimize it automatically. This is to ensure that your project page will load faster.</p>

<h3>How to Use</h3>

<p>You can use the plugin by using the <code>portfolio</code> liquid tag followed by a single space then the name of your project. Just put on underscores if you need spaces. Also there shouldn&rsquo;t be any special characters. For our imaginary <code>echo</code> project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">portfolio</span> <span class="n">echo</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Resources</h3>

<p><a href="http://jekyllrb.com/docs/plugins/">Jekyll Plugins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Web Scraping in PHP]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php/"/>
    <updated>2013-08-07T17:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to get a specific data from another website but there&rsquo;s no API available for it?
That&rsquo;s where Web Scraping comes in, if the data is not made available by the website we can just scrape it from the website itself.</p>

<!--More-->


<p>But before we dive in let us first define what web scraping is. According to <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia</a>:</p>

<blockquote><p>Web scraping (web harvesting or web data extraction) is a computer software technique of extracting information from websites. Usually, such software programs simulate human exploration of the World Wide Web by either implementing low-level Hypertext Transfer Protocol (HTTP), or embedding a fully-fledged web browser, such as Internet Explorer or Mozilla Firefox.</p></blockquote>


<p>So yes, web scraping lets us extract information from websites.
But the thing is there are some legal issues regarding web scraping.
Some consider it as an act of trespassing to the website where you are scraping the data from.
That&rsquo;s why it is wise to read the terms of service of the specific website that you want to scrape because you might be doing something illegal without knowing it.
You can read more about it in this <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia page</a>.</p>

<h2>Web Scraping Techniques</h2>

<p>There are many techniques in web scraping as mentioned in the Wikipedia page earlier.
But I will only discuss the following:</p>

<ul>
<li>Document Parsing</li>
<li>Regular Expressions</li>
</ul>


<h3>Document Parsing</h3>

<p>Document parsing is the process of converting HTML into DOM (Document Object Model) in which we can traverse through.
Here&rsquo;s an example on how we can scrape data from a public website:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">&#39;http://pokemondb.net/evolution&#39;</span><span class="p">);</span> <span class="c1">//get the html returned from the following url</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$pokemon_doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DOMDocument</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">libxml_use_internal_errors</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span> <span class="c1">//disable libxml errors</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$html</span><span class="p">)){</span> <span class="c1">//if any html is actually returned</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$pokemon_doc</span><span class="o">-&gt;</span><span class="na">loadHTML</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">libxml_clear_errors</span><span class="p">();</span> <span class="c1">//remove errors for yucky html</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$pokemon_xpath</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DOMXPath</span><span class="p">(</span><span class="nv">$pokemon_doc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//get all the h2&#39;s with an id</span>
</span><span class='line'>  <span class="nv">$pokemon_row</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;//h2[@id]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$pokemon_row</span><span class="o">-&gt;</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$pokemon_row</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>          <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">nodeValue</span> <span class="o">.</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>What we did with the code above was to get the html returned from the url of the website that we want to scrape.
In this case the website is <a href="http://pokemondb.net">pokemondb.net</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">&#39;http://pokemondb.net/evolution&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we declare a new DOM Document, this is used for converting the html string returned from <code>file_get_contents</code> into an actual Document Object Model which we can traverse through:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pokemon_doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DOMDocument</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we disable libxml errors so that they won&rsquo;t be outputted on the screen, instead they will be buffered and stored:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">libxml_use_internal_errors</span><span class="p">(</span><span class="k">TRUE</span><span class="p">);</span> <span class="c1">//disable libxml errors</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we check if there&rsquo;s an actual html that has been returned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$html</span><span class="p">)){</span> <span class="c1">//if any html is actually returned</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we use the <code>loadHTML()</code> function from the new instance of <code>DOMDocument</code> that we created earlier to load the html that was returned. Simply use the html that was returned as the argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pokemon_doc</span><span class="o">-&gt;</span><span class="na">loadHTML</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we clear the errors if any. Most of the time yucky html causes these errors. Examples of yucky html are inline styling (style attributes embedded in elements), invalid attributes and invalid elements. Elements and attributes are considered invalid if they are not part of the HTML specification for the doctype used in the specific page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">libxml_clear_errors</span><span class="p">();</span> <span class="c1">//remove errors for yucky html</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we declare a new instance of <code>DOMXpath</code>. This allows us to do some queries with the DOM Document that we created.
This requires an instance of the DOM Document as its argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pokemon_xpath</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DOMXPath</span><span class="p">(</span><span class="nv">$pokemon_doc</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we simply write the query for the specific elements that we want to get. If you have used <a href="http://jquery.com/">jQuery</a> before then this process is similar to what you do when you select elements from the DOM.
What were selecting here is all the h2 tags which has an id, we make the location of the h2 unspecific by using double slashes <code>//</code> right before the element that we want to select. The value of the id also doesn&rsquo;t matter as long as there&rsquo;s an id then it will get selected. The <code>nodeValue</code> attribute contains the text inside the h2 that was selected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//get all the h2&#39;s with an id</span>
</span><span class='line'><span class="nv">$pokemon_row</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;//h2[@id]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$pokemon_row</span><span class="o">-&gt;</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$pokemon_row</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">nodeValue</span> <span class="o">.</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This results to the following text printed out in the screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Generation 1 - Red, Blue, Yellow</span>
</span><span class='line'><span class="x">Generation 2 - Gold, Silver, Crystal</span>
</span><span class='line'><span class="x">Generation 3 - Ruby, Sapphire, Emerald</span>
</span><span class='line'><span class="x">Generation 4 - Diamond, Pearl, Platinum</span>
</span><span class='line'><span class="x">Generation 5 - Black, White, Black 2, White 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s do one more example with the document parsing before we move on to regular expressions.
This time were going to get a list of all pokemons along with their specific type (E.g Fire, Grass, Water).</p>

<p>First let&rsquo;s examine what we have on pokemondb.net/evolution so that we know what particular element to query.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_web_scraping/check.png" alt="checking" /></p>

<p>As you can see from the screenshot, the information that we want to get is contained within a span element with a class of <code>infocard-tall</code>. Yes, the space there is included. When using XPath to query spaces are included if they are present, otherwise it wouldn&rsquo;t work.</p>

<p>Converting what we know into actual query, we come up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">//span[@class=&quot;infocard-tall &quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This selects all the span elements which has a class of <code>infocard-tall</code>. It doesn&rsquo;t matter where in the document the span is because we used the double forward slash before the actual element.</p>

<p>Once were inside the span we have to get to the actual elements which directly contains the data that we want. And that is the name and the type of the pokemon. As you can see from the screenshot below the name of the pokemon is directly contained within an <code>anchor</code> element with a class of <code>ent-name</code>. And the types are stored within a <code>small</code> element with a class of <code>aside</code>.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_web_scraping/info-card.png" alt="info card" /></p>

<p>We can then use that knowledge to come up with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pokemon_list</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$pokemon_and_type</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;//span[@class=&quot;infocard-tall &quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$pokemon_and_type</span><span class="o">-&gt;</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>   
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//loop through all the pokemons</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$pokemon_and_type</span> <span class="k">as</span> <span class="nv">$pat</span><span class="p">){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//get the name of the pokemon</span>
</span><span class='line'>      <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;a[@class=&quot;ent-name&quot;]&#39;</span><span class="p">,</span> <span class="nv">$pat</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">item</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">nodeValue</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$pkmn_types</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span> <span class="c1">//reset $pkmn_types for each pokemon</span>
</span><span class='line'>      <span class="nv">$types</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;small[@class=&quot;aside&quot;]/a&#39;</span><span class="p">,</span> <span class="nv">$pat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//loop through all the types and store them in the $pkmn_types array</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$types</span> <span class="k">as</span> <span class="nv">$type</span><span class="p">){</span>
</span><span class='line'>          <span class="nv">$pkmn_types</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$type</span><span class="o">-&gt;</span><span class="na">nodeValue</span><span class="p">;</span> <span class="c1">//the pokemon type</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//store the data in the $pokemon_list array</span>
</span><span class='line'>      <span class="nv">$pokemon_list</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span> <span class="s1">&#39;types&#39;</span> <span class="o">=&gt;</span> <span class="nv">$pkmn_types</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//output what we have</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nv">$pokemon_list</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s nothing new with the code that we have above except for using query inside the <code>foreach</code> loop.
We use this particular line of code to get the name of the pokemon, you might notice that we specified a second argument when we used the <code>query</code> method. The second argument is the current row, we use it to specify the scope of the query. This means that were limiting the scope of the query to that of the current row.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="nv">$pokemon_xpath</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s1">&#39;a[@class=&quot;ent-name&quot;]&#39;</span><span class="p">,</span> <span class="nv">$pat</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">item</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">nodeValue</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The results would be something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [0] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [name] =&gt; Bulbasaur</span>
</span><span class='line'><span class="x">            [types] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Grass</span>
</span><span class='line'><span class="x">                    [1] =&gt; Poison</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'><span class="x">        )</span>
</span><span class='line'><span class="x">    [1] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [name] =&gt; Ivysaur</span>
</span><span class='line'><span class="x">            [types] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Grass</span>
</span><span class='line'><span class="x">                    [1] =&gt; Poison</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'><span class="x">        )</span>
</span><span class='line'><span class="x">    [2] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [name] =&gt; Venusaur</span>
</span><span class='line'><span class="x">            [types] =&gt; Array</span>
</span><span class='line'><span class="x">                (</span>
</span><span class='line'><span class="x">                    [0] =&gt; Grass</span>
</span><span class='line'><span class="x">                    [1] =&gt; Poison</span>
</span><span class='line'><span class="x">                )</span>
</span><span class='line'><span class="x">        )</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Regular Expressions</h3>

<p>Aside from document parsing we can also use regular expressions to scrape the data that we want from a specific webpage.
Regular expressions are useful if we only want to scrape actual content and not HTML elements because its difficult if not impossible to match all the possibilities of how an HTML element might have been written.
Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;/&gt;</span>
</span><span class='line'><span class="x">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;link type=&quot;text/css&quot; href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;link type=&quot;text/css&quot; href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;link type=&quot;text/css&quot; href=&quot;style.css&quot; rel=&quot;stylesheet&quot;/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above is basically the same thing written in a bunch of ways. It would be difficult to scrape all the external stylesheets in a page using regular expressions as we would need to target every possible way that it can be written. So instead of using regular expressions we use document parsing to get all the external stylesheets. This is just one of the many cases in which regular expressions can&rsquo;t be used in scraping.</p>

<p>The main advantage of using regular expressions is its speed. The whole process of converting an HTML document into DOM and then traversing the DOM takes time especially if there are lots of elements which matches the query that you specify.
This is not the case with regular expressions as you&rsquo;re only working with strings and patterns with it, no conversion and traversing takes place so its very fast.</p>

<p>Ok enough with the explanations, here&rsquo;s an example on how to use regular expressions in scraping.
Here we are specifically looking for URL&rsquo;s which begins with <code>https://safelinking.net/</code> and followed by any instances of letters from A to Z and its lowercase version or any instances of numbers. Remember that we need to escape forward slashes and periods using a backslash. We then use the <code>preg_match_all()</code> function to get all the matches of the specific pattern that were looking for. The <code>preg_match_all()</code> function takes the pattern as its first argument, then the actual string where we want to find the pattern as its second argument, then the third argument would be the variable that will store the actual matches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pokemon_episodes_html</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">&#39;http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/https:\/\/safelinking\.net\/d\/[A-Za-z0-9]*/&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">preg_match_all</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$pokemon_episodes_html</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;pre&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$matches</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will output the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Array</span>
</span><span class='line'><span class="x">(</span>
</span><span class='line'><span class="x">    [0] =&gt; Array</span>
</span><span class='line'><span class="x">        (</span>
</span><span class='line'><span class="x">            [0] =&gt; https://safelinking.net/d/81b681a76a</span>
</span><span class='line'><span class="x">            [1] =&gt; https://safelinking.net/d/04138fdd24</span>
</span><span class='line'><span class="x">            [2] =&gt; https://safelinking.net/d/7378613026</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Web Scraping Tools</h2>

<p>You can also use some web scraping tools to make your life easier. Here are some of the PHP libraries that you can use for scraping.</p>

<h3>Simple HTML Dom</h3>

<p>To make web scraping easier you can use libraries such as <a href="http://simplehtmldom.sourceforge.net/">simple html DOM</a>.
Here&rsquo;s an example of getting the names of the pokemon using simple html DOM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;libs/simple_html_dom.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nx">file_get_html</span><span class="p">(</span><span class="s1">&#39;http://pokemondb.net/evolution&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$html</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;a[class=ent-name]&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$element</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$element</span><span class="o">-&gt;</span><span class="na">innertext</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span> <span class="c1">//outputs bulbasaur, ivysaur, etc...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax is more simple so the code that you have to write is lesser plus there are also some convenience functions and attributes which you can use. An example is the plaintext attribute which extracts all the text from a web page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">file_get_html</span><span class="p">(</span><span class="s1">&#39;http://pokemondb.net/evolution&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">plaintext</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ganon</h3>

<p>You can also use <a href="https://code.google.com/p/ganon/">ganon</a> for web scraping which packs features such as support for html5, jQuery like syntax, manipulation of elements and their attributes.</p>

<p>Here&rsquo;s an example on how to use ganon to get all the images that are in a table element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;libs/ganon.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nx">file_get_dom</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$html</span><span class="p">)){</span>
</span><span class='line'>  <span class="nv">$elements</span> <span class="o">=</span> <span class="nv">$html</span><span class="p">(</span><span class="s1">&#39;table img&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$elements</span> <span class="k">as</span> <span class="nv">$element</span><span class="p">){</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$element</span><span class="o">-&gt;</span><span class="na">src</span> <span class="o">.</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">;</span> <span class="c1">//output the image source</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial! You have learned the basics of web scraping in PHP.
You can take your adventures to the next level by scraping non-public parts of websites or scraping content that is dynamically generated.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://blog.hartleybrody.com/web-scraping/">I don&rsquo;t need no stinking API: Web Scraping for fun and profit</a></li>
<li><a href="http://blog.webspecies.co.uk/2011-07-27/web-scrapping-is-actually-pretty-easy.html">Web scraping is actually pretty easy</a></li>
<li><a href="https://news.ycombinator.com/item?id=4893922">Web scraping or API</a></li>
<li><a href="http://curl.haxx.se/">Curl</a></li>
<li><a href="http://simplehtmldom.sourceforge.net/">Simple HTML Dom</a></li>
<li><a href="https://code.google.com/p/ganon/">Ganon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Linux Development Environment]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/07/13/my-linux-development-environment/"/>
    <updated>2013-07-13T21:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/07/13/my-linux-development-environment</id>
    <content type="html"><![CDATA[<p>A few months ago I shared some of the <a href="http://anchetawern.github.io/blog/2013/05/19/my-windows-development-environment/">development tools that I use in Windows</a>. This time I&rsquo;m going to share some of the tools that I use for developing in Linux.</p>

<!--More-->


<h2>Curl</h2>

<p>Curl is a command line tool for getting resources from the internet. I commonly use it for installing other command line tools such as <code>composer</code> and testing access for different API&rsquo;s directly from the command line.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install libcurl3 php5-curl</span></code></pre></td></tr></table></div></figure>


<h3>Sample Usage</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<h2>Node JS</h2>

<p>Node JS is basically server-side JavaScript. I don&rsquo;t currently use Node.js for my projects but I use it for installing NPM packages such as <code>grunt</code> and <code>bower</code>. NPM is short for Node Package Manager just like <code>apt-get</code> for Ubuntu you can use it for installing different command line tools. What&rsquo;s cool is that you don&rsquo;t really have to be using Node JS in order to make use of the awesomeness that&rsquo;s offered by NPM since most of the packages that are available from NPM aren&rsquo;t necessarily tools that are exclusive to be used for developing Node JS applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-software-properties python g++ make
</span><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<h3>Sample Usage</h3>

<p>You can install packages from the terminal using the <code>npm install</code> command. You can use the <code>-g</code> option to install the package globally, meaning you can directly use the commands available for the specific package that you installed from any terminal Window.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g grunt-cli</span></code></pre></td></tr></table></div></figure>


<h2>Ruby</h2>

<p>I&rsquo;m not really into Ruby (not yet). I mainly install it because its required by Octopress which is the platform that I use for blogging.</p>

<h3>How to Install</h3>

<p>The easiest way to install Ruby is by using <a href="https://rvm.io/">RVM</a>, a command line tool that was specifically created to install, manage and work with multiple ruby environments.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>If RVM doesn&rsquo;t work for you you can also try <a href="https://github.com/scottmuc/yari">YARI</a> (short for Yet Another Ruby Installer).</p>

<h2>Composer</h2>

<p>Composer is a package manager for PHP. Much like <code>PEAR</code> but <code>PEAR</code> is already old school so composer is the way to go if you want to easily install PHP packages directly from the command line.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php
</span><span class='line'>sudo mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<h2>Git</h2>

<p>Git is a distributed version control system. I mainly use it for maintaining sane snapshots of the applications that I develop. But its also useful for cloning existing tools directly into your machine.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:pdoes/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install git-core</span></code></pre></td></tr></table></div></figure>


<h2>Apache</h2>

<p>Apache is the Web server that I use for serving the PHP applications that I create.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<h2>PHP</h2>

<p>PHP is the main language that I use for developing web applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5
</span><span class='line'>sudo apt-get install libapache2-mod-php5</span></code></pre></td></tr></table></div></figure>


<h2>MySQL</h2>

<p>MySQL is the database management system that I use with PHP developing dynamic applications.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>sudo apt-get install php5-mysql</span></code></pre></td></tr></table></div></figure>


<h2>Octopress</h2>

<p>Octopress is the platform that I use for blogging. But aside from that it also installs a bunch of tools that I use for developing web applications (haml, sass, compass, etc.) so I&rsquo;m hitting 2 birds with one stone when I install Octopress.</p>

<h3>How to Install</h3>

<p>Octopress requires <code>Ruby 1.9.3</code> so you must install that one first. After that you can execute the following commands to install Octopress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>Sublime Text</h2>

<p>Sublime Text is the text editor that I use since its very extensible because of the <a href="http://wbond.net/sublime_packages/package_control">package control</a>.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo pt-get install sublime-text</span></code></pre></td></tr></table></div></figure>


<h3>Sublime Text Plugins</h3>

<ul>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a></li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a></li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees Color Schemes</a></li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">DocBlockr</a></li>
<li><a href="http://emmet.io/">Emmet</a></li>
<li><a href="https://github.com/welovewordpress/SublimePhpTidy">PHPTidy</a></li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">SidebarEnhancements</a></li>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCs</a></li>
</ul>


<h2>Koala</h2>

<p>Koala is a tool for automatically compiling and minifying less, sass, coffeescript, and compass files.</p>

<h3>How to Install</h3>

<p>You can install it by downloading directly from the website: <a href="http://koala-app.com/">koala-app</a>.
If you&rsquo;re having an issue with launching the app you can install <code>libudev 0</code>:</p>

<ul>
<li><a href="https://launchpad.net/ubuntu/+source/udev/175-0ubuntu19/+build/4325790/+files/libudev0_175-0ubuntu19_i386.deb">libudev 0 for 32bit</a></li>
<li><a href="https://launchpad.net/ubuntu/+source/udev/175-0ubuntu19/+build/4325788/+files/libudev0_175-0ubuntu19_amd64.deb">libudev 0 for 64bit</a></li>
</ul>


<h2>Chromium</h2>

<p>Chromium is the alternative for Google&rsquo;s Chrome browser in Linux. What&rsquo;s great about it is that it still has the Chrome Developers tools and you can also install some of the extensions that you already install on Chrome. You can install Chromium directly from the Ubuntu Software Center.
Here are some of the extensions that I usually install on Chromium to aid in my development:</p>

<ul>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/axure-rp-extension-for-ch/dogkpdfcklifaemcdfbildhcofnopogp?hl=en">Axure RP Extension</a></strong> &ndash; useful for viewing RP Prototypes directly from the browser</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">PageSpeed Insights</a></strong> &ndash; an extension from Google which gives you some suggestions regarding what you can do to improve the performance of the website that you&rsquo;re developing.</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko?hl=en">Session Buddy</a></strong> &ndash; I usually use this to create a snapshot of my current browser session so that I can always go back to them at a later time.</p></li>
<li><p><strong><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm?hl=en">Web Developer</a></strong> &ndash; this extension adds a bunch of web developer tools to Chromium such as tools for validating HTML and CSS, displaying ARIA roles (useful for website accessibility purposes), and displaying the current browser size (useful for targeting a specific breakpoint when you&rsquo;re doing responsive design).</p></li>
</ul>


<h2>Filezilla</h2>

<p>Filezilla is an FTP client that I use for accessing the files for the websites that I work on. You can install it directly from the Ubuntu Software Center.</p>

<h2>Everpad</h2>

<p>My Evernote client of choice for Ubuntu. This is where I write all my todos for each day. Once I&rsquo;m done with a specific task I put a strikethrough in the list item to indicate that its already done.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:nvbn-rm/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install everpad</span></code></pre></td></tr></table></div></figure>


<h3>Apt-Fast</h3>

<p>I use <code>apt-fast</code> as a replacement for <code>apt-get</code> for downloading and installing packages in Ubuntu. <code>apt-fast</code> is like <code>apt-get</code> on roller blades in that its very fast in downloading packages. You can use it by simply replacing the usual <code>apt-get</code> with <code>apt-fast</code>.</p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:apt-fast/stable
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apt-fast</span></code></pre></td></tr></table></div></figure>


<h2>Virtualbox</h2>

<p>Virtualbox is an open-source OS virtualization application which you can use to install and use different Operating Systems right inside Ubuntu. Its very useful for when you need to use an application that&rsquo;s not available on Ubuntu (E.g. IE 9 and 10). You can install Virtualbox via the Ubuntu Software Center.</p>

<h2>Skype</h2>

<p>Skype is the instant messaging application that I use for collaborating with co-employees since I&rsquo;m working remotely. As of the time of writing Skype is available for Ubuntu 10.04 32-bit on the <a href="http://www.skype.com/en/download-skype/skype-for-computer/">Skype website</a> but you can also install it on higher versions of Ubuntu.</p>

<h2>Dropbox</h2>

<p>Dropbox is the application that I use for easily sharing files. I mostly use it for work when I have to share a screenshot or a text file. I use it over Skype file sharing because the receiver doesn&rsquo;t have to download the file on their machine just to view it. With Dropbox I can simply share the link via Skype and the receiver can simply open it up on their browser. You can install Dropbox directly from the Ubuntu Software Center.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spatial search with Apache Solr and Google Maps]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps/"/>
    <updated>2013-07-03T21:33:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how to setup spatial search in Apache Solr then were going to create an application which uses Spatial searching with the use of Google Maps.</p>

<!--More-->


<h2>What is Spatial Searching?</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Geomatics">Wikipedia</a>:</p>

<blockquote><p>Geospatial technology or geomatics engineering is the discipline of gathering, storing, processing, and delivering geographic information, or spatially referenced information.</p></blockquote>


<p>For the purposes of this tutorial were going to use Spatial search to find the locations which are near the place that we specify.</p>

<h2>Configure schema.xml File</h2>

<p>First you need to configure the <code>schema.xml</code> to include a special field type called location. This field type is specifically used for geospatial searching. Depending on the Solr version that you&rsquo;re running on your machine it may or may not already be included on the default <code>schema.xml</code> file. But in case its not already included, here&rsquo;s what you have to add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;location&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.LatLonType&quot;</span> <span class="na">subFieldType=</span><span class="s">&quot;tdouble&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can create a dynamic field that would use that specific field type by simply supplying the value for the <code>type</code> attribute to be <code>location</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;locm_*&quot;</span> <span class="na">type=</span><span class="s">&quot;location&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that you can now declare fields which will use the dynamic field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;locm_places&quot;</span><span class="nt">&gt;</span>12.3456,-987.65<span class="nt">&lt;/field&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the example above, you can use dynamic fields by using the its name as the prefix for any field. In this case the prefix that we used is <code>locm_</code>. On the dynamic field declaration earlier we used the star <code>*</code> to tell to Solr that any field which uses the strings before the star will be using the attributes for this dynamic field.</p>

<h2>Geocoding</h2>

<p>We need actual coordinates as our data-source for the project that were going to build later on so were going to use the Google Geocoding API to convert places into coordinates. I&rsquo;m just going to use some places in my town as an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$places</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;San Fernando (La Union) Fire Station, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;San Fernando (La Union) PNR&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Catbangen Central School, Gualberto Street, San Fernando City, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Don Mariano Marcos Memorial State University, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;TESDA Regional Training Center, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Lorma Colleges, San Fernando City, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;marcos building san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;CICOSAT Medical Hospital, MacArthur Highway, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Gifted Learning Center, Gov. Nisce Street, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Union Christian College, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;High Altitude Discotheque, Aguila Road, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Bethany Hospital, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sea and sky college san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Chowking, Gov. Luna Street, San Fernando City, Region I, Philippines&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;saint williams cathedral san fernando la union&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ilocanos norte community school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zaragosa elementary school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;bacnotan national highschool&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;busel-busel elementary school&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;luna public cemetery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;paratong elementary school&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If you want you can also use places in your town. Just make sure you check it with the Google Geocoding API first so that you know that it actually returns something. You can just paste the following URL in your browser&rsquo;s address bar and replace <code>SOME_PLACE_THAT_YOU_KNOW</code> with an actual place that you know, well-known and highly accessible places in your town is a great choice since there will be a greater chance that its already been geocoded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://maps.googleapis.com/maps/api/geocode/json?address=SOME_PLACE_THAT_YOU_KNOW&amp;sensor=false</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>It&#8217;s important that you set the sensor to false since were not actually using a device with a location sensor (GPS locator) in this application.</p></blockquote>


<p>Next we use the Google Geocoding API to convert the places that we specified earlier into a coordinate (latitude and longitude). Here were simply extracting the data returned from the Google Geocoding API for each of the places then storing it in a variable called <code>$data</code>. Then we convert it back to a JSON string using the <code>json_encode()</code> method.</p>

<blockquote><p>Id is a required attribute for documents indexed in Solr so we have to generate a unique ID for each of the places that were going to add. Also remember to use dynamic fields that are already available from the schema.xml file in Solr. In this case were using the dynamic field ss_* which has a data type of string to store the name of the place, and the dynamic field locm_* to store the coordinates of the place.</p></blockquote>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://maps.googleapis.com/maps/api/geocode/json?address=place&amp;sensor=false&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$id_prefix</span> <span class="o">=</span> <span class="s1">&#39;SUPER&#39;</span><span class="p">;</span> <span class="c1">//it&#39;s a good idea to prefix your Solr ID&#39;s just to make sure it won&#39;t have the same id as something that already exists</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$places</span> <span class="k">as</span> <span class="nv">$i</span> <span class="o">=&gt;</span> <span class="nv">$place</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$request_url</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;place&#39;</span><span class="p">,</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$place</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$url</span><span class="p">);</span> <span class="c1">//replace the place string in the url with the urlencoded address</span>
</span><span class='line'>  <span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$request_url</span><span class="p">);</span> <span class="c1">//make the actual request to the google geocoding api</span>
</span><span class='line'>  <span class="nv">$results</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span> <span class="c1">//google geocoding api returns a JSON string so we have to use json_decode() to convert it to an array</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$data</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$id_prefix</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ss_place&#39;</span> <span class="o">=&gt;</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">address_components</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">short_name</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;locm_lat&#39;</span> <span class="o">=&gt;</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">geometry</span><span class="o">-&gt;</span><span class="na">location</span><span class="o">-&gt;</span><span class="na">lat</span> <span class="o">.</span> <span class="s1">&#39;,&#39;</span> <span class="o">.</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">geometry</span><span class="o">-&gt;</span><span class="na">location</span><span class="o">-&gt;</span><span class="na">lng</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$doc</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span> <span class="c1">//convert the data to a json string</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next make the request to the Solr server to update the index using <code>curl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$solr_update_url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/update/json&#39;</span><span class="p">;</span> <span class="c1">//the url for updating the solr index using a json document</span>
</span><span class='line'><span class="nv">$solr_commit_url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/update?commit=true&#39;</span><span class="p">;</span> <span class="c1">//the url for commiting the updates</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//specify that we want to return the response so we can store it in a variable</span>
</span><span class='line'>    <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Content-type:application/json&quot;</span><span class="p">),</span> <span class="c1">//header type</span>
</span><span class='line'>    <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="nv">$solr_update_url</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CURLOPT_POST</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//specify that we want to post a data</span>
</span><span class='line'>    <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nv">$doc</span><span class="p">,</span> <span class="c1">//the data that we want to post</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$update_response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//commit the changes to SOLR</span>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="nv">$solr_commit_url</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$commit_response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>Building the Application</h2>

<p>Now for the fun part, let&rsquo;s start building the application. You&rsquo;re going to need to download and link up the following resources if you want to follow along:</p>

<ul>
<li>jQuery</li>
<li>jQuery UI (Use the custom builder to only include the dependencies of jQuery UI slider and the Slider itself)</li>
<li>Google Maps API Key (you&rsquo;re going to need a Google Account, just access the <a href="http://code.google.com/apis/console">Google Console</a> and activate the Google Maps API)</li>
</ul>


<p>The application that were going to build is simple, were just going to need a text field in which the user will input the base location, then a slider to adjust the distance. The markers that points out the nearby places which matches the current distance will automatically be updated once the user moves the slider.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;jquery-ui/css/ui-lightness/jquery-ui-1.10.3.custom.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&quot;http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&amp;sensor=false&amp;libraries=places&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;location&quot;</span><span class="nt">&gt;</span>Location:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;location&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;slider&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map-canvas&quot;</span><span class="nt">&gt;&lt;/div&gt;</span><span class="c">&lt;!--the container of the map--&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jquery-ui/js/jquery-ui-1.10.3.custom.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then on the <code>style.css</code> file sprinkle some css that will make the presentation slightly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#map-canvas</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">90</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#slider</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then on the <code>script.js</code> file add the code that will set the default map options. Were just going to make everything global so we can access them from anywhere.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">loc</span><span class="p">;</span> <span class="c1">//this will store information about the current base location selected by the user</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">markers_array</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">//this will store an array of the markers that were created</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the map options</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">map_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">center</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="mf">16.61096000671</span><span class="p">,</span> <span class="mf">120.31346130371</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">zoom</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span> <span class="c1">//set zoom level to 17 </span>
</span><span class='line'>    <span class="nx">mapTypeId</span><span class="o">:</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span> <span class="c1">//set map type to road map</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//layout the map in the page</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map-canvas&quot;</span><span class="p">),</span> <span class="nx">map_options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">homeLatlng</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="mf">18.35827827454</span><span class="p">,</span> <span class="mf">121.63744354248</span><span class="p">);</span> <span class="c1">//set the base coordinate</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the marker for the base coordinate</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">homeMarker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">position</span><span class="o">:</span> <span class="nx">homeLatlng</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">draggable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//get the text field which the user will use to search for a base location</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;location&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">places</span><span class="p">.</span><span class="nx">Autocomplete</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span> <span class="c1">//google maps autocomplete</span>
</span><span class='line'>
</span><span class='line'><span class="nx">autocomplete</span><span class="p">.</span><span class="nx">bindTo</span><span class="p">(</span><span class="s1">&#39;bounds&#39;</span><span class="p">,</span> <span class="nx">map</span><span class="p">);</span> <span class="c1">//bind the selected place in the autocomplete text field to the map</span>
</span><span class='line'>      
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> executed when a place is selected from the search bar</span>
</span><span class='line'><span class="cm"> this will automatically adjust the map settings to display the place that was entered in the text field</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">autocomplete</span><span class="p">,</span> <span class="s1">&#39;place_changed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">place</span> <span class="o">=</span> <span class="nx">autocomplete</span><span class="p">.</span><span class="nx">getPlace</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//if the selected location has a geometry then show it on the map</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">fitBounds</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">viewport</span><span class="p">);</span> <span class="c1">//automatically adjust the display on the viewport</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setCenter</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span> <span class="c1">//if the location doesn&#39;t have a geometry, use the location</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">setZoom</span><span class="p">(</span><span class="mi">17</span><span class="p">);</span> <span class="c1">//set the zoom level to 17</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">homeMarker</span><span class="p">.</span><span class="nx">setMap</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span> <span class="c1">//place the marker in the map</span>
</span><span class='line'>    <span class="nx">homeMarker</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">);</span> <span class="c1">//set the position of the marker based on the selected location</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//update the global variable which stores the current location</span>
</span><span class='line'>    <span class="nx">loc</span> <span class="o">=</span> <span class="nx">place</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a method to clear the markers, this will be used to clear the markers every time the distance is updated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clear_markers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">markers_array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">markers_array</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setMap</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the code for when the user moves the slider, were going to bind it to a text field so the actual value is visible to the user. The value will have a unit of kilometers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#slider&quot;</span><span class="p">).</span><span class="nx">slider</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">slide</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">clear_markers</span><span class="p">();</span> <span class="c1">//clear all the markers that are currently in the map</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="c1">//the selected distance</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get the latitude and longitude from the location that we updated  earlier</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">coordinate</span> <span class="o">=</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">lat</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">loc</span><span class="p">.</span><span class="nx">lng</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//create the object which will store the data that were going to pass through solr</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;coordinate&#39;</span> <span class="o">:</span> <span class="nx">coordinate</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;distance&#39;</span> <span class="o">:</span> <span class="nx">distance</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#distance&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">distance</span><span class="p">);</span> <span class="c1">//update the text field which shows the current distance</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//make the request</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://my.dev/tester/geocoding/get_nearby_places.php&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span> <span class="c1">//convert the JSON string to a JavaScript object</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">results</span><span class="p">.</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">places</span> <span class="o">=</span> <span class="nx">results</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">docs</span><span class="p">;</span> <span class="c1">//the actual places that were returned by solr</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">place_count</span> <span class="o">=</span> <span class="nx">places</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">markers</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//loop through all the places that were returned</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">place_count</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">coordinate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">places</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="s1">&#39;locm_lat&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span> <span class="c1">//convert the string to an array</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">coordinate</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">coordinate</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//create the marker which points out the nearby places</span>
</span><span class='line'>          <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">position</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//push the marker to the array which stores the markers so we can clear them later</span>
</span><span class='line'>          <span class="c1">//when user moves the slider again</span>
</span><span class='line'>          <span class="nx">markers_array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">marker</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, add the code which will make the query to the Solr server to get the places which are near to the selected location. What were doing here is constructing the URL needed to make the request to the solr server, then getting the actual response that was returned and then outputting it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//the url for querying solr, 8080 is the port where solr is running</span>
</span><span class='line'><span class="nv">$url</span>  <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&amp;fq=&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the string that we need to replace in the query</span>
</span><span class='line'><span class="nv">$search</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;BASE_COORDINATE&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;DISTANCE&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the string that were going to use as a query</span>
</span><span class='line'><span class="nv">$replace</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;coordinate&#39;</span><span class="p">],</span> <span class="c1">//the latitude and longitude pair (eg. 123.111,456.233)</span>
</span><span class='line'>  <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="c1">//the selected distance</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//replace the placeholder text with the input supplied by the user then encode the part of the url which has the query</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">.=</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="nv">$search</span><span class="p">,</span> <span class="nv">$replace</span><span class="p">,</span> <span class="s1">&#39;{!geofilt pt=BASE_COORDINATE sfield=locm_lat d=DISTANCE}&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">.=</span> <span class="s1">&#39;&amp;wt=json&#39;</span><span class="p">;</span> <span class="c1">//set the response type to json</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span> <span class="c1">//get the json string returned from the query</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$response</span><span class="p">;</span> <span class="c1">//output the json string</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The output will look like this:</p>

<p><img src="http://anchetaWern.github.io/images/posts/spatial_search_with_apache_solr_and_google_maps/output.PNG" alt="asana" /></p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial, you&rsquo;ve learned how to use Solr&rsquo;s spatial search with Google Maps.
You can further improve the application that we just built. For example, you can make a distinction to the marker for the selected location by giving it a different color or icon since the marker for that is currently the same with the markers for locations which are near the selected location. You can also add filters, for example only show nearby restaurants to the location that you selected.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://wiki.apache.org/solr/SpatialSearch">Solr Spatial Search</a></li>
<li><a href="https://developers.google.com/maps/">Google Maps API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Apache Solr]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/06/15/getting-started-with-solr/"/>
    <updated>2013-06-15T12:35:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/06/15/getting-started-with-solr</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;ll be looking at Apache Solr.
Apache Solr is a search server. Its features include blazing fast searches, faceted search, handling of files such as PDF and Word.</p>

<!--More-->


<h2>Installing Solr</h2>

<p>If you&rsquo;re on Windows you can install Solr by getting the installer from <a href="http://bitnami.com/stacks">BitNami</a>.
Just search for Solr, download the installer and install it on your machine.</p>

<h2>Solr Manager</h2>

<p>After the installation is complete you can now access the Solr Manager where you can Start, Stop or Restart the server.
If its not started yet click on the start button.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/solr_manager.PNG" alt="solr manager" /></p>

<h2>Solr Admin</h2>

<p>To test if Solr is working, access the Solr admin page from your browser. For me its at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost:8080/solr/#/</span></code></pre></td></tr></table></div></figure>


<p>The port depends on what port you have selected when you installed Solr.
If you&rsquo;re using Virtual hosts you can also access the Solr admin page using it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://my.dev:8080/solr</span></code></pre></td></tr></table></div></figure>


<p>The Solr admin page currently looks like this. I&rsquo;m running version 4.3.0. It might look a little bit different if you have installed a different version:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/solr_admin.PNG" alt="solr admin" /></p>

<p>There&rsquo;s not really much that you can do with the Solr admin page.
The only parts that you might want to look at is the Logging and Core Selector.</p>

<p>The logging is where you can find warnings and errors with regards to the whole runtime of the Server.
The core selector is where you can select the collection that you want to manage.
Upon installation Solr already creates a default collection called <code>collection1</code>.
Any documents that you add will be automatically added to this collection.
That said, you can think of collections as drawers in which you store your documents.
In database terms they are like your database and the documents that you store on it are like the tables in a database.
Throughout this tutorial we&rsquo;ll only be working with the <code>collection1</code> collection.</p>

<h3>Overview</h3>

<p>Once you have selected a collection you can see an overview of it by clicking on the overview tab:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/overview.PNG" alt="collection overview" /></p>

<p>Information like the date the collection was last modified, number of documents, maximum number of documents, deleted documents can be seen from this page.</p>

<h3>Query</h3>

<p>The query tab is where you can play with some queries to manipulate the current collection. The default query is the select query which simply returns results which matches your query.
There&rsquo;s also the update query which is mainly used to update the contents of documents.</p>

<blockquote><p>Note that when using the select query in Solr you don&#8217;t usually specify the document in which the results that you&#8217;re looking for is stored. Solr simply knows where to find what you&#8217;re looking for without telling it where to find something.</p></blockquote>


<p>To use the query builder you simply need to specify what you&rsquo;re looking for.</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_solr/query_json.PNG" alt="query json" /></p>

<p>Here are some of the parameters that you can specify:</p>

<ul>
<li><strong>request handler</strong> &ndash; the action that you want Solr to do. The most common ones are <code>select</code> and <code>update</code>.
You can also create your own request handlers but that would be best discuss on another article.</li>
<li><strong>q</strong> &ndash; your query. Its common format is:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>field name:"query"</span></code></pre></td></tr></table></div></figure>


<p>So imagine we have added a document into Solr which composed of book names and their authors. If you want to get all the books whose title begins with the word &lsquo;national&rsquo; then here&rsquo;s what your query would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>q=book_title:"national*"</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>fq</strong> &ndash; short for filter query. If you want to filter the results returned by your query you can make use of this parameter. For example, if you want to select only the books which has a price within the range of 19 to 90 you do something like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fq=price:[19 TO 90]</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>sort</strong> &ndash; sort is how you would like the results to be sorted. So if you want to sort the results by price in ascending order, that is books with lower price comes first and books with higher prices comes later. You do something like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sort=price asc</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>fl</strong> &ndash; short for fields. This is the parameter where you can specify the fields that you want to return. So for example if you only want to return the book title and the price of the book you do something like:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fl=book_title,price</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>wt</strong> &ndash; short for writer type, but that doesn&rsquo;t make any sense so we&rsquo;ll go by the name response type. This allows you to specify the way the results will be formatted. In solr you can have one of the following:</p>

<ul>
<li>json</li>
<li>xml</li>
<li>php</li>
<li>ruby</li>
<li>python</li>
<li>csv</li>
</ul>
</li>
</ul>


<p>The default one used by Solr is <code>xml</code>. But the most commonly used is <code>json</code> since you can simply convert it to a data readable by php, ruby, python, javascript or probably any language that you can think of.</p>

<h3>Schema</h3>

<p>The schema tab is where the <code>schema.xml</code> file can be previewed in a nicely formatted way (with all the syntax highlighting goodness). The <code>schema.xml</code> file simply describes the fields for each collection. If you have worked with MySql database for a while this is like the <code>information_schema</code> database which shows you all the information you want to know about each of the databases, tables and fields in MySql.
But for the <code>schema.xml</code> file it only contains information about a specific collection. So each collection have its own <code>schema.xml</code> file. The <code>schema.xml</code> file is stored in the following directory for <code>collection1</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\solr\collection1\schema.xml</span></code></pre></td></tr></table></div></figure>


<p>The <code>schema.xml</code> file contains a lot of information regarding the data stored in a collection. You can add new fields and field types into this file so that Solr will know what type of data the specific documents will store.
Fields in Solr comes in 2 forms:</p>

<ul>
<li><strong>Fields</strong> &ndash; allows you to specify field names that will directly match what field names you include in the documents that you want to add to Solr. Here&rsquo;s how to define a field that will store book titles:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fields commonly has 5 attributes which you can specify:</p>

<ul>
<li><p><strong>name</strong> &ndash; the name that you want to give to the field. This would be the same as the naming conventions for every database system or programming language that you can think of. So numbers and symbols can&rsquo;t be used as the start of a field name. Only alphanumeric characters and underscores are allowed for the field name.</p></li>
<li><p><strong>type</strong> &ndash; the type of data that the field will store. Common data types are: <code>float</code>, <code>long</code>, <code>short</code>, <code>double</code>, <code>string</code>, <code>date</code> and <code>text</code>.</p></li>
<li><p><strong>indexed</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. If you do not want the specific field to be searched you can use <code>false</code>. Using <code>false</code> simply means that using the specific field in a query won&rsquo;t return anything since it can&rsquo;t be searched on.</p></li>
<li><p><strong>stored</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. Use <code>false</code> if you do not want the field to be retrievable.</p></li>
<li><p><strong>multivalued</strong> &ndash; can either have a value of <code>true</code> or <code>false</code>. You use <code>true</code> if the field contains more than one value. For example a tag for a specific blog post. A blog post can have many tags so the tag field should have its <code>multivalued</code> attribute set to <code>true</code>.</p></li>
<li><p><strong>Dynamic Fields</strong> &ndash; allows you to specify a common data type, indexed, and stored value for fields which has a specific suffix. Here&rsquo;s how to define a dynamic field for fields which has integer and string data types:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_i&quot;</span>  <span class="na">type=</span><span class="s">&quot;int&quot;</span>    <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_s&quot;</span>  <span class="na">type=</span><span class="s">&quot;string&quot;</span>  <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also add copy fields which are used for copying one document to another when a document is added in the Solr index. It can be used to index the same field in a different way or adding multiple fields to the same field for faster indexing. Copy fields has 2 attributes, the <code>source</code> and the <code>destination</code>. The <code>source</code> is the field which you want to add a copy field to. And the destination can either have a value of a data type or an existing field.</p>

<p>Here&rsquo;s how to add a copy field into the <code>book_title</code> field to store a copy of the field with a data type of text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;book_title&quot;</span> <span class="na">dest=</span><span class="s">&quot;text&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dynamic fields can also be used as the value for destination. So for example you have a field called <code>author</code> which has a data type of <code>text_general</code>. You add a copy field to it using the dynamic field which has a suffix of <code>_s</code>. So the value for destination would be the name of the field plus the suffix used in the dynamic field. The copy field would now be stored as a string since it will simply inherit the data type of the dynamic field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">type=</span><span class="s">&quot;text_general&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*_s&quot;</span>  <span class="na">type=</span><span class="s">&quot;string&quot;</span>  <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;author&quot;</span> <span class="na">dest=</span><span class="s">&quot;author_s&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding Documents</h2>

<p>By default Solr doesn&rsquo;t have any documents that you can work on. You&rsquo;ll have to manually add them.
There are 2 ways in which you can add documents. Either by using <code>post.sh</code> or <code>curl</code>.</p>

<p>There are some sample documents stored in the following directory in Windows once you install Solr:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\exampledocs
</span></code></pre></td></tr></table></div></figure>


<p>Examine each of those files to see what&rsquo;s common with them. Solr expects a specific format in which the documents will be. For xml files it should adhere with this format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;add&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span><span class="nt">&gt;</span>123<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span><span class="nt">&gt;</span>Don&#39;t Make me think<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>      <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;price&quot;</span><span class="nt">&gt;</span>39<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;doc&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>  <span class="nt">&lt;/doc&gt;</span>
</span><span class='line'><span class="nt">&lt;/add&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see from the markup above that you have to use <code>add</code> tags as a wrapper. This will tell Solr that the documents inside of it will be added to the index.
And each row in that document will be wrapped in <code>doc</code> tags. Each field will be wrapped in <code>field</code> tags.
Each field will have an attribute called <code>name</code> in which you specify the name of the field in which the value specified belongs.</p>

<blockquote><p>Note that documents has a required field called id. Your document won&#8217;t be indexed by Solr if it doesn&#8217;t have an `id` field. This uniquely identifies the row. If you have examined the sample documents you will see that each of them has an id field. Also note that the fields that you used in the documents that you want to add to Solr has fields which are already added to the schema.xml file otherwise the document won&#8217;t be added.</p></blockquote>


<p>To add those documents into the Solr index open the command line and navigate to the directory where the documents are stored:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>cd c:\BitNami\solr-4.3.0-0\apache-solr\exampledocs
</span></code></pre></td></tr></table></div></figure>


<p>Then run the following command to add all of the xml documents to the Solr index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>post.sh *.xml
</span></code></pre></td></tr></table></div></figure>


<p>If you want to add a specific xml file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>post.sh books.xml
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Note that only xml documents can be added using post.sh. You can try using the curl method if you want to add a json document or any other type of document to the solr index.</p></blockquote>


<p>If you don&rsquo;t see any sort of errors once the command finished executing then you&rsquo;re good to go.
If not then you might need to add the fields used in each of those documents in the <code>schema.xml</code> file which you can find in the following directory if you&rsquo;re on Windows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>C:\BitNami\solr-4.3.0-0\apache-solr\solr\collection1\conf
</span></code></pre></td></tr></table></div></figure>


<p>To add a field you simply add a line like this in your <code>schema.xml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;book_title&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span>  <span class="na">stored=</span><span class="s">&quot;true&quot;</span>  <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell Solr that the <code>book_title</code> field can be used in any of the documents that you will add to the Solr index.</p>

<blockquote><p>Note that you have to stop the Solr service from running when you&#8217;re editing the schema.xml file.<br/>Once you&#8217;re done with the changes you can simply start the service again so that the changes that you have in the schema.xml file will be reflected to the current instance of the service.</p></blockquote>


<h2>Manipulating the Data</h2>

<p>You can access the data from Solr server by going to the browser and visiting the following address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>http://localhost:8080/solr/select?q=*:*
</span></code></pre></td></tr></table></div></figure>


<p>The host will normally be <code>localhost</code> if you&rsquo;re using Solr on your machine. The port depends on the port that you selected when you installed Solr. I&rsquo;ve already discussed earlier how you can query the Solr server. So what I&rsquo;ll discuss in this section is how to access and manipulate the data coming from Solr using PHP and JavaScript.</p>

<h3>Getting Data using JavaScript</h3>

<p>You can use an ajax request to request for the data from the Solr server. The easiest way to perform an ajax request is by using the jQuery library. In the example below were specifying the value for the request url to be the same as the url that were using to access the data directly from the browser. Were also specifying the type as <code>GET</code>, this means that we will perform a <code>GET</code> request to the server. The value used for the <code>dataType</code> is <code>jsonp</code> since the Solr server is running on a different port from the apache server on the local machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do some magic with the data</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Getting Data using PHP</h3>

<p>You can get the data using PHP by using the <code>file_get_contents</code> method. Then you can convert the json string returned using the <code>json_decode</code> method. After that you can just loop through the data like a normal PHP array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$contents</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating the Data using PHP</h3>

<p>You can update the data in Solr by updating the contents of the document that you want to update and then re-indexing it again using the <code>post.sh</code> utility. But you can also update the documents using PHP.</p>

<p>First get the data that you want to update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:8080/solr/select?q=*:*&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$contents</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nv">$docs</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;response&#39;</span><span class="p">][</span><span class="s1">&#39;docs&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next do the updates. In the example below were adding a new field called course into the document. We also have to unset the version since Solr will be the one to update this attribute. Then we simply copy the current row into the <code>$new_docs</code> variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$new_docs</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$docs</span> <span class="k">as</span> <span class="nv">$d</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$id</span> <span class="o">=</span> <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nv">$course</span> <span class="o">=</span> <span class="nx">get_course</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;course&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$course</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">unset</span><span class="p">(</span><span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;_version_&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$new_docs</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we use <code>curl</code> to update the document in Solr. Solr allows you to update documents using the <code>update</code> path and the format in which the data passed is formatted. In this case its in json format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$json_doc</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$new_docs</span><span class="p">);</span> <span class="c1">//convert the array to a json string</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//curl will return something instead of directly outputting</span>
</span><span class='line'>    <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Content-type:application/json&quot;</span><span class="p">),</span> <span class="c1">//specify content type as json</span>
</span><span class='line'>    <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:8080/solr/update/json&#39;</span><span class="p">,</span> <span class="c1">//the request url</span>
</span><span class='line'>    <span class="nx">CURLOPT_POST</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//set the request type to POST</span>
</span><span class='line'>    <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nv">$json_doc</span><span class="p">,</span> <span class="c1">//the data that we want to pass in</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span> <span class="c1">//execute, you can assign a variable to this to check if the request suceeded or not</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The data has already been updated but it hasn&rsquo;t been committed yet. So we have to make a separate request to commit the recent changes. That is by using the parameter <code>commit</code> and specifying its value as <code>true</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//commit the changes</span>
</span><span class='line'><span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="nb">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://localhost:8080/solr/update?commit=true&#39;</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you check the results returned from the browser you&rsquo;ll see that the data has already been updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://localhost:8080/solr/select?q=*:*</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>That&rsquo;s it! We have only scratched the surface in this introduction to Solr.
Be sure to check out the resources below if you want to learn more about Solr.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://bitnami.com/stacks">BitNami</a></li>
<li><a href="http://wiki.apache.org/solr/FrontPage">SolrWiki</a></li>
<li><a href="http://www.solrtutorial.com/">SolrTutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Wordpress Plugin Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/26/getting-started-with-wordpress-plugin-development/"/>
    <updated>2013-05-26T16:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/26/getting-started-with-wordpress-plugin-development</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through process of creating Wordpress plugins.
First I&rsquo;m going to talk about some of the basic concepts in Wordpress plugin development like the actions, hooks, and API&rsquo;s that makes up Wordpress. Then were going to build a plugin where we apply some of the concepts and best practices in developing Wordpress plugins.</p>

<!--More-->


<h3>Prerequisites</h3>

<p>In order to fully benefit from this tutorial you should have a basic knowledge on PHP.
As Wordpress is running on PHP and most of the code that we will be writing will be on PHP.
A little bit of knowledge on HTML, CSS and JavaScript is also helpful but not required for this tutorial.</p>

<h3>Folder Structure</h3>

<p>Download Wordpress from <a href="http://wordpress.org/download/">Wordpress.org</a> and extract its contents on the web accessible folder. It&rsquo;s usually the <code>public_html</code>, <code>www</code> or <code>htdocs</code> folder in your server.
Here&rsquo;s how the folder structure looks like:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_wordpress_plugin_development/folder_structure.PNG" alt="wordpress folder structure" /></p>

<p>That&rsquo;s a lot of files and folders but there are only a few of those that we will have to touch:</p>

<ul>
<li><strong>wp-content</strong> &ndash; this is where the plugin and theme files are stored.</li>
<li><strong>wp-config.php</strong> &ndash; the Wordpress configuration file where you can specify things like the database settings, character set, authentication unique keys and salts, language and many others. You can see all the possible settings from this page: <a href="http://codex.wordpress.org/Editing_wp-config.php">Editing wp-config.php</a>.</li>
</ul>


<p>And under the <code>wp-content</code> folder:</p>

<ul>
<li><strong>languages</strong> &ndash; this is where the site-wide language files are stored. They&rsquo;re usually in <code>.mo</code> files.</li>
<li><strong>themes</strong> &ndash; this is where the theme files are stored. Every theme has its own folder.</li>
<li><strong>plugins</strong> &ndash; this is where the plugin files are stored. Like the theme files each plugin also has its own folder.</li>
<li><strong>uploads</strong> &ndash; this is where the files that were uploaded by the users goes.</li>
</ul>


<p>If you don&rsquo;t know how to install Wordpress check out the guide at Wordpress codex: <a href="http://codex.wordpress.org/Installing_WordPress">Installing Wordpress</a></p>

<h3>Things to Remember</h3>

<p>Here are some of the things that you have to remember when creating Wordpress plugins.</p>

<h4>Enable WP-DEBUG</h4>

<p>First you have to enable <code>wp_debug</code> since its not enabled by default.
Open up the <code>wp-config.php</code> file which you can find on the Wordpress root directory and add the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//enable error reporting in Wordpress
</span><span class='line'>define('WP_DEBUG', true);</span></code></pre></td></tr></table></div></figure>


<p>When <code>wp_debug</code> is enabled the error reporting is set to <code>E_ALL</code> which means that all PHP warnings, notices and errors are outputted on the screen. By default Wordpress doesn&rsquo;t display these errors mainly because every Wordpress installation is production-ready. And you would never really want your users to see those errors.</p>

<h4>Use Wordpress functions</h4>

<p>Always use some of the built-in Wordpress functions when writing plugins or themes.
This is the trap where most beginners fall. And I admit that I also fell to this trap when I was just starting to get my way through wordpress.
Beginners often do things like they normally do in PHP. For example instead of using the <code>wp_remote_get()</code> function they use <code>curl</code> or <code>file_get_contents()</code>.
Instead of using <code>$wpdb</code> they use <code>MySqli</code> or a third-party library to access the database. There&rsquo;s a lot of functions built into Wordpress that allows you to do almost anything so be sure to check out the <a href="http://codex.wordpress.org/Function_Reference">function reference</a> first before you write a single line of code that uses PHP functions.</p>

<h4>Use Tools</h4>

<p>Aside from the text-editor there are also other tools that you can use for developing Wordpress plugins and web development in general. Here are some of the tools that I recommend:</p>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a> &ndash; general web development tool.</li>
<li><a href="http://wordpress.org/extend/plugins/debugger/">Wordpress Debugger</a> &ndash; debugging plugin for Wordpress.</li>
<li><a href="http://wordpress.org/extend/plugins/cron-view/">Cron View</a> &ndash; allows you to view the tasks scheduled in wp-cron.</li>
<li><a href="https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate">Wordpress Plugin Boilerplate</a> &ndash; template for building Wordpress plugins.</li>
<li><a href="http://www.sublimetext.com/">Sublime Text Editor</a></li>
</ul>


<h4>Use Best Practices</h4>

<p>You have to develop Wordpress plugins using some of the best practices that are favored by the community in general. This will make your code more readable, more maintainable, more consistent and more secure.</p>

<ul>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/css">CSS Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/javascript">JavaScript Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/html">HTML Coding Standards</a></li>
<li><a href="http://make.wordpress.org/core/handbook/coding-standards/php">PHP Coding Standards</a></li>
<li><a href="http://www.sitepoint.com/10-must-know-skills-for-a-wordpress-plugin-developer/">10 Must Know Skills for a Wordpress plugin Developer</a></li>
</ul>


<p>I recommended reading through some of the standards above then decide for yourself which to follow and apply to your own projects. At the end of the day you should only follow what specific coding style feels right for you.</p>

<p>Here are some of the coding standards that I specifically apply to my own projects:</p>

<h5>HTML</h5>

<ul>
<li>Use HTML5 when creating Wordpress plugins and themes. To use HTML5 all you have to do is specify the HTML5 doctype <code>&lt;!DOCTYPE html&gt;</code>.</li>
</ul>


<p>Then you can start using some of the HTML5 elements and attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;nav&gt;&lt;/nav&gt;</span>
</span><span class='line'><span class="nt">&lt;/header&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;aside&gt;&lt;/aside&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;article&gt;</span>
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-id=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-name=</span><span class="s">&quot;lee&quot;</span> <span class="na">data-age=</span><span class="s">&quot;18&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;footer&gt;&lt;/footer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Single-space before closing self-closing tags.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;hr</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Comments when closing elements. Text-editors can already highlight the closing tags for a specific element if you click on its opening tag but its always nice to have visual on which tags closes what.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;story-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;person&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;details&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--/#person--&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span><span class="c">&lt;!--/.story-container--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>CSS</h5>

<ul>
<li>Single space after the property.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>New line for each selector.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.dragon</span><span class="o">,</span>
</span><span class='line'><span class="nc">.pig</span><span class="o">,</span>
</span><span class='line'><span class="nc">.rat</span><span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Avoiding slow selectors. Always remember that css is read by the browser from left to right.
For example we are selecting all the anchor tags in our container:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#container</span> <span class="nt">a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">brown</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Converting this css selector to plain english we get: select the element with an id of <code>container</code> and then select all the anchor tags within it.</p>

<p>But this is how the browser reads it: select all the anchor tags and then filter it down to just the tags that are within the element with the id of <code>container</code>.</p>

<p>Just by reading it in plain english we know that the latter takes more time.</p>

<p>Go through this article: <a href="http://csswizardry.com/2011/09/writing-efficient-css-selectors/">Writing efficient css selectors</a> and learn how to write faster css selectors.</p>

<h5>JavaScript</h5>

<ul>
<li><p>Use jQuery, Mootools or any other library that makes it easier for you to write code that will work across different browsers.</p></li>
<li><p>Don&rsquo;t use reserved words when naming variables. This is true for other programming languages as well. If you&rsquo;re not certain that the variable that you&rsquo;re going to use is a reserved word then just do a quick google search or check out this <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words">list of reserved words</a> from the Mozilla Developer Network.</p></li>
<li><p>Use <code>var</code> when declaring every variable. I prefer doing it this way:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fname</span> <span class="o">=</span> <span class="s1">&#39;gon&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lname</span> <span class="o">=</span> <span class="s1">&#39;freecs&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fname</span> <span class="o">=</span> <span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="nx">lname</span> <span class="o">=</span> <span class="s1">&#39;freecs&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Always use semi-colons where appropriate. Some developers prefer to ommit the semi-colons because of this automatic semi-colon insertion thing on the browser. This makes semi-colons kinda not required for some instances because the browser already does it for you.</p></li>
<li><p>Use bracket notation when declaring arrays.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span> <span class="s1">&#39;kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;ponzo&#39;</span><span class="p">,</span> <span class="s1">&#39;hisoka&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use the curly bracket notation when declaring objects.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;fname&#39;</span> <span class="o">:</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;lname&#39;</span> <span class="o">:</span> <span class="s1">&#39;zoldyc&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;nen_type&#39;</span> <span class="o">:</span> <span class="s1">&#39;transmutation&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;abilities&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;lightning palm&#39;</span><span class="p">,</span> <span class="s1">&#39;thunderbolt&#39;</span><span class="p">,</span> <span class="s1">&#39;godspeed&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Always wrap the properties of an object in single-quotes. They&rsquo;re not really required if the property doesn&rsquo;t use dashes or any other fancy character but its always nice to have consistency.</p></li>
<li><p>Always use the bracket notation to access values from objects and arrays.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;fname&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;lname&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dot notation looks a bit easier to write but its limited to just strings without special characters.
You can&rsquo;t also use the dot notation to access array indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">fname</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">lname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//this is not possible </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always use <code>break</code> when using <code>switch</code> statements:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="s1">&#39;killua&#39;</span><span class="p">,</span> <span class="s1">&#39;kurapika&#39;</span><span class="p">,</span> <span class="s1">&#39;ponzo&#39;</span><span class="p">,</span> <span class="s1">&#39;hisoka&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span><span class="p">(</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;gon&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;kurapika&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;hisoka&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases you may want to use a fallthrough like the one below to continue execution on the next case if a single case has been met. But you normally wouldn&rsquo;t want to do that. Mainly becase of maintenance issues later on. You will ask yourself: &ldquo;did I forgot the break here or I really intended this one to fall through?&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">switch</span><span class="p">(</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;gon&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;kurapika&#39;</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s1">&#39;hisoka&#39;</span><span class="o">:</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <code>for</code> loops instead of <code>for in</code> loops.
Mainly because its faster (atleast according to benchmarks). And there&rsquo;s really very little use case for <code>for in</code> loops. Everything you can do with <code>for in</code> loops you can actually do by just using a <code>for</code> loop.
Take the following example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">cnt</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">cnt</span><span class="p">;</span> <span class="nx">d</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="s1">&#39;fname&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">names</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="s1">&#39;lname&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can always do the example above by using a <code>for in</code>. It also looks cleaner and more concise.
But I always prefer <code>for</code> loops because its more performant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">names</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="s1">&#39;fname&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">names</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="s1">&#39;lname&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Cache DOM selections when you atleast want to use those selections in 2 or more places.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//do something</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>PHP</h5>

<ul>
<li>PHP tags should always be written like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;hello world!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And not this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;hello world!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always include opening and closing curly braces when using <code>if</code> statements even if you don&rsquo;t think that there will be other things to add inside your <code>if</code> statements later on.
So I always favor this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The second version looks much more cleaner but see what happens when you add another line after the else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You would expect that the second line will only be outputted when the animal is a cat. But the actual output would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">its a dog</span>
</span><span class='line'><span class="x">duh!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ommitting the curly braces only works when there&rsquo;s only a single line of code inside of it.
PHP actually interprets the code this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Variables should be named in a smart and concise way. You don&rsquo;t want variable names that are too long like <code>$first_prime_number</code>. Each variable should directly communicate what the value it stores is all about like <code>$amazon_id</code> or <code>$flickr_key</code>.</p></li>
<li><p>Always start a new line if the line of code gets longer than the length of the whole text-editor when in its full size. I always prefer this:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;SELECT username FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span>
</span><span class='line'>          <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span> <span class="s2">&quot;SELECT username FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Always use prepared statements when accessing the database.
This will improve the database security for your plugin.
Prepared statements prevents <a href="http://en.wikipedia.org/wiki/SQL_injection">sql injection</a> which is basically the use of clever techniques to get the data out of your database by manipulating sql code.</li>
</ul>


<p>Using <a href="http://en.wikipedia.org/wiki/Prepared_statement">prepared statements</a> in wordpress is easy. You just have to use the <code>$wpdb-&gt;prepare()</code> method to create a prepared statement. What makes it secure is that the query is compiled first along with the placeholders and then later on the parameters are assigned to the compiled query. Lastly it will be executed. Yes I know I haven&rsquo;t explained that really well but if you&rsquo;ve used templating engines like Smarty, handlebars, or mustache before the idea of prepared statements is pretty much similar. First the template is compiled, in the case of prepared statements its the query along with the placeholders. Once its compiled the parameters for that query are assigned to the template. Lasty its executed to produce the actual results of that specific query.
Anyway here&rsquo;s an example on how to use a prepared statement in wordpress:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_user</span><span class="p">(</span><span class="nv">$id</span><span class="p">){</span>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_row</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;SELECT fname, lname FROM </span><span class="si">$wpdb-&gt;users</span><span class="s2"> WHERE ID = %d&quot;</span><span class="p">,</span> <span class="nv">$id</span>
</span><span class='line'>          <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$row</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use code formatting tools whenever you feel lazy implementing a specific coding convention. I personally use <a href="https://github.com/welovewordpress/SublimePhpTidy">Sublime PHP tidy</a> to format the code to make it compliant to the Wordpress coding standards because some of the coding standards just doesn&rsquo;t feel right for me.
For example this specific block of code is preferred by the Wordpress community:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>While I prefer this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$animal</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span><span class="p">){</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a dog&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;its a cat&lt;br /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;duh&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>See the difference? I believe there&rsquo;s too much spaces in the first one and I&rsquo;m too lazy to press the spacebar everytime I need to add those spaces. That&rsquo;s why its always nice to have tools like Sublime PHP Tidy to do the formatting for you. Another nice plugin is the <a href="https://github.com/wbond/sublime_alignment">Sublime Alignment</a> which just allows you to select a block of code and have it aligned like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$name</span>  <span class="o">=</span> <span class="s1">&#39;Eren&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$lname</span> <span class="o">=</span> <span class="s1">&#39;Jaeger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Namespace all your classes, functions and variables.
This is because other plugins might be using the same variable names or function names.
This will lead to conflicts in the code and may cause errors since the default values are already overriden something that is not supposed to be the correct value.
Namespacing is a good precaution to prevent this from happening.
If you&rsquo;re writing your code in a procedural way then you should namespace all the variables and functions.
If you&rsquo;re writing your code in an object-oriented way then you should be fine with just namespacing the class since the class already encapsulates everything within.</li>
</ul>


<p>You can namespace your methods and variables by simply prefixing it with your name and the name of the plugin.
For the plugin that were trying to create it will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">nrue_zam_get_users</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But you can also have just the plugin name if you think the name of your plugin is unique enough and you have already done a google search for that specific plugin name. If it doesn&rsquo;t exists yet then you&rsquo;re good to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">zam_get_users</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re writing your plugin in an object-oriented way there&rsquo;s no need to namespace variables and methods that are inside the class. You just need to be sure that your plugin name is unique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">zam</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">get_users</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h5>Data Validation</h5>

<p>Always remember to use data validation techniques in both the client and the server side.
You need client side because you don&rsquo;t want the user to wait for a whole page refresh before he&rsquo;s informed that the data that he inputted is actually invalid. You also need server-side because some malicious users might try to compromise the site or even innocent users which didn&rsquo;t format their input very well.
Wordpress has actually got our back covered because of the built-in data validation methods that they have:</p>

<ul>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_html">esc_html</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_attr">esc_attr</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_js">esc_js</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_url">esc_url</a></li>
<li><a href="http://codex.wordpress.org/Class_Reference/wpdb#Protect_Queries_Against_SQL_Injection_Attacks">$wpdb->prepare</a></li>
<li><a href="http://codex.wordpress.org/Function_Reference/esc_sql">esc_sql</a></li>
</ul>


<p>Be sure to check out each of these methods and know what they can do for you.
There&rsquo;s a lot more methods which you can use to validate data in Wordpress. Read the following article at Wordpress codex for more information: <a href="http://codex.wordpress.org/Data_Validation">Data Validation</a></p>

<h3>Important Concepts</h3>

<p>There are only 3 important concepts that you have to remember when working with Wordpress: API&rsquo;s, Filters and Actions.</p>

<h3>API&rsquo;s</h3>

<p>Wordpress is composed of many different API&rsquo;s. But you&rsquo;ll only have to tap into the API&rsquo;s that corresponds to what you want to do with your plugin. If you need your plugin to have an options page then look into the <a href="http://codex.wordpress.org/Options_API">options API</a> and <a href="http://codex.wordpress.org/Settings_API">Settings API</a>. If you want your users to publish posts easily then you could use the <a href="http://codex.wordpress.org/Shortcode_API">shortcodes API</a>. If you want your plugin to have its on widget then you can use the <a href="http://codex.wordpress.org/Widgets_API">Widgets API</a>.
Here&rsquo;s a list of all the API&rsquo;s that you could use in Wordpress: <a href="http://codex.wordpress.org/WordPress_APIs">Wordpress API&rsquo;s</a></p>

<h4>Filters</h4>

<p>These are built-in Wordpress functions which you could hook into to modify the content displayed in your site.
For example if you want to modify the content of a blog post you just add a filter to the content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_filter</span><span class="p">(</span><span class="s1">&#39;the_content&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$content</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//you&#39;re awesome code goes here</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>So for example if the blog entry that was published has this content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">http://google.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you want to turn it into a link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can just add a filter to the content and use regular expressions to find the url&rsquo;s in the content and wrap it in anchor tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_filter</span><span class="p">(</span><span class="s1">&#39;the_content&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$content</span><span class="p">){</span>
</span><span class='line'>  <span class="nv">$content</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
</span><span class='line'>                  <span class="s2">&quot;#((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|</span><span class="se">\&quot;</span><span class="s2">|&#39;|:|\&lt;|$|\.\s)#ie&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s2">&quot;&#39;&lt;a href=</span><span class="se">\&quot;</span><span class="s2">$1</span><span class="se">\&quot;</span><span class="s2"> target=</span><span class="se">\&quot;</span><span class="s2">_blank</span><span class="se">\&quot;</span><span class="s2">&gt;$3&lt;/a&gt;$4&#39;&quot;</span><span class="p">,</span> <span class="nv">$content</span>
</span><span class='line'>              <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Actions</h4>

<p>These are built-in Wordpress functions which you could hook into to respond to some events or to execute some functions when a certain event in Wordpress happens. Some of the most commonly used actions are:</p>

<ul>
<li><strong>admin_init</strong> &ndash; you could hook into this action to execute some code for when the admin page is initialized.
The most common use case is when initializing the options page for your plugin:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>widgets_init</strong> &ndash; you could hook into this action to register the widgets for your plugin or unregistering widgets that won&rsquo;t look good in the Wordpress theme that you&rsquo;ve created.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;widgets_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">register_widget</span><span class="p">(</span><span class="s2">&quot;zam_tweets_widget&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>wp_ajax</strong> &ndash; you could hook into this action to register a method that would respond to ajax calls.
Unlike other actions you can register multiple methods that would respond to specific ajax calls.
You just have to prefix the name you want to give to the method that will respond to the ajax call with either <code>wp_ajax</code> or <code>wp_ajax_nopriv</code>. <code>wp_ajax</code> only responds to users which are logged in while <code>wp_ajax_nopriv</code> only responds to ajax calls which are public or anonymous. This means that it responds only to users of your site that aren&rsquo;t logged in. So if you want your method to be accessible to both logged in and anonymous users then you need to hook to both <code>wp_ajax</code> and <code>wp_ajax_nopriv</code> just like in the example below:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;wp_ajax_nopriv_get_tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_get_tweets&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;wp_ajax_get_tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_get_tweets&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>custom action hooks</strong> &ndash; you can also have custom action hooks which is commonly used in scheduled tasks. This can be defined by using a custom hook name which should be namespaced by the plugin name. Then supplying a callback function that will be executed once the scheduled task is executed.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">wp_schedule_event</span><span class="p">(</span><span class="nb">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1200</span><span class="p">,</span> <span class="s1">&#39;daily&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_save_search_images&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;zam_save_search_images&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$data</span> <span class="o">=</span> <span class="nx">ecom_save_images</span><span class="p">();</span>
</span><span class='line'>  <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;asin_file&#39;</span><span class="p">],</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>About the Plugin</h3>

<p>Before we dive into creating the plugin I&rsquo;ll tell you what the plugin that were going to build is all about.
The plugin will fetch the tweets of a specific user given that the tweets are not set to private. It will have an options page and a widget.
The options page is where the admin will input the twitter ID of the person in which to fetch tweets from.
And the widget is going to display the tweets in the public area of the website.
The plugin will also have a feature of publishing tweets based on a page number supplied by the user and a random index generated by the plugin.</p>

<h3>Creating the Plugin</h3>

<p>You can create a new plugin by creating a new folder under the <code>wp-content/plugin</code> directory.
In our case the name of the plugin that were going to create is <code>Zam</code> so were going to name the folder <code>zam</code>.
And inside it create a file and name it <code>zam.php</code>.
Open the <code>zam.php</code> file and tell Wordpress the details of your plugin.
You can do that by putting the following information inside a PHP multi-line commment right after your first opening PHP tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Plugin Name: Zam</span>
</span><span class='line'><span class="cm">Plugin URI: http://zam-wp-plugin.io</span>
</span><span class='line'><span class="cm">Version: 1.0</span>
</span><span class='line'><span class="cm">Author: Nrue</span>
</span><span class='line'><span class="cm">Description: </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Standard plugin information includes the plugin name, plugin url or the address where your plugin can be downloaded, the version of your plugin, the author and the description. But you can also add other information like the Author URI and the license that you want to use. You can check out <a href="http://www.tldrlegal.com/">tldrlegal.com</a> and search any license that you can use (E.g GPL, Apache2, MIT) and read on some of the benefits of using that particular license. Once you&rsquo;ve selected something just put on the name of the license as the value for the <code>License</code> attribute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">License: Apache2</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once you&rsquo;ve set that up you can already see your plugin from the list of installed plugins in the admin page:</p>

<p><img src="http://anchetaWern.github.io/images/posts/getting_started_with_wordpress_plugin_development/zam_plugin.PNG" alt="installed plugins" /></p>

<p>You can activate it by clicking on the <code>activate</code> link. But we won&rsquo;t do that for now since the plugin really does nothing at the moment.</p>

<p>Now that we have checked that wordpress is already aware with our plugin were ready to build the plugin.
First start of by creating a class and its constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Important:<br/>The constructor is where we initialize the data to be used by the plugin.<br/>It is also where we call all the hooks and actions.</p></blockquote>


<p>Next declare the variables that were going to use throughout the class:</p>

<p> <code>
 &lt;?php
private $protocol;
private $settings;
private $twitter_id;
 ?&gt;
</code></p>

<p>The protocol stores the protocol used by the server. It can either be http or https.
The settings stores the settings for the plugin.<br/>
The twitter id stores the twitter id of the user. This can be extracted from the settings but its better to store it in its own variable.</p>

<p>Going back to our constructor now we can initialize the data that the plugin will be using throughout the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">=</span> <span class="nx">is_SSL</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;https://&#39;</span> <span class="o">:</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<blockquote><p>Important:<br/>Always check for the existence of a specific option item because you can&#8217;t always expect it to actually have a value stored in it. This will lead to notices being outputted out if you don&#8217;t perform the check first. It&#8217;s always good to use ternary operators for this purpose.</p></blockquote>


<h4>Plugin Options</h4>

<p>Next create a new PHP file and call it <code>zam-options.php</code> this is where we will put the code specific to the options page of our plugin.</p>

<p>Then build a class which will have a constructor that will assign the options to the <code>$options</code> variable.
This will store things like the twitter id of the user and other options that we might want to add later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam_Options</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$options</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register_settings_and_fields</span><span class="p">();</span> <span class="c1">//registers all the options for the plugin</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the constructor were calling the <code>get_option</code> method which simply gets a specific option from the Wordpress database. These options are stored in the <code>wp_options</code> table which has 4 fields:</p>

<ul>
<li><strong>option_id</strong> &ndash; auto increment unique id for the option</li>
<li><strong>option_name</strong> &ndash; the name of the options. In this case the name of the option for our plugin is <code>zam_options</code>.</li>
<li><strong>option_value</strong> &ndash; this can either have a string or a serialized string. The value is a string for default wordpress options like the <code>siteurl</code> or the <code>blogdescription</code>. But for option pages its a serialized string which looks like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">a:2:{s:16:&quot;enablexmlsitemap&quot;;s:2:&quot;on&quot;;s:36:&quot;post_types-attachment-not_in_sitemap&quot;;b:1;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t look friendly when compared to a simple json string simply because its actually storing the type of data and the length. <code>s:2</code> simply means string with a length of 2, which is true since the string &ldquo;on&rdquo; which is supplied as its value is a string and has 2 characters. <code>b:1</code> simply means boolean with a length of 1.</p>

<ul>
<li><strong>autoload</strong> &ndash; can have a value of <code>yes</code> or <code>no</code>. The default value is <code>yes</code> which usually means that the option can be fetched directly when using the <code>get_option</code> method.</li>
</ul>


<p>From the constructor were also calling the <code>register_settings_and_fields</code> this setups all the fields and sections in our plugin options page. Fields are the text fields, radio buttons, and check boxes that can be included in the options page. And sections are the groups in which these fields belong.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">register_settings_and_fields</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">register_setting</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">);</span> <span class="c1">//register zam_options as an option in the option group called zam_options</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//add a section called zam_options_main </span>
</span><span class='line'>  <span class="nx">add_settings_section</span><span class="p">(</span><span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Main Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_options_create&#39;</span><span class="p">),</span> <span class="k">__FILE__</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//create the zam_twitter_id field and add it to the zam_options_main section</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">create_fields</span><span class="p">(</span>
</span><span class='line'>      <span class="k">__FILE__</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">$this</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Twitter ID&#39;</span> <span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>              <span class="s1">&#39;function&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;display_twitter_id&#39;</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You might have notice that were using <code>__('text', 'text')</code> all over the place.
This is a good practice in Wordpress even if you don&rsquo;t plan to have your plugin available for many different languages. Were doing this to prepare our plugin for localization. <code>__()</code> is actually a method in wordpress used for localizing text. The first argument is the text itself and the second argument is the text domain. In this case the text domain is the name of the plugin but you can also have something else which directly relates to the plugin so that it can easily be distinguished what plugin does it belong to.</p>

<blockquote><p>Important:<br/>The localization will actually work without the text domain. That is if you are certain that the words, phrases and sentences used in your plugin are already localized and is already available in your current Wordpress installation.<br/>The importance of the text domain is to tell Wordpress that the specific text is localized for a specific plugin. <br/>The language file is usually stored in the languages directory in the root of the plugin. The load_plugin_textdomain is used to load those language files into Wordpress and the text is translated on the fly.</p></blockquote>


<p>Back to our <code>register_settings_and_fields</code> method, we are also calling the <code>zam_options_create</code> which job is to fill the section with the desired content. Its a required parameter so we have to supply it even if were really doing nothing with it at the moment since we are going to have a separate function to display each field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">zam_options_create</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Still in our <code>register_settings_and_fields</code> method, we are also calling the <code>create_fields</code> method.
This method will create all of the fields and sections in our plugin options page.
The first argument is the menu page in which to display the field. In this case were just going to use the built-in magic constant in PHP called <code>__FILE__</code> which simply stores the full path and the file name of the current file (zam-options.php).
The second argument is the context of the method that is going to display the specific field.
In this case were simply going to use the  <code>$this</code> keyword, since all the methods that were going to use for displaying the fields are class members and <code>$this</code> refers to the current object of the class.
The third argument is the section id. You can name it whatever you like but be sure to name it to something unique and it must directly relate to the plugin. In this case were just going to use the plugin name and the options word as the prefix then the name of the section.
The fourth argument is an array which stores an array for each field. The array contains the unique id for the field, the label to be used for the field, and the function that will display the field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">create_fields</span><span class="p">(</span>
</span><span class='line'>  <span class="k">__FILE__</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$this</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;zam_options_main&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Twitter ID&#39;</span> <span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="s1">&#39;function&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;display_twitter_id&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next let&rsquo;s take a look at the <code>create_fields</code> method which we called above to create the sections and fields for our options page. Here we are simply looping through the contents of the fourth argument that we supplied above and passing in those arguments to the <code>add_settings_field</code> method. The <code>add_settings_field</code> method is a built-in method in Wordpress that allows us to register a field to a settings page.
It takes the same arguments as our <code>create_fields</code> methods. Since the <code>create_fields</code> method is just some sort of a factory so we don&rsquo;t have to call <code>add_settings_field</code> every time we need to create a new field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">create_fields</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="nv">$class</span><span class="p">,</span> <span class="nv">$section_id</span><span class="p">,</span> <span class="nv">$field_data</span><span class="p">){</span>
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$field_data</span> <span class="k">as</span> <span class="nv">$field</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">add_settings_field</span><span class="p">(</span><span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;label&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$field</span><span class="p">[</span><span class="s1">&#39;function&#39;</span><span class="p">]),</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$section_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the <code>display_twitter_id</code> method which displays the twitter id field. Nothing fancy here were just echoing out plain old HTML and supplying the value for that specific field if its present. But a good practice in naming is using the name of the options page as somewhat like the name of the array and the id of the field as the specific key that you want to access:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">display_twitter_id</span><span class="p">(){</span>
</span><span class='line'>  <span class="nv">$zam_twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;&lt;input type=&#39;text&#39; name=&#39;zam_options[zam_twitter_id]&#39; class=&#39;regular-text&#39; id=&#39;zam_twitter_id&#39;  value=&#39;</span><span class="si">{</span><span class="nv">$zam_twitter_id</span><span class="si">}</span><span class="s2">&#39;/&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the function that will display all the fields and sections in the options page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>  
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">display_fields</span><span class="p">(){</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div class=&quot;wrap&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="nx">screen_icon</span><span class="p">();</span> <span class="c1">//display the default icon for an options page ?&gt; </span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;?</span><span class="nx">php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Zam Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/h2&gt;</span>
</span><span class='line'><span class="x">      &lt;form action=&quot;options.php&quot; method=&quot;post&quot; id=&quot;zam_settings_forms&quot; data-validate=&quot;parsley&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">settings_fields</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;table class=&quot;form-table&quot;&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> <span class="nx">do_settings_sections</span><span class="p">(</span> <span class="k">__FILE__</span> <span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/table&gt;</span>
</span><span class='line'><span class="x">          &lt;p class=&quot;submit&quot;&gt;</span>
</span><span class='line'><span class="x">              &lt;input type=&quot;submit&quot; name=&quot;submit&quot; id=&quot;submit&quot; class=&quot;button button-primary&quot; value=&quot;Save Changes&quot;&gt;</span>
</span><span class='line'><span class="x">          &lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>display_fields</code> method will display a form element which will wrap the <code>settings_fields</code> and <code>do_settings_sections</code> method.
The <code>settings_field</code> method displays the option page fields that are added to the option group.
The option group in this case is <code>zam_options</code> which we supplied as the first argument when we called the <code>register_setting</code> field earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">register_setting</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>do_settings_sections</code> method displays all the sections added in a specific settings page. In this case the settings page is the file itself so were going to use the <code>__FILE__</code> magic-constant again to refer to the current settings page.</p>

<blockquote><p>Its a good practice to use the built-in view source feature in the browser (or better yet Chrome Dev Tools elements panel) to check out the existing mark-up that Wordpress uses in each of the pages that you want to create. This will give you an idea which classes to apply for each elements.</p></blockquote>


<p>Lastly, the method that will add a menu page. The <code>add_menu_page</code> has 4 required parameters:</p>

<ul>
<li>page title</li>
<li>menu title</li>
<li>capability</li>
<li>menu slug</li>
</ul>


<p>The <strong>page title</strong> is the text that you see in the browser tab when you access the page.
The <strong>menu title</strong> is the text that you see in the Wordpress menu on the left side of the screen when you access the admin page.
The <strong>capability</strong> is the minimum capability required so that the current user can have access to that options page. In this case if the current user has the ability to manage the options then he can access the page. Check out the <a href="http://codex.wordpress.org/Roles_and_Capabilities">Roles and Capabilities section</a> in Wordpress codex for more information on this.
The <strong>menu slug</strong> is simply the name which refers to that specific menu. You can think of it as the ID to that specific menu.</p>

<p>In the code below we also supplied a fifth argument which is the function that will display the fields for that specific menu page. We also used the <code>add_submenu_page</code> method, the only difference between this method and the <code>add_menu_page</code> is that the menu added using <code>add_menu_page</code> will be automatically displayed once you access the specific options page. And the <code>add_submenu_page</code> is simply used to add a submenu for that options page which means that it will be displayed right after the menu added using the <code>add_menu_page</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">add_menu</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_menu_page</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Zam&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;zam&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="s1">&#39;manage_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;display_fields&#39;</span> <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_submenu_page</span><span class="p">(</span><span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Settings&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span> <span class="s1">&#39;manage_options&#39;</span><span class="p">,</span> <span class="s1">&#39;zam-options&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;zam_options&#39;</span><span class="p">,</span> <span class="s1">&#39;display_fields&#39;</span> <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Plugin Widget</h4>

<p>Now let&rsquo;s create the widget that will display the tweets of the user supplied in the options page.
Create a new file and call it <code>zam-tweets-widget.php</code>. You can place the widgets in a separate directory if you want but since we only have one widget for this plugin we will put it in the same directory as the main plugin file.</p>

<p>First thing that you need to do is to declare a class and call it <code>Zam_Tweets_Widget</code>. Unlike the options class and the plugin class that we created earlier this will extend from the <code>WP_Widget</code> class which is stored in the <code>wp-includes/widgets.php</code> file. Because of this Wordpress widgets are always written in an object-oriented way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Zam_Tweets_Widget</span> <span class="k">extends</span> <span class="nx">WP_Widget</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>Like all the classes that we have created so far the widget class will also have a constructor.
But since we are extending from the <code>WP_Widget</code> class we need to make sure that the constructor of the <code>WP_Widget</code> will also run. In PHP this is done by calling <code>parent::__construct()</code>. The constructor of the <code>WP_Widget</code> class expects the id of the widget as the first parameter, the name of the widget as the second, and the third will be an array of the widget options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;zam_tweets_widget&#39;</span><span class="p">,</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Zam Tweets Widget&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;A widget for displaying tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>A wordpress widget commonly has 3 functions which are all set to <code>public</code>:</p>

<ul>
<li>form</li>
<li>update</li>
<li>widget</li>
</ul>


<p>The <strong>form</strong> function is the function that will display the widget form that the admin sees in the back-end of the site.
This is where the admin can change the options for that specific widget. A common option which can be customized is the widget title.</p>

<p>The <strong>update</strong> function is the function that will be executed when the admin saves the widget options.</p>

<p>The <strong>widget</strong> function is the function that will display the widget on the front-end. This is what the users will see when they visit the site.</p>

<p>Now that you&rsquo;re familiar what each function does let&rsquo;s go ahead and create the <strong>form</strong> function.
The <strong>form</strong> function has the <code>$instance</code> parameter which basically stores the data for that specific instance of the widget. If you played quite a bit with Wordpress you will notice that you can actually have many instances of the same widget.</p>

<p>First we check if the <code>title</code> and the <code>tweets_to_show</code> options for that specific instance of the widget already has a value. If it has a value then we use it. If it doesn&rsquo;t have a value we set an empty string as the value. Next we simply output a standard text field for the widget title and a drop-down box for the number of tweets to show. Always remember to put it the css classes that wordpress already uses to make your form fields match the styling of the other widgets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">form</span><span class="p">(</span><span class="nv">$instance</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$title</span> <span class="o">=</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$tweets_to_show_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$tweets_to_show</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])){</span>
</span><span class='line'>          <span class="nv">$title</span> <span class="o">=</span> <span class="nx">esc_attr</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">])){</span>
</span><span class='line'>          <span class="nv">$tweets_to_show</span> <span class="o">=</span> <span class="nx">esc_attr</span><span class="p">(</span><span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">          &lt;label for=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Title&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;:&quot;</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/label&gt;</span>
</span><span class='line'><span class="x">          &lt;input type=&quot;text&quot; class=&quot;widefat&quot; id=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_name</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$title</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;p&gt;</span>
</span><span class='line'><span class="x">          &lt;label for=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">_e</span><span class="p">(</span><span class="s1">&#39;Tweets to show&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/label&gt;</span>
</span><span class='line'><span class="x">          &lt;select class=&quot;widefat&quot; id=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_id</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_field_name</span><span class="p">(</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">foreach</span><span class="p">(</span><span class="nv">$tweets_to_show_range</span> <span class="k">as</span> <span class="nv">$num</span><span class="p">){</span>
</span><span class='line'>                  <span class="nv">$checked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="nv">$num</span> <span class="o">==</span> <span class="nv">$tweets_to_show</span><span class="p">){</span>
</span><span class='line'>                      <span class="nv">$checked</span> <span class="o">=</span> <span class="s1">&#39;selected=true&#39;</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">              &lt;option value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$num</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$checked</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$num</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/option&gt;</span>
</span><span class='line'><span class="x">              </span><span class="cp">&lt;?php</span> 
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/select&gt;</span>
</span><span class='line'><span class="x">      &lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <strong>update</strong> function which has 2 parameters, the new instance stores the new option values after the widget options has been updated and the old instance stores the option values before the widget options was updated.
What were doing below is simply using the values for the new instance and then returning it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">,</span> <span class="nv">$old_instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$instance</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">strip_tags</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">strip_tags</span><span class="p">(</span><span class="nv">$new_instance</span><span class="p">[</span><span class="s1">&#39;tweets_to_show&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the <strong>widget</strong> function where we display the latest tweets from the user with the twitter ID inputted in the plugin options page. It will have an <code>$args</code> and <code>$instance</code> as parameters.</p>

<p>The <code>$args</code> stores standard widget information such as the name, description, class, widget id and widget name. It also stores the HTML that would show up before and after every widget title.</p>

<p>The <code>$instance</code> simply stores the widget information entered by the admin from the back-end such as the widget title and the number of tweets to show.</p>

<p>We used the built-in PHP method called <code>extract</code> below to extract the array into each of their own variables. Next we echo the html stored in the <code>$before_widget</code>,  <code>$before_title</code> , <code>$after_title</code> and <code>$after_widget</code> variables which were extracted from the widget&rsquo;s <code>$args</code> argument.
Then we call the <code>get_tweets</code> method which we will create later. This method returns an array of tweets by the user specified in the plugin options page. Lastly we simply <code>break</code> once the current iteration is equal to the number of tweets to show.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">widget</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nv">$instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">global</span> <span class="nv">$zam</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">extract</span><span class="p">(</span><span class="nv">$args</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">extract</span><span class="p">(</span><span class="nv">$instance</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$title</span><span class="p">)){</span>
</span><span class='line'>          <span class="nv">$title</span> <span class="o">=</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;Tweets&#39;</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">echo</span> <span class="nv">$before_widget</span><span class="p">;</span>
</span><span class='line'>          <span class="k">echo</span> <span class="nv">$before_title</span> <span class="o">.</span> <span class="nx">__</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="s1">&#39;zam&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="nv">$after_title</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$tweets</span> <span class="o">=</span> <span class="nv">$zam</span><span class="o">-&gt;</span><span class="na">get_tweets</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;div id=&quot;zam_tweets&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>          <span class="k">foreach</span><span class="p">(</span><span class="nv">$tweets</span> <span class="k">as</span> <span class="nv">$index</span> <span class="o">=&gt;</span> <span class="nv">$tweet</span><span class="p">){</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">              &lt;li&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$tweet</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nv">$tweets_to_show</span> <span class="o">==</span> <span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>    
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>              <span class="k">echo</span> <span class="nv">$after_widget</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to our main plugin file we will now initialize our plugin options page once the admin page has been initialized. So we simply create a callback function on the <code>admin_init</code> action hook and create a new instance of the <code>Zam_Options</code> class. The <code>Zam_Options</code> class if you can remember is the class name of our plugin options page. Simply instantiating this class will build the options page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>But aside from building the options page we also need to add the menu items as well since there would be no way for the admin to access our plugin options page if we don&rsquo;t add a menu that he can easily click. What the code above did was to simply add the options page, the admin can access it by typing the menu slug directly into the address bar of the browser but he can&rsquo;t access it directly from the admin menu.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">zam_admin_init</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">Zam_Options</span><span class="o">::</span><span class="na">add_menu</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We can just hook this function to the <code>admin_menu</code> hook which is a hook which is used for adding extract submenus to the admin panel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_menu&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_admin_init&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we now create the <code>get_tweets</code> method which we called earlier from our widget. For this were going to use the twitteroauth library which was created by Abraham Williams to easily make calls to the Twitter API using PHP.</p>

<p>You can download the two files that we will be needing from this method from here: <a href="https://github.com/abraham/twitteroauth/tree/master/twitteroauth">Twitteroauth library</a>. After you&rsquo;ve downloaded that just put those 2 files in a folder called <code>libs</code> in the main plugin directory. After that, create a <code>twitteroauth</code> directory and put those 2 files so we will have no problems distinguishing which files belongs to which library later on.</p>

<p>Once you&rsquo;re done with that go ahead and include the <code>twitteroauth.php</code> inside the <code>get_tweets</code> method. Then create a new object for the <code>TwitterOAuth</code> class. The constructor needs a couple of things which you can get from the <a href="https://dev.twitter.com/">Twitter Developer Site</a> by registering an app. You can simply login using your existing twitter account then under <a href="https://dev.twitter.com/apps">my applications</a> choose <code>create new application</code> if you don&rsquo;t already have an application. I won&rsquo;t dive into much detail on how to create an application, all you have to do is to fill in the required details and agree to the terms and conditions set by twitter. Then after that click on the <code>create access token</code> button to create an access token for your app since its not automatically created.
Finally, just supply the <code>consumer key</code>, <code>consumer secret</code>, <code>access token</code>, and <code>access token secret</code>.</p>

<p>To get the tweets of the user we simply call on the <code>get</code> method from the <code>TwitterOAuth</code> library and supply 2 arguments. The first one is the method that we want to use, in this case we only want to get the tweets for a specific user so we will use the <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline">statuses/user_timeline</a> method which requires arguments such as the <code>user_id</code> or the <code>screen_name</code> , <code>since_id</code>, <code>count</code>, <code>max_id</code>, <code>page</code>, and <code>exclude_replies</code>. But we will only use the <code>screen_name</code> or the twitter handle, <code>count</code>, <code>page</code> and <code>exclude_replies</code>. The <code>screen_name</code> is simply the username of the twitter user that you wish to get, the <code>count</code> is the number of tweets to return, and the <code>exclude_replies</code> requires a boolean value to specify whether you want to exclude the replies to a specific twitter (true) user or not (false). The <code>page</code> is simply the page where you want to fetch the tweets, this will largely depend on the value you specified for the <code>count</code>. For example if the user has the following tweets (ordered from most recent to less recent):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Super Cool!</span>
</span><span class='line'><span class="x">Pretty Dang Cool!</span>
</span><span class='line'><span class="x">Dang Cool!</span>
</span><span class='line'><span class="x">Kewl!</span>
</span><span class='line'><span class="x">Uber Cool!</span>
</span><span class='line'><span class="x">Mega Super Duper Cool!</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the value for <code>count</code> is 3 and the <code>page</code> is 1 it will only return the first 3 tweets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Super Cool!</span>
</span><span class='line'><span class="x">Pretty Dang Cool!</span>
</span><span class='line'><span class="x">Dang Cool!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another example when specify <code>count</code> to be 3 and <code>page</code> to be 2, it will return the following tweets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Kewl!</span>
</span><span class='line'><span class="x">Uber Cool!</span>
</span><span class='line'><span class="x">Mega Super Duper Cool!</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you specify the <code>count</code> to be <code>5</code> and the <code>page</code> to be <code>2</code> you only get the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">Mega Super Duper Cool!</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default the tweets that are returned are ordered from the most recent to less recent tweet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="nv">$page</span> <span class="o">=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">require_once</span> <span class="s1">&#39;libs/twitteroauth/twitteroauth.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//access the twitter API</span>
</span><span class='line'>  <span class="nv">$twitterConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TwitterOAuth</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="c1">//consumer key</span>
</span><span class='line'>      <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">//consumer secret</span>
</span><span class='line'>      <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="c1">//access token</span>
</span><span class='line'>      <span class="s1">&#39;&#39;</span>  <span class="c1">//access token secret</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$twitterData</span> <span class="o">=</span> <span class="nv">$twitterConnection</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;statuses/user_timeline&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;screen_name&#39;</span>     <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;count&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;11&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;exclude_replies&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="c1">//exclude replies to a specific twitter user,</span>
</span><span class='line'>      <span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="nv">$page</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$tweet_text</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//if the request was successful</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nv">$twitterConnection</span><span class="o">-&gt;</span><span class="na">http_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">){</span> 
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$twitterData</span> <span class="k">as</span> <span class="nv">$t</span><span class="p">){</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//wrap all the url&#39;s with anchor tags</span>
</span><span class='line'>          <span class="nv">$text</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
</span><span class='line'>              <span class="s2">&quot;#((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|</span><span class="se">\&quot;</span><span class="s2">|&#39;|:|\&lt;|$|\.\s)#ie&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;&#39;&lt;a href=</span><span class="se">\&quot;</span><span class="s2">$1</span><span class="se">\&quot;</span><span class="s2"> target=</span><span class="se">\&quot;</span><span class="s2">_blank</span><span class="se">\&quot;</span><span class="s2">&gt;$3&lt;/a&gt;$4&#39;&quot;</span><span class="p">,</span> <span class="nv">$t</span><span class="o">-&gt;</span><span class="na">text</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$tweet_text</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$text</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$tweet_text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>save_tweet</code> method which we will use to save the text of the randomly selected tweet into the database.
This method will have a <code>$post_id</code> argument when attached to the <code>save_post</code> method. This stores the post id of that specific post. We can use this to get the data associated with the post such as the post title and the post content.</p>

<p>Inside the method we access the global object called <code>$wpdb</code> so that we can do some CRUD operations with the Worpdress database.</p>

<p>Next we pick a random number from 0 to 10, this will be used later to get a specific tweet with the random index. As you might already know, the most recent tweet will have an index of 0 and the one after that will have an index of 1 and so on.</p>

<p>Next we get more information regarding the post by using the <code>get_post</code> method and passing in the post id as its argument. This will return all the information about the post which you can normally find in the <code>wp_posts</code> table in the Wordpress database. But we only need to get 3 fields: the post title, post content and the post type.</p>

<p>The <code>wp_posts</code> table doesn&rsquo;t just store blog posts it also stores pages, attachments, and revisions for specific posts that&rsquo;s why we need to get the post type as well because the post type that we need is only the <code>post</code>. You can read more about <a href="http://codex.wordpress.org/Post_Types">Post Types</a> on Wordpress codex.</p>

<p>Next we check whether the post is a revision by using the <code>wp_is_post_revision</code> method which takes up the post id as its argument. This returns true if the post is a revision and false if its not. Note that Wordpress doesn&rsquo;t just store the most recent version of a specific posts it also stores some revisions. So for example if you have edited a post twice then it would have 2 revisions that will also be saved in the <code>wp_posts</code> table.
We also check if the post type is <code>post</code> to make sure were only running this method if the post is an actual blog post and not an attachment, revision, a page, or some other <a href="http://codex.wordpress.org/Post_Types">post types</a>.</p>

<p>Next we check for the pattern of our shortcode if it exists in the current post.
If it doesn&rsquo;t exists then we do nothing, but if it exists then we extract the <code>page</code> attribute from the results that were returned which is stored in index 1. Index 0 stores the whole pattern that was matched.</p>

<p>Parenthesis are capturing groups in PHP regular expressions so we have the actual page number stored in index 1 because we wrapped the pattern for selecting the numbers 0-9 in parenthesis. Then we use the page number as part of the parameter for the url to get the tweets. Then we call the <code>get_tweets</code> method, this time specifying the page which was inputted by the user as its argument. After that we simply extract the text for that specific tweet by specifying the index number as the random index number that we generated earlier. Then we check the database if an existing entry in the tweets table has already the same post id as the post that were trying to save. We only insert into the database if it doesn&rsquo;t exists yet which is indicated by the number of rows returned from the last select query using <code>$wpdb-&gt;num_rows</code>. If it doesn&rsquo;t exist yet then <code>$wpdb-&gt;num_rows</code> returns 0, if it already exists it returns any number greater than 0 depending on the number of occurence of that specific post id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">save_tweet</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$random_index</span> <span class="o">=</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$post</span> <span class="o">=</span> <span class="nx">get_post</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$post_title</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_title</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$post_content</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_content</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$post_type</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">post_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">wp_is_post_revision</span><span class="p">(</span><span class="nv">$post_id</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$post_type</span> <span class="o">==</span> <span class="s1">&#39;post&#39;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/\[zam_tweets page=([0-9])\]/&#39;</span><span class="p">;</span> <span class="c1">//the general pattern for the shortcode</span>
</span><span class='line'>      <span class="nb">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$post_content</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$matches</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">//extract the page from the matches returned</span>
</span><span class='line'>          
</span><span class='line'>          <span class="nv">$tweets</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_tweets</span><span class="p">(</span><span class="nv">$page</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$tweet</span> <span class="o">=</span> <span class="nv">$tweets</span><span class="p">[</span><span class="nv">$random_index</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT id FROM </span><span class="si">$tweets_table</span><span class="s2"> WHERE post_id = &#39;</span><span class="si">$post_id</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">num_rows</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="nv">$tweets_table</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;post_id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$post_id</span><span class="p">,</span> <span class="s1">&#39;tweet&#39;</span> <span class="o">=&gt;</span> <span class="nv">$tweet</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>save_tweet</code> method would be hooked into the <code>save_post</code> action which is executed every time a post is saved or updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;save_post&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;save_tweet&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the <code>shortcode_to_tweet</code> method, this will convert the shortcode to a content. In this case the content is simply the tweet that was saved in the database when we first published our post. Again we check for the existence of the pattern used for our shortcode. We only perform the query that selects the tweets from the database if the post actually contains the pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">shortcode_to_tweet</span><span class="p">(</span><span class="nv">$attrs</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$post_id</span> <span class="o">=</span> <span class="nx">get_the_ID</span><span class="p">();</span> <span class="c1">//get the id of the current post</span>
</span><span class='line'>  <span class="nv">$post_content</span> <span class="o">=</span> <span class="nx">get_the_content</span><span class="p">();</span> <span class="c1">//get the content of the current post</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/\[zam_tweets page=([0-9])\]/&#39;</span><span class="p">;</span> <span class="c1">//pattern for our shortcode</span>
</span><span class='line'>  <span class="nb">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$post_content</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)){</span> <span class="c1">//check if the pattern exists</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_var</span><span class="p">(</span><span class="s2">&quot;SELECT tweet FROM </span><span class="si">$tweets_table</span><span class="s2"> WHERE post_id = &#39;</span><span class="si">$post_id</span><span class="s2">&#39;&quot;</span><span class="p">);</span> <span class="c1">//select the tweet from the posts table</span>
</span><span class='line'>      <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">;</span> <span class="c1">//assign the content to be the result returned from the database</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we just inform Wordpress about this new shortcode by passing the name of our shortcode (zam_tweets) and the name of the method (shortcode_to_tweet) that would process the shortcode to the <code>add_shortcode</code> method. You can learn more about Shortcodes in the <a href="http://codex.wordpress.org/Shortcode_API">Shortcode API Documentation</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_shortcode</span><span class="p">(</span><span class="s1">&#39;zam_tweets&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;shortcode_to_tweet&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>By doing this Wordpress already knows that once an author publishes a post using the <code>zam_tweets</code> shortcode it uses the <code>shortcode_to_tweet method</code> to convert the shortcode into an actual content. The shortcode for our plugin would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">[zam_tweets page=1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create the <code>installation_housekeeping</code> method which will run once our plugin is installed by the user.
This isn&rsquo;t usually needed especially for simple plugins which only does one thing. But for this plugin we need a table to store the tweets. This will serve as a cache for the tweets that the admin has published using shortcodes.
The table would only have 3 fields: ID, post_id and tweet where the ID is an auto-increment primary key and the post_id is the id of the post and the tweet is the text content of that specific tweet.</p>

<p>One thing to remember here is to not use <code>$wpdb</code> when creating or dropping tables. We use <code>dbDelta</code> instead but we have to include the <code>upgrade.php</code> file under the <code>wp-admin/includes</code> directory before using it.
Another thing to remember is when creating tables you should always use the <code>$wpdb-&gt;prefix</code> which is a value that you can specify on the table prefix variable in the <code>wp-config.php</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">installation_housekeeping</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$tweets_sql</span> <span class="o">=</span> <span class="s2">&quot;CREATE TABLE </span><span class="si">$tweets_table</span><span class="s2"> (</span>
</span><span class='line'><span class="s2">   id INT(10) NOT NULL AUTO_INCREMENT,</span>
</span><span class='line'><span class="s2">   post_id BIGINT(20) NOT NULL,</span>
</span><span class='line'><span class="s2">    tweet VARCHAR(160) NOT NULL,</span>
</span><span class='line'><span class="s2">     PRIMARY KEY id (id)</span>
</span><span class='line'><span class="s2"> );&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">require_once</span> <span class="nx">ABSPATH</span> <span class="o">.</span> <span class="s1">&#39;wp-admin/includes/upgrade.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">dbDelta</span><span class="p">(</span><span class="nv">$tweets_sql</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then hook it up on the event that the plugin is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_zam/zam.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax that we used is: <code>prefix + underscore + plugin name + slash + plugin file name</code>.
So if your plugin name is max and its file name is <code>max.php</code> then your hook should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_max/max.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course anything that we do on plugin install we must undo once the user uninstalls our plugin.
This often depends on the user whether he wants to keep the data that was added by a specific plugin or not. We can actually give the user the option to keep the data or not. But to keep things simple were going to stick to the rule: if the user doesn&rsquo;t want it anymore then we remove everything.</p>

<p>To tell Wordpress what to do once the user uninstalls the plugin (clicking on the delete link).
Create a new file and name it <code>uninstall.php</code>. We don&rsquo;t really have a choice with the naming here, this is a way to tell Wordpress to execute the <code>uninstall.php</code> just before it deletes the plugin.
For this plugin all we have to do is to drop the tweets table and delete <code>zam_options</code> option which is the option that we used earlier to store the users twitter id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;WP_UNINSTALL_PLUGIN&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">exit</span><span class="p">();</span>
</span><span class='line'><span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
</span><span class='line'><span class="nv">$tweets_table</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span> <span class="o">.</span> <span class="s1">&#39;zam_tweets&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;DROP TABLE </span><span class="si">$tweets_table</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">delete_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we just have to add all of our hooks to the constructor so that Wordpress would be aware of all the code we&rsquo;ve written up until now once the class for our plugin is instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">protocol</span> <span class="o">=</span> <span class="nx">is_SSL</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;https://&#39;</span> <span class="o">:</span> <span class="s1">&#39;http://&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;zam_options&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twitter_id</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;zam_twitter_id&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//add the options page</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Zam_Options</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;admin_menu&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;zam_admin_init&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//register the tweets widget</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;widgets_init&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">register_widget</span><span class="p">(</span><span class="s1">&#39;zam_tweets_widget&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//hook up the save_tweet method to the save_post action</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;save_post&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;save_tweet&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//tell wordpress about the zam_tweets shortcode</span>
</span><span class='line'>  <span class="nx">add_shortcode</span><span class="p">(</span><span class="s1">&#39;zam_tweets&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;shortcode_to_tweet&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//activation hook</span>
</span><span class='line'>  <span class="nx">add_action</span><span class="p">(</span><span class="s1">&#39;activate_zam/zam.php&#39;</span><span class="p">,</span> <span class="s1">&#39;installation_housekeeping&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to create Wordpress plugins. You&rsquo;ve also learned some of the best practices and coding standards in developing Wordpress plugins. Now go and create some plugins!</p>

<h3>Resources</h3>

<ul>
<li><a href="http://codex.wordpress.org/WordPress_Coding_Standards">Wordpress Coding Standards</a></li>
<li><a href="http://wp.tutsplus.com/tutorials/7-simple-rules-wordpress-plugin-development-best-practices/">Wordpress Plugin Development Best Practices</a></li>
<li><a href="http://wp.tutsplus.com/tutorials/plugins/two-ways-to-develop-wordpress-plugins-object-oriented-progamming/">Two ways to develop Wordpress plugins</a></li>
<li><a href="http://make.wordpress.org/core/handbook/">Core Contributor Handbook</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/zam.7z">Zam Plugin Source Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Windows Development Environment]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/19/my-windows-development-environment/"/>
    <updated>2013-05-19T15:37:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/19/my-windows-development-environment</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to share some of the applications and development tools that I install on my Windows machine.</p>

<!--More-->


<h3>HeidiSQL</h3>

<p>HeidiSQL is a database manager for MySQL and MSSQL Databases.
<a href="http://www.heidisql.com/">Download</a></p>

<h3>Peazip</h3>

<p>Not really a development tools but its useful for extracting archives for software packages.
<a href="http://peazip.sourceforge.net/">Download</a></p>

<h3>PHP</h3>

<p>PHP is a server-side scripting language that I currently use to take care of the back-end stuff for the web applications that I build.</p>

<p><a href="http://php.net/downloads.php">Download</a></p>

<h3>MySQL</h3>

<p>MySQL is a database management system commonly used with PHP to build dynamic web applications.</p>

<p><a href="http://dev.mysql.com/downloads/">Download</a></p>

<h3>Apache</h3>

<p>Apache is an HTTP Server used to access the PHP applications from the browser.</p>

<p><a href="http://httpd.apache.org/download.cgi">Download</a></p>

<h3>CURL</h3>

<p>CURL is a command line tool for transferring data using the FTP or HTTP protocol. I commonly use it to install packages which uses CURL. For Windows users the latest file under the Win32 &ndash; Generic section should be downloaded.</p>

<p><a href="http://curl.haxx.se/download.html">Download</a></p>

<h3>Chrome Canary</h3>

<p>To get access and play around with the most cutting edge stuff in Google&rsquo;s Chrome browser I always use the Canary Build. It&rsquo;s a very useful tool to learn which features will be coming to the future versions of the Chrome Developer tools.</p>

<p><a href="https://www.google.com/intl/en/chrome/browser/canary.html">Download</a></p>

<h3>Chrome Plugins</h3>

<p>I also use some plugins to further improve my productivity when using the Chrome Browser.</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/measureit/pokhcahijjfkdccinalifdifljglhclm">MeasureIt</a></li>
<li><a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a></li>
<li><a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli">PageSpeed Insights</a></li>
<li><a href="https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka">EyeDropper</a></li>
</ul>


<h3>Octopress</h3>

<p>Octopress is a framework built on top of the Jekyll static site generator. I use it on my blog so I also consider it a s a development tool.</p>

<p><a href="http://octopress.org/">Download</a></p>

<h3>Ruby</h3>

<p>When I need a break from PHP I also play with Ruby. I use the installer from rubyinstaller.org to install ruby on my machine.</p>

<p><a href="http://rubyinstaller.org/">Download</a></p>

<h3>Node.js</h3>

<p>I haven&rsquo;t really played around with Node.js because I only have it installed on my machine to have access to the Node Package Manager which I can use to install development tools like Coffeescript, Bower, Hogan.js, and Grunt.</p>

<p><a href="http://nodejs.org/download/">Download</a></p>

<h3>Chocolatey</h3>

<p>Chocolatey is a package manager for Windows much like the <code>apt-get</code> that we use on linux distributions like Ubuntu or Linux Mint. Chocolatey can be installed by simply pasting the following commands in the command-line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin</span></code></pre></td></tr></table></div></figure>


<p>After that you can just paste in commands to install applications on your machine. So for example if you want to install notepad++ you simply execute the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst notepadplusplus</span></code></pre></td></tr></table></div></figure>


<p>Or if you want Sublime Text 2 instead:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cinst sublimetext2</span></code></pre></td></tr></table></div></figure>


<p>Nice and easy!</p>

<p><a href="http://chocolatey.org/">Download</a></p>

<h3>Sublime Text 2</h3>

<p>Yes I also use Sublime Text just like many of us. It&rsquo;s like the text-editor of the century. I believe I won&rsquo;t switch to any text-editor soon.</p>

<p><a href="http://www.sublimetext.com/2">Download</a></p>

<h3>Sublime Text 2 Packages</h3>

<p>Sublime Text 2 is already awesome but its even more awesome with some packages installed.
To install packages you must first install the package manager. You can do that by executing the following command in the Sublime Text console. You can access the console by pressing ctrl + `:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')</span></code></pre></td></tr></table></div></figure>


<p>Here are some of the packages that I currently have on Sublime Text:</p>

<ul>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a></li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a></li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees Color Schemes</a></li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">DocBlockr</a></li>
<li><a href="http://emmet.io/">Emmet</a></li>
<li><a href="https://github.com/welovewordpress/SublimePhpTidy">PHPTidy</a></li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">SidebarEnhancements</a></li>
</ul>


<p>If you want more sublime text 2 goodness you can check out Alex Maccaw&rsquo;s article: <a href="http://blog.alexmaccaw.com/sublime-text">Setting Up Sublime Text 2</a> or Drew Barontini&rsquo;s <a href="http://drewbarontini.com/setup/sublime-text/">Sublime Text 2 Setup</a></p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Package Control Installation</a></p>

<h3>Git</h3>

<p>Git is a version control software which I primarily use to keep track of the changes and to push to a remote repository for the projects that I&rsquo;m working on.</p>

<p><a href="http://git-scm.com/">Download</a></p>

<h3>Wordpress</h3>

<p>Wordpress is a content management system that I used for the past few months to create plugins for. It&rsquo;s built on top of PHP and uses MySQL as its database.</p>

<p><a href="http://wordpress.org">Download</a></p>

<h3>POEdit</h3>

<p>POEdit is a cross-platform gettext catalogs editor. I use it to easily create translations for Wordpress plugins. The way it works is simple, you simply open the file that you want to create translations for and it will automatically scan it for the groups of text which are wrapped in <code>__('')</code> and <code>_e()</code>. After that you can just use Google translate to translate the text that its lists out.</p>

<p><a href="http://www.poedit.net/">Download</a></p>

<h3>Everything</h3>

<p>Not really a development tool but its a very useful software for quickly finding and opening files that I want to edit.</p>

<p><a href="http://www.voidtools.com/">Download</a></p>

<h3>Composer</h3>

<p>Composer is like the NPM equivalent for PHP. It&rsquo;s also a package manager used for installing different tools for PHP.
You have 3 options if you want to install it on Windows. First is using CURL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<p>Another is by simply creating a new PHP file and putting the following code then execute it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php -r "eval('?&gt;'.file_get_contents('https://getcomposer.org/installer'));"</span></code></pre></td></tr></table></div></figure>


<p>The third option is by using the <a href="http://getcomposer.org/Composer-Setup.exe">Windows installer</a></p>

<p>Once you&rsquo;re done installing Composer you can go ahead and search from the <a href="https://packagist.org/">packagist</a> site to search for some packages. In the screenshot below we have the <code>eher/phpunit</code> package. You can see all the information regarding its requirements, suggestions and conflicts be sure to read it before trying to install anything.</p>

<p><img src="http://anchetaWern.github.io/images/posts/windows_dev_environment/php_unit.PNG" alt="package" /></p>

<p>You can install packages by simply copying the string under the <code>dev-master</code> or the top-level section. In the example above we have <code>"eher/phpunit": "dev-master"</code>. Just wrap it in curly braces and put in the <code>require</code> property.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{    
</span><span class='line'>  "require": {
</span><span class='line'>      "eher/phpunit": "dev-master"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>After that just save the file as <code>composer.json</code> and then execute <code>composer install</code> on the same directory where you have that file. It may take a while depending on the package so be patient and don&rsquo;t close the command-line.
If the package that you installed can be executed from the command-line simply add it to the environment variables so that you can easily execute it from the command-line regardless of the path where you are currently in.</p>

<p><a href="http://getcomposer.org/download/">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get a job in the Web Development Industry]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry/"/>
    <updated>2013-05-13T13:19:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry</id>
    <content type="html"><![CDATA[<p>Want to get a job in the Web Development Industry? That&rsquo;s easy! You must know HTML, CSS, JavaScript and PHP.
Nah! Sometimes that is all you really need but most of the time you need to know more than that in order to get the job you want. In this article I&rsquo;m going to share to you some of the tips that has worked for me in finding a job in Web Development.</p>

<!--More-->


<p>First of all just to make sure that we are on the same boat. What is a web developer?
According to <a href="http://en.wikipedia.org/wiki/Web_developer">Wikipedia</a>:</p>

<blockquote><p>A web developer is a programmer who specializes in, or is specifically engaged in, the development of World Wide Web applications, or distributed network applications that are run over HTTP from a web server to a web browser.</p></blockquote>


<p>Ok so a web developer is actually a programmer who works on the web.
Web developers can be classified into 4 groups:</p>

<ul>
<li>front-end developer</li>
<li>back-end developer</li>
<li>middle-tier developer</li>
<li>full-stack developer</li>
</ul>


<p>The <strong>front-end developer</strong> mainly works on the public facing part of a web application.
Front-end developers are mainly concerned with UI components, browser support, front-end performance, and everything else that the user can perceive. Common technologies involved are HTML, CSS, JavaScript.</p>

<p>The <strong>back-end developer</strong> mainly works on the back-end of the website or the things that happens in the background while the user is interacting with the web application. This is the core of the web application. Common technologies involved are server-side technologies like PHP, Python, and Ruby. Back-end developers also works with databases such as MySQL, PostgreSQL Oracle, and MariaDB.</p>

<p>The <strong>middle-tier developer</strong> mainly works with services that sit between the front-end and the back-end. The middle tier developer is mainly concerned with how the front-end and back-end of the web application is going to communicate.</p>

<p>Lastly there&rsquo;s the <strong>full-stack developer</strong> which knows how to do a bit of the front-end, back-end and middle stack.</p>

<p>So which do you want to be? Personally for me I&rsquo;m currently working as a full-stack developer. I work a bit on the front-end, back-end and the middle stack. The advantage of the first 3 types of developers is that they&rsquo;re specialists. They have a very deep understanding of the technologies that they are working on, specialists are often rare so their salary is very high. The advantage of being a full stack developer is that its easy to become one and you will be more marketable since you know a lot of different skills and technologies. The only downside is that they don&rsquo;t make as much salary as the front-end, back-end and middle-tier guys make.</p>

<p>Back to the main topic of this article. Here are some tips to get a job in web development:</p>

<ul>
<li>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</li>
<li>Learn things on your free time</li>
<li>Network</li>
<li>Apply for that job</li>
</ul>


<h3>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</h3>

<p>You must have your own portfolio, <a href="https://github.com">github</a>, <a href="http://stackoverflow.com">stackoverflow</a> and <a href="http://www.linkedin.com/">linked In</a>. You can also create a blog if you like writing and sharing your ideas.</p>

<p>If you&rsquo;re a new graduate you might not have anything to put in your portfolio and that&rsquo;s just normal.
What you can do is to work on personal projects or create a blog. A personal project can be anything that you really want to create. For developers its common to work on projects that can help them in their daily tasks like generators, code linters, or libraries. You can also have a personal project that involves technologies that you want to learn. For example, if you want to learn how to use the Facebook Graph API you can go ahead and plan out the application that you want to build. It doesn&rsquo;t matter if you don&rsquo;t know anything about the technology or if the features that the application that you have in mind are already present in Facebook. Just dive in to the <a href="https://developers.facebook.com/docs/reference/api/">Facebook Graph API Documentation</a> and figure out how to do stuff using the API by Googling stuff. You can also ask questions at Stackoverflow if you get stuck.</p>

<p>The fastest way to learn things is to dive right in to doing it, but be sure to google best practices and look at code that other people have written so that you&rsquo;ll have an idea on how to do things the right way.</p>

<p>Once you have setup your personal project you can just go ahead and push it up on Github so that the rest of the world can see it. It doesn&rsquo;t matter if other people thinks your code sucks. What matters is that you know you&rsquo;ve done a good job and is constantly working on improving it.</p>

<p>You can also create your stackoverflow profile and answer some of the questions that you can already answer. It doesn&rsquo;t matter if the question that you&rsquo;re trying to answer has already an accepted answer or that the question is already 3 years old. Just answer the question as best as you could and people will surely notice. They will give comments on how to improve your answer and you will even get an upvote if they think your answer is awesome.</p>

<p>Lastly you can also create your LinkedIn profile and start putting some of your achievements in school and the personal projects that you have worked on in your free time. Link to your portfolio, twitter, Google plus, stackoverflow, github or even your facebook if you want.
Its okay to put in a lot of information about your past achievements and projects but be sure to only include the things that actually matter to the career that you are trying to pursue. In this case being a web developer. So there&rsquo;s no need to put in your linkedIn profile that you are actually a chess champion or a basketball super star.</p>

<h3>Learn things on your free time</h3>

<p>The best way to make yourself more marketable is to learn things on your free time. Its a good time to learn something new. Especially now that there&rsquo;s so much good learning resources out there which are free to use. Here are some of the resources that I have personally used:</p>

<p><a href="https://www.udacity.com/">Udacity</a>
<a href="http://www.codeschool.com/">Codeschool</a>
<a href="http://learn.shayhowe.com/html-css/">A Beginners Guide to HTML and CSS</a>
<a href="https://developer.mozilla.org/en-US/">Mozilla Developer Network</a>
<a href="http://google.com">Google</a></p>

<p>The sheer amount of stuff that you need to learn in order to become a proficient web developer is staggering. But the key is don&rsquo;t be overwhelmed because its <a href="http://anchetawern.github.io/blog/2013/04/13/this-crazy-world-of-web-development/">just how things are in this field</a>. Just take it easy and learn things one at a time.
My advice is that you should learn first the fundamentals before diving in to the shiny and new stuff. An example would be to learn first how to do things in JavaScript before you learn jQuery. Write plain CSS first before using CSS Preprocessors like LESS and SASS.</p>

<h3>Network</h3>

<p>Its always a good idea to have a network of people who can recommend you for a job. If you have taken up college, it can be your classmates, teachers, friends. It can also be like-minded people that you have met online. A good place to find those connections is linkedIn, a social network for professionals. But be sure to keep your linkedIn profile updated so that people will actually notice your profile. Its also a good idea to add recruiters who are recruiting professionals in the field of web development. You can also join groups in LinkedIn and start contributing to the community. There will be a bigger chance that someone will notice you and can recommend you to a client.</p>

<p><img src="http://anchetaWern.github.io/images/posts/how_to_find_a_job_in_the_webdev_industry/groups.png" alt="linkedIn Groups" /></p>

<h3>Apply for that job</h3>

<p>We are never really 100% ready to apply for a job that we want. Sometimes were not confident that we enough of that specific technology in order to apply. But that&rsquo;s actually a good sign that you&rsquo;re ready. If you&rsquo;re familiar with the Dunning-Kruger effect which according to Wikipedia is:</p>

<blockquote><p>a cognitive bias in which unskilled individuals suffer from illusory superiority, mistakenly rating their ability much higher than average. This bias is attributed to a metacognitive inability of the unskilled to recognize their mistakes.</p></blockquote>


<p>Not having the confidence that you already know enough to start appliying for a job means that you&rsquo;re already in the second stage of competence which is the conscious incompetence which means that you already recognize your lack of knowledge or skill on a specific field. This is enough to drive you into learning more.</p>

<p>At some point in time when you feel like you already have the minimum requirements to get started with applying for a job then you can go ahead and start applying. Here are some good places to start looking for jobs:</p>

<ul>
<li><p><a href="http://www.craigslist.org/about/sites">Craigslist</a> &ndash; you can look at web/HTML/info design jobs, internet engineering jobs, and software/QA/DBA/etc jobs. Sometimes there are bad eggs that you have to filter through. Some signs that a job posting is a bad egg if there are lots of mispelled words and there&rsquo;s really no sane job description which gives you a bit of idea what you will be working on once you get accepted for the job.</p></li>
<li><p><a href="http://jobmote.com/">Jobmote</a> &ndash; by far has the most quality job listings I&rsquo;ve ever found. These are human curated job listings so the bad eggs are already filtered out. These are mostly telecommuting jobs.</p></li>
<li><p><a href="https://www.staff.com/">Staff</a> &ndash; mostly telecommute jobs. You will get emailed when there&rsquo;s a job opportunity.</p></li>
</ul>


<p>All you really need to get to that interview is to have an awesome Résumé and cover letter. I won&rsquo;t be delving into those in this article since they have already been written a dozen times before. Just Google those and you will surely find an answer.</p>

<h2>Closing Thoughts</h2>

<p>I cannot assure that this will work for you as well as it worked for me but just give it a try if you really want to get that job. All I can say is that you&rsquo;re already half-way to getting that job if you have the genuine passion and you really love web development and building things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stay healthy as a developer]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer/"/>
    <updated>2013-05-11T19:14:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer</id>
    <content type="html"><![CDATA[<p>Developers are not really the healthiest group of people in the planet simply because our faces are just buried in front of the computer 8 hours a day (or even more) 7 days a week. Were just sitting all day thinking of how to solve a problem, which technique to implement, and writing code.</p>

<!--More-->


<p>Here are the things that I personally observe in order to stay healthy:</p>

<ul>
<li>Exercise</li>
<li>Eat healthy foods</li>
<li>Stand while working</li>
<li>Sleep well</li>
<li>Take breaks</li>
</ul>


<h3>Exercise</h3>

<p>Always try to get atleast an hour of exercise everyday. Doesn&rsquo;t matter which time you exercise(either morning or afternoon) or what type of exercise you do. What&rsquo;s important is that you enjoy exercising and don&rsquo;t think of anything else while doing it.
I personally like brisk walking, jogging and running. I live close to a spacious school ground and that&rsquo;s where I usually exercise so there&rsquo;s really no excuse in not exercising.</p>

<h3>Eat healthy foods</h3>

<p>Always try to eat fruits, vegetables and have soup for every meal.
Soup helps in making the food easier to digest.
You can also try to eat less meat since meat is harder to digest than vegetable.
If you&rsquo;re the carnivorous type then there&rsquo;s no excuse in drinking 8 &ndash; 10 glasses of water everyday. Actually you can drink more if you&rsquo;re sweating a lot when exercising. Water helps in digestion, combine it with fiber which you can get from <a href="http://www.doctoroz.com/videos/50-fiber-rich-foods">a whole bunch of fruits and vegetables</a> leads to a healthier stomach.</p>

<p>Also try chew the food well, eating a meal in 20 to 30 minutes is a good indication that you&rsquo;re chewing your food well. The stomach digests the food that we eat but digestion actually starts in the mouth when we chew our food.
This will lead to better digestion which leads to better stomach and colon health.</p>

<h3>Stand while working</h3>

<p>Try to get a standing desk. Sitting is not good especially if you don&rsquo;t take frequent breaks.
If you don&rsquo;t have the budget or you&rsquo;re earning for something else you can always try to look for an alternative standing desk. I personally use our chest and drawer as my standing desk simply because it matches my elbow height and I feel comfortable using it.</p>

<h3>Sleep well</h3>

<p>Always try to get atleast 7 &ndash; 8 hours of sleep each night.
This ensures that our mind is in its optimum state when we wake up.
Fresh, happy and ready to solve some problems.</p>

<h3>Take breaks</h3>

<p>Take breaks every 50 &ndash; 60 minutes. Stretch up and do a micro-exercise, its a good way to make sure that your blood is flowing properly. Venous diseases like hemorrhoids, deep vein thrombosis, and varicose veins are born from not moving too much and staying in just one position all day.</p>
]]></content>
  </entry>
  
</feed>
