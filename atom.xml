<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-12-11T15:30:32+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Passwords in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php/"/>
    <updated>2015-12-11T12:35:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;re going to take a look at some of the libraries that allows us secure passwords in PHP.</p>

<h3>Password Compat</h3>

<p>The first library that we&rsquo;re going to look at is Password Compat. You can install it through <a href="https://getcomposer.org/">Composer</a> by using the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require ircmaxell/password-compat</span></code></pre></td></tr></table></div></figure>


<p>Once it&rsquo;s done installing, you can the include the vendor autoload file so you can use its functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>password_hash</code> function is used to hash passwords. It accepts the password that you want to hash as its first argument and the algorithm to be used for password hashing as its second. In the example below, <code>PASSWORD_DEFAULT</code> is used. This allows you to use the most secure algorithm that&rsquo;s currently available to PHP. At the time of writing of this article, the most secure algorithm that&rsquo;s available to PHP is bcrypt. So that&rsquo;s the one that&rsquo;s being used when you specify <code>PASSWORD_DEFAULT</code> as the second argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_DEFAULT</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also an optional third argument which allows you to change the CPU <code>cost</code> of hashing the password. By default the <code>cost</code> is 10. So if you have a less powerful server you can change it to something lower. The <code>cost</code> can have a value between 4 and 31.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nx">password_hash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nx">PASSWORD_DEFAULT</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;cost&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then store the hash in your database.</p>

<p>To validate if a password matches the hash stored in the database, use the <code>password_verify</code> method. This accepts the password as the first argument and the hash as the second. So in your application you might have a query to select the user based on its email or username and then you use the hash that was returned for the second argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">password_verify</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">)){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;valid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>PHPAss</h3>

<p>PHPAss is one of the older password hashing libraries that are available for PHP. Nevertheless it doesn&rsquo;t make it less secure than any of the password securing methods in this article. It uses the blowfish algorithm to hash passwords.</p>

<p>Execute the following to install PHPAss.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require hautelook/phpass</span>
</span></code></pre></td></tr></table></div></figure>


<p>After including the vendor autoload file, set your current file to use the <code>PasswordHash</code> class in the <code>Hautelook</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Hautelook\Phpass\PasswordHash</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new password hasher instance. This accepts 2 required arguments. First is the base-2 logarithm of the iteration count used for password stretching. The second a boolean value for setting if the password will use portable hashes. The values that I&rsquo;ve set below are the default one&rsquo;s. Those will do for most use cases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$passwordHasher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordHash</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then call the <code>HashPassword</code> method to actually hash the password. This hash should then be stored into the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nv">$passwordHasher</span><span class="o">-&gt;</span><span class="na">HashPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check if a password is valid by using the <code>CheckPassword</code> method. This accepts the password as its first argument and the hash that came from the database as the second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$passwordMatch</span> <span class="o">=</span> <span class="nv">$passwordHasher</span><span class="o">-&gt;</span><span class="na">CheckPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$passwordMatch</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;valid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;invalid&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>PHP Password Lib</h3>

<p>PHP Password Lib is one of those libraries that isn&rsquo;t really recommended for production use. As mentioned in their <a href="https://github.com/ircmaxell/PHP-PasswordLib">Github page</a> itself, it&rsquo;s currently in beta and should be used at your own risk.</p>

<p>In order to install PHP Password Lib, you first have to add a <code>minimum-stability</code> option and set it to <code>dev</code>. Also set <code>prefer-stable</code> to <code>true</code> so that composer will default to installing the stable versions of the other libraries that you&rsquo;re installing via composer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&quot;minimum-stability&quot;: &quot;dev&quot;,</span>
</span><span class='line'><span class="x">&quot;prefer-stable&quot;: true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can&rsquo;t really find the library in <a href="https://packagist.org">Packagist</a> so you need to add the following to your <code>composer.json</code> file directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&quot;PasswordLib/PasswordLib&quot;: &quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, execute <code>composer update</code> to update the dependencies.</p>

<p>To use the library, create a new instance of the <code>PasswordLib</code> class and then use it to call the <code>createPasswordHash</code> method to hash a password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$lib</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PasswordLib\PasswordLib</span><span class="p">();</span>
</span><span class='line'><span class="nv">$hash</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">createPasswordHash</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like the previous libraries it also comes with its own verify function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$is_valid</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">verifyPasswordHash</span><span class="p">(</span><span class="nv">$password</span><span class="p">,</span> <span class="nv">$hash</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$is_valid</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;yep&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;nope&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside from the generating and verifying hashes, it also allows you to generate random tokens. A sample use case would be when users request for their password to be reset. That&rsquo;s commonly done by sending an email to the user. That email contains a link with a query parameter on it which has a random string as its value. That string is the token. Which is used for fetching the password reset request that was saved in the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$token</span> <span class="o">=</span> <span class="nv">$lib</span><span class="o">-&gt;</span><span class="na">getRandomToken</span><span class="p">(</span><span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$token</span><span class="p">;</span> <span class="c1">// Mpe/H3oLamOqEV4uxTwu.fuhKpb5p/u4BMu</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>zxcvbn-php</h3>

<p>zxcvbn-php is a library for estimating password strength.</p>

<p>You can install it by executing the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require bjeavons/zxcvbn-php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the library, make use of the <code>ZxcvbnPhp\Zxcvbn</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">ZxcvbnPhp\Zxcvbn</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then determine the password score by calling the <code>passwordStrength</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$zxcvbn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Zxcvbn</span><span class="p">();</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$strength</span> <span class="o">=</span> <span class="nv">$zxcvbn</span><span class="o">-&gt;</span><span class="na">passwordStrength</span><span class="p">(</span><span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$strength</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on my testing, it returns 0 if the password is not secure or easy to crack. And return 4 if it is secure. I haven&rsquo;t found any values between those and there&rsquo;s nothing higher than 4 so I assume it can only return a score of either 4 or 0. The result contains other data as well. Things like the entropy, calc_time and crack_time.</p>

<h3>GenPhrase</h3>

<p>Lastly, we&rsquo;re going to take a look at GenPhrase. This library allows us to generate secure passphrases in PHP.</p>

<p>To install GenPhrase, execute the following on your terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">composer require genphrase/genphrase</span>
</span></code></pre></td></tr></table></div></figure>


<p>One note about the installation though. It&rsquo;s also mentioned in their <a href="https://github.com/timoh6/GenPhrase">official Github project page</a>. It mentioned that GenPhrase should be obtained only via secure connection using Github. This is because Composer is susceptible to man-in-the-middle attacks. If you&rsquo;re just testing, it&rsquo;s fine to install this library via composer. But if you&rsquo;re following this tutorial to implement this library on a production server then think again. You&rsquo;ve been warned.</p>

<p>To use GenPhrase, create a new instance of the <code>Password</code> class under the <code>GenPhrase</code> namespace. Then call the <code>generate</code> method to generate the random passphrase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GenPhrase\Password</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">();</span> <span class="c1">// Slum treble Boost rack</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass the <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory">entropy</a>) as an argument. By default the value is 50. But you can have a value between 26 and 120.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span> <span class="c1">// soviet!Retain8skinny&amp;spoil</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to secure passwords in PHP using the <a href="https://github.com/ircmaxell/password_compat">Password Compat</a>, <a href="https://github.com/hautelook/phpass">phpass</a>, <a href="https://github.com/ircmaxell/PHP-PasswordLib">PHP Password Lib</a>, <a href="https://github.com/bjeavons/zxcvbn-php">zxcvbn</a> and <a href="https://github.com/timoh6/GenPhrase">GenPhrase</a> libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools of Trade]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/05/tools-of-trade/"/>
    <updated>2015-12-05T07:19:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/05/tools-of-trade</id>
    <content type="html"><![CDATA[<p>Every developer has their own set of &ldquo;go to tools&rdquo; when it comes to developing applications. Such as the stack, programming tools and libraries that would make specific tasks easier to implement.
In this article I&rsquo;m going to share some of the tools and resources that I usually use in my day to day web development practice.</p>

<h3>LAMP</h3>

<p>Since I&rsquo;m running Ubuntu on my machine, I use the LAMP (Linux, Apache, MySQL, PHP) stack for all of my projects. Linux being the Operating System, Apache as the web server, MySQL for the database and PHP for the programming language.</p>

<h3>Composer</h3>

<p><a href="https://getcomposer.org/">Composer</a> is a package manager for PHP. It handles the installation of various PHP libraries which can be found at <a href="https://packagist.org/">Packagist.org</a>.</p>

<h3>Laravel</h3>

<p>For medium-sized projects (takes about 2-5 months to build), I use the <a href="http://laravel.com/">Laravel</a> framework. And for small-sized (takes about 2 days to 3 weeks to build), I use the <a href="http://lumen.laravel.com/">Lumen</a> framework which is basically a lightweight version of Laravel. I chose it because of the sheer elegance of code that can be written when using the framework. It also comes with a lot features that I need in most of my projects. Such as database migrations, seeding, routing, templating and easy integration with third-party libraries.</p>

<h3>jQuery</h3>

<p>They say jQuery is for sissies, but I don&rsquo;t really mind. As long as the tool works, it doesn&rsquo;t really matter. jQuery is basically the all in one solution for all my JavaScript needs. It makes it easy to select and manipulate the elements in the page, listen to events and make AJAX requests. I haven&rsquo;t done a web project where I didn&rsquo;t need jQuery.</p>

<h3>Sublime Text</h3>

<p>My text-editor of choice, though I admit that I&rsquo;m still using an unregistered copy. So I still see the purchase pop-up every now and then. Though I have plans to buy a license in the future. But as they say &ldquo;someday I&rsquo;ll buy a sublime text license but today isn&rsquo;t that day&rdquo;. What I liked with <a href="http://www.sublimetext.com/">Sublime Text</a> is that it makes writing code faster. You can also install plugins which integrates with other programs such as JSHint or Git.</p>

<h3>Git</h3>

<p>Most developers today are using <a href="http://git-scm.com/">Git</a>, probably because of Github. But that doesn&rsquo;t really matter. Git is an awesome software by itself, even without Github. For the uninitiated, Git is a version control software which allows you to make snapshots of your project so that you can easily revert later or share your changes to your team. Github on the other hand, is a web based Git repository hosting service with lots of other nice features. Go check it out yourself. But the key takeaway is that Github makes collaboration much easier with the set of tools that it provides.</p>

<h3>Cordova</h3>

<p>Ocassionally I get mobile app development projects. This is where <a href="https://cordova.apache.org/">Cordova</a> comes in handy. It basically makes it easier to develop apps for any of the platforms (Android, iOS, Windows, etc.) that it supports by making use of web technologies (HTML, CSS, JavaScript). Access to native device APIs are also provided by making use of plugins.</p>

<h3>Bootstrap</h3>

<p>I admit, I&rsquo;m not a designer and my CSS skills could certainly improve. Making things pretty isn&rsquo;t really my forte. That&rsquo;s why front-end frameworks such as <a href="http://getbootstrap.com/">Bootstrap</a> really helps. It keeps my mind off making things pretty so I can just concentrate on the functionality.</p>

<h3>Chrome/Chromium</h3>

<p>The main browser that I use for testing the web applications that I build. The developer tools is what really makes it shine. It&rsquo;s interface is really intuitive and easy to use. Almost every aspect of your web application can be inspected and tested by using their developer tools.</p>

<h3>Skype</h3>

<p>Since I&rsquo;m mostly working remotely, there&rsquo;s a need for exchanging messages and making calls. Skype helps me with that. It&rsquo;s also cross-platform, so I can install it no matter what machine I&rsquo;m using. Recently they also released <a href="https://web.skype.com/en/">Skype for web</a> which makes things even more easier.</p>

<h3>Bitbucket</h3>

<p><a href="https://bitbucket.org/">Bitbucket</a> is another Git repository hosting service. Well there&rsquo;s already Github, but the thing is you can only have public repositories on Github. Bitbucket on the other hand allows you to have private repositories for free. That&rsquo;s pretty much the only reason why I used Bitbucket. I need my projects to be private so I use it instead of Github.</p>

<h3>Node.js</h3>

<p>If a project calls for real-time functionality such as chat applications, nothing beats <a href="https://nodejs.org/en/">Node.js</a>. It provides an event-driven architecture and a non-blocking I/O API. This allows real-time applications to be built with ease.</p>

<h3>Socket.io</h3>

<p><a href="http://socket.io/">Socket.io</a> is a library that makes it easy to build real-time applications. It&rsquo;s often used in tandem with Node.js.</p>

<h3>Virtualbox</h3>

<p>If a project requires me to test on a different platform and browser such as Internet Explorer or Safari on Windows. I usually use <a href="https://www.virtualbox.org/">Virtualbox</a>. I guess I don&rsquo;t really have much of a choice. Other than Virtualbox, I&rsquo;m not really aware of any other software that can virtualize an OS.</p>

<h3>AWS</h3>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> as the name suggests is a collection of Web Services offered by Amazon. I only use ec2 (elastic compute cloud), s3 (simple storage service) and cloudfront (CDN) though. The cool thing about their web services is that they&rsquo;re tightly integrated with each other. Which means that you can easily use s3 within an ec2 instance without having to do much of the setup. They also provide an API which can be used to programatically upload files to their servers.</p>

<h3>DigitalOcean</h3>

<p>Recently I also started using <a href="https://www.digitalocean.com/">Digitalocean</a> for my personal projects. Mainly because its very affordable (only $5 a month for the lowest tier) and easy to resize (I can upgrade or downgrade any time).</p>

<h3>Carbon</h3>

<p>Carbon is a PHP library for working with dates.</p>

<h3>Moment</h3>

<p>Basically the Carbon equivalent for JavaScript. The nice thing is that you can use it on both the client-side and server-side (node.js).</p>

<h3>Intervention Image</h3>

<p>When there&rsquo;s a need for image processing in a PHP application, I always grab <a href="http://image.intervention.io/">intervention image</a> through Composer. Resizing, cropping, blurring, change orientation, optimizing, name it and intervention image has it. But what hit the jackpot is that it works nicely with Laravel without having to do much setup.</p>

<h3>Twig</h3>

<p>Blade is the default templating engine used by Laravel so I use that without having second thoughts. But whenever I work outside Laravel, I have to use something like <a href="http://twig.sensiolabs.org/">Twig</a> to handle my templating needs.</p>

<h3>Handlebars</h3>

<p>My templating engine of choice when I&rsquo;m using JavaScript.</p>

<h3>Mandrill</h3>

<p>Whenever I need to send out emails from an application, <a href="https://www.mandrill.com/">Mandrill</a> is the tool of choice. Its a no-brainer since Laravel makes it easy to send emails using services such as Mandrill.</p>

<h3>Faker</h3>

<p>As programmers we all love automating things. <a href="https://github.com/fzaninotto/Faker">Faker</a> does exactly that. It generates fake data for you so you don&rsquo;t have to enter it manually through the application that you&rsquo;re building.</p>

<h3>Dropzone</h3>

<p><a href="http://www.dropzonejs.com/">Dropzone</a> is my file upload libary of choice. It&rsquo;s easy to get started using it. But it also makes it easy for developers to customize.</p>

<h3>Stripe</h3>

<p>Whenever a project needs to accept payments from its users, <a href="https://stripe.com/">Stripe</a> is my service of choice. I&rsquo;m not really confident enough that I&rsquo;d be able to implement a payment system which is safe from every hacker. Just the thought of saving the hash of credit card numbers on a database sends shivers to my spine. Stripe takes that fear away. I know the guys at Stripe know their stuff.</p>

<h3>Paypal</h3>

<p>For simple payment needs, <a href="https://www.paypal.com/">Paypal</a> is the tool. And BTW, this is also how I receive payments. It integrates with almost every bank on the planet so you can easily withdraw your money using your bank of choice.</p>

<h3>Twilio</h3>

<p>Whenever there&rsquo;s a need for voice enabled apps or SMS verification, nothing beats <a href="https://www.twilio.com/">Twilio</a>.</p>

<h3>Guzzle</h3>

<p>&ldquo;No man is an island&rdquo;, the same is true with web applications. More often than not, you&rsquo;ll find the need to integrate with third party services. That&rsquo;s where <a href="http://docs.guzzlephp.org/en/latest/">Guzzle</a> comes in, it&rsquo;s a PHP library for making http requests. If the API that you&rsquo;re working on doesn&rsquo;t already come with a library for making requests, then Guzzle is for you.</p>

<h3>thujohn/pdf-l4</h3>

<p>For applications that require printing of reports. <a href="https://github.com/thujohn/pdf-l4">Thujohn&rsquo;s pdf-l4</a> library does it.</p>

<h3>Datatables</h3>

<p>If an application requires searching or paginating through a table of data, <a href="https://www.datatables.net/">datatables</a> does the trick. What&rsquo;s great is that there&rsquo;s also a <a href="https://github.com/Chumper/Datatable">datatable</a> library for Laravel 4 which makes it easy to integrate to a Laravel project.</p>

<h3>Beanstalk</h3>

<p><a href="http://kr.github.io/beanstalkd/">Beanstalk</a> is a queue system. You basically use it for running time-consuming tasks such as sending out emails or processing images. There&rsquo;s also a library called <a href="https://github.com/pda/pheanstalk">Pheanstalk</a> which makes it easy to work with Beanstalk for queueing tasks.</p>

<h3>Elasticsearch</h3>

<p>I use <a href="https://www.elastic.co/">Elasticsearch</a> if there&rsquo;s a need for fast searches. Elasticsearch if a full-text search server that is based on <a href="https://lucene.apache.org/core/">Apache Lucene</a>. It works with</p>

<h3>schickling/laravel-backup</h3>

<p>Any decent developer would implement a database backup and restore functionality for each of the applications that they build. For Laravel developers, the <a href="https://github.com/schickling/laravel-backup">laravel-backup</a> library is one choice. It allows you to easily backup your database on a folder in the server or in an Amazon s3 bucket.</p>

<h3>Cron</h3>

<p>We all know Cron. It&rsquo;s the thing that we use whenever we need to execute something at specific intervals.</p>

<h3>Express</h3>

<p>Express is a framework for Node.js. From their website itself: &ldquo;Express: Fast, unopinionated, minimalist web framework for Node.js&rdquo;. It handles routing and serving of static files. That&rsquo;s all it really does but you can easily install third-party libraries for talking to the database or handling views and you wouldn&rsquo;t have any problem. Its unopinionated so you can do whatever the fuck you want and it won&rsquo;t complain.</p>

<h3>Picnic CSS</h3>

<p>Recently for some of my personal projects, I used <a href="http://www.picnicss.com/">picnic css</a>. Think of it as a lightweight bootstrap. It makes your UI beautiful without all the cruft that usually comes with bootstrap. It&rsquo;s also modularized into a set of plugins. So you can just include the plugins that you need.</p>

<h3>Conclusion</h3>

<p>In this article you&rsquo;ve learned about some of the tools that I usually use in my projects. What about you? What are your &ldquo;go to&rdquo; tools when it comes to developing applications?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get the Logo of Any Company]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company/"/>
    <updated>2015-11-28T12:17:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company</id>
    <content type="html"><![CDATA[<p>In one of my previous projects called <a href="http://wern-ancheta.com/projects/stockswitch/">StockSwitch</a>, I had the need to fetch and utilize the logo of companies that are included in the NYSE, NASDAQ, and AMEX. In this article, I&rsquo;ll be showing you how you can get the logo for any company so that you can use it in your projects.</p>

<p>The best way to get the logo of any company is via Clearbit&rsquo;s logo API. All you have to do is replace the value of <code>{DOMAIN-NAME}</code> with the domain name used by the company that you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://logo.clearbit.com/{DOMAIN-NAME}</span></code></pre></td></tr></table></div></figure>


<p>For example, you want to utilize Google&rsquo;s logo in your project. Simply create a new image tag and link to <code>logo.clearbit.com</code> followed by the domain name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://logo.clearbit.com/google.com&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass in the following optional parameters.</p>

<ul>
<li>size &ndash; the size in pixels of the logo. The highest value I found to be valid is 800px. And the lowest is 5px.</li>
<li>format &ndash; you can pass either <code>png</code> or <code>jpg</code>.</li>
<li>greyscale &ndash; pass in a value of <code>true</code> if you want the logo to be in greyscale.</li>
</ul>


<p>For example, you want the image to be in 50px and the format is png.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;https://logo.clearbit.com/google.com?size=50&amp;format=png&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also save it on your own server so you don&rsquo;t use Clearbit&rsquo;s resources every time the company logos are requested. Here&rsquo;s a sample code on how you might do it in php.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$companies</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;facebook.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;google.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;oracle.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;amazon.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ebay.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;uber.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;twitter.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;github.com&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$companies</span> <span class="k">as</span> <span class="nv">$company</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$url</span> <span class="o">=</span> <span class="s2">&quot;https://logo.clearbit.com/</span><span class="si">{</span><span class="nv">$company</span><span class="si">}</span><span class="s2">?size=150&amp;format=png&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">file_put_contents</span><span class="p">(</span><span class="s1">&#39;logos/&#39;</span> <span class="o">.</span> <span class="nv">$company</span> <span class="o">.</span> <span class="s1">&#39;.png&#39;</span> <span class="p">,</span> <span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above gets the contents returned from the clearbit logo URL and then saves it to the <code>logos</code> directory in the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to pokeapi-json]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/21/introduction-to-pokeapi-json/"/>
    <updated>2015-11-21T19:53:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/21/introduction-to-pokeapi-json</id>
    <content type="html"><![CDATA[<p>Welcome to yet another post about a side-project of mine. This time it&rsquo;s a totally useless project. It&rsquo;s called <a href="https://github.com/anchetaWern/pokeapi-json">pokeapi-json</a>. As the name suggests, its the JSON version of the <a href="https://github.com/phalt/pokeapi">pokeapi</a> project. If you check their Github page, the data is basically in csv format. The only real difference is that I&rsquo;m using JSON on my project. Which is pretty much the same way they&rsquo;re serving the data on the <a href="http://pokeapi.co/">pokeapi website</a>. That&rsquo;s really all there is to it to this project. I had fun watching as my hard drive gets filled up by 6000+ Pokemon descriptions from different games. I had fun seeing the cute little Pokemon sprites filling the directory that I specified. Here&rsquo;s a screenshot:</p>

<p><img src="http://wern-ancheta.com/images/posts/pokeapi/pokemon.png" alt="Pokemon sprites" /></p>

<p>Very cute right? There&rsquo;s a sense of achievement just seeing all 718 Pokemon sitting in a directory in your hard drive.</p>

<p>But I&rsquo;m not satisfied with this yet. I&rsquo;m planning on creating my own Pokedex app which has all the Pokemon data one can imagine. Currently there are 2 awesome Pokedex app out there:</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.awestruck.poke">Pokedex &ndash; Dexter</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.brunosousa.pokeinfo">PokeInfo</a></li>
</ul>


<p>I&rsquo;m planning to create something much more awesome.</p>

<p>I&rsquo;ll probably need to scrape the following websites in order to get every possible information about Pokemon.</p>

<ul>
<li><a href="http://pokemondb.net/">PokemonDB.net</a></li>
<li><a href="http://www.serebii.net/">Serebii.net</a></li>
<li><a href="http://bulbapedia.bulbagarden.net/wiki/Main_Page">bulbapedia.bulbagarden.net</a></li>
</ul>


<p>I know it&rsquo;s not going to be easy but I&rsquo;ll try to do it for the love of Pokemon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: How to Setup Virtual Hosts in Ubuntu]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/15/quick-tip-how-to-setup-virtual-hosts-in-ubuntu/"/>
    <updated>2015-11-15T20:14:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/15/quick-tip-how-to-setup-virtual-hosts-in-ubuntu</id>
    <content type="html"><![CDATA[<p>In this quick tip I&rsquo;ll show you how you can setup virtual hosts for Apache in Ubuntu.</p>

<p>The first thing that you need to do is clone the default Apache configuration. In the example below <code>myproject.dev</code> is the virtual host name that you want to use.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/myproject.dev.conf</span></code></pre></td></tr></table></div></figure>


<p>Open the new configuration file and update the values for the <code>ServerName</code>, <code>ServerAlias</code>, and <code>DocumentRoot</code>. Where <code>ServerName</code> is the virtual host name and the <code>ServerAlias</code> is the www version. The <code>DocumentRoot</code> is the absolute path to the directory where your project is stored.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>        ServerName myproject.dev
</span><span class='line'>        ServerAlias www.myproject.dev
</span><span class='line'>
</span><span class='line'>        ServerAdmin wern@localhost
</span><span class='line'>        DocumentRoot /home/wern/www/antares-backend
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, enable the new virtual host configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite myproject.dev</span></code></pre></td></tr></table></div></figure>


<p>Lastly, add it to the hosts file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/hosts</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1       antaresapp.dev
</span><span class='line'>127.0.0.1       www.antaresapp.dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Grade Viewer]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/03/introduction-to-grade-viewer/"/>
    <updated>2015-11-03T13:50:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/03/introduction-to-grade-viewer</id>
    <content type="html"><![CDATA[<p>As a teacher I want to show my students what grades they&rsquo;re getting. And the common tool for recording their scores is a spreadsheet. This would automatically compute their grade based on the scores they got from each of the activities. If you have already worked with a spreadsheet before, you might already know that its hard to present it to another person. Because you have to scroll horizontally in order to view every thing. And since the total score for an activity is located at the top row, so you also have to scroll to the top whenever they want to see the total score.  To put it simply, the eye of the viewer has to move a lot. Not to mention, they will see the grades of their classmates as well. So directly showing the grades in the spreadsheet is really a no go.</p>

<p>Luckily I can actually program things. That&rsquo;s why I built <a href="https://github.com/anchetaWern/gradeviewer">Grade Viewer</a>. This allows me to upload an excel spreadsheet, then specify the range that I want to target.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/new-subject.png" alt="new subject" /></p>

<p>Then I enter the activities done for each component (lecture and laboratory) of the subject.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/activities.png" alt="activities" /></p>

<p>Once that&rsquo;s done (provided I have specified every thing correctly) I can now go to the dashboard and click on the <em>view grades</em> link.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/dashboard.png" alt="dashboard" /></p>

<p>This will list out all the subjects that I&rsquo;ve currently added. From here I can click on the <em>update</em> link to update the excel file and the settings. Or the <em>view</em> link to view the grades.</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/subjects.png" alt="subjects" /></p>

<p>Here&rsquo;s what the page for viewing grades looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/gradeviewer/grades.png" alt="grades" /></p>

<p>It has a search feature but it can also navigate with previous and next links. Just below the name of the student is their grade for lecture and laboratory.  And below it is the break down. From here, the student can just ask any questions regarding their grades.</p>

<h3>Future Plans</h3>

<p>Nothing really. The project is in a pretty sweet spot right now when it comes to functionality. But just like many of my side projects, the underlying code has a lot of room for improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dates and Times in PHP with Carbon]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon/"/>
    <updated>2015-10-31T17:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon</id>
    <content type="html"><![CDATA[<p>When writing PHP applications there&rsquo;s often a need for working with dates and times. In this tutorial, I&rsquo;ll be walking you through Carbon, a simple PHP API extension for the DateTime class. It basically makes working with dates and times a lot more easier. I&rsquo;ve personally used this library on my <a href="https://github.com/anchetaWern/ahead">Ahead</a> project, a Laravel app for scheduling posts to social media sites like Facebook, Twitter and LinkedIn.</p>

<h3>Installation</h3>

<p>To install Carbon, you need to use <a href="https://getcomposer.org/">Composer</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require nesbot/carbon</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>Include the vendor autoload in your file and then use the <code>Carbon</code> class in the <code>Carbon</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Carbon\Carbon</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting the Current Date and Time</h4>

<p>You can get the current date and time using the <code>now</code> method. If you do not specify an argument, it uses the default timezone from your PHP config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">();</span> <span class="c1">//2015-07-26 20:21:20</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use a different timezone, you can pass a <a href="http://php.net/manual/en/timezones.php">valid timezone</a> as the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">(</span><span class="s1">&#39;Asia/Manila&#39;</span><span class="p">);</span> <span class="c1">//2015-07-26 20:21:20</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside from the <code>now</code> method, there&rsquo;s also <code>today</code>, which returns the start of today&rsquo;s date, <code>yesterday</code>, which returns the start of the date yesterday, and <code>tomorrow</code>, which returns the start of the date tomorrow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">today</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">yesterday</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-25 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">tomorrow</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-27 00:00:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Converting to String</h4>

<p>By default, methods in Carbon returns a datetime object. Though its an object, you can directly output it using <code>echo</code> because of the <code>__toString</code> magic method. But if you want to convert it to a string, you can use the <code>toDateString</code> or <code>toDateTimeString</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateString</span><span class="p">();</span> <span class="c1">//2015-07-26</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 20:22:50</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Parsing Dates</h4>

<p>You can also parse dates in all sorts of formats using the <code>parse</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015/03/30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015-03-30&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2015-03-30 00:10:25&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-03-30 00:10:25</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;today&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-26 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;yesterday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-25 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;tomorrow&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-27 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;2 days ago&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-24 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+3 days&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-29 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+2 weeks&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-08-09 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;+4 months&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-11-26 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;-1 year&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2014-07-26 20:49:53</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;next wednesday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-29 00:00:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;last friday&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toDateTimeString</span><span class="p">();</span> <span class="c1">//2015-07-24 00:00:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Constructing Dates</h4>

<p>You can also construct dates by using individual parts such as the year month and day.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$year</span> <span class="o">=</span> <span class="s1">&#39;2015&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$month</span> <span class="o">=</span> <span class="s1">&#39;04&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$day</span> <span class="o">=</span> <span class="s1">&#39;12&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">createFromDate</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$day</span><span class="p">);</span> <span class="c1">//2015-04-12 20:55:59</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hour</span> <span class="o">=</span> <span class="s1">&#39;02&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$minute</span> <span class="o">=</span> <span class="s1">&#39;15&#39;</span><span class="o">:</span>
</span><span class='line'><span class="nv">$second</span> <span class="o">=</span> <span class="s1">&#39;30&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="nv">$year</span><span class="p">,</span> <span class="nv">$month</span><span class="p">,</span> <span class="nv">$day</span><span class="p">,</span> <span class="nv">$hour</span><span class="p">,</span> <span class="nv">$minute</span><span class="p">,</span> <span class="nv">$second</span><span class="p">);</span> <span class="c1">//2015-04-12 02:15:30</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Optionally, you can pass in any valid timezone as the last argument for the <code>create</code> and <code>createFromDate</code> methods.</p>

<h4>Manipulating Dates</h4>

<p>Manipulating dates can be done by using <code>add</code> (to add) or <code>sub</code> (to subtract) followed by the unit of time you want to add or subtract. For example, you want to add a specific number of days to the specific date, you use the <code>addDays</code> method. There&rsquo;s also the <code>modify</code> method which allows you to pass in the modification that you want. It takes the format of <code>+</code> or <code>-</code> followed by the unit value and the unit. So if you want to add a year to the current date, you use <code>+1 year</code>. Check out the examples below to have an idea what else you can do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addDays</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">//2015-08-20 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addWeeks</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//2015-08-16 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addHours</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">//2015-07-27 22:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">subHours</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//2015-07-26 19:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">addHours</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">addMinutes</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">//2015-07-26 23:22:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">modify</span><span class="p">(</span><span class="s1">&#39;+15 days&#39;</span><span class="p">);</span> <span class="c1">//2015-08-10 21:10:00</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">modify</span><span class="p">(</span><span class="s1">&#39;-2 days&#39;</span><span class="p">);</span> <span class="c1">//2015-07-24 21:10:00</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Commonly in PHP apps are international. This means that you need to work with different timezones. Here&rsquo;s how to convert from one timezone to another.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Carbon</span><span class="o">::</span><span class="na">now</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setTimezone</span><span class="p">(</span><span class="s1">&#39;America/Los_Angeles&#39;</span><span class="p">);</span> <span class="c1">//2015-07-26 06:23:48</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Comparing Dates</h4>

<p>You can use the following methods to compare dates in Carbon.</p>

<ul>
<li><code>min</code> &ndash; returns the smaller date.</li>
<li><code>max</code> &ndash; returns the larger date.</li>
<li><code>eq</code> &ndash; check if two dates are the same.</li>
<li><code>gt</code> &ndash; check if the first date is greater than the second date.</li>
<li><code>lt</code> &ndash; check if the first date is less than the second date.</li>
<li><code>gte</code> &ndash; check if the first date is greater than or equal to the second date.</li>
<li><code>lte</code> &ndash; check if the first date is lesser than or equal to the second date.</li>
</ul>


<p>Other helpful methods include <code>isWeekDay</code>, <code>isWeekend</code>, <code>isYesterday</code>, <code>isFuture</code> and <code>isPast</code>.</p>

<h4>Laravel Integration</h4>

<p>If you&rsquo;re on Laravel, you can just add an alias for the Carbon library in the <code>aliases</code> in the <code>app/config/app.php</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&#39;Carbon&#39; =&gt; &#39;Carbon\Carbon&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Carbon library in PHP. Carbon is a really nice and easy way to work with dates in PHP. Be sure to check out the <a href="http://carbon.nesbot.com/docs/">official docs</a> to learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Shotgun]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/25/introduction-to-shotgun/"/>
    <updated>2015-10-25T19:18:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/25/introduction-to-shotgun</id>
    <content type="html"><![CDATA[<p>One of my pain points as a teacher is checking student activities. That includes seat works, assignments and quizzes. Checking takes a lot of time. In one of my classes, it took me 4 hours to check 48 papers which has 50 items. The thing I hate is that its repetitive like doing factory work. That is why I started creating Shotgun, a quiz maker app. The idea is to create a quiz using it and then have students access the quiz at a specific time. Once the student has submitted the quiz, the score is automatically computed.</p>

<p>Shotgun allows for creating of classes. This allows the teacher to add the name of the class, some details and a textarea where the student details can be entered.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/newclass.png" alt="create a new class" /></p>

<p>Once a class has been created, it is then listed in the classes page.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/classes.png" alt="classes" /></p>

<p>From there, the update link can be clicked to access the page for updating the class. This is where the class details can be updated. Students that are no longer entering the class can also be dropped so they&rsquo;re no longer included in the list.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/update-class.png" alt="classes" /></p>

<p>Next is the creation of new quizzes. Currently, only 3 types of quizzes can be created: identification, multiple choice and true/false. True/false still take a bit of effort though. As it uses the same functionality for multiple choice. Which means that true and false has to be added as a choice.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/new-quiz.png" alt="classes" /></p>

<p>Once the quiz is created, it is listed in the quizzes page.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/quizzes.png" alt="quizzes" /></p>

<p>A quiz can be scheduled by going to the scheduling page. This is where the quiz, class, the start time and end time can be added. The students can only take the quiz between the time specified.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/schedule-quiz.png" alt="schedule quiz" /></p>

<p>While the time added in the quiz is not the same as the current time, the teacher can still update the details of the quiz such as the class who is going to take it, the quiz to be taken and also the start time and end time.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/scheduled-quizzes.png" alt="scheduled quizzes" /></p>

<p>When it&rsquo;s time to take the quiz. The teacher then asks the students to access the quiz page on the browser. The teacher gives the quiz code and the students enter it together with their ID number.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/start-quiz.png" alt="start quiz" /></p>

<p>If the current time is between the start time and end time, the actual quiz is rendered. Every quiz can only be taken once by a student, so once it has been taken, the student cannot take it again. And while taking the quiz, the student cannot open a new tab or open any other window in the computer. The quiz will be automatically submitted when this is done. This is done through JavaScript so if JavaScript is disabled in the browser, the quiz won&rsquo;t be rendered at all.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/take-quiz.png" alt="take quiz" /></p>

<p>Once the quiz is done, the teacher can then view the scores of the students.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/quiz-results.png" alt="take quiz" /></p>

<p>Or export it to a spreadsheet.</p>

<p><img src="http://wern-ancheta.com/images/posts/shotgun/spreadsheet.png" alt="take quiz" /></p>

<p>From there, the teacher can just copy the scores and paste it to their own class record spreadsheet.</p>

<h3>Problems</h3>

<p>This is all well and good but there are still some hard problems that needs solving. First is the fact that the identification type of questions that you can create are rigid. There should only be a few acceptable answers. And since I&rsquo;m primarily teaching web development. There is a need for questions that asks students to code something. If you&rsquo;re a programmer you know that there can be many ways to solve a specific problem. There are many ways which you can code something. And it&rsquo;s close to impossible to consider all of those when adding an acceptable answer to a quiz item. One possible solution is to use the output of the code as the answer. So for example, if you ask the student to write a function that would return the sum of 2 numbers that were supplied as the arguments. So in the back-end, you add the following function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you also add the arguments to be used. And then those arguments will be used to execute the function that you added. Then the program will check if it has the same result as the function that was coded by the student. If it does then the answer is considered correct. The only problem is that I still have no idea how to code that kind of thing. It&rsquo;s basically telling a program to execute a program that is stored in the string of text. The solution for now is to stick with multiple choice type of question.</p>

<p>Another problem is letter casing. Answers can be typed in many ways: ALL CAPS, Capitalized, or all lower case. I&rsquo;m still yet to figure out what&rsquo;s the best way to do this. Because some questions might require answers to be in a specific letter case and some don&rsquo;t. The only solution I can think of right now is to have an option in the quiz item that allows for specifying if the letter casing should match what was included in the answer list or not. If not then have the program convert the answers (answers by students, answers included by teacher) to lower case and then compare. If yes then compare the answers as it is.</p>

<h3>Future Plans</h3>

<p>Here are my future plans for this project.</p>

<ul>
<li>Add signup, forgot password and logout.</li>
<li>Add functionality for deleting answers and choices.</li>
<li>Random order for quiz items for every student. This will make it hard for students to copy answers from their classmates.</li>
<li>Support for code based answers (as mentioned in the problems section).</li>
</ul>


<p>That&rsquo;s it! If you want to use this project or contribute to it, you can <a href="https://github.com/anchetaWern/shotgun">download it on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Podcasts I Listen To]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/17/more-podcasts-i-listen-to/"/>
    <updated>2015-10-17T20:53:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/17/more-podcasts-i-listen-to</id>
    <content type="html"><![CDATA[<p>Time flies so fast, I can&rsquo;t believe that its been more than a year since I last posted something about the <a href="http://wern-ancheta.com/blog/2014/08/31/podcasts-i-listen-to/">podcasts I listen to</a>. Before I was only listening to developer-related podcasts such as Shoptalkshow and Ruby Rogues. But I&rsquo;ve discovered that there are more great podcasts out there outside my own little developer world. Here are some of those:</p>

<h3>Radiolab</h3>

<p>Radiolab is a podcast hosted by Jad Abumrad and Robert Krulwich. It mostly focuses on science and history topics. Its very entertaining and truly a great snack for the brain.</p>

<h3>Developer Tea</h3>

<p>One of the newer podcasts on development produced by Jonathan Cutrell. The thing I really like about this podcast is that its very short, the longest episode I&rsquo;ve heard so far is abou 13 minutes. So it doesn&rsquo;t really take much of your time. You can listen to it while you&rsquo;re on a tea break might be the inspiration why its called developer tea. And because they are short, you can expect to hear only the most essential advice that are useful for you as a developer.</p>

<h3>Nocturne</h3>

<p>Nocturne is a podcast about the night. It features stories of people&rsquo;s experiences in the night. I found out about it when I was searching for scary podcasts. Though I later found out that Nocturne isn&rsquo;t really that. But the quality of the podcast really made me an avid listener.</p>

<h3>Lore</h3>

<p>Lore is a podcast featuring true life scary stories. This includes stories of ghosts and local folklore such as the Jersey Devil.</p>

<h3>NoSleep Podcast</h3>

<p>NoSleep Podcast is a fiction horror podcast. I think its scary but I also think it can be scarier. Though if they would make it more scary, I probably would no longer listen. I think its scariness level is manageable for most people.</p>

<h3>Stuff You Should Know</h3>

<p>A podcast from the howstuffworks.com network. If you have read howstuffworks.com before then you can expect the same kind of content on this podcast. Any topic under the sun which answers the question on how it works.</p>

<h3>Stuff To Blow Your Mind</h3>

<p>As the name suggests, this podcast mainly focuses on stuff that can blow your mind.</p>

<h3>Planet Money</h3>

<p>A podcast from NPR that&rsquo;s all about money and the economy.</p>

<h3>Invisibilia</h3>

<p>A new podcast from NPR which features stories on the invisible forces that control human behavior. I first heard about it while I was listening to Radiolab. I didn&rsquo;t hesitate to try an episode since I already know the quality of podcasts from NPR.</p>

<h3>Last Podcast On The Left</h3>

<p>Yet another podcast that I found while I was looking for scary podcasts. Guess what, Last Podcast On The Left isn&rsquo;t really scary. The Last Podcast On The Left covers all the horrors our world has to offer both imagined and real, from demons and slashers to cults and serial killers, The Last Podcast is guaranteed to satisfy your blood lust. At least that&rsquo;s what their description says. So if you dig those stuff then this podcast is for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PDO in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php/"/>
    <updated>2015-10-10T20:20:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through how to use the PDO extension in PHP to connect to a MySQL database.</p>

<h3>Connecting to the Database</h3>

<p>The PDO extension is installed by default on modern versions of PHP so you don&rsquo;t have to worry about not having it on the machine. You should be upgrading to a recent version any way to take advantage of the security patches and other updates.</p>

<p>To connect to the database, you have to supply a data source name (DSN) as the first argument when creating a new instance of the PDO class. And then pass in the username and password of the user you want to login to the database as the second and third argument. You need to wrap the code in a <code>try..catch</code> block because it will return an error if there&rsquo;s a problem connecting to the database. Next, set the error mode to return an exception if there&rsquo;s an error executing a specific database query. And finally, set the emulation of prepared statements to <code>false</code>. This allows you to use the native parametrized query feature of the database instead of emulating it in the PHP side.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$dsn</span> <span class="o">=</span> <span class="s1">&#39;mysql:dbname=DATABASE-NAME;host=DB-HOST&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s1">&#39;DATABASE-USER&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;USER-PASSWORD&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_ERRMODE</span><span class="p">,</span> <span class="nx">PDO</span><span class="o">::</span><span class="na">ERRMODE_EXCEPTION</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_EMULATE_PREPARES</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;could not connect to the database&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Inserting Data</h3>

<p>Open up phpmyadmin or any database management tool that you&rsquo;re using and create a new database. Then execute the following query to create a <code>users</code> table. We will be using this table for executing queries in the database. If you&rsquo;re following along, don&rsquo;t forget to update the data source name to match the name of the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'><span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">age</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">email</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">22</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">latin1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s created, you can now try inserting a new user row in the <code>users</code> table. Just pass in the typical INSERT query as an argument to the <code>query</code> method using the new PDO instance that you created earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;yoh asakura&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nv">$email</span> <span class="o">=</span> <span class="s1">&#39;yoh-asakura@gmail.com&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO users SET name = &#39;</span><span class="si">$name</span><span class="s2">&#39;, age = &#39;</span><span class="si">$age</span><span class="s2">&#39;, email = &#39;</span><span class="si">$email</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating Data</h3>

<p>If you want to update a specific user, you still use the <code>query</code> method. The only difference is the query that you are passing in. This time you have to pass in an <code>UPDATE</code> query to set the new values and then use the <code>WHERE</code> clause to specify which specific row you want to update. In this case it&rsquo;s the first row in the <code>users</code> table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;ren tao&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nv">$email</span> <span class="o">=</span> <span class="s1">&#39;ren-tao@gmail.com&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;UPDATE users SET name = &#39;</span><span class="si">$name</span><span class="s2">&#39;, age = &#39;</span><span class="si">$age</span><span class="s2">&#39;, email = &#39;</span><span class="si">$email</span><span class="s2">&#39; WHERE id = &#39;</span><span class="si">$id</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deleting Data</h3>

<p>If you want to delete a specific row, use the <code>DELETE</code> query and a <code>WHERE</code> clause to specify which rows you want to delete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;DELETE  FROM users WHERE id = &#39;</span><span class="si">$id</span><span class="s2">&#39;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selecting Data</h3>

<p>Selecting data still uses the same <code>query</code> method. Only this time you have to pass in a <code>SELECT</code> query. Then you can loop through the results and access the column that you want to output just like you would when accessing an item in an associative array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="s2">&quot;SELECT name FROM users&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$results</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$row</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you think objects look better, you can use the <code>setAttribute</code> method to modify the default fetch mode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="nx">PDO</span><span class="o">::</span><span class="na">ATTR_DEFAULT_FETCH_MODE</span><span class="p">,</span> <span class="nx">PDO</span><span class="o">::</span><span class="na">FETCH_OBJ</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Prepared Statements</h3>

<p>Prepared statements makes your queries more secure. Why? Because data is treated as data when you use prepared statements. This means that SQL statements such as <code>OR DROP TABLE users</code> wouldn&rsquo;t work if the user inputs an SQL statement instead of the expected data.
This is implemented in PDO by calling the <code>prepare</code> method and then passing in the query that you wish to execute. But instead of supplying the data directly, you replace it with placeholders. In this case the placeholder is <code>:name</code>.
You then call the <code>execute</code> method to actually execute the query. This method accepts an associative array containing the placeholder as the key and the actual value that you want to pass in as its value. Finally, you call the <code>FetchAll</code> method to fetch all the results that was returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT name FROM users WHERE name LIKE :name&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;:name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Mr.%&#39;</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">FetchAll</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$results</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>For queries that&rsquo;s only expected to return a single row, you can use the <code>fetch</code> method instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s1">&#39;SELECT name FROM users WHERE id = :id&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;:id&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transactions</h3>

<p>Transactions in databases is a sequence of database operations that are treated as a single unit. You can use it to ensure that all the queries that you want to execute are all completed successfully. If one fails, nothing is actually committed to the database.</p>

<p>To test transactions, open up your database management tool of choice and execute the following. This will create the <code>other_details</code> table which stores the other details of a user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">other_details</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'><span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">school</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">city</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">22</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">latin1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the example below, I&rsquo;m using a library called <a href="https://github.com/fzaninotto/Faker">Faker</a>. You can use it to generate fake data to be inserted into the database. You can install it through composer by executing the following command in your working directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">composer</span> <span class="n">require</span> <span class="n">fzaninotto</span><span class="o">/</span><span class="n">faker</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done installing, you can include the autoload file so that it&rsquo;s loaded in the current file. You can then create a new instance of it and then use the generator that you want. In the code below I&rsquo;m using the <code>name</code>, <code>numberBetween</code>, <code>email</code>, <code>company</code> and <code>city</code> generators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$name</span> <span class="o">=</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">numberBetween</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="nv">$email</span> <span class="o">=</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$school</span> <span class="o">=</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">company</span><span class="p">;</span>
</span><span class='line'><span class="nv">$city</span> <span class="o">=</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">city</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then create a new transaction by calling the <code>beginTransaction</code> method. Any queries that are executed after calling this wouldn&rsquo;t actually commit to the database until you call the <code>commit</code> method. In the example below, I&rsquo;m executing a query to insert a new user into the <code>users</code> table as well as the <code>other_details</code> table. If any of those 2 queries fails, it won&rsquo;t be committed to the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">beginTransaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;INSERT INTO users SET name = :name, age = :age, email = :email&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;:name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span> <span class="s1">&#39;:age&#39;</span> <span class="o">=&gt;</span> <span class="nv">$age</span><span class="p">,</span> <span class="s1">&#39;:email&#39;</span> <span class="o">=&gt;</span> <span class="nv">$email</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$query2</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;INSERT INTO other_details SET school = :school, course = :city&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query2</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;:school&#39;</span> <span class="o">=&gt;</span> <span class="nv">$school</span><span class="p">,</span> <span class="s1">&#39;:city&#39;</span> <span class="o">=&gt;</span> <span class="nv">$city</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="na">commit</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to use the PDO extension in PHP. Note that it&rsquo;s not only the MySQL database that PDO supports. It also supports other databases such as CUBRID, PostgreSQL, SQLite and many others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Introduction to phpsh]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh/"/>
    <updated>2015-10-03T11:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh</id>
    <content type="html"><![CDATA[<p>In this quick-tip I&rsquo;ll introduce you to a tool called <a href="http://www.phpsh.org/">phpsh</a>. This project has been created for quite some time now. It was created at Facebook but is no longer actively being developed. But this shouldn&rsquo;t stop you from using it. It&rsquo;s a really important tool to have especially when you want to quickly test a PHP script. PHPsh is an interactive shell for PHP. It&rsquo;s features include the following:</p>

<ul>
<li>readline history</li>
<li>tab completion</li>
<li>quick access to documentation</li>
</ul>


<p>You can download it directly from <a href="http://github.com/facebook/phpsh/zipball/master">this link</a>.</p>

<p>Once you&rsquo;re done downloading phpsh, extract the zip file and navigate to the extracted folder. Then execute the following commands to install it in your system.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now open any terminal window and execute <code>phpsh</code> to start using it.</p>

<p>To get documentation regarding a specific function, use the <code>d</code> command followed by the name of the function you want to look up. Here are a few examples.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d echo
</span><span class='line'>d array_push
</span><span class='line'>d array_filter</span></code></pre></td></tr></table></div></figure>


<p>It will then output the documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># echo
</span><span class='line'>
</span><span class='line'>(PHP 4, PHP 5)
</span><span class='line'>
</span><span class='line'>echo -- Output one or more strings
</span><span class='line'>
</span><span class='line'>### Description
</span><span class='line'>
</span><span class='line'>void echo ( string $arg1 [, string $... ] )
</span><span class='line'>
</span><span class='line'>Outputs all parameters. 
</span><span class='line'>
</span><span class='line'>echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses. 
</span><span class='line'>
</span><span class='line'>echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the [short_open_tag][1] configuration setting enabled. 
</span><span class='line'>
</span><span class='line'>` I have &lt;?=$foo?&gt; foo. `
</span><span class='line'>
</span><span class='line'>### Parameters
</span><span class='line'>
</span><span class='line'>arg1     
</span><span class='line'>
</span><span class='line'>The parameter to output. 
</span><span class='line'>
</span><span class='line'>...     
</span><span class='line'>
</span><span class='line'>### Return Values
</span><span class='line'>
</span><span class='line'>No value is returned. 
</span><span class='line'>
</span><span class='line'>### 
</span><span class='line'>
</span><span class='line'>   [1]: #ini.short-open-tag</span></code></pre></td></tr></table></div></figure>


<p>Aside from directly accessing the docs, you can also write and execute any PHP code that you wish to test. Here&rsquo;s a screenshot of me declaring an array and then looping through it.</p>

<p><img src="http://wern-ancheta.com/images/posts/phpsh/php-sh.png" alt="phpsh" /></p>

<p>You can also connect to a database and perform operations on it.</p>

<p><img src="http://wern-ancheta.com/images/posts/phpsh/db.png" alt="db" /></p>

<p>That&rsquo;s it for this quick-tip. I hope I&rsquo;ve encouraged you to use phpsh on your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Absentist]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/27/introduction-to-absentist/"/>
    <updated>2015-09-27T19:18:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/27/introduction-to-absentist</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been working on a few projects that will ease up all the housekeeping work that I need to do as a teacher. Things like checking the attendance of students and checking the works of students.</p>

<p>When I started working as a teacher, I used a spreadsheet to monitor attendance. There&rsquo;s a column for the name of the student and a column for meeting days. That&rsquo;s about 36 columns for the laboratory, where I meet them 2 times per week. And then 18 columns for the lecture, where I meet them once per week. What I do is to put an <em>A</em> in the cell where the student and the day intersects if the student is absent. And when a student accumulates 2 of those <em>A&rsquo;s</em> in the laboratory, then they&rsquo;re ripe for dropping. And for the lecture, they only need one. When I say drop, it means dropping the class card of the student to the Student Affairs Office. I won&rsquo;t dive in too much with the details but this process is implemented so the students wouldn&rsquo;t want to be absent too often. Because its really a pain to claim class cards.</p>

<p>Going back to my old process in monitoring attendance, here&rsquo;s what the spreadsheet that I used for monitoring looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/attendance.png" alt="attendance spreadsheet" /></p>

<p>Well, guess what. This quickly turned into a headache. Because there&rsquo;s no way to monitor which students are currently dropped, which one&rsquo;s are ripe for dropping and which one&rsquo;s has already returned their class cards to me.</p>

<p>As a programmer, I always want to make my work easy. Make the computer do most of the work as much as possible. So I decided to work on this project which I now call as Absentist. It&rsquo;s an attendance monitoring app which is custom built for my current needs. The way it works is simple. First, the teacher creates a class and adds the students. This part asks for the details such as the name of the class, some additional details that the teacher wants to enter, the number of absences needed before dropping the class card, the meeting days, then the start time and end time for each meeting day. Since the school already has a system for accessing class details. All I needed to do was to export it to a spreadsheet and then copy-paste it to a textarea. Then in the back-end, I simply parsed the pasted data so I can extract the ID Number, First Name, Last Name, Middle Initial and the gender of the student.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/newclass.png" alt="new class" /></p>

<p>Once a class has been created, it is listed in the classes page. This page has the links for updating a class, viewing students that are ripe for dropping and students that are already dropped.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/classes.png" alt="new class" /></p>

<p>Here&rsquo;s what the interface for dropping looks like:</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/todrop.png" alt="to drop" /></p>

<p>From here, the teacher can do two things: first is to mark the class card as dropped. This should be done once all the class cards has been dropped. Currently there&rsquo;s no button for dropping everything with a single click but this would do for now. There should only be a few clicks needed. Next is the absences link, this shows all the days that the student was absent.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/absences.png" alt="absences" /></p>

<p>Next is the page for viewing class card that has already been dropped. From here, the teacher can click on the <em>claim</em> button to mark that the student has returned their class card. When this button is clicked, the absences counter for that student goes back to 0.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/dropped.png" alt="dropped" /></p>

<p>But how is the attendance actually updated you ask? It is through the attendance page. This uses the days and time that has been entered on the class settings. When the attendance page is accessed in a time between the start time and end time that was entered and the day matches. Then it will automatically show a list of students in the class. From there, the teacher can call on the students one by one. If a student is absent but is not excused then the absent button beside that student is clicked. If excused then the excused button is clicked. The only difference between the 2 is that excused absences aren&rsquo;t counted as an actual absence. Its just there for the sake of recording.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/update-attendance.png" alt="update attendance" /></p>

<p>Once the roll call is done, the teacher can then filter the list to only show the students who are absent or excused. This is useful for verifying if all the students in the list are really absent or excused. If not then the absent or excused button is clicked again to remove the student from the list. Once that&rsquo;s done, the <em>update attendance</em> button is clicked to commit the changes to the database. This increments the absences counter for the student if they are absent. Or marks the student to be dropped if the absences counter becomes equal to that of what was added to the class settings.</p>

<p><img src="http://wern-ancheta.com/images/posts/absentist/show-absent.png" alt="update attendance" /></p>

<h3>Future Plans</h3>

<p>Future plans for this project includes the following:</p>

<ul>
<li>Adding students one at a time. This would be useful for when a student comes in late or for instances where there&rsquo;s no available spreadsheet export for student data.</li>
<li>Different start and end times for each meeting day.</li>
<li>User Documentation</li>
</ul>


<p>That&rsquo;s it! If you want to use this project or contribute to it, you can <a href="https://github.com/anchetaWern/absentist">download it on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations in PHP with Phinx]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx/"/>
    <updated>2015-09-20T17:29:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx</id>
    <content type="html"><![CDATA[<p>Gone are the days where you use the export functionality of your database management tool and share the SQL file to your team mates. Most PHP frameworks today already comes with a database migration tool which you can use to construct and make changes to your database and easily share them through your version control system of choice. In this tutorial I&rsquo;ll be walking you through <a href="https://phinx.org/">Phinx</a>, a database migration tool for PHP.</p>

<p>If you don&rsquo;t know what a database migration is, it&rsquo;s basically a way to version your database. Pretty much like what you do with version control systems like Git, SVN or Mercurial. It allows you to make changes to your database and easily rollback any of those changes later on if you make a mistake or if there are some changes that needs to be implemented. You can then share the changes you&rsquo;ve made to your team by committing it to your version control system and pushing it to the main repository of your project. Your team mates can then pull those changes into their own copy and run the migrations so that they have the same state of the database as you do.</p>

<h3>Installation</h3>

<p>You can install Phinx through Composer by executing the following commands on your terminal. If you have an existing project, you can navigate to your project directory and execute it from there.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require robmorgan/phinx
</span><span class='line'>composer install --no-dev</span></code></pre></td></tr></table></div></figure>


<p>Next create a <code>migrations</code> folder. This is where the database migrations are going to be stored.</p>

<p>Finally, execute the following command to initialize Phinx.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php vendor/bin/phinx init</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>When Phinx was initialized, you might have noticed that it created a <code>phinx.yml</code> file on the root of your project. This file is the Phinx configuration. This is where you can modify the database used by Phinx for production, development and testing environments. By default Phinx uses the development environment so go ahead and modify the details for that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paths:
</span><span class='line'>    migrations: %%PHINX_CONFIG_DIR%%/migrations
</span><span class='line'>
</span><span class='line'>environments:
</span><span class='line'>    default_migration_table: phinxlog
</span><span class='line'>    default_database: development
</span><span class='line'>    production:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: production_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    development:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: development_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    testing:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: testing_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>Using Phinx mainly composed of the following workflow:</p>

<ol>
<li>Create a migration</li>
<li>Modify the migration class</li>
<li>Run the migration</li>
<li>If you need to make a change to a previous migration, roll it back, make the change to the migration class and run the migration again.</li>
</ol>


<h4>Creating Migrations</h4>

<p>To create a new migration, you use the Phinx shell script. Below is a migration for creating a users table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php vendor/bin/phinx create CreateUsersTable</span></code></pre></td></tr></table></div></figure>


<p>This creates a new file in the <code>migrations</code> directory. For me it created a file named <code>20150727004941_create_users_table.php</code>. The filename is made up of the timestamp and the machine-friendly version of the name of the migration that you provided.</p>

<p>It&rsquo;s best practice that you name your migrations based on what they do, so that you can easily look for them if you need to modify something. Each migration should only be doing one specific task so that you can easily roll them back without having to worry about side-effects. Creating a users table should add the fields that are necessary to that table. But if you&rsquo;re modifying a specific table, in most cases, you should only modify one field at a time. For example, you need to modify the data type from <code>INT</code> to <code>VARCHAR</code>. Only modify one field. But if it makes sense to change two or more fields in a single migration, then do so. For example, if you need to modify the length of the <code>username</code> and <code>password</code> fields so they can accomodate more data.</p>

<p>Going back to the migration file. Open it up if you haven&rsquo;t yet. Here&rsquo;s how it looks like by default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Phinx\Migration\AbstractMigration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateUsersTable</span> <span class="k">extends</span> <span class="nx">AbstractMigration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Change Method.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * Write your reversible migrations using this method.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * More information on writing migrations is available here:</span>
</span><span class='line'><span class="sd">     * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">change</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Phinx already creates a skeleton class for you s you only need to modify what&rsquo;s in the <code>change</code> function. This is where you need to add the code for modifying your database. In this case the change is to create a <code>users</code> table. Add the following inside the <code>change</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$table</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">addColumn</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The table is declared using the <code>table</code> function. This accepts the name of the table as its argument. The fields are then added by calling the <code>addColumn</code> method in the table. This accepts 2 required arguments: the name of the field and the data type. Finally, the <code>create</code> function is called to actually create the table. Once that&rsquo;s done, save the file.</p>

<p>Let&rsquo;s pretend we forgot to add the <code>photo</code> field, so create another migration to add that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx migrate AddPhotoFieldToUsersTable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following inside the <code>change</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$table = $this-&gt;table(&#39;users&#39;);</span>
</span><span class='line'><span class="x">$table-&gt;addColumn(&#39;photo&#39;, &#39;string&#39;, array(&#39;after&#39; =&gt; &#39;username&#39;))</span>
</span><span class='line'><span class="x">        -&gt;update();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing new here, the only thing that&rsquo;s changed is the method to be called to actually execute the change that you need to make. In this case instead of <code>create</code>, the <code>update</code> method is used. This is how Phinx will know that you are trying to update the <code>users</code> table by adding the <code>photo</code> field.</p>

<h4>Running Migrations</h4>

<p>You can run all the migrations that haven&rsquo;t been run yet by using the <code>migrate</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would output something similar to the following when the migration is run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">warning no environment specified, defaulting to: development</span>
</span><span class='line'><span class="x">using adapter mysql</span>
</span><span class='line'><span class="x">using database tester</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: migrating</span>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: migrated 0.3325s</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: migrating</span>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: migrated 0.5018s</span>
</span><span class='line'>
</span><span class='line'><span class="x">All Done. Took 0.6773s</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now check if the table was actually created by opening your database management tool of choice. Also notice that there is a <code>phinxlog</code> table in your database. This is used by Phinx to keep track of which specific migrations were run and the start and end time for each. The migration is determined by its version, which is basically the first part of the file name for a specific migration file. On my testing, the version is <code>20150727004941</code>.</p>

<h4>Rolling Back Changes</h4>

<p>To rollback changes you can use the <code>rollback</code> command which does exactly the opposite of the <code>migrate</code> command. All it does is rollback everything that has changed on the last migrate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php vendor/bin/phinx rollback</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command above outputs something similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">warning no environment specified, defaulting to: development</span>
</span><span class='line'><span class="x">using adapter mysql</span>
</span><span class='line'><span class="x">using database tester</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: reverting</span>
</span><span class='line'><span class="x"> == 20150727013547 AddPhotoFieldToUsersTable: reverted 0.4672s</span>
</span><span class='line'>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: reverting</span>
</span><span class='line'><span class="x"> == 20150727004941 CreateUsersTable: reverted 0.1503s</span>
</span><span class='line'>
</span><span class='line'><span class="x">All Done. Took 0.6175s</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to create database migrations with Phinx. Be sure to check out the <a href="http://docs.phinx.org/en/latest/">official documentation</a> if you want to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with the Filesystem with Flysystem]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem/"/>
    <updated>2015-09-13T11:10:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>You can install Flysystem via <a href="https://getcomposer.org/">Composer</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require league/flysystem</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To use Flysystem, you first have to include the vendor autoload file which you got when you installed Flysystem on your working directory. After that, use the <code>Filesystem</code> class in the <code>League\Flysystem</code> namespace and the <code>Local</code> class in the <code>League\Flysystem\Adapter</code> namespace. The <code>Filesystem</code> class allows you to use the main Flysystem package. And the <code>Local</code> class allows you to use the local adapter. With Flysystem it&rsquo;s not just the local filesystem that you can work with. It has adapters for any cloud storage service that you can think of. Theres an adapter for Dropbox, FTP, AWS S3, Rackspace and even a Zip archive. So the <code>Local</code> class allows you to work with files in your local filesystem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">League\Flysystem\Filesystem</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">League\Flysystem\Adapter\Local</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a new instance of the <code>Local</code> class and pass in the path to the base path you want to work with. This allows you to create an adapter for a local path in your filesystem. In the example below, it&rsquo;s the <code>upload</code> directory located in the root of my working directory. After that, create a new instance of the <code>Filesystem</code> class and pass in the local adapter as the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Local</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/uploads&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$filesystem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Filesystem</span><span class="p">(</span><span class="nv">$adapter</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can now use Flysystem to wreack havoc on your local filesystem.</p>

<h4>Check if File Exists</h4>

<p>To check if a file exists, you can use the <code>has</code> method and then pass in the path to the file. Remember that this uses the root path that you passed in when you created the local adapter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$exists</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">has</span><span class="p">(</span><span class="s1">&#39;path/to/image.png&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Read Files</h4>

<p>Reading files only really makes sense for text files. You can use the <code>read</code> method for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">read</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Write to Files</h4>

<p>When writing to files, the path doesn&rsquo;t need to already exist. You can pass in a long path and it will create the individual directories that precedes the actual file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Copy Files</h4>

<p>Copying files can work with any file type and the destination doesn&rsquo;t need to be the same path where the original file exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">copy</span><span class="p">(</span><span class="s1">&#39;original.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;path/to/copy.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Rename Files</h4>

<p>You can use the <code>rename</code> method to rename files. This also doubles as a move function because you can assign the same name to the file but have a different path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">rename</span><span class="p">(</span><span class="s1">&#39;original_name.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;new_name.txt&#39;</span><span class="p">);</span> <span class="c1">//rename</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">rename</span><span class="p">(</span><span class="s1">&#39;original_name.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;path/to/original_name.txt&#39;</span><span class="p">);</span> <span class="c1">//move</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Delete Files</h4>

<p>If you want to delete a file, use the <code>delete</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;path/to/file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Listing Contents of a Directory</h4>

<p>To list the contents of the root directory, you need to call the <code>listContents</code> method. This returns an array containing the items in the root directory. Note that this isn&rsquo;t a recursive function. This means that only the direct children of the root directory is going to be listed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">listContents</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$contents</span> <span class="k">as</span> <span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$object</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;file&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$object</span><span class="p">[</span><span class="s1">&#39;basename&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Get File Information</h4>

<p>You can use any of the functions below to get specific information about the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$mimetype</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getMimetype</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// image/jpeg</span>
</span><span class='line'><span class="nv">$timestamp</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getTimestamp</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// 1438143700</span>
</span><span class='line'><span class="nv">$size</span> <span class="o">=</span> <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">getSize</span><span class="p">(</span><span class="s1">&#39;path/to/photo.jpg&#39;</span><span class="p">);</span> <span class="c1">// 101771</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Exceptions</h4>

<p>When performing an operation on the filesystem, be sure to wrap it in a <code>try..catch</code> block so that you can handle the errors accordingly. In the example below, if <code>file.txt</code> doesn&rsquo;t exists in the directory, it would return an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$filesystem</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this tutorial, you&rsquo;ve learned how to ease filesystem work with the Flysystem library. You have barely scratch the surface with what&rsquo;s possible with Flysystem. Be sure to check out their <a href="http://flysystem.thephpleague.com/">official website</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ionic]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/05/getting-started-with-ionic/"/>
    <updated>2015-09-05T08:01:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/05/getting-started-with-ionic</id>
    <content type="html"><![CDATA[<p>Hybrid Mobile App Development has been gaining traction lately. With the advent of tools such as Cordova, Sencha Touch and Titanium. There&rsquo;s no more stopping web developers from creating their own mobile apps with web technologies. Yes I just said web technologies, that&rsquo;s HTML, CSS, JavaScript and a little bit of talking to a server and you can already create a fancy mobile app. And because of this, lots of mobile frameworks has popped out. There&rsquo;s Ionic, Onsen UI, Junior, Mobile Angular UI, and Kendo UI to name a few. Of those I&rsquo;ve only ever tried jQuery Mobile and Ionic. At first I tried jQuery Mobile since I was already using jQuery for a long time. But it didn&rsquo;t take me long to realize that it wasn&rsquo;t for me nor the project that I was working on at that time. It just didn&rsquo;t have what I need. jQuery Mobile is just a set of UI components that I could use in a mobile app. It didn&rsquo;t have the foundation in which I could build upon. What I needed was a framework that would allow me to just start writing the app without having to worry about laying out the structure myself. This is where Ionic came in. It didn&rsquo;t take me long to find it since it&rsquo;s the first result that came up when I googled &lsquo;mobile hybrid app framework&rsquo;. Ionic utilizes Angular for its UI interactions, gestures and animations. And the best part is you can also use it to structure your app, because Angular itself is a JavaScript framework.
Ok this intro is getting long. Let&rsquo;s proceed with the fun stuff.</p>

<h3>Setup</h3>

<h4>Node</h4>

<p>In order to start working with Ionic, you first have to install <a href="https://nodejs.org/download/">Node</a>. Go ahead and download the installer for your platform if you don&rsquo;t already have it. If you&rsquo;re an Ubuntu user, you can install Node using NVM (Node Version Manager). To install NVM, execute the following commands in order:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install build-essential libssl-dev
</span><span class='line'>
</span><span class='line'>curl https://raw.githubusercontent.com/creationix/nvm/v0.16.1/install.sh | sh
</span><span class='line'>
</span><span class='line'>source ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>The first command, installs the build tools and SSL development libraries. The second downloads the NVM installer, and the third sources the <code>~/.profile</code> file so that your current command-line session knows about the changes. This basically allows you to use the NVM command without having to logout.</p>

<p>Next, you can now list the available Node versions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls-remote</span></code></pre></td></tr></table></div></figure>


<p>This will list out a whole bunch of Node versions that are available. But usually you would want to install the current version, which is the last item on the list. At the time of writing of this article, the current version is <code>v0.12.7</code>. So you can go ahead and install that using the <code>nvm install</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install v0.12.7</span></code></pre></td></tr></table></div></figure>


<p>Now when you check the Node version installed on your machine, you would see <code>v0.12.7</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node -v</span></code></pre></td></tr></table></div></figure>


<p>Next you need to set this version as the default, otherwise you&rsquo;ll have to execute <code>nvm use v0.12.7</code> every time you need to use Node.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias default v0.12.7
</span><span class='line'>nvm use default</span></code></pre></td></tr></table></div></figure>


<h4>Cordova and Ionic</h4>

<p>Now we&rsquo;re ready to install Cordova and Ionic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done installing, you can create a new project using the <code>ionic start</code> command. There are currently 3 available starter templates you can use: blank, tabs, and sidemenu. In this tutorial we&rsquo;re going to use the tabs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic start demoApp tabs</span></code></pre></td></tr></table></div></figure>


<h4>Ionic Directory Structure</h4>

<p>The command above will create a <code>demoApp</code> directory which contains the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hooks
</span><span class='line'>plugins
</span><span class='line'>scss
</span><span class='line'>www
</span><span class='line'>bower.json
</span><span class='line'>config.xml
</span><span class='line'>gulpfile.js
</span><span class='line'>ionic.project
</span><span class='line'>package.json</span></code></pre></td></tr></table></div></figure>


<p>The <code>hooks</code> directory is where you will put the scripts for customizing Cordova commands. I&rsquo;ve never had the need to use this feature so I can&rsquo;t share anything about it. But if you&rsquo;re just getting started, you wouldn&rsquo;t normally need to touch this directory.</p>

<p>The <code>platforms</code> directory is where the different platforms in which your app will be compiled to is stored. Note that its not there by default, you have to install a platform first.</p>

<p>The <code>plugins</code> directory is where Cordova plugins gets installed.</p>

<p>The <code>scss</code> directory is where the main Ionic sass file (ionic.app.scss) is stored. It contains the primary variables for customizing the colors used in your app.</p>

<p>The <code>www</code> directory is where you would usually work. This contains the HTML, JavaScript and CSS files. I won&rsquo;t walk you through each of the contents of the <code>www</code> directory as they&rsquo;re pretty self-explanatory.</p>

<p>The <code>bower.json</code> file contains the front-end dependencies of your app. By default it depends on Ionic. All bower dependencies are installed on the <code>www/lib</code> directory by default. You can install new one&rsquo;s by using the <code>bower install</code> command and then link them on the <code>index.html</code> file in the <code>www</code> directory. When you install new libraries using bower, use the <code>--save</code> or <code>--saveDev</code> option so that it will save the package name on the <code>bower.json</code> file. The <code>--save</code> option is used to specify that the library you&rsquo;re installing is a front-end asset. For example, jQuery or Bootstrap. While the <code>--saveDev</code> option is used for development only. Things like jshint or jasmine.</p>

<p>The <code>config.xml</code> file is where you can change the name, description and author of your app. You can also set your preference for device orientation (either portrait or landscape), features and URL&rsquo;s which your app is allowed to access.</p>

<p>The <code>gulpfile.js</code> file is the Gulp config file used by Ionic. Normally you wouldn&rsquo;t need to touch this. What you need to understand is that this is used by Ionic to execute tasks such as compiling sass files to CSS or watching a specific directory for changes.</p>

<p>The <code>ionic.project</code> file is where you can update the name and app_id of your app. You won&rsquo;t really need to touch this.</p>

<p>Lastly, the <code>package.json</code> file. This contains the dependencies of the Ionic framework. You won&rsquo;t really need to touch this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;demoapp&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;demoApp: An Ionic project&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;gulp&quot;</span><span class="p">:</span> <span class="s2">&quot;^3.5.6&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-sass&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-concat&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-minify-css&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-rename&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.2.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;bower&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-util&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.14&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;shelljs&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.3.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;cordovaPlugins&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-device&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-console&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-whitelist&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cordova-plugin-splashscreen&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;com.ionic.keyboard&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;cordovaPlatforms&quot;</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Platforms</h4>

<p>With Cordova there&rsquo;s only a select few platforms that it supports. So it&rsquo;s not completely write once, compile to all kind of thing. There are different sets of problems to solve for each platform in which you plan to release your app.
The common platforms that you may want to install are android, ios and browser. For a list of all the platforms supported by Cordova, you can check out the <a href="https://cordova.apache.org/docs/en/4.0.0/guide_platforms_index.md.html#Platform%20Guides">Cordova Platform Guides</a>. Each platform has a different dependency. Usually it&rsquo;s the SDK or the recommended developer tool for that platform. For Android, it&rsquo;s the Android SDK, for iOS it&rsquo;s Xcode, for Windows it&rsquo;s Visual Studio. I&rsquo;m only going to walk you through the Android platform in this tutorial.</p>

<p>You can download the Android SDK installer from <a href="https://developer.android.com/sdk/index.html#Other">this page</a>. Under the SDK Tools Only section, download the package for your platform. I&rsquo;m on Ubuntu so I will download the one for Linux. Once the download is done, extract the files using the <code>tar</code> command or you can also right click on the file and select the archive manager of your choice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">tar</span> <span class="err">-xvzf</span> <span class="err">android-sdk_r</span><span class="mf">24.3</span><span class="err">.</span><span class="mi">3</span><span class="err">-linux.tgz</span>
</span></code></pre></td></tr></table></div></figure>


<p>After extraction, it would yield an <code>android-sdk-linux</code> folder which contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">add-ons</span>
</span><span class='line'><span class="err">platforms</span>
</span><span class='line'><span class="err">tools</span>
</span><span class='line'><span class="err">SDK</span> <span class="err">Readme.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>From that directory, navigate to the <code>tools</code> directory and execute the <code>android</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">./tools/android</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will open up the Android SDK Manager which you can use to install the tools that you need to develop Android apps. At this point you might wonder why we need to install the same things that Android developers need to install. Well, that&rsquo;s because we&rsquo;re still subjected to the same rules even if we write our apps using HTML, CSS, and JavaScript. Since apps created with Cordova and Ionic are just utilizing the Android WebView. Which is basically just a browser without a frame. That&rsquo;s where the HTML, CSS and JavaScript are used. And Cordova just acts as a middleman between the WebView and the native Android functionalities. So if you need to use the camera for your app, Cordova uses the Android API to call for the camera. And once you&rsquo;re done taking a picture it&rsquo;s also the one responsible for returning the data back to your app. This means that Cordova just abstracts away the parts which we usually need to work on as native app developers so we can write our code in JavaScript instead of Java.</p>

<p>Back to where we left. Let&rsquo;s now install the tools we need to get Cordova do its job. Check the following items on the Android SDK Manager and click on Install. This might take a while depending on your download speed.</p>

<p><strong>Tools</strong>
&ndash; Android SDK Tools</p>

<p><strong>Android 5.1.1 (API 22)</strong>
&ndash; SDK Platform</p>

<p><strong>Android 5.0.1 (API 21)</strong>
&ndash; SDK Platform
&ndash; Google APIs</p>

<p><strong>Android 4.4W.2 (API 20)</strong>
&ndash; SDK Platform</p>

<p><strong>Android 4.4.2 (API 19)</strong>
&ndash; SDK Platform
&ndash; Google APIs (ARM System Image)</p>

<p><strong>Extras</strong>
&ndash; Android Support Repository
&ndash; Android Support Library
&ndash; Google Repository</p>

<p>Once that&rsquo;s done installing, add the path in which the Android SDK is installed to your environment. In Ubuntu and OSX, you can add the following on your <code>.bashrc</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">export</span> <span class="err">ANDROID_HOME=/path/to/android-sdk-linux/sdk</span>
</span><span class='line'><span class="err">PATH=$PATH:/path/to/android-sdk-linux/sdk/tools</span>
</span><span class='line'><span class="err">export</span> <span class="err">PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Windows, there&rsquo;s something called the Environment Variables. I&rsquo;ve written about it in my old blog: <a href="https://kyokasuigetsu25.wordpress.com/2010/10/29/how-to-set-environment-variables/">How to set environment variables</a>.</p>

<p>Once that&rsquo;s done, you can now install the Android platform, you can use the <code>ionic platform add</code> command followed by the name of the platform you want to install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">ionic</span> <span class="err">platform</span> <span class="err">add</span> <span class="err">android</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Sass</h3>

<p>You can use sass with ionic by executing the following command while inside your project directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">ionic</span> <span class="err">setup</span> <span class="err">sass</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is install the packages and tasks needed to compile sass. Then remove the following from your <code>index.html</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;lib/ionic/css/ionic.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also adds the link to the <code>ionic.app.css</code> file which is basically just the compiled version of the <code>ionic.app.scss</code> file found in the <code>scss</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it adds the following in your <code>ionic.project</code> file. This tells ionic to start the sass and watch command when gulp starts. It also specifies the watch patterns, so that every time you make a change to a file that matches the pattern, the sass command gets executed and compiles the sass files to css.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;gulpStartupTasks&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;sass&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watch&quot;</span>
</span><span class='line'>  <span class="p">]</span><span class="err">,</span>
</span><span class='line'>  <span class="s2">&quot;watchPatterns&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;www/**/*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;!www/lib/**/*&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to change the default colors used by Ionic, this is where you can do that. Be sure to uncomment the variables just like what we have below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c">To customize the look and feel of Ionic, you can override the variables</span>
</span><span class='line'><span class="c">in ionic&#39;s _variables.scss file.</span>
</span><span class='line'>
</span><span class='line'><span class="c">For example, you might change some of the default colors:</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span><span class="nt">light</span><span class="o">:</span>                           <span class="nf">#fff</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">stable</span><span class="o">:</span>                          <span class="nf">#f8f8f8</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">positive</span><span class="o">:</span>                        <span class="nf">#387ef5</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">calm</span><span class="o">:</span>                            <span class="nf">#11c1f3</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">balanced</span><span class="o">:</span>                        <span class="nf">#33cd5f</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">energized</span><span class="o">:</span>                       <span class="nf">#ffc900</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">assertive</span><span class="o">:</span>                       <span class="nf">#ef473a</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">royal</span><span class="o">:</span>                           <span class="nf">#886aea</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="err">$</span><span class="nt">dark</span><span class="o">:</span>                            <span class="nf">#444</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nt">The</span> <span class="nt">path</span> <span class="nt">for</span> <span class="nt">our</span> <span class="nt">ionicons</span> <span class="nt">font</span> <span class="nt">files</span><span class="o">,</span> <span class="nt">relative</span> <span class="nt">to</span> <span class="nt">the</span> <span class="nt">built</span> <span class="nt">CSS</span> <span class="nt">in</span> <span class="nt">www</span><span class="o">/</span><span class="nt">css</span>
</span><span class='line'><span class="err">$</span><span class="nt">ionicons-font-path</span><span class="o">:</span> <span class="s2">&quot;../lib/ionic/fonts&quot;</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="nt">Include</span> <span class="nt">all</span> <span class="nt">of</span> <span class="nt">Ionic</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;www/lib/ionic/scss/ionic&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now anytime you make a change to the file while running <code>ionic serve</code>, it will compile it to the <code>ionic.app.css</code> found at the <code>www/css</code> directory.</p>

<h3>Developing an App</h3>

<p>You can start developing your app by executing <code>ionic serve</code> from the root directory of your project. This will launch a new browser tab containing the app. If you&rsquo;re using Chrome, you can click on the phone icon on the left of the elements tab when you open the developer tools. This would show your app inside a smaller screen depending on the device that you specify. You can change the device by clicking on the drawer icon which looks like this: <code>&gt;__</code>. And then click on the emulation tab then select the device from the model dropdown. You might need to refresh the page after doing this so that it will render correctly.</p>

<p><img src="http://wern-ancheta.com/images/posts/ionic/app-window.png" alt="app window" /></p>

<p>Now open the <code>index.html</code> file in the root directory of your project. This is where every thing is hooked up. If you have ever developed a single-page app before, this would be familiar to you. Basically how a single-page app works is that every script that you need is linked in the <code>index.html</code> file. You might be thinking this is a bad practice since it will take too long for the page to load. Well it&rsquo;s not since the front-end assets are included in the app locally. It wouldn&rsquo;t need to download it over the internet so it&rsquo;s fast even if we have a lot of files linked in there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- compiled css output --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- ionic/angularjs js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/ionic/js/ionic.bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- cordova script (this will be a 404 during development) --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- your app&#39;s js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;starter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The nav bar that will be updated as we navigate between views.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-bar</span> <span class="na">class=</span><span class="s">&quot;bar-stable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-nav-back-button</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>/ion-nav-back-button&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-nav-bar&gt;
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The views will be rendered in the &lt;ion-nav-view&gt; directive below</span>
</span><span class='line'><span class="c">      Templates are in the /templates folder (but you could also</span>
</span><span class='line'><span class="c">      have templates inline in this html file if you&#39;d like).</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok let&rsquo;s break this file down. First we set the charset to utf-8 and viewport so that the initial and maximum scale is 1, we also set the <code>user-scalable</code> option to <code>no</code>. This basically means the user wouldn&rsquo;t be able to resize or zoom the app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the title. This means nothing since we&rsquo;re on an app not a website. So users wouldn&rsquo;t be able to see this. You can leave it as blank.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we also have the main ionic css file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="c">&lt;!-- compiled css output --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/ionic.app.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Angular is bundled together with the Ionic JavaScript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- ionic/angularjs js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/ionic/js/ionic.bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to link the <code>cordova.js</code> file so we can use Cordova within our app. This would allow us to use Cordova plugins as well via <code>cordova.plugins</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- cordova script (this will be a 404 during development) --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have our custom JavaScript files. This is where we put code that makes the app do things for us. Note that the <code>js/app.js</code> file is the main JavaScript file. It is where we link every thing together. This is where we intialize a new module in which we could hook up different parts of our app. If we need to use a new service, this is where we hook it up. If we want to add a new state, this is where we add it. If we need to call a specific function every time the app starts, this is where we do it. Next we have the <code>js/controllers.js</code> file, in the default controller created by Ionic, all the controllers are added in a single file. This is fine for really small apps but for medium to large size apps it&rsquo;s recommended to have a single controller for each entity in your app. For example, you might have a user controller where you put all the code that has something to do with the user. Things like updating user settings. The controller is where you usually put code that responds to a specific event such as clicking a button or pulling to refresh. Lastly, we have the <code>js/services.js</code> file. A service is responsible for adding a specific functionality to your app. You would want to create a service for making requests to your server, or storing data in local storage. It&rsquo;s recommended that you search for existing solutions first before writing your own services. So you won&rsquo;t waste time re-implementing the same thing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;starter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The nav bar that will be updated as we navigate between views.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-bar</span> <span class="na">class=</span><span class="s">&quot;bar-stable&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-nav-back-button</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>/ion-nav-back-button&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-nav-bar&gt;
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The views will be rendered in the &lt;ion-nav-view&gt; directive below</span>
</span><span class='line'><span class="c">      Templates are in the /templates folder (but you could also</span>
</span><span class='line'><span class="c">      have templates inline in this html file if you&#39;d like).</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a typical Angular app we set the <code>ng-app</code> attribute to the name of the module. Ionic has used <code>starter</code> as the name of the module by default. You can change that on your <code>app.js</code> file. Here the name of the module is starter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;starter&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;starter.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;starter.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can change it to the following if you want. Here the name of the module is changed to <code>my_awesome_app</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you did change the name of the module. You also need to change the value of the <code>ng-app</code> attribute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;my_awesome_app&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As well as your controllers and services:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going back to the <code>app.js</code> file. This is the code responsible for setting the name of the module and the services and controllers it depends on. By default it depends on the ionic service, and your custom controllers and services.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ionic&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of <code>my_awesome_app.controllers</code> and <code>my_awesome_app.services</code> as a submodule of the <code>my_awesome_app</code> module. We declared those two modules in the <code>js/controllers.js</code> and <code>js/services.js</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering what&rsquo;s the need for these sub-modules? Well, their main purpose is to have a different parent module for each controller and service. So every controller would depend on the <code>my_awesome_app.controllers</code> module and all services would depend on the <code>my_awesome_app.services</code> module. We do this because simply depending on the main module wouldn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have the <code>run</code> function. This is where Ionic executes functions which needs to be executed every time the app is opened. All function calls should be wrapped in the <code>$ionicPlatform.ready</code> event to make sure all the plugins and other features that we need are loaded. Inside the event, we check if the Cordova keyboard plugin is accessible. If it is then we hide the keyboard accessory bar. Finally we use the lightContent statusbar (light text for dark backgrounds) by calling the <code>styleLightContent</code> method provided by the <code>StatusBar</code> plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$ionicPlatform</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$ionicPlatform</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Hide the accessory bar by default (remove this to show the accessory bar above the keyboard</span>
</span><span class='line'>    <span class="c1">// for form inputs)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Keyboard</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">cordova</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Keyboard</span><span class="p">.</span><span class="nx">hideKeyboardAccessoryBar</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">StatusBar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// org.apache.cordova.statusbar required</span>
</span><span class='line'>      <span class="nx">StatusBar</span><span class="p">.</span><span class="nx">styleLightContent</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we set the app configuration by calling the <code>config</code> method in the Angular module. You can use this to set the routes of your app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ionic uses AngularUI Router which uses the concept of states</span>
</span><span class='line'>  <span class="c1">// Learn more here: https://github.com/angular-ui/ui-router</span>
</span><span class='line'>  <span class="c1">// Set up the various states which the app can be in.</span>
</span><span class='line'>  <span class="c1">// Each state&#39;s controller can be found in controllers.js</span>
</span><span class='line'>  <span class="nx">$stateProvider</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// setup an abstract state for the tabs directive</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tab&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kr">abstract</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;templates/tabs.html&quot;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Each tab has its own nav history stack:</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.dash&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dash&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-dash&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-dash.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;DashCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chats&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chat-detail&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats/:chatId&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/chat-detail.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatDetailCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.account&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/account&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-account&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-account.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;AccountCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if none of the above states are matched, use this as the fallback</span>
</span><span class='line'>  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">(</span><span class="s1">&#39;/tab/dash&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Breaking it down, we use the <code>$stateProvider</code> to set different states. A state is equivalent to a route in your app. You can call the <code>state</code> method to create a new route, this accepts the name of the state as its first argument and the config as its second.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="c1">// setup an abstract state for the tabs directive</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/tab&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kr">abstract</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;templates/tabs.html&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>A state can be abstract or not. You usually declare a state as an abstract one if it has a child state. In the above example the tab state is an abstract one. This means you don&rsquo;t access it directly from your browser. Instead, you access its child states. In this case the child states are <code>dash</code>, <code>chats</code>, <code>chat-detail</code> and <code>account</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.dash&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/dash&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-dash&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-dash.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;DashCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'> <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chats&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.chat-detail&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats/:chatId&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/chat-detail.html&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatDetailCtrl&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;tab.account&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/account&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;tab-account&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-account.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;AccountCtrl&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>An abstract state takes the following options:</p>

<ul>
<li><strong>url</strong> &ndash; the URL that you will use to access the state. For an abstract state, this would be the parent URL that each child state will use.</li>
<li><strong>abstract</strong> &ndash; a boolean value that is set to <code>true</code> to specify that the state is an abstract one.</li>
<li><strong>templateUrl</strong> &ndash; the path to where the template is located locally.</li>
</ul>


<p>A child state would accept the same options, the only difference is that you have to set the <code>views</code> option and the add a single property with the name of the view. Then that property would have the <code>templateUrl</code> property and <code>controller</code> which is basically the name of the controller that the state uses. The <code>controller</code> property is optional, you can set this on the template if you want. But you have to note that you can&rsquo;t specify the controller name on both the template and the <code>app.js</code> file. Otherwise methods that run every time the controller is executed is called twice. Here is a sample child state. As you can see the <code>url</code> is set to <code>/chats</code> but you would need to specify the URL of the abstract state first. So accessing it in the brower would be <code>tab/chats</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/chats&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;tab-chats&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/tab-chats.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;ChatsCtrl&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we specify the views with the <code>view</code> property. As I&rsquo;ve said earlier, this accepts the name of the view as its property. This is tied with the name of the view in the <code>ion-tabs</code> directive. You can find it in the <code>templates/tabs.html</code> file. The view <code>name</code> property in the <code>ion-nav-view</code> directive should be the same as the name of view in your state declaration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">Create tabs with an icon and label, using the tabs-positive style.</span>
</span><span class='line'><span class="c">Each tab&#39;s child &lt;ion-nav-view&gt; directive will have its own</span>
</span><span class='line'><span class="c">navigation history that also transitions its views in and out.</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'><span class="nt">&lt;ion</span><span class="na">-tabs</span> <span class="na">class=</span><span class="s">&quot;tabs-icon-top tabs-color-active-positive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Dashboard Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Status&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-pulse&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-pulse-strong&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/dash&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-dash&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Chats Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Chats&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-chatboxes-outline&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-chatboxes&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/chats&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-chats&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Account Tab --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-tab</span> <span class="na">title=</span><span class="s">&quot;Account&quot;</span> <span class="na">icon-off=</span><span class="s">&quot;ion-ios-gear-outline&quot;</span> <span class="na">icon-on=</span><span class="s">&quot;ion-ios-gear&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/account&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-nav-view</span> <span class="na">name=</span><span class="s">&quot;tab-account&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-nav-view&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-tab&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>/ion-tabs&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now open up the <code>controllers.js</code> file. On the first line we&rsquo;re declaring a new module called <code>my_awesome_app.controllers</code>. If you remember from earlier, this is one of the modules that we specified as a dependency for the main module in the <code>app.js</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.controllers&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we create a new controller by using the <code>controller</code> method. This accepts the name of the controller as its first argument and the function to execute when the controller is accessed as its second. For the <code>DashCtrl</code>, we have an empty function body as we do not need to execute anything.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;DashCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>ChatCtrl</code>, we get a list of chat messages using the <code>Chats</code> services. We&rsquo;ll go through that in a moment, but for now understand that to use a service you need to declare it as a parameter in the function body of the controller. This way you can access it from inside the function and call the different methods that are accessible from that service. Also notice that we have also declared a <code>$scope</code> variable as a parameter. This allows us to pass in data to the current scope. We do this so we can access the data in the view. Back to the <code>Chats</code> service, we are calling the <code>all</code> method in the <code>Chats</code> service. This returns an array of messages. We then assign whatever it returns to the <code>chats</code> property in the <code>$scope</code>. Note that you can name it anything you want. Next we&rsquo;re also assigning a <code>remove</code> method to the <code>$scope</code>. What this does is remove a specific chat message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatsCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Chats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// With the new view caching in Ionic, Controllers are only called</span>
</span><span class='line'>  <span class="c1">// when they are recreated or on app start, instead of every page change.</span>
</span><span class='line'>  <span class="c1">// To listen for when this page is active (for example, to refresh data),</span>
</span><span class='line'>  <span class="c1">// listen for the $ionicView.enter event:</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">//$scope.$on(&#39;$ionicView.enter&#39;, function(e) {</span>
</span><span class='line'>  <span class="c1">//});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">chats</span> <span class="o">=</span> <span class="nx">Chats</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Chats</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">chat</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the view utilizing the <code>ChatsCtrl</code>. It&rsquo;s in the <code>templates/tab-chats.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;Chats&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-list</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ion</span><span class="na">-item</span> <span class="na">class=</span><span class="s">&quot;item-remove-animate item-avatar item-icon-right&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;chat in chats&quot;</span> <span class="na">type=</span><span class="s">&quot;item-text-wrap&quot;</span> <span class="na">href=</span><span class="s">&quot;#/tab/chats/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h2&gt;</span><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon ion-chevron-right icon-accessory&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ion</span><span class="na">-option-button</span> <span class="na">class=</span><span class="s">&quot;button-assertive&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;remove(chat)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Delete
</span><span class='line'>        <span class="err">&lt;</span>/ion-option-button&gt;
</span><span class='line'>      <span class="err">&lt;</span>/ion-item&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-list&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ChatDetailCtrl</code> is the controller responsible for showing the details of a specific chat message. Here we&rsquo;re using a new parameter in the function body called <code>$stateParams</code>. This allows us to get the value of a specific route parameter. Route parameters are passed in the URL of the app. If you go back to the <code>app.js</code> file, you can see from the <code>tab.chat-detail</code> state&rsquo;s URL is <code>/chats/:chatId</code>. The <code>:chatId</code> here is the route parameter. Every route parameter in Angular always starts in a colon followed by the name. So in the <code>ChatDetailCtrl</code> we are merely getting the value passed in this route parameter and then using it as an argument for the <code>get</code> method in the <code>Chats</code> service. This method basically fetches a specific chat message from the array of chats. We then just assign the value to the <code>chat</code> variable in the <code>$scope</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChatDetailCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">,</span> <span class="nx">Chats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">chat</span> <span class="o">=</span> <span class="nx">Chats</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">$stateParams</span><span class="p">.</span><span class="nx">chatId</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see this being used in the <code>templates/chat-detail.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span> <span class="na">class=</span><span class="s">&quot;padding&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;&quot;</span> <span class="na">style=</span><span class="s">&quot;width: 64px; height: 64px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Finally we have the <code>AccountCtrl</code>. Nothing fancy here. All we&rsquo;re doing is passing in an object to the scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;AccountCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enableFriends</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see this being used from the view in <code>templates/tab-account.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-view</span> <span class="na">view-title=</span><span class="s">&quot;Account&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ion</span><span class="na">-content</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-list</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ion</span><span class="na">-toggle</span>  <span class="na">ng-model=</span><span class="s">&quot;settings.enableFriends&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Enable Friends
</span><span class='line'>    <span class="err">&lt;</span>/ion-toggle&gt;
</span><span class='line'>    <span class="err">&lt;</span>/ion-list&gt;
</span><span class='line'>  <span class="err">&lt;</span>/ion-content&gt;
</span><span class='line'><span class="err">&lt;</span>/ion-view&gt;
</span></code></pre></td></tr></table></div></figure>


<p>From the above HTML, the <code>enableFriends</code> property is used as the model for the <code>ion-toggle</code> directive which basically just outputs a switch UI. In this case the switch should be turned on since the value of the <code>enableFriends</code> property is <code>true</code>.</p>

<p>Now we take a look at the service file at <code>js/services.js</code>. Same with the controllers, we declare a new module called <code>my_awesome_app.services</code>. From there we call the <code>factory</code> method in order to create a service. We call this service <code>Chats</code>. Inside the function body, we have an array of objects containing the details for each chat message. After that, we expose the methods that we want the controllers that will use this service to use by returning them. Here we have 3 methods, the <code>all</code> method which just returns all the chat messages. The <code>remove</code> method which removes a specific chat message from the array of chat messages. And last is the <code>get</code> method, which returns a specific chat message based on the id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my_awesome_app.services&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Chats&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Might use a resource here that returns a JSON array</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Some fake testing data</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">chats</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ben Sparrow&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;You on your way?&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/514549811765211136/9SgAuHeY.png&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Max Lynx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;Hey, it\&#39;s me&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://avatars3.githubusercontent.com/u/11214?v=3&amp;s=460&#39;</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Adam Bradleyson&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;I should buy a boat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/479090794058379264/84TKj_qa.jpeg&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Perry Governor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;Look at my mukluks!&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/598205061232103424/3j5HUXMY.png&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mike Harrington&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastText</span><span class="o">:</span> <span class="s1">&#39;This is wicked good ice cream.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">face</span><span class="o">:</span> <span class="s1">&#39;https://pbs.twimg.com/profile_images/578237281384841216/R3ae1n61.png&#39;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">all</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">chats</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">chats</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">chats</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">chat</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chatId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">chats</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">chats</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">===</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">chatId</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">chats</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Plugins</h3>

<p>Plugins allows you to add native functionalities to your app. Things like the camera, calendar, contacts, or flashlight can be controlled using JavaScript through the use of plugins.</p>

<p>You can install plugins by using the <code>ionic plugin add</code> command. Here&rsquo;s an example of how we might add the camera plugin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ionic</span> <span class="nx">plugin</span> <span class="nx">add</span> <span class="nx">cordova</span><span class="o">-</span><span class="nx">plugin</span><span class="o">-</span><span class="nx">camera</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decide later on that you no longer need a plugin, you can use the <code>ionic plugin rm</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ionic</span> <span class="nx">plugin</span> <span class="nx">rm</span> <span class="nx">cordova</span><span class="o">-</span><span class="nx">plugin</span><span class="o">-</span><span class="nx">camera</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every plugin already has the necessary instructions which will setup everything that is needed in order for it to work when installed. Things like putting the necessary permissions in the <code>AndroidManifest.xml</code> file so that you can use specific features of the device.</p>

<p>I won&rsquo;t dive in much into plugins, what&rsquo;s important is that you know they are available and you can use Google to look for them. There&rsquo;s the <a href="http://plugins.cordova.io/#/">Cordova Plugin Repository</a> and Github if you want to look for a plugin that can solve your specific problem.</p>

<h3>Changing the App Icon and Splash Screens</h3>

<p>To change the icon of the app, simply put an <code>icon.png</code>, <code>icon.psd</code>, or <code>icon.ai</code> on the <code>resources</code> directory in the root of your app. For the splash it&rsquo;s <code>splash.png</code>, <code>splash.psd</code>, or <code>splash.ai</code>. The recommended icon size is 500x500 and the splash image is 1200x1200. Once you&rsquo;ve added the files, execute <code>ionic resources</code> from the terminal to generate your icons and splash screens.</p>

<h3>Compiling to Android</h3>

<p>You can create an apk file using the <code>ionic build android</code> command. This will create the <code>android-debug.apk</code> file under the <code>platforms/android/build/outputs/apk</code> directory. Note that this is the debug version of the app. You can use this for testing on your mobile device. But you cannot submit it to the Google Play Store. To do that you&rsquo;ll have to build a release version for your apk by adding the <code>--release</code> option when using the <code>cordova build</code>. Note that we&rsquo;re using <code>cordova</code> instead of <code>ionic</code>. Ionic simply wraps the Cordova commands so you can use them interchangeably.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cordova</span> <span class="nx">build</span> <span class="o">--</span><span class="nx">release</span> <span class="nx">android</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, generate a keystore for the app by using <code>keytool</code>. Breaking down the command below, we&rsquo;re setting the following options:</p>

<ul>
<li><strong>genkey</strong> &ndash; not actually an option, but a command to generate the key.</li>
<li><strong>keystore</strong> &ndash; the file name you want to give to the keystore</li>
<li><strong>alias</strong> &ndash; the alias of the key.</li>
<li><strong>keyalg</strong> &ndash; the algorithm to be used to generate the key.</li>
<li><strong>keysize</strong> &ndash; the size of the key in bytes.</li>
<li><strong>validity</strong> &ndash; the number of days in which this keystore will be valid.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keytool</span> <span class="o">-</span><span class="nx">genkey</span> <span class="o">-</span><span class="nx">v</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="o">-</span><span class="nx">alias</span> <span class="nx">demoApp</span> <span class="o">-</span><span class="nx">keyalg</span> <span class="nx">RSA</span> <span class="o">-</span><span class="nx">keysize</span> <span class="mi">2048</span> <span class="o">-</span><span class="nx">validity</span> <span class="mi">10000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing the command above will ask you for the keystore password and some questions. Just provide an answer to each question since the information that you supply will be used to generate the keystore. Here&rsquo;s how it looks like in my machine:</p>

<p><img src="http://wern-ancheta.com/images/posts/ionic/keytool.png" alt="keytool" /></p>

<p>If you cannot use keytool, then maybe you don&rsquo;t have Java installed yet. You can install it by executing the following commands in order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="k">default</span><span class="o">-</span><span class="nx">jre</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="k">default</span><span class="o">-</span><span class="nx">jdk</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">openjdk</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="nx">jre</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">openjdk</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="nx">jdk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re ready to sign the apk file with the keystore that we generated. To do that, first copy the <code>demoApp.keystore</code> to the <code>platforms/android/build/outputs/apk</code> directory, open a terminal on that directory then execute the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jarsigner</span> <span class="o">-</span><span class="nx">verbose</span> <span class="o">-</span><span class="nx">sigalg</span> <span class="nx">SHA1withRSA</span> <span class="o">-</span><span class="nx">digestalg</span> <span class="nx">SHA1</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="nx">android</span><span class="o">-</span><span class="nx">release</span><span class="o">-</span><span class="nx">unsigned</span><span class="p">.</span><span class="nx">apk</span> <span class="nx">demoApp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will ask you for the password that you entered earlier when you created the keystore.</p>

<p>Finally, to generate the apk that you can submit in the Google Play Store, use <code>zipalign</code>. This accepts the name of the unsigned apk file and the name of the signed apk which it will generate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">zipalign</span> <span class="o">-</span><span class="nx">v</span> <span class="mi">4</span> <span class="nx">android</span><span class="o">-</span><span class="nx">release</span><span class="o">-</span><span class="nx">unsigned</span><span class="p">.</span><span class="nx">apk</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">apk</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need the key you can execute the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">keytool</span> <span class="o">-</span><span class="nx">exportcert</span> <span class="o">-</span><span class="nx">alias</span> <span class="nx">demoApp</span> <span class="o">-</span><span class="nx">keystore</span> <span class="nx">demoApp</span><span class="p">.</span><span class="nx">keystore</span> <span class="o">|</span> <span class="nx">openssl</span> <span class="nx">sha1</span> <span class="o">-</span><span class="nx">binary</span> <span class="o">|</span> <span class="nx">openssl</span> <span class="nx">base64</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned the basics of working with the Ionic framework. We have only scratched the surface in this tutorial, be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://ionicframework.com/docs/">Ionic Docs</a></li>
<li><a href="http://learn.ionicframework.com/formulas/">Ionic Formulas</a></li>
<li><a href="http://cordova.apache.org/docs/en/5.0.0/">Cordova Docs</a></li>
<li><a href="http://ngcordova.com/">Ng-Cordova</a></li>
<li><a href="http://plugins.cordova.io/#/">Cordova Plugin Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Twig Templating Engine in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php/"/>
    <updated>2015-08-31T21:40:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php</id>
    <content type="html"><![CDATA[<p>Separation of concerns is a design principle in Computer Science for separating a program into sections, each with their own responsibility. MVC, an architectural pattern used in most PHP frameworks allows developers to implement separation of concerns. One part of MVC is the View which handles the presentation layer of the application. In this tutorial I&rsquo;ll walk you through Twig, a templating engine for PHP. This allows us to separate the view from the business logic of the app.</p>

<h3>Installation</h3>

<p>Execute the following on your terminal to install Twig.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer require twig/twig</span></code></pre></td></tr></table></div></figure>


<p>In your working directory, create a <code>template</code> folder for storing the Twig templates and a <code>cache</code> folder for storing the cached templates. Twig puts the compiled version of templates into this folder so that the next time it&rsquo;s requested and there&rsquo;s no change in the template, it serves the cached version instead. Be sure to change the file permissions of the <code>cache</code> folder so that Twig can write into it. I had to do the following to have it work.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod -R 777 cache</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>To use Twig, include the vendor autoload file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next create a new instance of the <code>Twig_Loader_Filesystem</code> class and supply the path to the <code>templates</code> directory as its argument. After that, create a new instance of the <code>Twig_Environment</code> class and pass in the loader and an array of options as its argument. In this case, only the <code>cache</code> item is specified. This allows you specify the path of the <code>cache</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Filesystem</span><span class="p">(</span><span class="s1">&#39;templates&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$loader</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;cache&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;cache&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>To load a template, use the <code>loadTemplate</code> method on the Twig instance that you created earlier. Then pass in the path to the template that you want to use. After that, you can now output the view by calling the <code>render</code> method on the template. This accepts the data that you want to pass in to the view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">19</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>On the <code>templates</code> directory, create the <code>index.html</code> file that you were referring to in the <code>loadTemplate</code> method and then add the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>twig<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hi {{ name }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>You are {{ age }} years old<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>From the above code, you can see that the way the individual items in the array that you passed in the <code>render</code> method is by wrapping the name of the item in double curly braces. Here&rsquo;s how it&rsquo;s going to look like when access from the browser.</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/twig-first.png" alt="twig hello world" /></p>

<p>Note that Twig is pretty forgiving when it comes to data that you pass in to the template. For example, if you do not pass in the <code>age</code>, it wouldn&rsquo;t throw an error at you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Outputting Raw HTML</h4>

<p>Twig automatically escapes HTML so if you pass in HTML as data for your template, it is outputted as is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="s1">&#39;html_string&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;h3&gt;hi Im an html inside a template&lt;/h3&gt;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to get the HTML interpreted by the browser, you have to use the <code>raw</code> filter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hi {{ name }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>You are {{ age }} years old<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    {{ html_string | raw }}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>Looping through Arrays</h4>

<p>You can also load arrays for the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;users&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Yoh Asakura&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ash Ketchum&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">14</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Naruto Uzumaki&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">25</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And the way you output them in your template is by using the <code>for</code> tag. Here&rsquo;s an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Users<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Age<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% for user in users %}
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>{{ user.name }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>{{ user.age }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        {% endfor %}
</span><span class='line'>        
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the <code>for</code> tag, assign an alias for each item in the array that you specified. In this case, the array is <code>users</code> and each item is represented by the <code>user</code> variable. Inside the <code>for</code> tag, you can then access each user field. After you have outputted all the user details, close it with the <code>endfor</code> tag.</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/array.png" alt="for" /></p>

<h4>Conditions</h4>

<p>Twig allows you to use tags such as <code>if</code>, <code>else</code>, <code>elseif</code>, and <code>if not</code> for checking for simple conditions in your templates. Here&rsquo;s an example of using the <code>if</code> tag for checking if the age of the user is greater than or equal to 14.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Users<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Age<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% for user in users %}
</span><span class='line'>            {% if user.age &gt;= 14 %}
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>{{ user.name }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>{{ user.age }}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>            {% endif %}
</span><span class='line'>        {% endfor %}
</span><span class='line'>        
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wern-ancheta.com/images/posts/twig/if.png" alt="if" /></p>

<h4>Layouts</h4>

<p>Layouts can be used in order to avoid repitition of re-occurring elements of the page such as the header and the footer. To use layouts, you need a base template (<code>base.html</code>). This is the template that contains all the re-occurring elements of the page. This is essentially the main template in which all the other templates (child templates) inherits from. Your main template is where you usually declare the content block. This is the block that&rsquo;s going to get replaced by the content that you supply on your child template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span><span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        
</span><span class='line'>        {% block content %}{% endblock %}
</span><span class='line'>        
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From your child template (<code>child.html</code>), use the <code>extends</code> tag to let Twig know which template you want to inherit from. Below it, you use the same block that you used in your main template. In this case the name of the block is <code>content</code>. Inside the block, you put in the contents that you want to get rendered.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% extends &quot;base.html&quot; %}
</span><span class='line'>{% block content %}
</span><span class='line'>   <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that in the main template there&rsquo;s also a stylesheet. You need to create it on the <code>assets/css</code> directory. Here&rsquo;s the contents of the <code>style.css</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, from your PHP file, all you need to do is render the child template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$template</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">loadTemplate</span><span class="p">(</span><span class="s1">&#39;child.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my page&#39;</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s how its going to look like:</p>

<p><img src="http://wern-ancheta.com/images/posts/twig/layouts.png" alt="layouts" /></p>

<h4>Filters</h4>

<p>Twig also comes with filters. Filters as the name suggests, allows you to filter the content that you pass into it.</p>

<h5>Format</h5>

<p>If you need to perform a find and replace on a string, you can use the <code>format</code> filter. Here&rsquo;s how you can use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ami Damaru&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">110</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'>{{ &quot;Hi I&#39;m %s, I am %s years old&quot; | format(name, age) }}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you have seen above, to use the <code>format</code> filter, simply pipe it to the string that you want to perform find and replace on. Each string that you want to replace within the string should be <code>%s</code>. So in this case, the name and age is substituted for that value. It should result in the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Hi I&#39;m Ami Damaru, I am 110 years old
</span></code></pre></td></tr></table></div></figure>


<h5>nl2br</h5>

<p>The <code>nl2br</code> filter allows you to replace line breaks (<code>\n</code>) in your string with <code>&lt;br /&gt;</code> tags. This is useful if you want to output a string which uses line breaks instead of <code>&lt;br /&gt;</code> tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;string&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;The quick brown fox</span><span class="se">\n</span><span class="s2"> jumps over the heade</span><span class="se">\n</span><span class="s2"> of the lazy dog&quot;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'>    {{ string | nl2br }}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>date and date_modify</h5>

<p>The <code>date</code> and <code>date_modify</code> filters allows you to modify the formatting of a date.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$date</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2015-03-17&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$template</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{ date | date_modify(&quot;+1 week&quot;) | date(&#39;M d, Y&#39;) }}
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Aug 03, 2015
</span></code></pre></td></tr></table></div></figure>


<h5>upper and lower</h5>

<p><code>upper</code> and <code>lower</code> filters allows you to change the individual letters in a string into uppercase or lowercase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{{ &#39;MAKE ME LOWER&#39; | lower }}
</span><span class='line'>{{ &#39;make me higher&#39; | upper }}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The output will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>make me lower MAKE ME HIGHER
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with Twig, a templating engine for PHP. For more information about Twig, check out the <a href="http://twig.sensiolabs.org/documentation">official docs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Playing Clash of Clans Can Teach You About Life]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/23/what-playing-clash-of-clans-can-teach-you-about-life/"/>
    <updated>2015-08-23T12:33:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/23/what-playing-clash-of-clans-can-teach-you-about-life</id>
    <content type="html"><![CDATA[<ol>
<li><p><strong>You need to prioritize</strong>. There&rsquo;s only like 2 or 3 builder huts when you start playing the game.
That&rsquo;s why it&rsquo;s important to prioritize which things you upgrade. This is because upgrading takes time. And cancelling an upgrade will only return you half of the original resources you spent on the upgrade.
This usually means there&rsquo;s no turning back after you&rsquo;ve clicked on that upgrade button.
Just like in life you have to prioritize. You can&rsquo;t just aimlessly be doing everything that seems interesting.</p></li>
<li><p><strong>You need the right strategy for every raid that you do</strong>. Not every base is the same. There are those whose traps are laid outside the walls. This usually means that it will be triggered the moment your troops lay their first step to loot the resources. There are traps that are laid right before key defenses such as the mortar or air defense. Just like in life you need to carefully plan out your every move, especially the most important one&rsquo;s such as career decisions.</p></li>
<li><p><strong>You can&rsquo;t protect everything</strong>. Put your town hall outside in order to protect what&rsquo;s really important. Some players might disagree to this and say that if you have designed your base well then that&rsquo;s the ultimate defense that keeps other players from attacking your village. Some players might also be prioritizing trophies instead of loots and that&rsquo;s why they keep their town halls at the very center of their village. Those are all valid arguments. Some players might value trophies more than the loots. But come to think of it. There&rsquo;s over 6 million people who have it installed on Android. I don&rsquo;t know about iOS but 6 million people is a lot. This means that no matter how strong you think your village is. There&rsquo;s always someone who can 3-star it effortlessly and take away a ton of loot. So it&rsquo;s important to realize that you can&rsquo;t protect everything. You have to prioritize what you really want to protect and design your village in such a way that what you want to protect is protected in the best possible way. Just like in life you can&rsquo;t get everything that you want. It&rsquo;s important to love what you currently have.</p></li>
<li><p><strong>There&rsquo;s always someone out there whose stronger than you</strong>. There&rsquo;s no need to feel bad whenever some other 3-starred your village. Just like in life you don&rsquo;t need to feel bad about yourself whenever you see someone who is effortlessly better than you at the thing you&rsquo;re good at. What&rsquo;s important is that you work hard to get better each day.</p></li>
<li><p><strong>Revenge is for the weak</strong>. I don&rsquo;t know for other players but I pretty much don&rsquo;t care about other players attacking my village. It doesn&rsquo;t really matter whether they 3-starred me or they took a whole bunch of loot. They&rsquo;re just playing the game just like me. It&rsquo;s natural for your village to get attacked. It&rsquo;s natural for other players to take some resources out of your village. Just like it&rsquo;s natural for you take others as well. But maybe it&rsquo;s just me. I heard you would get a lot more trophies if you revenge on someone. But trophies aren&rsquo;t really important to me. I pretty much gave up on trying to go higher when I reached the crystal league. I tried going higher in order to get the gems as the reward but it&rsquo;s just hard to look for town halls that are unprotected.</p></li>
<li><p><strong>Time is money but you can also use money to buy time</strong>. When I gave up on reaching the master league in order to get the gem reward for reaching it. And eventually buy the 5th builder with it. I just bought some gems with some real money in order to buy the 5th builder. I don&rsquo;t really regret it since I just saved myself a lot of time trying to find unprotected town halls and get a measely amount of trophy. This is an example of buying time with money. With the 5th builder upgrades would be faster. And I no longer need to aim to get the gem reward for entering the master, champion, titan or legend leagues.</p></li>
<li><p><strong>Patience</strong>. Upgrades takes time, creating troops and spells takes time. Gold mines, elixir collectors, heck dark elixir drills takes time. Heroes takes time to sleep. Cool-down for requesting clan castle troops takes time. Searching for a good village to raid takes time. Patience is really a virtue. Especially so when it comes to playing clash of clans. Where every move you do takes time.</p></li>
<li><p><strong>Collaboration</strong>. It&rsquo;s important to collaborate with your clan mates during a war. You can&rsquo;t always have a mirror that directly matches yours. Often times your mirror is far stronger than you are. Sometimes the town hall doesn&rsquo;t even match. That&rsquo;s why it&rsquo;s important to collaborate with your clan mates so that you can adjust accordingly. Just like in life it&rsquo;s important to collaborate with your fellow employees, with your community and with your family.</p></li>
<li><p><strong>Progress will come naturally if you just stick to it</strong>. When I first started I really envied my friends on facebook because their villages looks so strong and tough and mine looks really week. But 6 months later I saw that my village is pretty much already on par with them or even stronger. I&rsquo;m not addicted to the game though. I really only play on my free time. But I always stick to it every day. And that is why I can see that I&rsquo;ve come a long way since I first started. This is similar to anything that you want to achieve in life. As a developer I always see to it that I learn something new each day. Or have a better understanding of what I previously learned. Just stick to doing something each day and progress will come naturally.</p></li>
<li><p><strong>Even heroes needs sleep</strong>. So do you. Sleep is needed in order to recharge your mind and body. The brain needs sleep in order to consolidate the things you&rsquo;ve learned during the day. So even if you think you&rsquo;re a superhero who only needs 3 hours of sleep in order to get by. You&rsquo;re not. You can&rsquo;t really hack your way out of sleep. That&rsquo;s what makes us human. We need rest in order to recharge.</p></li>
<li><p><strong>Donate and you will be rewarded</strong>. In clash of clans there is this donation system wherein a clan member can ask for troops to be put in the clan castle. Those troops will serve as guards for your village. If you always donate troops whenever someone asks for it, you will be remembered and your clan mates would love to donate troops to you as well. The same is true in life as well. Always donate to the less fortunate people and you will be rewarded.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Naughtyfire]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/15/introduction-to-naughtyfire/"/>
    <updated>2015-08-15T14:36:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/15/introduction-to-naughtyfire</id>
    <content type="html"><![CDATA[<p>Welcome to yet another introduction to a side-project of mine. This time I&rsquo;d like to talk about Naughtyfire.</p>

<p>Naughtyfire allows remote (home-based) developers to automatically notify their boss that they are taking a day off for a specific date. Settings, clients and events can be set in the web interface. All you need to do is to put it in the <code>www</code> or <code>public_html</code> directory in your home folder.</p>

<p>Notifications are done via email through a mail provider of your choice. I&rsquo;ve only tested Mandrill configuration but it should work with other mail service providers supported by SwiftMailer.</p>

<p>This project is meant to be used locally on your own computer. But you can also upload it on a server and set it up from there.</p>

<h3>Dependencies</h3>

<ul>
<li>Apache</li>
<li>MySQL</li>
<li>Composer</li>
<li>SwiftMailer</li>
<li>Phinx</li>
</ul>


<h3>How to Use</h3>

<ul>
<li>Put it on your <code>www</code> or <code>public_html</code> directory</li>
<li>If you have installed it on a folder under your <code>www</code> or <code>public_html</code> directory, you have to setup a virtual host for that path and then use it when accessing it from the browser. Accessing it via <code>http://localhost/naughtyfire</code> wouldn&rsquo;t work since the assets are linked using an absolute path. I recommend seetting the host name to <code>naughtyfire.dev</code>.</li>
<li>Navigate to the naughtyfire root directory then install the libraries by executing <code>composer install</code> on your terminal.</li>
<li>Create the database that naughtyfire will use.</li>
<li>Create a <code>phinx.yml</code> file and update the database credentials. You only have to update the values under the <code>development</code> configuration. Specifically the <code>name</code>, <code>user</code> and <code>pass</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paths:
</span><span class='line'>    migrations: %%PHINX_CONFIG_DIR%%/migrations
</span><span class='line'>
</span><span class='line'>environments:
</span><span class='line'>    default_migration_table: phinxlog
</span><span class='line'>    default_database: development
</span><span class='line'>    production:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: production_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    development:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: naughtyfire
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span><span class='line'>
</span><span class='line'>    testing:
</span><span class='line'>        adapter: mysql
</span><span class='line'>        host: localhost
</span><span class='line'>        name: testing_db
</span><span class='line'>        user: root
</span><span class='line'>        pass: ''
</span><span class='line'>        port: 3306
</span><span class='line'>        charset: utf8
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Access the host that you have selected (e.g. <code>naughtyfire.dev</code>) from your browser. The default page is the page for creating new events. But you can also access the following pages.</p>

<ul>
<li><code>/settings</code> &ndash; for updating the settings. Here you can set the twilio credentials and mail settings. If you leave the twilio credentials or mail settings blank, the notification wouldn&rsquo;t work. Choose either one of those or both and then supply the correct values.</li>
<li><code>/recepients</code> &ndash; for listing current recepients.</li>
<li><code>/recepients/new</code> &ndash; for creating a new recepient.</li>
</ul>
</li>
<li><p>Open cron.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crontab -e</span></code></pre></td></tr></table></div></figure>


<p>Use <code>wget</code> to request for the notifer URL once a day.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 0 * * * wget -O - http://naughtyfire.dev/notify &gt;/dev/null 2&gt;&1</span></code></pre></td></tr></table></div></figure>


<p>Here are a couple of screenshots of the app.</p>

<p><img src="http://wern-ancheta.com/images/posts/naughtyfire/new-event.png" alt="new event" /></p>

<p><img src="http://wern-ancheta.com/images/posts/naughtyfire/mail-sample.png" alt="mail sample" /></p>

<p>You can find more details about this project on <a href="http://wern-ancheta.com/projects/naughtyfire/">its project page</a>.</p>

<p>If you have an idea or you want to contribute to this project, feel free to check it out, fork it, or create an issue in its <a href="https://github.com/anchetaWern/naughtyfire">github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My OSX Development Environment]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment/"/>
    <updated>2015-08-09T20:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had my fair share of <a href="http://wern-ancheta.com/blog/2013/07/13/my-linux-development-environment/">Windows</a> and <a href="http://wern-ancheta.com/blog/2013/05/19/my-windows-development-environment/">Linux</a> development. This time I&rsquo;d like to share with you the development tools I use in my OSX machine.</p>

<h3>Homebrew</h3>

<p>A must have for every Mac Developer, the missing package manager for OS X. If you came from Ubuntu, this is basically the same as <code>apt-get</code>. You can install it using ruby. Ruby already comes pre-installed in mac so you can execute the following command directly.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done you can now install every developer that you can think of by using <code>brew install</code>. Packages in Homebrew are called formulas, you can find them on <a href="http://brewformulas.org/">homebrewformulas.org</a> or in the <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">Homebrew repository at Github</a>.</p>

<h3>MAMP</h3>

<p>MAMP is the equivalent of the LAMP stack on Mac. It basically stands for Mac Apache MySQL PHP. You can install it by downloading the installer from the <a href="https://www.mamp.info/en/downloads/">MAMP downloads page</a>. These days I only use A of MAMP for testing scripts. Since I usually develop PHP applications using the Laravel framework which can already serve your project while you&rsquo;re developing. This basically takes care of the A and P part of MAMP.</p>

<h3>Sublime Text</h3>

<p>I&rsquo;m not a big fan of IDE&rsquo;s (Integrated Development Environment) so I use a plain old text editor when writing code. My text editor of choice is still Sublime Text mainly due to how its simplicity and good performance. It just allows me to code without having to think too much about how I can use the different bells and whistles. You can download the installer from the <a href="http://www.sublimetext.com/2">downloads page</a>.</p>

<h3>Node</h3>

<p>Node has become quite the dependency for every thing. Development tools such as Gulp and Sass requires Node.js to be installed. Well not exactly Node.js but NPM. But why would you want to install Node without NPM? They&rsquo;re like inseparable twin brothers. So better install Node which already comes with NPM since sooner or later you would also need Node anyway. You can install Node by using the Node Version Manager (NVM). You can download it by using curl and then piping it to the shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s done, you can list the node versions that are currently available.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm ls-remote</span></code></pre></td></tr></table></div></figure>


<p>From there you can install the version that you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install v0.12.7</span></code></pre></td></tr></table></div></figure>


<p>And then finally set it as default.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm alias default v0.12.7
</span><span class='line'>nvm use default</span></code></pre></td></tr></table></div></figure>


<h3>Git</h3>

<p>Git is my version control system of choice. You can install it via homebrew.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install git</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to set your global config after installing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "Wern Ancheta"
</span><span class='line'>git config --global user.email "myemail@gmail.com"</span></code></pre></td></tr></table></div></figure>


<p>You can also set the credential helper to use osxkeychain. This allows you to cache your password so that you don&rsquo;t need to enter it every time you push to the server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global credential.helper osxkeychain</span></code></pre></td></tr></table></div></figure>


<h3>Xcode</h3>

<p>I needed Xcode to compile and build the Cordova app that I was developing. Xcode comes with an iOS simulator which is great for testing Cordova apps to be deployed on an iOS device. You can install it using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcode-select --install</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t want to deal with the command-line, you can simply get it from <a href="https://developer.apple.com/downloads/">the apple developer downloads page</a> and look for the most recent version of Xcode. Be warned that Xcode is 2.6GB in size so it might take a while to download depending on your download speed.</p>

<h3>Cordova</h3>

<p>Cordova is a set of device APIs that allows mobile app developers to access native device functions such as the camera through JavaScript. You can install it by using npm. Cordova basically does all the heavy-lifting when it comes to developing Hybrid Mobile Apps.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cordova</span></code></pre></td></tr></table></div></figure>


<h3>Ionic</h3>

<p>Ionic is my Hybrid Mobile App Framework of choice. You can also install it with npm.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g ionic</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Staticizer]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer/"/>
    <updated>2015-08-02T19:33:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer</id>
    <content type="html"><![CDATA[<p>Welcome to yet another promotional post on another side-project of mine. This time it&rsquo;s Staticizer, a static site generator.</p>

<h3>Yet Another Static Site Generator?</h3>

<p>No. This isn&rsquo;t unlike any static site generator out there. I created this project to create a static version for my <a href="https://github.com/anchetaWern/antares">antares project</a>. So you can use this to create a static version of an existing project. All it really does is request a URL in your local machine and create an HTML file out of it. This works best for websites that has only a few pages.</p>

<h3>How to Use</h3>

<p>First you have to update the <code>index.php</code> file and write your own code for fetching the pages in the website you want to convert to a static one.</p>

<p>Next, update the <code>config.php</code> file and change the values for the <code>BASE_URL</code>, <code>STATIC_PATH</code> and <code>JSON_PATH</code>. The <code>BASE_URL</code> is the base URL of the website you want to convert. The <code>STATIC_PATH</code> is the base directory where you want to save the generated HTML files. The <code>JSON_PATH</code> is the path to the json files inside the <code>STATIC_PATH</code> that you specified. This is optional. Only use this if you are serving json files on the original website.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;BASE_URL&#39;</span><span class="p">,</span> <span class="s1">&#39;http://antaresapp.dev/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;STATIC_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;site&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;JSON_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you have to manually copy front-end assets (css, script, images) in the <code>STATIC_PATH</code>.</p>

<h4>Deployment</h4>

<p>This works best with Github pages. Just create a new Github account that directly matches the name of the website. As an example, I created a Github account and named it antaresapp. I then created a new repository named <a href="https://github.com/antaresapp/antaresapp.github.io">antaresapp.github.io</a>. This will serve as the repository that the Github page will use. Remember that you can only create a single Github page for every Github account.</p>

<p>On your static path, initialize a new Git repo and add the Github page repository as a remote.</p>

<p>Lastly, you can use this project by executing the following commands from your terminal.</p>

<p>To update the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php update.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate the static HTML files and JSON files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php generate.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>To push the changes to the Github repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">php push.php</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know more about the project, you can check it out <a href="https://github.com/anchetaWern/staticizer">here</a>.</p>
]]></content>
  </entry>
  
</feed>
