<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webRTC | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/webrtc/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-11-03T20:34:16+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing Video Calls with PeerJS]]></title>
    <link href="http://wern-ancheta.com/blog/2015/07/26/implementing-video-calls-with-peerjs/"/>
    <updated>2015-07-26T16:31:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/07/26/implementing-video-calls-with-peerjs</id>
    <content type="html"><![CDATA[<p>Picking up from where we left off <a href="/blog/2015/05/03/implementing-audio-calls-with-peerjs/">last time</a>. Let&rsquo;s now try to add a video on our simple calling app with PeerJS. If you haven&rsquo;t read my previous tutorial, go ahead and read it as this article wouldn&rsquo;t make sense if you haven&rsquo;t yet.</p>

<p>First, we still need to use the same scripts we used on the last tutorial.</p>

<p>```html</p>

<script src="http://wern-ancheta.com//cdn.peerjs.com/0.3/peer.min.js"></script>


<script src="http://wern-ancheta.com//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>


<script src="http://wern-ancheta.com//www.WebRTC-Experiment.com/RecordRTC.js"></script>


<p>```</p>

<p>But for our HTML, we need to replace the <code>audio</code> element with <code>video</code>. We also set the video to autoplay so that as soon as the stream becomes available, the video starts playing.</p>

<p><code>html
&lt;button id="start-call"&gt;start call&lt;/button&gt;
&lt;video controls autoplay&gt;&lt;/video&gt;
</code></p>

<p>For our custom script, we still have the <code>getParameterByName</code> function.</p>

<p>```javascript
function getParameterByName(name){</p>

<pre><code>name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
var regex = new RegExp("[\\?&amp;]" + name + "=([^&amp;#]*)"),
    results = regex.exec(location.search);
return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
</code></pre>

<p>}
```</p>

<p>As for the <code>getAudio</code> function that we previously used for getting the audio input from the users device. We now replace it with <code>getVideo</code>:</p>

<p>```javascript
function getVideo(successCallback, errorCallback){</p>

<pre><code>navigator.getUserMedia({audio: true, video: true}, successCallback, errorCallback);
</code></pre>

<p>}
```</p>

<p>When the call is received, we now call the <code>getVideo</code> function instead of <code>getAudio</code>.</p>

<p>```javascript
function onReceiveCall(call){</p>

<pre><code>console.log('peer is calling...');
console.log(call);

getVideo(
    function(MediaStream){
        call.answer(MediaStream);
        console.log('answering call started...');
    },
    function(err){
        console.log('an error occured while getting the video');
        console.log(err);
    }
);

call.on('stream', onReceiveStream);
</code></pre>

<p>}
```</p>

<p>Once a stream is received, we also need to replace the element that we&rsquo;re selecting. So we now select the video element instead of audio.</p>

<p>```javascript
function onReceiveStream(stream){</p>

<pre><code>var video = document.querySelector('video');
video.src = window.URL.createObjectURL(stream);
video.onloadedmetadata = function(){
    console.log('loaded');
};
</code></pre>

<p>}
```</p>

<p>The code for getting the current user and the peer is also the same.</p>

<p><code>javascript
var from = getParameterByName('from');
var to = getParameterByName('to');
</code></p>

<p>But for the creation of the peer, we now use the PeerServer Cloud service instead of our own since we already did that last time.</p>

<p><code>javascript
var peer = new Peer(from, {key: 'Your PeerJS API Key'});
</code></p>

<p>Then we listen for the open event on the peer just so we can check if the peer has actually been created.</p>

<p>```javascript
peer.on(&lsquo;open&rsquo;, function(id){</p>

<pre><code>console.log('My peer ID is: ' + id);
</code></pre>

<p>});
```</p>

<p>We also listen to the call event so we can receive incoming calls.</p>

<p><code>javascript
peer.on('call', onReceiveCall);
</code></p>

<p>For the start call button click event, we use the <code>getVideo</code> function and proceed as usual.</p>

<p>```javascript
$(&lsquo;#start-call&rsquo;).click(function(){</p>

<pre><code>console.log('starting call...');

getVideo(
    function(MediaStream){

        console.log('now calling ' + to);
        var call = peer.call(to, MediaStream);
        call.on('stream', onReceiveStream);
    },
    function(err){
        console.log('an error occured while getting the video');
        console.log(err);
    }
);
</code></pre>

<p>});
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! We have implemented video calling using peerJS. Do note that this will consume more bandwidth than audio calls so the performance might be affected depending on the network.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Audio Calls with PeerJS]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/03/implementing-audio-calls-with-peerjs/"/>
    <updated>2015-05-03T06:37:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/03/implementing-audio-calls-with-peerjs</id>
    <content type="html"><![CDATA[<p>These past few days I&rsquo;ve been playing around with WebRTC. For the uninitiated, WebRTC basically means Web Real Time Communication.
Things like chat, audio or video calling comes to mind when you say real time. And that is what really WebRTC is. It gives real time super powers for the web.
In this tutorial I&rsquo;ll be showing you how to implement audio calls with PeerJS. PeerJS is a JavaScript library that allows us to easily implement peer to peer communications with WebRTC.</p>

<h3>Things We Need</h3>

<p>Before we start, go ahead and download the things we&rsquo;ll need for this tutorial:</p>

<ul>
<li><p><strong>jQuery</strong> &ndash; I know right! who still uses jQuery these days? Raise your left foot. Kidding aside, yes we still need jQuery. In this tutorial we&rsquo;ll only be using it to handle click events. So if you&rsquo;re confident with your Vanilla JavaScript-Fu then feel free to skip it.</p></li>
<li><p><strong>PeerJS</strong> &ndash; In case you missed it earlier, were gonna need PeerJS so that we can easily implement WebRTC.</p></li>
<li><p><strong>RecordRTC.js</strong> &ndash; This library mainly provides recording functionalities (e.g taking screenshots and webcam photos, recording audio and video) but it also doubles as a shim provider. We won&rsquo;t really use the recording functionalities in this tutorial so were only using it to be able to request the use of the microphone in the device.</p></li>
</ul>


<h3>Overview of the App</h3>

<p>Were going to build an app that would allow 2 users to call each other through the web via WebRTC. This app can use the PeerServer Cloud or you can implement your own PeerJS server. As for the outputting the audio coming from the microphones of each peer, we will use HTML5 Audio. So all we have to do is convert the audio stream to a format that HTML5 Audio can understand so that we can have each of the users listen to the audio coming from the other side.</p>

<h3>Building the App</h3>

<p>Now that have a basic overview of how the app will work, its time to actually build it.</p>

<p>First, link all the things that we&rsquo;ll need:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;test&lt;/title&gt;
&lt;script src="http://wern-ancheta.com//cdn.peerjs.com/0.3/peer.min.js"&gt;&lt;/script&gt;
&lt;script src="http://wern-ancheta.com//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="http://wern-ancheta.com//www.WebRTC-Experiment.com/RecordRTC.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
```</p>

<p>Yes, you can also put those script tags right before the closing body tag if performance is your thing.</p>

<p>Next is the HTML that the user will actually see:</p>

<p>```html
<body></p>

<pre><code>&lt;button id="start-call"&gt;start call&lt;/button&gt;
&lt;audio controls&gt;&lt;/audio&gt;
</code></pre>

<p>```</p>

<p>Yup! I didn&rsquo;t miss anything. That&rsquo;s all we need. A button to start the call to another peer and an HTML5 audio tag to output the audio on the other end.</p>

<p>Now let&rsquo;s proceed with the JavaScript. First declare a method that will get the query parameters by name.</p>

<p>```javascript
function getParameterByName(name){</p>

<pre><code>name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
var regex = new RegExp("[\\?&amp;]" + name + "=([^&amp;#]*)"),
    results = regex.exec(location.search);
return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
</code></pre>

<p>}
```</p>

<p>The way this app works is by using <code>from</code> and <code>to</code> as query parameters. Where <code>from</code> is the id that you want to give to the peer whose currently using the device and <code>to</code> is the id of the peer on the other side. So we use the method above to easily get those values. To emphasize further, here&rsquo;s how the URL that we will use to access the app will look like on our side (john):</p>

<p><code>
http://mysite.com/call-app.html?from=john&amp;to=jane
</code></p>

<p>And on the other side (jane), it would look like this:</p>

<p><code>
http://mysite.com/call-app.html?from=jane&amp;to=john
</code></p>

<p>We&rsquo;ve basically just interchanged the two peers so we know exactly where the request is coming from and where its going to.</p>

<p>Next we declare the method that will ask a permission to the user for the page to use the microphone. This method takes up 2 parameters, the <code>successCallback</code> and the <code>errorCallback</code>. The <code>successCallback</code> is called when the page has been granted permission to use the microphone. And the <code>errorCallback</code> is called when the user declined.</p>

<p>```javascript
function getAudio(successCallback, errorCallback){</p>

<pre><code>navigator.getUserMedia({
    audio: true,
    video: false
}, successCallback, errorCallback);
</code></pre>

<p>}
```</p>

<p>Next declare the method that will be called when a call is received from a peer. This method has the <code>call</code> object as its parameter. We use this <code>call</code> object to initiate an answer to the call. But first we need to ask permission to the user to use the microphone by calling the <code>getAudio</code> method. Once we get the permission, we can then answer the call by calling the <code>answer</code> method in the <code>call</code> object. This method takes up the <code>MediaStream</code> as its argument. If we didn&rsquo;t get the permission to use the microphone, we just log that an error occurred and then output the actual error. Finally, we listen to the <code>stream</code> event in the call and then we call the <code>onReceiveStream</code> method when the event happens. This <code>stream</code> event can be triggered in 2 ways. First is when a peer initiates a call to another peer. And the second is when the other peer actually answers the call.</p>

<p>```javascript
function onReceiveCall(call){</p>

<pre><code>console.log('peer is calling...');
console.log(call);

getAudio(
    function(MediaStream){
        call.answer(MediaStream);
        console.log('answering call started...');
    },
    function(err){
        console.log('an error occured while getting the audio');
        console.log(err);
    }
);

call.on('stream', onReceiveStream);
</code></pre>

<p>}
```</p>

<p>Next is the <code>onReceiveStream</code> method. This method is called when a media stream is received from the other peer. This is where we convert the media stream to a URL which we use as the source for the audio tag. The stream is basically an object which contains the current audio data. And we convert it to a URL by using the <code>window.URL.createObjectURL</code> method. Once all the meta data is loaded, we then play the audio.</p>

<p>```javascript
function onReceiveStream(stream){</p>

<pre><code>var audio = document.querySelector('audio');
audio.src = window.URL.createObjectURL(stream);
audio.onloadedmetadata = function(e){
    console.log('now playing the audio');
    audio.play();
}
</code></pre>

<p>}
```</p>

<p>Now that were done with all the method declarations, its time to actually call them. First we need to know where the request is coming from and who will it be sent to.</p>

<p><code>javascript
var from = getParameterByName('from');
var to = getParameterByName('to');
</code></p>

<p>Next we declare a new peer. This takes up the <code>id</code> of the peer as its first argument and the second argument is an object containing the PeerJS key. If you do not have a key yet, you can register for the <a href="http://peerjs.com/peerserver">PeerJS Cloud Service</a>. Its free for up to 50 concurrent connections. After that, we also need to set the ice server config. This ensures that we can get the peers to connect to each other without having to worry about external IP&rsquo;s assigned by routers, firewalls, proxies and other kinds of network security which can get in the way. You need to have at least one stun server and one turn server configuration added. You can get a list of freely available stun and turn servers <a href="https://gist.github.com/yetithefoot/7592580">here</a>.</p>

<p>```javascript
var peer = new Peer(</p>

<pre><code>from, 
{
    key: 'Your PeerJS API Key',
    config: {'iceServers': [
        { url: 'stun:stun1.l.google.com:19302' },
        { url: 'turn:numb.viagenie.ca', credential: 'muazkh', username: 'webrtc@live.com' }
    ]}
}
</code></pre>

<p>);
```</p>

<p>If you want to use your own server and get through the 50 concurrent connections limit of the PeerServer cloud. You can install PeerJS Server on your existing Express app in node.</p>

<p><code>
npm install peer --save
</code></p>

<p>And then use it like so:</p>

<p>```javascript
var express = require(&lsquo;express&rsquo;);
var express_peer_server = require(&lsquo;peer&rsquo;).ExpressPeerServer;
var peer_options = {</p>

<pre><code>debug: true 
</code></pre>

<p>};</p>

<p>var app = express();</p>

<p>var server = app.listen(3000);</p>

<p>app.use(&lsquo;/peerjs&rsquo;, express_peer_server(server, peer_options));
```</p>

<p>And from the client side you can now use your shiny new PeerJS server:</p>

<p>```javascript
var peer = new Peer(from, {</p>

<pre><code>    host: 'your-peerjs-server.com', port: 3000, path: '/peerjs',
    config: {'iceServers': [
        { url: 'stun:stun1.l.google.com:19302' },
        { url: 'turn:numb.viagenie.ca', credential: 'muazkh', username: 'webrtc@live.com' }
    ]}
}
</code></pre>

<p>);
```</p>

<p>Next is an optional code. We only use it to determine if the peer we created was actually created. Here we simply listen to the <code>open</code> event on the peer object. And once it happens, we just output the peer id.</p>

<p>```javascript
peer.on(&lsquo;open&rsquo;, function(id){</p>

<pre><code>console.log('My peer ID is: ' + id);
</code></pre>

<p>});
```</p>

<p>Next we listen to the <code>call</code> event. This is triggered when a peer tries to make call to the current user.</p>

<p><code>javascript
peer.on('call', onReceiveCall);
</code></p>

<p>Finally, here&rsquo;s the code we use when we initiate the call ourselves:</p>

<p>```javascript
$(&lsquo;#start-call&rsquo;).click(function(){</p>

<pre><code>console.log('starting call...');

getAudio(
    function(MediaStream){

        console.log('now calling ' + to);
        var call = peer.call(to, MediaStream);
        call.on('stream', onReceiveStream);
    },
    function(err){
        console.log('an error occured while getting the audio');
        console.log(err);
    }
);
</code></pre>

<p>});
```</p>

<p>What this does is listen to the <code>click</code> event on the <code>start-call</code> button. It then calls the <code>getAudio</code> method to ask the user for permission to use the microphone. If the user allows then the call is made to the peer using the <code>call</code> method. This takes up the id of the peer on the other side and the <code>MediaStream</code>. Next, we just listen for the <code>stream</code> event and then call the <code>onReceiveStream</code> method if it happens. Note that this stream would be the audio stream from the peer on the other side and not the audio stream of the current user. Otherwise we would also hear our own voice. The same is true with the stream that were getting from the <code>onReceiveCall</code> method.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial we&rsquo;ve learned how to implement audio calls with WebRTC and PeerJS. Be sure to check out the resources below if you want to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/">Getting Started with WebRTC</a></li>
<li><a href="http://peerjs.com/docs/#start">PeerJS Documentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
