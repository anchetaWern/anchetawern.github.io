<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: database-migrations | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/database-migrations/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-01-16T08:59:47+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database Migrations in PHP with Phinx]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx/"/>
    <updated>2015-09-20T17:29:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx</id>
    <content type="html"><![CDATA[<p>Gone are the days where you use the export functionality of your database management tool and share the SQL file to your team mates. Most PHP frameworks today already comes with a database migration tool which you can use to construct and make changes to your database and easily share them through your version control system of choice. In this tutorial I&rsquo;ll be walking you through <a href="https://phinx.org/">Phinx</a>, a database migration tool for PHP.</p>

<p>If you don&rsquo;t know what a database migration is, it&rsquo;s basically a way to version your database. Pretty much like what you do with version control systems like Git, SVN or Mercurial. It allows you to make changes to your database and easily rollback any of those changes later on if you make a mistake or if there are some changes that needs to be implemented. You can then share the changes you&rsquo;ve made to your team by committing it to your version control system and pushing it to the main repository of your project. Your team mates can then pull those changes into their own copy and run the migrations so that they have the same state of the database as you do.</p>

<h3>Installation</h3>

<p>You can install Phinx through Composer by executing the following commands on your terminal. If you have an existing project, you can navigate to your project directory and execute it from there.</p>

<p><code>
composer require robmorgan/phinx
composer install --no-dev
</code></p>

<p>Next create a <code>migrations</code> folder. This is where the database migrations are going to be stored.</p>

<p>Finally, execute the following command to initialize Phinx.</p>

<p><code>
php vendor/bin/phinx init
</code></p>

<h3>Configuration</h3>

<p>When Phinx was initialized, you might have noticed that it created a <code>phinx.yml</code> file on the root of your project. This file is the Phinx configuration. This is where you can modify the database used by Phinx for production, development and testing environments. By default Phinx uses the development environment so go ahead and modify the details for that.</p>

<p>```
paths:</p>

<pre><code>migrations: %%PHINX_CONFIG_DIR%%/migrations
</code></pre>

<p>environments:</p>

<pre><code>default_migration_table: phinxlog
default_database: development
production:
    adapter: mysql
    host: localhost
    name: production_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

development:
    adapter: mysql
    host: localhost
    name: development_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

testing:
    adapter: mysql
    host: localhost
    name: testing_db
    user: root
    pass: ''
    port: 3306
    charset: utf8
</code></pre>

<p>```</p>

<h3>Usage</h3>

<p>Using Phinx mainly composed of the following workflow:</p>

<ol>
<li>Create a migration</li>
<li>Modify the migration class</li>
<li>Run the migration</li>
<li>If you need to make a change to a previous migration, roll it back, make the change to the migration class and run the migration again.</li>
</ol>


<h4>Creating Migrations</h4>

<p>To create a new migration, you use the Phinx shell script. Below is a migration for creating a users table.</p>

<p><code>
php vendor/bin/phinx create CreateUsersTable
</code></p>

<p>This creates a new file in the <code>migrations</code> directory. For me it created a file named <code>20150727004941_create_users_table.php</code>. The filename is made up of the timestamp and the machine-friendly version of the name of the migration that you provided.</p>

<p>It&rsquo;s best practice that you name your migrations based on what they do, so that you can easily look for them if you need to modify something. Each migration should only be doing one specific task so that you can easily roll them back without having to worry about side-effects. Creating a users table should add the fields that are necessary to that table. But if you&rsquo;re modifying a specific table, in most cases, you should only modify one field at a time. For example, you need to modify the data type from <code>INT</code> to <code>VARCHAR</code>. Only modify one field. But if it makes sense to change two or more fields in a single migration, then do so. For example, if you need to modify the length of the <code>username</code> and <code>password</code> fields so they can accomodate more data.</p>

<p>Going back to the migration file. Open it up if you haven&rsquo;t yet. Here&rsquo;s how it looks like by default.</p>

<p>```php
&lt;?php</p>

<p>use Phinx\Migration\AbstractMigration;</p>

<p>class CreateUsersTable extends AbstractMigration
{</p>

<pre><code>/**
 * Change Method.
 *
 * Write your reversible migrations using this method.
 *
 * More information on writing migrations is available here:
 * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class
 */
public function change()
{

}
</code></pre>

<p>}
?>
```</p>

<p>Phinx already creates a skeleton class for you s you only need to modify what&rsquo;s in the <code>change</code> function. This is where you need to add the code for modifying your database. In this case the change is to create a <code>users</code> table. Add the following inside the <code>change</code> function.</p>

<p>```php
&lt;?php
  $table = $this->table(&lsquo;users&rsquo;);
  $table->addColumn(&lsquo;username&rsquo;, &lsquo;string&rsquo;)</p>

<pre><code>  -&gt;addColumn('email', 'string')
  -&gt;addColumn('password', 'string')
  -&gt;create();
</code></pre>

<p>?>
```</p>

<p>The table is declared using the <code>table</code> function. This accepts the name of the table as its argument. The fields are then added by calling the <code>addColumn</code> method in the table. This accepts 2 required arguments: the name of the field and the data type. Finally, the <code>create</code> function is called to actually create the table. Once that&rsquo;s done, save the file.</p>

<p>Let&rsquo;s pretend we forgot to add the <code>photo</code> field, so create another migration to add that.</p>

<p><code>
php vendor/bin/phinx migrate AddPhotoFieldToUsersTable
</code></p>

<p>Add the following inside the <code>change</code> method.</p>

<p>```php</p>

<pre><code>$table = $this-&gt;table('users');
$table-&gt;addColumn('photo', 'string', array('after' =&gt; 'username'))
        -&gt;update();
</code></pre>

<p>```</p>

<p>Nothing new here, the only thing that&rsquo;s changed is the method to be called to actually execute the change that you need to make. In this case instead of <code>create</code>, the <code>update</code> method is used. This is how Phinx will know that you are trying to update the <code>users</code> table by adding the <code>photo</code> field.</p>

<h4>Running Migrations</h4>

<p>You can run all the migrations that haven&rsquo;t been run yet by using the <code>migrate</code> command.</p>

<p><code>
php vendor/bin/phinx migrate
</code></p>

<p>It would output something similar to the following when the migration is run.</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727004941 CreateUsersTable: migrating
 == 20150727004941 CreateUsersTable: migrated 0.3325s</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: migrating
 == 20150727013547 AddPhotoFieldToUsersTable: migrated 0.5018s</p>

<p>All Done. Took 0.6773s
```</p>

<p>You can now check if the table was actually created by opening your database management tool of choice. Also notice that there is a <code>phinxlog</code> table in your database. This is used by Phinx to keep track of which specific migrations were run and the start and end time for each. The migration is determined by its version, which is basically the first part of the file name for a specific migration file. On my testing, the version is <code>20150727004941</code>.</p>

<h4>Rolling Back Changes</h4>

<p>To rollback changes you can use the <code>rollback</code> command which does exactly the opposite of the <code>migrate</code> command. All it does is rollback everything that has changed on the last migrate.</p>

<p><code>
php vendor/bin/phinx rollback
</code></p>

<p>The command above outputs something similar to the following:</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: reverting
 == 20150727013547 AddPhotoFieldToUsersTable: reverted 0.4672s</p>

<p> == 20150727004941 CreateUsersTable: reverting
 == 20150727004941 CreateUsersTable: reverted 0.1503s</p>

<p>All Done. Took 0.6175s
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to create database migrations with Phinx. Be sure to check out the <a href="http://docs.phinx.org/en/latest/">official documentation</a> if you want to learn more.</p>
]]></content>
  </entry>
  
</feed>
