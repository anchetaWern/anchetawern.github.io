<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: laravel | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-01-16T08:59:47+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Lumen]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/09/getting-started-with-lumen/"/>
    <updated>2015-05-09T13:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/09/getting-started-with-lumen</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through Lumen, a lightweight framework from the same guys that made Laravel. Lumen is basically a lighter version of Laravel.</p>

<h3>Installation</h3>

<p>You can install Lumen by using composer&rsquo;s <code>create-project</code> command. Simply execute the following command on your preferred install directory:</p>

<p><code>
composer create-project laravel/lumen --prefer-dist
</code></p>

<p>Once the installation is done, you can navigate to the <code>lumen</code> directory and execute the following:</p>

<p><code>
php artisan serve --port=7771
</code></p>

<p>This will serve the project on port 7771 of your localhost:</p>

<p><code>
http://localhost:7771/
</code></p>

<p>If the installation completed successfully, you will be greeted by the default screen.</p>

<h3>Using Third Party Libraries</h3>

<p>You can use third party libraries with Lumen by adding the package that you want to install in the <code>composer.json</code> file. Here&rsquo;s an example:</p>

<p>```
&ldquo;require&rdquo;: {</p>

<pre><code>"laravel/lumen-framework": "5.0.*",
"vlucas/phpdotenv": "~1.0",
"elasticsearch/elasticsearch": "~1.0",
"guzzlehttp/guzzle": "~5.0"
</code></pre>

<p>},
```</p>

<p>Note that the lumen-framework and phpdotenv is there by default since those are needed in order for Lumen to work. In the above file we have added elasticsearch and guzzlehttp as our dependencies.</p>

<p>You can then make Lumen aware of these libraries by initializing them on the files where you want to use them:</p>

<p><code>php
&lt;?php
$http_client = new \GuzzleHttp\Client();
$es_client = new \Elasticsearch\Client();
?&gt;
</code></p>

<h3>Configuration</h3>

<p>By default Lumen is pretty bare-bones. Which means that we need to do some configuration if we want to use some of the features that we usually have in Laravel. In Lumen you can enable most of those functionalities by editing the <code>bootstrap/app.php</code> file.</p>

<h4>Enabling Sessions</h4>

<p>You can enable sessions by removing the comment on the middleware which says <code>Illuminate\Session\Middleware\StartSession</code>:</p>

<p>```php
&lt;?php
$app->middleware([</p>

<pre><code>//'Illuminate\Cookie\Middleware\EncryptCookies',
//'Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse',
'Illuminate\Session\Middleware\StartSession',
//'Illuminate\View\Middleware\ShareErrorsFromSession',
//'Laravel\Lumen\Http\Middleware\VerifyCsrfToken',
</code></pre>

<p>]);
?>
```</p>

<h3>Enabling Eloquent</h3>

<p>If you need to use Eloquent in your app, you can enable it by removing the comment on the following lines:</p>

<p><code>php
&lt;?php
$app-&gt;withFacades();
$app-&gt;withEloquent();
?&gt;
</code></p>

<h3>Dot Env</h3>

<p>Lumen uses a <code>.env</code> file to set the environment configuration for the project. This way you can have a different <code>.env</code> file on your local machine and on your server. And then you can set git to ignore this file so that it doesn&rsquo;t get pushed along to the server when you deploy your changes. Here&rsquo;s how the <code>.env</code> file looks by default:</p>

<p>```
APP_ENV=local
APP_DEBUG=false
APP_KEY=SomeRandomKey!!!</p>

<p>APP_LOCALE=en
APP_FALLBACK_LOCALE=en</p>

<p>DB_CONNECTION=mysql
DB_HOST=localhost
DB_DATABASE=homestead
DB_USERNAME=homestead
DB_PASSWORD=secret</p>

<p>CACHE_DRIVER=memcached
SESSION_DRIVER=memcached
QUEUE_DRIVER=database
```</p>

<p>As you can see from the file above, you can set the name of the environment by setting the value for <code>APP_ENV</code>. The next one right after that is the <code>APP_DEBUG</code> configuration which is set to <code>false</code> by default. If you&rsquo;re developing you need to set this to <code>true</code> so you have an idea what&rsquo;s wrong when testing your app. Next is <code>APP_KEY</code> which is basically used as a salt for sessions. You can use a random string generator for this. <code>APP_LOCALE</code> and <code>APP_FALLBACK_LOCALE</code> are used for setting the language of your app. This is set to english by default. Next are the database configuration. Anything which starts with <code>DB_</code> is the database configuration. By default its expecting to connect to a <code>mysql</code> database. <code>DB_HOST</code> is the host in which the database is running. <code>DB_DATABASE</code> is the name of the database you want to connect to. <code>DB_USERNAME</code> is the username of the user you want to use for logging in. <code>DB_PASSWORD</code> is the password of the user. After the database configuration are the cache, session and queue driver configuration. The cache and session driver are using memcached by default so you&rsquo;ll have to install memcached if you&rsquo;re using caching and session functionalities. If memcached is not present in the system then it will just fallback to the default one which is the filesystem.</p>

<p>Note that before you can use the <code>.env</code> file, you need to uncomment the following line in your <code>bootstrap/app.php</code> file. This way Lumen will load the <code>.env</code> file on the root of your project.</p>

<p><code>
Dotenv::load(__DIR__.'/../');
</code></p>

<h3>Directory Structure</h3>

<p>Here&rsquo;s what the default directory structure looks like in Lumen. The one&rsquo;s with * are files:</p>

<p><code>
app
bootstrap
database
public
resources
storage
tests
vendor
*artisan
*server.php
*composer.json
</code></p>

<p>The <code>app</code> directory is where you will usually work with. This is where the routes, controllers and middlewares are stored.</p>

<p>The <code>bootstrap</code> directory only contains one file by default, the <code>app.php</code> file. As you have seen earlier, its where you can configure and add new functionality to Lumen.</p>

<p>The <code>database</code> directory is where the database migrations and seeders are stored. You use migrations to easily jump from previous database version to another. Its like version control for your database. Seeds on the other hand are used to populate the database with dummy data so that you can easily test your app without having to enter the information through the app itself.</p>

<p>The <code>public</code> directory is where your public assets are stored. Things like css, javascript and images are stored in this directory.</p>

<p>The <code>resources</code> directory is where you store the views that you use for your app.</p>

<p>The <code>storage</code> directory is where logs, sessions and cache files are stored.</p>

<p>The <code>tests</code> directory is where you put your test files.</p>

<p>The <code>vendor</code> directory is where the dependencies of your app is stored. This is where composer installs the packages that you specified in your <code>composer.json</code> file.</p>

<p>The <code>artisan</code> file is the file that is used for command line tasks for your project. We have used it earlier when we served the project. The artisan file can also be used to create migrations, seeds and other tasks that you usually perform through the command line.</p>

<p>The <code>server.php</code> file is used for serving the files without the use of a web server like Apache.</p>

<h3>Routes</h3>

<p>Routes are stored in the <code>app/Http/routes.php</code> file. Here&rsquo;s how you would declare a route in Lumen:</p>

<p>```php
&lt;?php
$app->get(&lsquo;/&rsquo;, functionn(){</p>

<pre><code>return 'Hello World!';
</code></pre>

<p>});
?>
```</p>

<p>If you want to use a controller method to handle the response for a specific route then you can do something like this:</p>

<p><code>php
&lt;?php
$app-&gt;get('/', 'App\Http\Controllers\HomeController@index');
?&gt;
</code></p>

<p>Then you would need to create a <code>HomeController</code> controller and then declare an <code>index</code> method. This will then be used to return a response.</p>

<h3>Controllers</h3>

<p>Controllers are stored in the <code>app/Http/Controllers</code> directory. Needless to say, the convention is one file per controller. Otherwise it would be really confusing. Here&rsquo;s the basic structure of a controller:</p>

<p>```php
&lt;?php
&lt;?php namespace App\Http\Controllers;</p>

<p>use Illuminate\Http\Request;
use Laravel\Lumen\Routing\Controller as BaseController;</p>

<p>class HomeController extends BaseController{</p>

<p>}
?>
```</p>

<p>Note that we need to use <code>Illuminate\Http\Request</code> to be able to access the request parameters for each request. We also need to use <code>Laravel\Lumen\Routing\Controller</code>. This allows us to extend the functionality of the base controller class.</p>

<h3>Views</h3>

<p>Lumen still comes with blade templating, all you have to do is create your views under the <code>resources/views</code> directory and then use <code>.blade.php</code> as the file extension. Though unlike Laravel you return views this way:</p>

<p>```php
&lt;?php
public function index(){</p>

<pre><code>return view('index');    
</code></pre>

<p>}
?>
```</p>

<p>In the example above were returning the <code>index</code> view that is stored in the root of the <code>resources/views</code> directory. If we want to return some data, then we can pass it by supplying the array or object that we want to pass:</p>

<p>```php
&lt;?php
$array = array(</p>

<pre><code>'name' =&gt; 'Ash Ketchum',
'pokemon' =&gt; 'Pikachu'
</code></pre>

<p>);</p>

<p>return view(&lsquo;index&rsquo;, $array);<br/>
?>
```</p>

<p>It can then be rendered in the view like so:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;test&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>Hi my name is , my Pokemon is 
</code></pre>

<p></body>
</html>
```</p>

<h3>Database</h3>

<p>When working with a database you first need to edit the database configuration values in your <code>.env</code> file.</p>

<h4>Migrations</h4>

<p>Once that&rsquo;s done you can try if your app can connect to your database by creating a database migration. You can do that by executing the following command in the root directory of your project:</p>

<p><code>
php artisan migrate:install
</code></p>

<p>The command above creates the migration table in your database. The migration table is used by Lumen to keep track of which database migrations are currently applied to your database. If that worked without problem and you see that a <code>migrations</code> table has been created in your database then you&rsquo;re good to go.</p>

<p>Next you can create a new table by using the <code>make:migration</code> command. This takes up the action that you wish to do. In this case we want to create a new table so we use <code>--create</code> and then supply the name of the table as the value. The second argument will be the name that will be assigned to the migration class.</p>

<p><code>
php artisan make:migration --create=users create_users_table
</code></p>

<p>The command above will create a file which looks like the following in the <code>database/migrations</code> directory:</p>

<p>```php
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class CreateUsersTable extends Migration {</p>

<pre><code>/**
 * Run the migrations.
 *
 * @return void
 */
public function up()
{
    Schema::create('users', function(Blueprint $table)
    {
        $table-&gt;increments('id');
        $table-&gt;timestamps();
    });
}

/**
 * Reverse the migrations.
 *
 * @return void
 */
public function down()
{
    Schema::drop('users');
}
</code></pre>

<p>}
?>
```</p>

<p>The only thing that we need to edit here are the method calls inside the <code>up</code> method:</p>

<p>```php
&lt;?php
Schema::create(&lsquo;users&rsquo;, function(Blueprint $table)
{</p>

<pre><code>$table-&gt;increments('id');
$table-&gt;string('name');
$table-&gt;integer('age');
</code></pre>

<p>});
?>
```</p>

<p>That is where we specify the fields that we need to add to the <code>users</code> table.</p>

<p>Once you&rsquo;re happy with the file, save it and then run:</p>

<p><code>
php artisan migrate
</code></p>

<p>This will create the table in your database and add a new row to the migrations table.</p>

<h4>Seeds</h4>

<p>You can create a new database seeder file inside the <code>database/seeds</code> directory. Here&rsquo;s the usual structure of a seeder:</p>

<p>```php
&lt;?php</p>

<p>use Illuminate\Database\Seeder;</p>

<p>class UserTableSeeder extends Seeder<br/>
{</p>

<pre><code>public function run()
{

    //seeding code       

}
</code></pre>

<p>}
?>
```</p>

<p>Inside the <code>run</code> method is the actual seeding code. We can use your usual Laravel flavored database queries inside of it:</p>

<p>```php
&lt;?php
DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Ash Ketchum',
    'age' =&gt; 10
)
</code></pre>

<p>);</p>

<p> DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Brock',
    'age' =&gt; 15
)
</code></pre>

<p>);</p>

<p>DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Misty',
    'age' =&gt; 12
)
</code></pre>

<p>);
?>
```</p>

<p>Once that&rsquo;s done, save the file and open up the <code>DatabaseSeeder.php</code> file. This is where you specify which seeders you want to execute whenever you execute the <code>php artisan db:seed</code> command. In this case we want to add the <code>UserTableSeeder</code>:</p>

<p><code>
$this-&gt;call('UserTableSeeder');
</code></p>

<p>Before we execute the <code>php artisan db:seed</code> command we will first need to reload the autoloaded files by executing the <code>composer dump-autoload</code> command. We need to do this every time we add a new seeder so that Lumen will take care of loading the seeder.</p>

<h4>Getting Data</h4>

<p>From your routes file you can now try fetching the users that we&rsquo;ve added:</p>

<p>```php
&lt;?php
$app->get(&lsquo;/db-testing&rsquo;, function(){</p>

<pre><code>$users = DB::table('users')-&gt;get();
return $users;
</code></pre>

<p>});
?>
```</p>

<p>With Lumen you can use the <a href="http://laravel.com/docs/5.0/queries">query builder</a>, <a href="http://laravel.com/docs/database#running-queries">basic queries</a> and even <a href="http://laravel.com/docs/eloquent">Eloquent</a>. So if you already know how to work with those then you&rsquo;re good to go.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial I&rsquo;ve walked you through Lumen and how you can install, configure and work with the different functionalities that it can offer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Implement Infinite Scroll in Laravel]]></title>
    <link href="http://wern-ancheta.com/blog/2015/03/01/how-to-implement-scroll-in-laravel/"/>
    <updated>2015-03-01T14:39:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/03/01/how-to-implement-scroll-in-laravel</id>
    <content type="html"><![CDATA[<p>In this quick tip I&rsquo;ll be showing you how to easily implement infinite scroll in laravel. In the back-end, we will be using laravel&rsquo;s pagination functionality. And in the front-end, we&rsquo;ll be using <a href="https://github.com/infinite-scroll/infinite-scroll">jQuery infinite scroll</a>. You can ahead and download the jquery.infinitescroll.min.js file from that page and save it on your project directory.</p>

<p>First thing that you need to do is return the data that you want to infinitely scroll from the controller:</p>

<p>```php
&lt;?php
public function getNewsPage(){</p>

<pre><code>$date = date('Y-m-d');
$news = News::where('date', '=', $date)-&gt;paginate(10);
$page_data = array(
    'news' =&gt; $news
);
return View::make('news', $page_data);
</code></pre>

<p>}
?>
```</p>

<p>And then from your view file (<code>news.blade.php</code>) just loop through the items that you wish to output:</p>

<p>```html</p>

<div id="news">
    <ul id="items">             
    @foreach($news as $item)
        <li class="item">
            <a href="" target="_blank"></a>
        </li>
    @endforeach
    
    </ul>
</div>


<p>```</p>

<p>Be sure to include jquery and jquery.infinitescroll.min.js file before the closing body tag:</p>

<p>```html</p>

<script src=""></script>


<script src=""></script>


<p></body>
```</p>

<p>Next, create the javascript file that will call the infinitescroll plugin and add the following code:</p>

<p>```javascript
(function(){</p>

<pre><code>var loading_options = {
    finishedMsg: "&lt;div class='end-msg'&gt;Congratulations! You've reached the end of the internet&lt;/div&gt;",
    msgText: "&lt;div class='center'&gt;Loading news items...&lt;/div&gt;",
    img: "/assets/img/ajax-loader.gif"
};

$('#items').infinitescroll({
  loading : loading_options,
  navSelector : "#news .pagination",
  nextSelector : "#news .pagination li.active + li a",
  itemSelector : "#items li.item"
});
</code></pre>

<p>})();
```</p>

<p>Breaking it down. First we wrap everything in a self-executing anonymous function to make sure that the script that were writing won&rsquo;t have a way of messing up with the other scripts in our page, if any. Next, we setup options required by infinite scroll by means of a JavaScript object. Here&rsquo;s a brief description of each:</p>

<ul>
<li><code>finishedMsg</code> &ndash; the html or text that you want to show once the user has reached the last page.</li>
<li><code>msgText</code> &ndash; the text that you want to show while the next page is being loaded from the back-end.</li>
<li><code>img</code> &ndash; the image that you want to show while the next page is being loaded from the back-end. Usually this is a gif animation that indicates that something is happening.</li>
</ul>


<p>Next we call the infinitescroll plugin on the main news wrapper. This takes up an object as its argument. The object contains the following items:</p>

<ul>
<li><code>loading</code> &ndash; the loading options that we have setup earlier.</li>
<li><code>navSelector</code> &ndash; the jquery selector that targets the pagination wrapper. Laravel gives it a class of <code>pagination</code> by default.</li>
<li><code>nextSelector</code> &ndash; the element indicating the next page. Laravel adds the <code>active</code> class on the <code>li</code> representing the current page. So all we need to do is to traverse to the next one by using the <code>+</code> selector and then the anchor element.</li>
<li><code>itemSelector</code> &ndash; an individual item.</li>
</ul>


<h3>Conclusion</h3>

<p>That&rsquo;s it for this quick tip. With the jquery infinite scroll plugin and laravel&rsquo;s pagination functionality, you can implement infinite scroll in your apps with ease.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Datatables with Laravel]]></title>
    <link href="http://wern-ancheta.com/blog/2014/08/10/using-datatables-with-laravel/"/>
    <updated>2014-08-10T16:48:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2014/08/10/using-datatables-with-laravel</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be walking you through how you can use datatables in Laravel. But first, let me give you a quick intro on what Datatabes is. <a href="http://datatables.net/">Datatables</a> is basically a jQuery plugin that allows you to add advanced interaction controls to your HTML tables. Things like search, pagination, sorting, and ordering. Datatables allows you to add those kinds of functionality into your tables with minimal code.</p>

<p>In this tutorial were going to be using a Laravel package called <a href="https://github.com/Chumper/Datatable">Chumper</a>. Chumper allows us to easily create Datatables which uses the data returned from a model as its data source.</p>

<p>First thing that you need to do is to add the following in your <code>composer.json</code> file:</p>

<p>```
&ldquo;require&rdquo;: {</p>

<pre><code>"chumper/datatable": "2.*",
</code></pre>

<p>}
```</p>

<p>If you got other packages that you need for your project, just add it on the last part of the <code>require</code> item. Once you&rsquo;re done with that, execute <code>composer update</code> from your terminal to install Chumper.</p>

<p>Once composer finishes installing Chumper, add the service provider for Chumper into the <code>providers</code> array in your <code>app.php</code> file inside the <code>app/config</code> directory of your Laravel installation:</p>

<p><code>
'Chumper\Datatable\DatatableServiceProvider',
</code></p>

<p>Still inside the <code>app.php</code> file, also add the following under the aliases array:</p>

<p><code>
'Datatable' =&gt; 'Chumper\Datatable\Facades\DatatableFacade',
</code></p>

<p>Once that&rsquo;s done, you can now create the main configuration file by executing the following from the terminal:</p>

<p><code>
php artisan config:publish chumper/datatable
</code></p>

<p>The main configuration file is stored under <code>app/config/packages/chumper/datatable/config.php</code> so go ahead and edit that if you want to change the default settings provided by Chumper. Things like the class or ID given to the tables generated can be configured from that file. This is particularly useful if you want to use classes or IDs to style the datatables in a specific way. Other than that the default settings can be used for most cases.</p>

<p>Now that we have configured Chumper, we can now add a route that will return the page where the datatable is displayed in your <code>routes.php</code> file. In the example below, we have the a controller called <code>AdminController</code> and were using the data returned by the <code>users</code> method as a response whenever the <code>users</code> route is accessed via the <code>GET</code> method:</p>

<p><code>php
&lt;?php
Route::get('users', 'AdminController@users');
?&gt;
</code></p>

<p>Next we also need to add the route that will return the data into the client side. By default, Chumper uses the server for processing queries made through the datatable. This means that it only gets the actual data that is needed instead of getting all of the records in the database table that you specify. In the code below, were giving a name of <code>api.users</code> to the <code>api/users</code> route so that we can refer to it later in the controller. The <code>uses</code> keyword allows you to specify a controller action to the route. Its basically the same thing as what we did above but that&rsquo;s the way to do it if you&rsquo;re using named routes.</p>

<p><code>
&lt;?php
Route::get('api/users', array('as' =&gt; 'api.users', 'uses' =&gt; 'AdminController@getUsersDataTable'));
?&gt;
</code></p>

<p>Under your controller, here&rsquo;s the method that returns the page where the datatable is displayed:</p>

<p>```
&lt;?php
public function users(){</p>

<pre><code>$table = Datatable::table()
    -&gt;addColumn('Name', 'Last Login', 'View')
    -&gt;setUrl(route('api.users'))
    -&gt;noScript();

$this-&gt;layout-&gt;content = View::make('admin.users', array('table' =&gt; $table));
</code></pre>

<p>}
?>
```</p>

<p>The code above assumes that you&rsquo;re using <a href="http://laravel.com/docs/templates">Laravel layouts</a>. If you don&rsquo;t know how to use layouts in Laravel, be sure to check out the docs. Breaking the code down, the following code allows you create the datatable. You can add columns to it by using the <code>addColumn</code> method. This method takes up the names that you want to give to the header for each field in the table. The <code>setUrl</code> method allows you to set the route that the datatable will use for processing queries made through it. Earlier we created a route and named it <code>api.users</code> so in the <code>setUrl</code> method all we have to do is to use the <code>route</code> method and then supply the name of the route which is responsible for returning the data for processing the queries. Lastly, we call the <code>noScript()</code> method to specify that we don&rsquo;t want to add the JavaScript code in the response that will be returned.</p>

<p>```
&lt;?php
$table = Datatable::table()</p>

<pre><code>-&gt;addColumn('Name', 'Last Login', 'View')
-&gt;setUrl(route('api.users'))
-&gt;noScript();
</code></pre>

<p>?>
```</p>

<p>Next is the method which processes the queries made through the datatable:</p>

<p>```
&lt;?php
public function getUsersDataTable(){</p>

<pre><code>$query = User::select('name', 'active', 'last_login', 'id')-&gt;get();

return Datatable::collection($query)
    -&gt;addColumn('last_login', function($model){
        return date('M j, Y h:i A', strtotime($model-&gt;last_login));
    })
    -&gt;addColumn('id', function($model){
        return '&lt;a href="http://wern-ancheta.com/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
    })
    -&gt;searchColumns('name', 'last_login')
    -&gt;orderColumns('name', 'last_login')
    -&gt;make();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, the code below allows you to specify the fields that you want to use for the response. These are the actual field names in your database table:</p>

<p><code>
&lt;?php
$query = User::select('name', 'last_login', 'id')-&gt;get();
?&gt;
</code></p>

<p>Next, we return the actual data using the <code>collection</code> method in the <code>Datatable</code> class. Well, not actually the <code>Datatable</code> class, since its just the Facade that we used earlier in the <code>app.php</code> file. The <code>collection</code> method requires the result set returned by our query to the users table earlier so we just set that as the argument. After that, we can call the <code>addColumn</code> method to update the presentation of the data returned for that specific field. In the case of the <code>last_login</code> field, its stored in the database as a time stamp which looks like this: <code>2014-07-29 11:37:39</code>. We don&rsquo;t really want to present that to the user like that so we format it using the <code>date</code> method. The first argument is the format that you want. In this case we want something like this: <code>Jul 29, 2014 11:37 AM</code>. Looking at the <a href="http://php.net/manual/en/function.date.php">official docs</a>, we know that we can do that by specifying the following: <code>M j, Y h:i A</code>. The second argument is a unix timestamp. We can convert the raw data that came from the database into a unix timestamp by using the <code>strtotime</code> method, so we do just that. Next is the <code>id</code> field. We don&rsquo;t actually want to display the users id to the user, what we want is to display a link that would lead the user to the page where more details for the user can be viewed. Thus we return an HTML anchor tag which uses the id as one of the component for the actual link.</p>

<p>```
&lt;?php
return Datatable::collection($query)</p>

<pre><code>-&gt;addColumn('last_login', function($model){
    return date('M j, Y h:i A', strtotime($model-&gt;last_login));
})
-&gt;addColumn('id', function($model){
    return '&lt;a href="http://wern-ancheta.com/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
})
</code></pre>

<p>?>
```</p>

<p>Lastly, we can now display the datatable in our view. If you&rsquo;re using <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, it should look similar to this one:</p>

<p>
``` html
@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="col-md-12">
  <h3>Users</h3>
  {{ $table->render() }}
  {{ $table->script() }}
  </div>
</div>


<p>@stop
```
</p>

<p>And don&rsquo;t forget to include the datatables stylesheet and JavaScript file on your views. You can download datatables from <a href="http://datatables.net/">datatables.net</a> or you can just use cdnjs:</p>

<p>```html
<link rel="stylesheet" type="text/css" href="http://wern-ancheta.com//cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/css/jquery.dataTables.min.css"></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/js/jquery.dataTables.min.js"></script>


<p>```</p>

<p>And yes, datatables depends on jQuery so you also need to include that before including datatables.</p>

<p>Yup! as simple as that! All we have to do is to call the <code>render()</code> method to render the actual datatabase. And then we also call the <code>script()</code> method to render the JavaScript file that would do the talking to the server every time the user interacts with the table.</p>
]]></content>
  </entry>
  
</feed>
