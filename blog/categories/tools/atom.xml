<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2014-02-20T11:09:24+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A whirlwind Tour of Web Developer Tools: Text Editors]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors/"/>
    <updated>2014-02-15T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors</id>
    <content type="html"><![CDATA[<p>This is part two of the series A Whirlwind Tour of Web Developer Tools. This time I&rsquo;ll be talking about text editors and related tools.</p>

<p>Text editors are used by web developers to write code. Text editors are not the same thing as word processors because anything written on a text editor is saved as a plain text file and it normally uses a simple character set such as ASCII to represent different characters (letters, numbers, etc). On the other hand word processors saves formatted text which enables tables, symbols and other form of graphical information to be represented without having to use any form of markup like HTML.</p>

<!--more-->


<h3>Sublime Text</h3>

<p>When you say text editor the first thing that comes to mind these days is <a href="http://www.sublimetext.com/">Sublime Text</a>. It&rsquo;s like the sexiest text editor these days. So this whole blog post is primarily going to be about Sublime Text and some of the plugins that I found useful.</p>

<h3>Plugins</h3>

<p>In order to install plugins for Sublime Text you first have to install <a href="https://sublime.wbond.net/">package control</a> which is a package manager for Sublime Text that allows you to easily install plugins. To install package manager copy the following code in the Sublime Text console which can be accessed by pressing <code>ctrl + back tick</code> on your keyboard. After that restart the editor to finish the installation:</p>

<p><code>
import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
</code></p>

<p>Note that the code above is for Sublime Text 2, if you&rsquo;re using Sublime Text 3 then use the following code:</p>

<p><code>
import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<p>After restarting sublime text you can now press <code>ctrl + shift + p</code>, select &lsquo;install package&rsquo; and press <code>enter</code>, this will load all the available plugins from the plugin repository. From there you can just search for the plugin that you want to install.</p>

<p>And now for the plugins:</p>

<ul>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCS</a> &ndash; a PHP code quality tool.</li>
<li><a href="http://emmet.io/">Emmet</a> &ndash; previously known as Zen Coding. If that doesn&rsquo;t ring a bell then Emmet is basically a tool for improving productivity by implementing shortcuts for generating code that you would normally write out by hand. All you have to do is to write something like this:</li>
</ul>


<p><code>
html:5
</code></p>

<p>And right after pressing <code>tab</code> you get a whole bunch of code written out for you:</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body></p>

<p></body>
</html>
```</p>

<ul>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">Sidebar Enhancements</a> &ndash; allows you to create a new file and it will immediately ask you the filename, duplicating or copying files and folders from the sidebar, and a bunch of other good stuff that the default sublime text sidebar doesn&rsquo;t allow you to do.</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a> &ndash; allows for easier visualization of where the ending bracket is.</li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a> &ndash; keeps a history of clipboard items so you can just paste them in later.</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">Docblockr</a> &ndash; pretty much like emmet but only for document blocks. Useful for writing comments.</li>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a> &ndash; allows for easy alignment of code. All you have to do is press <code>ctrl + alt + a</code> on your keyboard.</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-for-ST2">Sublime Linter</a> &ndash; inline linting for a bunch of languages (PHP, HTML, CSS, Ruby, etc). If you don&rsquo;t know what linting is, its basically a process of analyzing code to determine potential errors. In most cases its used by web developers to check their code quality against a specific coding standard. For example, when coding in JavaScript its not usually required to put semi-colons but if you&rsquo;re using Sublime linter it will remind you to put those semi-colons in if you forget it. If you have unused variables in your code the linter will also complain and it will tell you that variable <code>z</code> isn&rsquo;t actually used in your code.</li>
</ul>


<h3>IDE</h3>

<p>There&rsquo;s also this thing called the IDE or Integrated Development Environment which is basically text editors on steroids. They have huge install size since they allow you to do more than just writing code. IDE&rsquo;s packs a bunch of features which you would not normally find in a text editor such as compiling code. Some IDE&rsquo;s such as Visual Studio also allows you to build the GUI of applications by simply dragging and dropping GUI elements (text boxes, buttons, etc.) from a toolbox. Other features include code completion (intellisense), debugger, integrated services (allows viewing and manipulating the database right from the IDE).</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.hongkiat.com/blog/sublime-text-tips/">Sublime Text Tips and Tricks</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">Popular Sublime Text Plugins</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">Compariosn of Text Editors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Comparison of Integrated Development Environments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: In-Browser Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/"/>
    <updated>2014-02-09T12:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools</id>
    <content type="html"><![CDATA[<p>In this series of blog posts I&rsquo;m going to give you an overview of some of the tools that are commonly used by web developers to get their work done. You can expect some examples on how to install and use each tool but I won&rsquo;t be going too deep. The main purpose is to simply give you an idea on what tools are available, how to use them and encourage you to integrate them into your workflow. Note that the tools that will be mentioned in this blog post aren&rsquo;t platform specific so you can use them whether you&rsquo;re developing in Windows, Linux or Mac. Over the coming weeks I&rsquo;m going to walk you through the following:</p>

<ul>
<li>In-Browser Tools</li>
<li>Text Editor</li>
<li>Virtualization</li>
<li>Web Servers</li>
<li>Command Line Utilities</li>
<li>Boilerplates</li>
<li>Front-end Frameworks</li>
<li>Compilers</li>
<li>Templating</li>
<li>Linting</li>
<li>Testing</li>
<li>Source Control</li>
<li>Deployment</li>
</ul>


<!-- more -->


<h3>In-Browser Tools</h3>

<p>First on the list is the browser tools. Browser tools are a set of tools that live on the browser which can help you in inspecting and debugging web applications.</p>

<h4>Chrome Developer Tools</h4>

<p>One of the most popular browser tool today is the Chrome Developer Tools. You can access it by pressing <code>Ctrl + Shift + I</code> or <code>Cmd + Opt + I</code> on your keyboard. By default this opens up the last panel that you have accessed.</p>

<ul>
<li><strong>Elements</strong> &ndash; allows DOM inspection and modification, changes are reflected on the page as you update.</li>
<li><strong>Network</strong> &ndash; this is where you can view all of the HTTP requests made by your web project. The size and time it took to download each requested file are also viewable so the network panel is mostly used for evaluating the performance of your web project in terms of the HTTP requests that are made.</li>
<li><strong>Sources</strong> &ndash; used for viewing and updating the source files used by your web project. If you selected a JavaScript file it will also allow you to debug it.</li>
<li><strong>Timeline</strong> &ndash; used for evaluating the performance of your web project in terms of frames and memory consumed</li>
<li><strong>Profiles</strong> &ndash; used for profiling JavaScript performance</li>
<li><strong>Resources</strong> &ndash; kind of similar with the sources panel, but it doesn&rsquo;t allow you to edit the source files. It also allows you to view and modify cookie and local storage information.</li>
<li><strong>Audits</strong> &ndash; evaluates the web page performance in terms of network utilization and css and JavaScript performance.</li>
<li><strong>Console</strong> &ndash; allows you to run JavaScript code and inspect JavaScript objects.</li>
</ul>


<h4>Useful Extensions and Plugins</h4>

<ul>
<li><strong>Web Developer</strong> &ndash; packs various extensions and tools to help in testing web pages <a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">[firefox]</a></li>
<li><strong>Tincr</strong> &ndash; allows live reloading of web pages as you make changes to the source file. The saving of changes is also bi-directional which means that if you edit the file in the sources panel of the Chrome Developer Tools the changes will also get saved to the source file. Pretty sweet! <a href="https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih?hl=en">[chrome]</a></li>
<li><strong>Pagespeed Insights</strong> &ndash; used for evaluating the performance of web pages based on industry best practices. It will give you some suggestions on how you can improve the performance of your website based on its evaluation. <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">[chrome]</a></li>
<li><strong>YSlow</strong> &ndash; the same as Pagespeed Insights. <a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">[firefox]</a></li>
</ul>


<h4>Firefox Developer Tools</h4>

<p>Pretty much the same with the Chrome Developer Tools. It also allows you to inspect and modify a web page, debug JavaScript code, monitor and inspect HTTP requests as they happen. During my testing I found out that most of the features are the same, the only tool that is not present by default in the Chrome Developer Tools is the 3d view for web pages.</p>

<p><img src="/images/posts/whirlwind_tour_web_developer_tools/3dview.png" alt="3d view" /></p>

<h4>Firebug</h4>

<p>The in-browser tool that started it all. It was already around before Chrome Dev Tools and Firefox Dev Tools came out. Most of the features are also the same with that of Chrome Dev Tools and Firefox Dev Tools.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks">Chrome Developer Tools Tools Tips and Tricks</a></li>
<li><a href="https://getfirebug.com/faq/">Firebug</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Tools">Firefox Developer Tools</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging into Chrome Dev Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools/"/>
    <updated>2013-04-21T17:15:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through some of the things that we can do with the Chrome Developer Tools to improve our web development workflow.</p>

<!--More-->


<h3>Accessing Chrome Dev Tools</h3>

<p>You can access the Chrome Developer Tools by clicking on the Chrome Settings button &ndash;> Tools &ndash;> Developer Tools.</p>

<h4>Elements Panel</h4>

<p>First there&rsquo;s the elements panel which we can use to inspect and edit the html that is used in a web page.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/elements_panel.jpg" alt="elements panel" /></p>

<p>This is very useful for when you want to edit the HTML of the web page that you&rsquo;re working on, adding some classes or attributes on the fly.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/element_options.jpg" alt="elements options" /></p>

<p>As you can see from the screenshot above there&rsquo;s a bunch of things that you can do with the currently selected element like copying its HTML, Edit the HTML, or deleting the node which you can do by just pressing delete on your keyboard. If you mess up you can always press on ctrl + z to undo the changes that you&rsquo;ve made.</p>

<p>You can also edit entire HTML blocks or navigate directly to the parent element of the currently selected element.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/edit_html_block.jpg" alt="edit html blocks" /></p>

<p>You can also drag elements around by holding the left mouse button and then dragging the element to where you want it to be and then finally releasing it.</p>

<p>Another thing that you can do within the elements panel is live editing of the CSS used in a particular element.</p>

<p>You can add new styles by pressing tab while the cursor is inside the value of the last property for a specific selector. As you can see from the screenshot below it also gives you a nice auto-completion for every property and values that are currently supported by the browser.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/add_styling.jpg" alt="add styling" /></p>

<p>You can also disable a specific style by unchecking the checkbox before the property:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/disable_styling.jpg" alt="remove styling" /></p>

<p>To delete a property entirely you can press delete while the cursor is either inside of the property or the value.</p>

<p>There&rsquo;s also a sweet color picker which you can use to experiment on the color that you want to use.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/color_picker.jpg" alt="color picker" /></p>

<p>You can also directly edit the css file by clicking on the name of the css file that you want to edit.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/css_file.jpg" alt="css file" /></p>

<p>After that you can just edit the file like you usually do in a text-editor and the web page will be automatically updated as you type in the value for each property. The only difference is that you don&rsquo;t get the auto-completion while in this mode.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/css_editing.jpg" alt="css editing" /></p>

<p>But the only problem with this is that all your changes only lives on the browser once you refresh the page all your changes will be gone. And the only plugin-less solution would be to click on the filename of the css file that you&rsquo;ve edited then copy all of its contents and then paste it back on your source file. Or you can actually right click on the file and then click on save.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/save_css.jpg" alt="save css file" /></p>

<h3>Resources Panel</h3>

<p>Next is the resources panel where we can see some of the resources that the web page has loaded on initial page load.
That includes the current page (html), images, script files (mainly JavaScript), stylesheets, and other types of media.
Each of these files are group according to their file type so all stylesheets are under the same group, all the JavaScript are in the same group, etc. Also note that the ordering depends on what has been loaded first. So the first files that were loaded during page load are first on the list.</p>

<p>From the resources panel you can also see what&rsquo;s stored in Web SQL, Indexed DB, local storage, session storage, cookies, and application cache which is mainly specified in the manifest file whenever you want your application to be accessed offline.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/resources_panel.jpg" alt="resources panel" /></p>

<p>The resources panel also gives you a nice preview of the file that you&rsquo;re currently viewing.
For images you get something like this:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/image_preview.jpg" alt="image preview" /></p>

<p>And for HTML, CSS, and JavaScript files you get to view the source:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/html_source.jpg" alt="html source" /></p>

<h3>Network Panel</h3>

<p>Next is the network panel where you can see the list of files which are loaded by the web page.
Either on initial page load or while the users are interacting with the web page.
So you can actually see the AJAX requests, template files and other network requests in the network panel.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/network_panel.jpg" alt="network panel" /></p>

<p>Here are some of the information that you can see on the Network Panel:</p>

<p><strong>Name</strong> &ndash; the name of the file that was requested.</p>

<p><strong>Method</strong> &ndash; the method that was used to get the specific file (GET, POST).</p>

<p><strong>Type</strong> &ndash; the <a href="http://en.wikipedia.org/wiki/MIME">type of file</a> that was requested.</p>

<p><strong>Status</strong> &ndash; the status of the request <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">status</a>. The common status are 200 OK which means the request was successful and the file was directly downloaded from the server. There&rsquo;s also 304 not modified.</p>

<p><strong>Initiator</strong> &ndash; the page that requested the file or resource. This is usually the current page.</p>

<p><strong>Size</strong> &ndash; the size of the requested file in kilobytes.</p>

<p><strong>Time</strong> &ndash;  the time between making the request and the server&rsquo;s first response in milliseconds.</p>

<p><strong>Timeline</strong> &ndash; shows the waiting and receiving time for each file. The waiting time is the amount of time in which the browsers waits for the file upon requesting it. The receiving time is the amount of time in which the file is downloaded.</p>

<p>Clicking on each file allows you to view the request headers, preview, response, cookies and the timing.</p>

<p><strong>headers</strong> &ndash; this shows you the details of the request like the Request URL which is the URL to the file that is requested.
The request method which is usually GET or POST. The status code which you also saw from the network request summary earlier.</p>

<p>There&rsquo;s also the Request Headers and Response Headers. The Request Headers are the information that is present in the browser. And the Response Headers is the information returned from the server.</p>

<p>Some of the information that are present in the Request Headers are the  Referer which is basically the url of the file that initially requested the file or resource, the User-Agent is the browser used by the user to access the web page.</p>

<p>While the Response Headers contains information like the name of the Server (Apache, ECS, Nginx and a bunch of others), the current system date of the server, the <a href="http://en.wikipedia.org/wiki/HTTP_ETag">entity tag</a>.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/network_request.jpg" alt="network request" /></p>

<p><strong>preview</strong> &ndash; this is usually the source of the file. If its an image file you usually get a preview of the image.</p>

<p><strong>response</strong> &ndash; the same as preview but this time you only get the raw data.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/response.jpg" alt="response" /></p>

<p><strong>cookies</strong> &ndash; this is usually the cookies stored by the website that the user is currently looking at.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/cookies.jpg" alt="cookies" /></p>

<p><strong>timing</strong> &ndash; the same as the information displayed in the waterfall timeline that you see on the network request summary only this time its only for the file that you have clicked on.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/timing.jpg" alt="timing" /></p>

<h3>Sources Panel</h3>

<p>The sources panel allows you to view and edit the source files used in the current web page.
We kind of touch on this earlier when we click on a filename on the elements panel we get redirected to the sources panel and then it allows us to edit the file that we selected and the changes would be automatically reflected on the page. But that&rsquo;s just on the css side of things. You can actually debug JavaScript code as well in the sources panel. The official Chrome Dev Tools documentation already had us covered in the <a href="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints">Breakpoints</a> section so I won&rsquo;t delve much in how that&rsquo;s done.</p>

<h3>Timeline Panel</h3>

<p>The timeline panel allows you to view information regarding the performance of your web app. Things like paint times, frames per second, and memory consumption. It gives you a complete overview of how your web app performs.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/timeline_panel.jpg" alt="timeline panel" /></p>

<p>You can start using the timeline panel by clicking on the <code>record</code> button found at the lower left portion of chrome dev tools.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/record_button.jpg" alt="record button" /></p>

<p>Then interact with your app a bit. Usually you would interact on the parts of your app in which you want to measure the performance. Once you&rsquo;re done click on the <code>stop</code> button.</p>

<p>On first look this might really look complicated. I also had no idea where the hell should I start looking the first time I used the timeline panel.</p>

<p>First let&rsquo;s talk about the colors that you see in the timeline panel:</p>

<p><strong>Blue</strong> &ndash; sending of requests and network related stuff.
<strong>Yellow</strong> &ndash; execution of JavaScript code.
<strong>Purple</strong> &ndash; css calculation and rendering.
<strong>Green</strong> &ndash; repaints (updating the page).</p>

<p>The length of these colors depends on the amount of time (in milliseconds) that the browser executed the operation.
That&rsquo;s about all I can share about the timeline panel. I&rsquo;m not really in the level yet of measuring the performance of the applications that I&rsquo;m trying to build especially in the frontend because I do more backend than I do frontend.</p>

<h3>Console</h3>

<p>The console panel allows you to play around with JavaScript code that you want to include in your application.
It also serves as a shortcut in selecting elements in the DOM.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/console_select.jpg" alt="selecting in the console" /></p>

<p>There are also some shortcuts which you can use to select elements.</p>

<p>To select the element that is currently selected in the elements panel you can use <code>$0</code>:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/dollar_zero.jpg" alt="$0" /></p>

<p>Of course you can also use <code>$1</code>, <code>$2</code> and other numbers for as far as your memory can reach to select the elements that were previously selected. So if you select the body then the main wrapper then the first child of that wrapper. <code>$0</code> returns the first child of the wrapper, <code>$1</code> returns the wrapper, and <code>$0</code> returns the body.</p>

<p>Other things that the console allows you to do:</p>

<ul>
<li><p>view errors &ndash; the console automatically allows you to view errors in your JavaScript code like parse errors when trying to call <code>JSON.parse</code> on an invalid JSON string.</p></li>
<li><p>assertion &ndash; checking if a specific condition is true. You can use the <code>assert</code> method to do assertions.
For example when checking if the following values are true:</p></li>
</ul>


<p><img src="/images/posts/digging_into_chrome_dev_tools/console_assert_numbers.jpg" alt="asserting values" /></p>

<p>As you can see from the screenshot above the first two conditions returned <code>undefined</code> which means the assertion has pass. While on the 3rd condition the assertion failed since were using the strict equality operator which also checks the data type of the variable and not just its value.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/typeof.jpg" alt="typeof" /></p>

<p>You can also assert return values from functions as well:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/assert_functions.jpg" alt="asserting functions" /></p>

<p>As you can see from the screenshot above the first assertion failed since 3 is not equal to 4. But the second assertion passes since 3 is less than 4. This is a pretty simple example but you can also have more complex functions checked by <code>console.assert</code> as long as they have return values which it can check.</p>

<h3>Resources</h3>

<p><a href="https://developers.google.com/chrome-developer-tools/">Chrome Dev Tools Documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Emmet]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/11/24/playing-with-emmet/"/>
    <updated>2012-11-24T10:57:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/11/24/playing-with-emmet</id>
    <content type="html"><![CDATA[<p>The next generation ZenCoding has been released recently so I tried to play with it as soon as I had the time.
Just to give a bit of a background ZenCoding is a plugin for most text-editors that is used for faster generation
of html and css code. Emmet is like the next level of it, smarter and more powerful.</p>

<p>You can install Emmet through the <a href="http://wbond.net/sublime_packages/package_control">Sublime Text 2 package manager</a>
which isn&rsquo;t included in Sublime text by default at the time of writing of this blog post.</p>

<p>I&rsquo;m on Windows so I had to press <code>ctrl+shift+p</code> on the keyboard to bring out the command pallete then search for <code>install</code> then press <code>enter</code>
which loads the sublime text plugins. Once that&rsquo;s done go ahead and hit <code>ctrl+shift+p</code> again then press <code>enter</code>
which then brings out the packages that are currently on package control. Search for <code>emmet</code> remember to uninstall <code>Zen Coding</code> before trying to use
Emmet because it will most likely have some conflicts with emmet.
To uninstall ZenCoding just go to the <code>Data\Packages</code> directory in sublime and look for the zencoding folder then delete it.</p>

<p>Once that&rsquo;s done were ready to play with Emmet.</p>

<p>If you&rsquo;re familiar with ZenCoding and CSS selectors there&rsquo;s pretty much Zero learning curve when using Emmet
because the syntax is almost the same.</p>

<h4>Syntax</h4>

<p>```javascript
.dog //can expand to any element with the class of dog</p>

<h1>cat //can expand to any element with the id of cat depending on context</h1>

<p>p.imaparagraph //expands to: <p class="imaparagraph"></p></p>

<p>p{text inside paragraph} //expands to: <p>text inside paragraph</p>
```</p>

<h4>Tag Names</h4>

<p>I&rsquo;ve noticed that Emmet is smarter than ZenCoding (or maybe I just haven&rsquo;t noticed this while using ZenCoding)
When expanding an abbreviation which doesn&rsquo;t specify the element to be used Emmet does some magic in
determining which element should be used by checking out the elements inside the block where its written.
For example if the sibling that came before it is a div then its also going to expand as a div:</p>

<p>```html
 <body></p>

<pre><code>&lt;div class="row"&gt;
&lt;/div&gt;
#imadiv //expands to: &lt;div id="imadiv"&gt;&lt;/div&gt;
</code></pre>

<p> </body>
```</p>

<p>But when the abbreviation is inside a <code>&lt;ul&gt;</code> element it simply uses the <code>&lt;li&gt;</code> tag:</p>

<p>```
  <ul></p>

<pre><code>&lt;li&gt;&lt;/li&gt;
.what_am_i //expands to: &lt;li class="what_am_i"&gt;&lt;/li&gt;
</code></pre>

<p>  </ul>
```</p>

<p>The default element in which it expands to if it can&rsquo;t determine which element should be used is either <code>&lt;span&gt;</code> or <code>&lt;div&gt;</code></p>

<h4>Abbreviations</h4>

<p>Checkout the <code>snippets.json</code> file for the abbreviations and their corresponding values:</p>

<p>```
&ldquo;abbreviations&rdquo;: {</p>

<pre><code>"!": "html:5",
"a": "&lt;a href=\"\"&gt;",
"a:link": "&lt;a href=\"http://|\"&gt;",
"a:mail": "&lt;a href=\"mailto:|\"&gt;",
"abbr": "&lt;abbr title=\"\"&gt;",
"acronym": "&lt;acronym title=\"\"&gt;",
"base": "&lt;base href=\"\" /&gt;",
"bdo": "&lt;bdo dir=\"\"&gt;",
"bdo:r": "&lt;bdo dir=\"rtl\"&gt;",
"bdo:l": "&lt;bdo dir=\"ltr\"&gt;",
"link": "&lt;link rel=\"stylesheet\" href=\"\" /&gt;",
"link:css": "&lt;link rel=\"stylesheet\" href=\"${1:style}.css\" media=\"all\" /&gt;",
"link:print": "&lt;link rel=\"stylesheet\" href=\"${1:print}.css\" media=\"print\" /&gt;",
"link:favicon": "&lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"${1:favicon.ico}\" /&gt;",
"link:touch": "&lt;link rel=\"apple-touch-icon\" href=\"${1:favicon.png}\" /&gt;",
"link:rss": "&lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"${1:rss.xml}\" /&gt;",
"link:atom": "&lt;link rel=\"alternate\" type=\"application/atom+xml\" title=\"Atom\" href=\"${1:atom.xml}\" /&gt;",
"meta:utf": "&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" /&gt;",
"meta:win": "&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=windows-1251\" /&gt;",
"meta:compat": "&lt;meta http-equiv=\"X-UA-Compatible\" content=\"${1:IE=7}\" /&gt;",
"style": "&lt;style&gt;",
"script": "&lt;script&gt;",
"script:src": "&lt;script src=\"\"&gt;",
"img": "&lt;img src=\"\" alt=\"\" /&gt;",
"iframe": "&lt;iframe src=\"\" frameborder=\"0\"&gt;",
"embed": "&lt;embed src=\"\" type=\"\" /&gt;",
"object": "&lt;object data=\"\" type=\"\"&gt;",
"param": "&lt;param name=\"\" value=\"\" /&gt;",
"map": "&lt;map name=\"\"&gt;",
"area": "&lt;area shape=\"\" coords=\"\" href=\"\" alt=\"\" /&gt;",
"area:d": "&lt;area shape=\"default\" href=\"\" alt=\"\" /&gt;",
"area:c": "&lt;area shape=\"circle\" coords=\"\" href=\"\" alt=\"\" /&gt;",
"area:r": "&lt;area shape=\"rect\" coords=\"\" href=\"\" alt=\"\" /&gt;",
"area:p": "&lt;area shape=\"poly\" coords=\"\" href=\"\" alt=\"\" /&gt;",
"form": "&lt;form action=\"\"&gt;",
"form:get": "&lt;form action=\"\" method=\"get\"&gt;",
"form:post": "&lt;form action=\"\" method=\"post\"&gt;",
"label": "&lt;label for=\"\"&gt;",
"input": "&lt;input type=\"\" /&gt;",
"input:hidden": "&lt;input type=\"hidden\" name=\"\" /&gt;",
"input:h": "&lt;input type=\"hidden\" name=\"\" /&gt;",
"input:text": "&lt;input type=\"text\" name=\"\" id=\"\" /&gt;",
"input:t": "&lt;input type=\"text\" name=\"\" id=\"\" /&gt;",
"input:search": "&lt;input type=\"search\" name=\"\" id=\"\" /&gt;",
"input:email": "&lt;input type=\"email\" name=\"\" id=\"\" /&gt;",
"input:url": "&lt;input type=\"url\" name=\"\" id=\"\" /&gt;",
"input:password": "&lt;input type=\"password\" name=\"\" id=\"\" /&gt;",
"input:p": "&lt;input type=\"password\" name=\"\" id=\"\" /&gt;",
"input:datetime": "&lt;input type=\"datetime\" name=\"\" id=\"\" /&gt;",
"input:date": "&lt;input type=\"date\" name=\"\" id=\"\" /&gt;",
"input:datetime-local": "&lt;input type=\"datetime-local\" name=\"\" id=\"\" /&gt;",
"input:month": "&lt;input type=\"month\" name=\"\" id=\"\" /&gt;",
"input:week": "&lt;input type=\"week\" name=\"\" id=\"\" /&gt;",
"input:time": "&lt;input type=\"time\" name=\"\" id=\"\" /&gt;",
"input:number": "&lt;input type=\"number\" name=\"\" id=\"\" /&gt;",
"input:color": "&lt;input type=\"color\" name=\"\" id=\"\" /&gt;",
"input:checkbox": "&lt;input type=\"checkbox\" name=\"\" id=\"\" /&gt;",
"input:c": "&lt;input type=\"checkbox\" name=\"\" id=\"\" /&gt;",
"input:radio": "&lt;input type=\"radio\" name=\"\" id=\"\" /&gt;",
"input:r": "&lt;input type=\"radio\" name=\"\" id=\"\" /&gt;",
"input:range": "&lt;input type=\"range\" name=\"\" id=\"\" /&gt;",
"input:file": "&lt;input type=\"file\" name=\"\" id=\"\" /&gt;",
"input:f": "&lt;input type=\"file\" name=\"\" id=\"\" /&gt;",
"input:submit": "&lt;input type=\"submit\" value=\"\" /&gt;",
"input:s": "&lt;input type=\"submit\" value=\"\" /&gt;",
"input:image": "&lt;input type=\"image\" src=\"\" alt=\"\" /&gt;",
"input:i": "&lt;input type=\"image\" src=\"\" alt=\"\" /&gt;",
"input:reset": "&lt;input type=\"reset\" value=\"\" /&gt;",
"input:button": "&lt;input type=\"button\" value=\"\" /&gt;",
"input:b": "&lt;input type=\"button\" value=\"\" /&gt;",
"select": "&lt;select name=\"\" id=\"\"&gt;&lt;/select&gt;",
"option": "&lt;option value=\"\"&gt;&lt;/option&gt;",
"textarea": "&lt;textarea name=\"\" id=\"\" cols=\"${1:30}\" rows=\"${2:10}\"&gt;",
"menu:context": "&lt;menu type=\"context\"&gt;",
"menu:c": "&lt;menu type=\"context\"&gt;",
"menu:toolbar": "&lt;menu type=\"toolbar\"&gt;",
"menu:t": "&lt;menu type=\"toolbar\"&gt;",
"video": "&lt;video src=\"\"&gt;",
"audio": "&lt;audio src=\"\"&gt;",
"html:xml": "&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;",

"bq": "blockquote",
"acr": "acronym",
"fig": "figure",
"figc": "figcaption",
"ifr": "iframe",
"emb": "embed",
"obj": "object",
"src": "source",
"cap": "caption",
"colg": "colgroup",
"fst": "fieldset",
"btn": "button",
"optg": "optgroup",
"opt": "option",
"tarea": "textarea",
"leg": "legend",
"sect": "section",
"art": "article",
"hdr": "header",
"ftr": "footer",
"adr": "address",
"dlg": "dialog",
"str": "strong",
"prog": "progress",
"fset": "fieldset",
"datag": "datagrid",
"datal": "datalist",
"kg": "keygen",
"out": "output",
"det": "details",
"cmd": "command",

"ol+": "ol&gt;li",
"ul+": "ul&gt;li",
"dl+": "dl&gt;dt+dd",
"map+": "map&gt;area",
"table+": "table&gt;tr&gt;td",
"colgroup+": "colgroup&gt;col",
"colg+": "colgroup&gt;col",
"tr+": "tr&gt;td",
"select+": "select&gt;option",
"optgroup+": "optgroup&gt;option",
"optg+": "optgroup&gt;option"
</code></pre>

<p>}
```</p>

<p>As you can see its geared towards html5:</p>

<p>```
! //expands to a basic html template with the html5 doctype (sweet!)</p>

<p>&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body></p>

<p></body>
</html>
```</p>

<p>And they&rsquo;ve already removed the <code>type</code> attribute for <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags as well (double sweet!!)</p>

<p>Specifying input types using colon (triple sweet!!!):</p>

<p>```
input:text //expands to <input type="text" name="" id=""></p>

<p>```</p>

<p>And when you press tab it automatically goes inside the name and id for you to specify the values for those attributes (How cool is that?)</p>

<p>I remember having done this in ZenCoding like:
<code>
input[type=text]
</code></p>

<p>That saves my fingers from typing 6 more characters for every form input.</p>

<p>The good thing is that you can customize these abbreviations the way you want it.
You can definitely save your fingers from typing some characters by specifying shorter abbreviations.
But remember not to sacrifice readability and memorizability (does that word exists? sorry grammar natzis, please don&rsquo;t kill me).
But its probably ok to have abbreviations like  <code>i:t</code> or <code>i:r</code> or <code>i:c</code> if you can remember what they mean after an hour.</p>

<p>You can even add your own snippets (if you&rsquo;re not a fan of the default feature in sublime text for storing code snippets).
Here are some of the default snippets that are available in Emmet (mostly doctypes and code for dealing with ie6).</p>

<p>```
&ldquo;snippets&rdquo;: {</p>

<pre><code>        "c": "&lt;!-- |${child} --&gt;",
        "cc:ie6": "&lt;!--[if lte IE 6]&gt;\n\t${child}|\n&lt;![endif]--&gt;",
        "cc:ie": "&lt;!--[if IE]&gt;\n\t${child}|\n&lt;![endif]--&gt;",
        "cc:noie": "&lt;!--[if !IE]&gt;&lt;!--&gt;\n\t${child}|\n&lt;!--&lt;![endif]--&gt;",
        "html:4t": "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=${charset}\"&gt;\n\t&lt;title&gt;${1:Document}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;",
        "html:4s": "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=${charset}\"&gt;\n\t&lt;title&gt;${1:Document}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;",
        "html:xt": "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=${charset}\" /&gt;\n\t&lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;",
        "html:xs": "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=${charset}\" /&gt;\n\t&lt;title&gt;${1:Document}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;",
        "html:xxs": "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=${charset}\" /&gt;\n\t&lt;title&gt;${1:Document}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;",
        "html:5": "&lt;!doctype html&gt;\n&lt;html lang=\"${lang}\"&gt;\n&lt;head&gt;\n\t&lt;meta charset=\"${charset}\"&gt;\n\t&lt;title&gt;${1:Document}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t${child}${2}\n&lt;/body&gt;\n&lt;/html&gt;"
    }
</code></pre>

<p>```</p>

<p>If you&rsquo;re using Zurb&rsquo;s Foundation or Twitter Bootstrap and you plan to use it for your future projects.
Maybe you can store snippets to make your life easier (css frameworks are notorious at using a lot of html to have a foundation for styling):</p>

<p><code>
"d:6c" : "&lt;div class=\"six columns\"&gt;",
"d:10c3mc" : "&lt;div class=\"ten mobile-three columns\"&gt;"
</code></p>

<h4>Other Fun Stuff</h4>

<p>Of course there&rsquo;s a lot more stuff that you can do in Emmet (Lorem ipsum generators, vendor prefixes) but time is limited and those cool stuff are all
in the documentation. There&rsquo;s also a text-editor in the site which you can play with Emmet as much as you want.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.emmet.io/">Emmet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collaboration Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/08/15/collaboration-tools/"/>
    <updated>2012-08-15T16:44:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/08/15/collaboration-tools</id>
    <content type="html"><![CDATA[<p>Here are some of the collaboration tools/project management tools that I recently came accross with.</p>

<h3>Asana</h3>

<p><img src="/images/posts/collaboration_tools/asana.jpg" alt="asana" /></p>

<h3>Do</h3>

<p><img src="/images/posts/collaboration_tools/do.jpg" alt="do" /></p>

<h3>Review19</h3>

<p><img src="/images/posts/collaboration_tools/review19.jpg" alt="asana" /></p>

<h3>Trello</h3>

<p>This is the only one that I can recommend because I&rsquo;ve already used this before when my group mates and I were working on our Thesis.
All I can say is that it lived up to its tagline &ldquo;Your entire project, in a single glance&rdquo;. This is a very good tool for visual thinkers.
Each task is represented by a card and you can group each card into lists. You can select the people who are going to work on each card, set deadlines, and archive them once they&rsquo;re done.</p>

<p><img src="/images/posts/collaboration_tools/trello.jpg" alt="trello" /></p>
]]></content>
  </entry>
  
</feed>
