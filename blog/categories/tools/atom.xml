<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2014-03-06T18:34:50+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Web Servers]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers/"/>
    <updated>2014-03-01T08:35:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers</id>
    <content type="html"><![CDATA[<p>In this part four of the series A Whirlwind Tour of Web Developer Tools I&rsquo;m going to walk you through web servers. Web servers are computers that commonly delivers web pages. But when talking about web development web server refers to the software used for serving up the web pages. In this blog post I&rsquo;m going to talk about 4 web servers that you can use in serving up your web projects.</p>

<!--more-->


<h3>Python Simple HTTP Server</h3>

<p>First on the list is the simple http server that is built-in to python. So in order to use this you would need to have Python installed. Python already comes pre-installed in Ubuntu and other Linux distributions so you already have the simple http server by default. For Mac OS X its also pre-installed. But for Windows you would need to get an installer from the <a href="http://python.org/download/">Python website</a>.
You can use it by opening up a terminal from any directory that you want to serve and execute the following command:</p>

<p><code>
python -m SimpleHTTPServer
</code></p>

<p>To test it out you can create a new <code>index.html</code> file on the directory where you executed the command above and access <a href="http://localhost:8000">http://localhost:8000</a> from your browser.</p>

<p>Note that the simple http server will simply list out all the files in that directory if you do not have an <code>index.html</code> file:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/simplehttpserver.png" alt="simple http server" /></p>

<p>You can also implement your own web server by creating a new python file (<code>server.py</code>) and putting the following code:</p>

<p>```python
import SimpleHTTPServer
import SocketServer</p>

<p>PORT = 1234</p>

<p>Handler = SimpleHTTPServer.SimpleHTTPRequestHandler</p>

<p>httpd = SocketServer.TCPServer((&ldquo;&rdquo;, PORT), Handler)</p>

<p>print &ldquo;serving at port&rdquo;, PORT
httpd.serve_forever()
<code>``
You can then execute the</code>server.py` file from the terminal to start the server. Note that the file must be inside the same directory that you want to serve.</p>

<h4>PHP Server</h4>

<p>There is also the built-in server for PHP version 5.4.0 and above. This comes with PHP so you need to install it first before you can start using it. You can install PHP by executing the following command from your terminal</p>

<p><code>
sudo apt-get install php5
</code></p>

<p>Once you&rsquo;re done installing it you can now start using the server by navigating to the directory that you want to serve and executing the following command from the terminal:</p>

<p><code>
php -S localhost:8000
</code></p>

<p>This will serve up the current directory under port 8000 of your local machine so to access it from the browser you can open up the following url: <a href="http://localhost:8000">http://localhost:8000</a>.</p>

<p>Note that if you do not have a default file (either <code>index.html</code> or <code>index.php</code> file) in the directory that you are serving the PHP server is going to return a 404 not found:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/php-server.png" alt="php-server" /></p>

<p>The advantage of using the PHP server over simple http server is that you can actually create some php files in the directory that you are serving, write some code in it and the server will also be able to interpret it for you.</p>

<h3>Apache</h3>

<p>Next is the Apache HTTP Server from the Apache Foundation. You can install it by executing the following command from the terminal:</p>

<p><code>
sudo apt-get install apache2
sudo /etc/init.d/apache2 restart
</code></p>

<p>For Windows users there is this thing called <a href="http://www.wampserver.com/en/">WAMP</a> which you can install. Apache is packaged with it along with MySQL and PHP so you can start playing with it immediately without doing a lot of configuration. You can also have them installed separately but you will have to do some configuration before you can start playing with it. I&rsquo;ve written a tutorial about it before: <a href="http://kyokasuigetsu25.wordpress.com/2012/04/12/how-to-install-and-configure-apache-php-and-mysql/">How to install and configure apache, php, and mysql</a> so check that out if you do not want to use packaged versions.</p>

<p>For MAC OS there&rsquo;s <a href="http://www.mamp.info/en/index.html">MAMP</a>.</p>

<p>There&rsquo;s also <a href="http://www.apachefriends.org/index.html">XAMPP</a> which is a cross-platform solution for easily setting up Apache, PHP, and MySQL on your machine.</p>

<p>If you&rsquo;re a beginner I definitely recommend using either WAMP, MAMP or XAMPP as it can be sometimes frustrating to configure everything on your own.</p>

<p>Ok back to the main topic of this section which is Apache. If you&rsquo;re on Linux and you have installed Apache separately you might want to <a href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">configure the default web directory</a> since the default web directory that is used by Apache isn&rsquo;t writeable if you do not access the file explorer as a super user. This becomes a problem when accessing the web directory from the browser as Apache throws you a forbidden error. If you haven&rsquo;t catch it the first time you can go ahead and use the following tutorial: <a href="[configure%20the%20default%20web%20directory](http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">fixing the forbidden error in Apache</a>) to properly configure Apache. Once you&rsquo;re done with that you can go back to this blog post.</p>

<p>After configuring the default web directory used by Apache you can now put some test files on the web directory. Something like <code>index.html</code> and put the following contents:</p>

<p>```html</p>

<h1>Hello World from Apache!</h1>


<p><code>``
Now if you go to [http://localhost](http://localhost) you can now see the</code>index.html` being served by Apache. Apache serves everything on port 80 by default so we didn&rsquo;t have to add the port when we access it from the browser. This is because the browser knows by default that web pages are served at port 80. If you already have PHP installed you can also serve php files. Apache already knows how to serve those by default so there&rsquo;s no need for further configuration.</p>

<h3>Nginx</h3>

<p>Lastly there&rsquo;s Nginx one of the HTTP servers that&rsquo;s gaining market share lately. You can install it by executing the following command from your terminal:</p>

<p><code>
sudo apt-get install nginx
</code></p>

<p>If you&rsquo;re on Windows there&rsquo;s a guide from the Nginx website on <a href="http://nginx.org/en/docs/windows.html">how to install Nginx on Windows</a>.</p>

<p>For Mac you can install it via homebrew:</p>

<p><code>
brew install nginx
</code></p>

<p>Once Nginx is installed you can run it by executing <code>sudo nginx</code>. Note that if you already have Apache installed you would have a problem starting Nginx up. Most likely you would get an error similar to the one below:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/nginx-port.png" alt="nginx port error" /></p>

<p>This is Nginx telling you that port 80 is already in use. We learned earlier that Apache uses port 80 by default so running another server which serves web pages at port 80 will lead to that issue.
What we need to do is to configure Nginx to listen to another port. And you can do that by navigating to the following path:</p>

<p><code>
cd /etc/nginx/sites-available
</code></p>

<p>Then open up the <code>default</code> file:</p>

<p><code>
sudo gedit default
</code></p>

<p>From there scroll down to the line which is similar to the following:</p>

<p>```
server {</p>

<pre><code>listen 80 default_server;
listen [::]:80 default_server ipv6only=on;

root /usr/share/nginx/html;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>There are 2 things that you can do from here. First replace the 2 instances of <code>80</code> which is the default port used by Nginx to something like <code>6789</code>. Then you can also change the default web directory. Nginx uses <code>/usr/share/nginx/html</code> as its default, you can change it to something like <code>/home/your_user_name/nginx_web_files</code>. After updating the <code>default</code> file it should now look like this:</p>

<p>```
server {</p>

<pre><code>listen 6789 default_server;
listen [::]:6789 default_server ipv6only=on;

root /home/your_user_name/nginx_web_files;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>After that save the file and restart Nginx using the following command:</p>

<p><code>
sudo nginx -s reload
</code></p>

<p>You can now go ahead and create a sample <code>index.html</code> file in your chosen web directory and put the following contents:</p>

<p>```html</p>

<h1>hello world from nginx!</h1>


<p>```</p>

<p>To access it from your browser go to <a href="http://localhost:6789">http://localhost:6789</a>.</p>

<h4>Configuring PHP in Nginx</h4>

<p>Not unlike Apache, Nginx doesn&rsquo;t work with PHP by default so if you try serving up a PHP file Nginx won&rsquo;t understand it and it will give you a bad gateway error.</p>

<p>In order to make PHP work with Nginx you first have to install the <code>php5-fpm</code> package via the terminal:</p>

<p><code>
sudo apt-get install php5-fpm
</code></p>

<p>Once that&rsquo;s done you can now update the <code>default</code> file under the <code>/etc/nginx/sites-availble</code> directory.</p>

<p><code>
sudo gedit default
</code></p>

<p>Scroll down to the line where you have something similar to the following:</p>

<p>```</p>

<h1>location ~ .php$ {</h1>

<h1>fastcgi_split_path_info ^(.+.php)(/.+)$;</h1>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<h1>fastcgi_pass 127.0.0.1:9000;</h1>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<h1>fastcgi_index index.php;</h1>

<h1>include fastcgi_params;</h1>

<h1>}</h1>

<p>```</p>

<p>Then uncomment the lines that are necessary to make PHP work:</p>

<p>```
location ~ .php$ {
fastcgi_split_path_info ^(.+.php)(/.+)$;</p>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<pre><code>fastcgi_pass 127.0.0.1:9000;
</code></pre>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<pre><code>fastcgi_index index.php;
include fastcgi_params;
</code></pre>

<p>}
```</p>

<p>Save the changes and restart php5-fpm and Nginx:</p>

<p><code>
sudo service php5-fpm restart
nginx -s reload
</code></p>

<p>You can now request a PHP file from Nginx.</p>

<h3>Conclusion</h3>

<p>You&rsquo;ve learned how to serve up web pages using the following http servers:</p>

<ul>
<li>SimpleHTTPServer</li>
<li>PHP Server</li>
<li>Apache HTTP Server</li>
<li>Nginx</li>
</ul>


<p>Web Servers are flexible by default. They can serve up different types of content and they can also serve up interpreted language such as PHP. You can pretty much live with the just the defaults but if your web project is something that&rsquo;s used by many people across the world then its important that you configure your web server to accommodate the needs of every user. And that is to be able to access your website fast and securely.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.python.org/2/library/simplehttpserver.html">Simple HTTP Server</a></li>
<li><a href="http://www.php.net/manual/en/features.commandline.webserver.php">PHP Built-in Web Server</a></li>
<li><a href="http://httpd.apache.org/docs/">Apache HTTP Server</a></li>
<li><a href="http://nginx.org/en/docs/">Nginx</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Virtualization]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization/"/>
    <updated>2014-02-23T08:16:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/02/23/a-whirlwind-tour-of-web-developer-tools-virtualization</id>
    <content type="html"><![CDATA[<p>In this third part of the series <a href="http://anchetawern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/">A Whirlwind Tour of Web Developer Tools</a> I&rsquo;ll walk you through virtualization.
But before we dive in let&rsquo;s first define what virtualization is. According to Wikipedia:</p>

<p><blockquote><p>Virtualization is the act of creating a virtual (rather than actual) version of something, including but not limited to a virtual computer hardware platform, operating system, storage device, or computer network resources.</p></blockquote></p>

<p>In simple terms virtualization is creating a virtual copy of something. Virtual meaning that its not actually real but you can actually do things just like you do with the real thing.</p>

<!--more-->


<p>The first thing that comes to mind when you say virtualization in the world of computing is Virtualbox, VMWare and other virtualization software. And that&rsquo;s exactly what I&rsquo;m going to talk about in this blog post but of course in relation to web development.</p>

<h3>VirtualBox</h3>

<p>Virtualbox is a free cross-platform virtualization platform. Cross-platform meaning you can run it on every major operating system (Windows, Linux, Mac). And yeah if you haven&rsquo;t catch it the first time its free so you can use it however you want without paying for it.
Virtualbox allows you to run a copy of the operating system that you don&rsquo;t currently have on your machine. For example if you&rsquo;re currently using Ubuntu then you can run Windows or Mac on Virtualbox. And the same is true with whatever operating system you have currently installed physically.</p>

<p>This blog post isn&rsquo;t going to be a whole tutorial about Virtualbox. There&rsquo;s already a bunch of information about that in the <a href="https://www.virtualbox.org/manual/ch01.html">official documentation</a> so use that if you don&rsquo;t know how to use Virtualbox yet. But one thing to keep in mind when using Virtualbox is that you should acquire an installer of the operating system that you want virtualize using Virtualbox just like you do when you want to install it on your machine.</p>

<h3>Emulation Software</h3>

<p>One subject that&rsquo;s related to Virtualization is Emulation. They&rsquo;re sort of similar but they&rsquo;re not. Basically the main difference is the environment (hardware) where the software runs. When you say emulation the environment doesn&rsquo;t necessarily have to be the same to that of the original piece of software that you&rsquo;re trying to run. For example when playing an <a href="http://en.wikipedia.org/wiki/Nintendo_DS">NDS</a> game in your computer. That is possible through the use of an emulator. Your computer doesn&rsquo;t have the same hardware to that of an NDS but the emulator software makes it as if the game is running on an actual NDS hardware.</p>

<p>Whereas Virtualization is running a piece of software, in this case the operating system in the same type of environment.</p>

<p>So why did I just go over the difference between Emulation and Virtualization? That&rsquo;s because emulation is another piece of this whole blog post. You can also use emulation software as a substitute if Virtualization isn&rsquo;t feasible in your case.</p>

<p>Emulation software allows you to run software that you can only run on a specific operating system. For example if you only want to test out the website that you created in Internet Explorer and you&rsquo;re currently running Linux then you can use an emulation software instead of installing a copy of the Windows operating system on Virtualbox. Again I won&rsquo;t be walking you through how to install an emulation software. Instead I&rsquo;ll just provide you with some links to get you started:</p>

<ul>
<li><a href="http://www.winehq.org/">Wine</a> &ndash; windows software emulator for Linux, BSD, Solaris and Mac OS X.</li>
<li><a href="http://www.codeweavers.com/products/crossover-mac/">Crossover</a> &ndash; windows software emulator for Mac.</li>
<li><a href="http://winebottler.kronenberg.org/">Winebottler</a> &ndash; run windows-based programs on Mac.</li>
<li><a href="http://www.cygwin.com/">Cygwin</a> &ndash; provides a unix-like environment and command-line interface for Windows.</li>
<li><a href="http://www.finkproject.org/">Fink</a> &ndash; run unix-based software on Mac.</li>
</ul>


<h3>Vagrant</h3>

<p>Using Virtualbox or emulation software for testing the websites that you have created is nice but what if you need to test it out on a machine with exactly the same environment? Developers are known for making the excuse &ldquo;It works on my machine&rdquo; when the application that they have developed suddenly stops working or acts weird. With Vagrant you can now say goodbye to that excuse. What Vagrant allows you to do is create a virtual copy of a specific operating system and access and modify its files right from the host operating system (the operating system that you&rsquo;re currently running).
It also allows you to install software into the virtual operating system directly from your terminal through the use of <code>ssh</code>.
But what is the advantage of this over using Virtualbox? Its true that you can do any of the things that I&rsquo;ve mentioned above without using Vagrant. But the main advantage I think is the performance. Vagrant allows you to perform the installation of software and manipulating of files right from your host operating system so its a lot faster than booting up your virtual machine and doing your modifications from there. That is especially true if your machine doesn&rsquo;t have the most badass processor, solid state drive, and a bazillion of memory.</p>

<h4>Installing Vagrant</h4>

<p>Vagrant depends on Virtualbox in order to work so you need to have Virtualbox installed before installing Vagrant. The current version of Vagrant at the time of writing of this post is 1.4.3 and its only compatible with version 4.2.16 of Virtualbox. This poses some trouble for Linux users since the official repository for Virtualbox only serves the latest version of Virtualbox which is 4.3.6. For Windows and Mac users there&rsquo;s no problem since you can just download an older version of Virtualbox from <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_4_2">this page</a> and install it using the installer. For Linux users the installers for old versions are also available from that page and you can also try installing Virtualbox using those installers. But as for my personal experience I didn&rsquo;t have any luck with any of those installers. I get an error whenever I try to install it. Thankfully I found a good tutorial on <a href="http://linuxg.net/how-to-install-virtualbox-4-2-16-on-ubuntu-linux-mint-debian-and-fedora/">how to install Virtualbox 4.2.16</a> on some of the most popular Linux distributions. If you didn&rsquo;t have any luck with the installers provided from the Virtualbox site then you might as well try that link.</p>

<p>Once you&rsquo;re done installing Virtualbox you can now download the Vagrant installer from the <a href="http://www.vagrantup.com/downloads">Vagrant downloads page</a> just select the installer that applies for you then install it. The installer will automatically add <code>vagrant</code> to your system path so you can simply use the <code>vagrant</code> command from your terminal without having to specify the path.</p>

<h3>Using Vagrant</h3>

<p>After installing Vagrant you should already have access to the <code>vagrant</code> command from your terminal. You can execute the following command to test out if Vagrant was successfully installed:</p>

<p><code>
vagrant --version
</code></p>

<p>If it returns something like <code>vagrant version 1.2.2</code> then Vagrant was successfully installed on your machine.</p>

<p>The next step is a pretty long wait if you do not have a fast internet connection and the server that is serving the vagrant box files are busy. As for me it took a whole afternoon (around 6-8 hours) for the vagrant box to be fully downloaded.</p>

<p>But before we move on I believe a little background on what a vagrant box is is necessary. Basically vagrant boxes are virtual copies of an operating system. Pretty much like the <code>.vdi</code> or <code>.vmdk</code> file that&rsquo;s being created by Virtualbox or VMWare when you create a virtual machine.</p>

<h4>Adding Vagrant Boxes</h4>

<p>Vagrant boxes can be downloaded from <a href="http://www.vagrantbox.es/">vagrantbox.es</a>. You can add a box to Vagrant by executing the following command from the terminal:</p>

<p><code>
vagrant box add box_name url_from_vagrantboxes
</code></p>

<p>Where <code>box_name</code> is any machine friendly title (use underscores or dashes instead of spaces) that you want to use to refer to your box later on. And the <code>url_from_vagrantboxes</code> is the URL that you get from the vagrantboxes site. For this tutorial were going to work with the Ubuntu precise 32 box:</p>

<p><code>
vagrant box add precise32 http://files.vagrantup.com/precise32.box
</code></p>

<p>After executing the command above you might want to go out a bit or watch a whole season of your favorite TV show unless your download speed is blazingly fast.</p>

<h4>Vagrant Box Configuration File</h4>

<p>Once that&rsquo;s done you can now start using the box as a template for the machine that you need to build. First create your working directory and open up a terminal and execute the following:</p>

<p><code>
vagrant init
</code></p>

<p>This will create a vagrant init file. This file will contain the configuration for the box that you&rsquo;re going to build. The <code>Vagrantfile</code> generated by using <code>vagrant init</code> will just contain comments and some sample configuration. You can read through those comments if you want. But to avoid confusion simply create your own vagrant configuration file by creating a new file and putting the following contents:</p>

<p><code>
Vagrant.configure("2") do |config|
  config.vm.box = "precise32" #the box_name that you used earlier
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"
  config.vm.network :forwarded_port, guest: 80, host: 8080
end
</code></p>

<p>Just name the file <code>Vagrantfile</code> so it can be recognized by vagrant when you execute any vagrant commands. Note that for the value for the <code>config.vm.box</code> it should be the <code>box_name</code> that you used earlier when you executed the <code>vagrant box add</code> command. If you&rsquo;re not sure what the name of your box is then simply execute <code>vagrant box list</code> to list all the boxes that&rsquo;s currently available on your machine. The <code>config.vm.box_url</code> is the url in which vagrant will download the box if it hasn&rsquo;t already been installed in your machine. We already installed the box earlier so vagrant will simply ignore this option. The last setting is the <code>config.vm.network</code> this simply tells vagrant to forward port 80 from the guest machine to port 8080 on the host machine. I&rsquo;ll explain more on this later.</p>

<p>Now you can execute <code>vagrant up</code> to initialize the box. You can see something similar to the following when vagrant has successfully brought up the box:</p>

<p><img src="/images/posts/whirlwind_tour_virtualization/vagrant-up.png" alt="vagrant up" /></p>

<p>Once this is executed for the first time you will notice that vagrant automatically creates a virtual machine on virtualbox:</p>

<p><img src="/images/posts/whirlwind_tour_virtualization/vagrant-box.png" alt="virtual machine" /></p>

<p>You can perfectly access this machine from virtualbox if you want to do anything manually from the guest operating system.</p>

<h4>Logging in to the box</h4>

<p>Next execute <code>vagrant ssh</code>. This will allow you to login to the box. After executing that you will see something similar to the following:</p>

<p><img src="/images/posts/whirlwind_tour_virtualization/vagrant-login.png" alt="vagrant ssh" /></p>

<h4>Installing Software</h4>

<p>Now you can run wild and go crazy. Install all the applications that you need to install. As for me I&rsquo;m primarily working on a LAMP (Linux, Apache, MySQL, PHP) stack so I&rsquo;m going to install PHP, MySQL, and Apache on this box. But first we need to download the package lists from the software repositories and update the existing ones to get information on the latest versions of packages and their dependencies. You can do that by executing the following command:</p>

<p><code>
apt-get update
</code></p>

<p>Once that&rsquo;s done we can now install the things that we need:</p>

<p><code>
echo "Y" | apt-get install -y apache2
echo "Y" | apt-get install curl
echo "Y" | apt-get install libcurl3 php5-curl
echo "Y" | apt-get install php5
echo "Y" | apt-get install libapache2-mod-php5
echo "Y" | apt-get install mysql-server
echo "Y" | apt-get install php5-mysql
</code></p>

<p>Note that the <code>echo "Y"</code> here simply means that we supply <code>Y</code> as the answer if ever the installer asks for a response on whether to install the software or not. <code>Y</code> means yes in this case.</p>

<h4>Linking Up Directories</h4>

<p>Once those are done delete the <code>/var/www</code> directory and all of its contents and create a soft link between the the <code>/vagrant</code> directory and the <code>/var/www</code> directory.  You can do that by executing the following command:</p>

<p><code>
rm -rf /var/www
ln -fs /vagrant /var/www
</code></p>

<p>You may ask we just deleted the <code>/var/www</code> directory and all of its contents so why are we creating a link to something that&rsquo;s already deleted? Good question! Making a soft link to a non-existent directory has the side-effect of creating that directory. We deleted it so we become the owner of that directory.</p>

<p>Once that&rsquo;s done you can now treat your working directory as if its the <code>/var/www</code> directory in your box. Don&rsquo;t believe me? You can go ahead and create a new file in your working directory (open up a new terminal since the current terminal is referring to your box):</p>

<p><code>
touch newfile.txt
</code></p>

<p>Now go back to the terminal window in which you have logged in to your box using <code>vagrant ssh</code>. Go back two directories and enter the <code>vagrant</code> directory (this assumes that you&rsquo;re currently in the directory that&rsquo;s listing the <code>postinstall.sh</code> file when you execute the <code>ls</code> command) :</p>

<p><code>
cd ../../vagrant
</code></p>

<p>Now execute the <code>ls</code> command to list out all the files in that directory. You&rsquo;ll see that your <code>newfile.txt</code> is listed. Yes you can go ahead on go crazy and create a whole bunch of files through your host operating system in your working directory. Once you&rsquo;re satisfied come back to this blog post. I&rsquo;ll wait.</p>

<h4>Port-Forwarding</h4>

<p>Now if you remember earlier on the <code>Vagrantfile</code> that you created we have this particular line:</p>

<p><code>
config.vm.network :forwarded_port, guest: 80, host: 8080
</code></p>

<p>What this does is forwarding the port 80 of the guest (your box) to port 8080 of your host operating system. As you might already know port 80 is the default port used by Apache so if we access <code>http://localhost:8080</code> from the browser in the host OS it will actually give us what&rsquo;s in <code>http://localhost:80</code> in the box.
You can test it out by creating an <code>index.php</code> file on your working directory (host OS) and put the following contents:</p>

<p><code>php
&lt;?php
echo 'hello world from vagrant box';
?&gt;
</code></p>

<p>Now access <code>http://localhost:8080</code> from your browser and it will output &lsquo;hello world from vagrant box&rsquo;.</p>

<h4>Logging out of the box</h4>

<p>Once you&rsquo;re done playing with Vagrant you can now execute <code>exit</code> to logout from the box. After that you can either execute <code>vagrant halt</code> to shutdown the box or <code>vagrant suspend</code> to save the state of the machine, its like doing a hibernate so the box won&rsquo;t have to do a full boot when you access the box again. To work with your box again the <code>vagrant resume</code> command is used when you do <code>vagrant suspend</code> and the <code>vagrant up</code> is used when you do a <code>vagrant halt</code>. An important thing to remember is that you should do a <code>vagrant suspend</code> whenever you do not have any changes in your <code>Vagrantfile</code>. This makes it faster to get your guest machine running. However if you have some changes to your <code>Vagrantfile</code> you should do a <code>vagrant halt</code> for the changes to take effect when you do a <code>vagrant up</code>.</p>

<h4>Packaging the box</h4>

<p>Another useful thing that you could do is packaging up the box so that you can share it with your team if you have any. This ensures that you have the same configuration with the rest of your team. This allows you to avoid any incompatibility issues like missing software or a different configuration of the <code>php.ini</code> file if you&rsquo;re primarily working with PHP.</p>

<p>To package up a box, navigate to your working directory and then execute the following command:</p>

<p><code>
vagrant package --output package.box --vagrantfile Vagrantfile
</code></p>

<p>Note that the command above will power of the box so you&rsquo;ll have to do <code>vagrant up</code> the next time you want to use the box even if you used <code>vagrant suspend</code> the last time you used it. The command above will also take a bit of time to finish depending on the amount of customization that you have done on the box. You may also end up with a larger <code>.box</code> file than the one that you previously downloaded from vagrantbox.es since all the software that you installed on the box will also be in the <code>.box</code> file that will be generated by vagrant.</p>

<p>Once vagrant is done you will have a <code>package.box</code> file under your working directory. You can then share this file along with the <code>Vagrantfile</code> to the rest of your team so that they can make use of the box. Another team member can just create his working directory and then copy the <code>package.box</code> file to that directory and then execute the following command:</p>

<p><code>
vagrant box add box_name package.box
</code></p>

<p>Be sure to change the <code>box_name</code> to a more recognizable name. You can also tell your team mate to just name it to be the same as the name of the box that you originally created so they won&rsquo;t need to update the <code>Vagrantfile</code> to use the new box name.</p>

<p>Once that&rsquo;s done they can just use <code>vagrant up</code> to boot up the box.</p>

<h4>Destroying the Box</h4>

<p>If you want to delete a box (note that box in this case refers to the virtual machine that is generated when you executed <code>vagrant up</code>)  you can execute the following from your working directory:</p>

<p><code>
vagrant destroy
</code></p>

<p>This will delete the virtual machine and free up all the resources (hard disk space, memory, etc.) that it consumed when you created it.</p>

<h4>Removing the Box</h4>

<p>If you want to delete a box (note that box in this case refers to the box that is created when you executed <code>vagrant box add</code>, in other words the box where your box originated from) execute the following command:</p>

<p><code>
vagrant box remove box_name provider
</code></p>

<p>Where the <code>box_name</code> refers to the name that you used when you created the box using <code>vagrant box add box_name</code>. And the provider refers to the virtualization software. If you do not know the box name and the provider simply execute <code>vagrant box list</code>. This will list out all the vagrant boxes installed on your machine. The one enclosed in parenthesis is the provider. In our case its virtualbox.</p>

<h3>Conclusion</h3>

<p>Virtualization is a great way to experiment on different technologies if you want to avoid messing up your current system configuration. Its also a good way to test out your web projects on different machines without having to install it physically on your current machine.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://www.virtualbox.org/">Virtualbox</a></li>
<li><a href="http://docs.vagrantup.com/v2/">Vagrant Documentation</a></li>
<li><a href="http://www.vagrantbox.es/">Vagrant Boxes</a></li>
<li><a href="http://rove.io/">Rove</a> &ndash; you can use this for easily creating Vagrant files</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A whirlwind Tour of Web Developer Tools: Text Editors]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors/"/>
    <updated>2014-02-15T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors</id>
    <content type="html"><![CDATA[<p>This is part two of the series A Whirlwind Tour of Web Developer Tools. This time I&rsquo;ll be talking about text editors and related tools.</p>

<p>Text editors are used by web developers to write code. Text editors are not the same thing as word processors because anything written on a text editor is saved as a plain text file and it normally uses a simple character set such as ASCII to represent different characters (letters, numbers, etc). On the other hand word processors saves formatted text which enables tables, symbols and other form of graphical information to be represented without having to use any form of markup like HTML.</p>

<!--more-->


<h4>Sublime Text</h4>

<p>When you say text editor the first thing that comes to mind these days is <a href="http://www.sublimetext.com/">Sublime Text</a>. It&rsquo;s like the sexiest text editor these days. So this whole blog post is primarily going to be about Sublime Text and some of the plugins that I found useful.</p>

<h5>Plugins</h5>

<p>In order to install plugins for Sublime Text you first have to install <a href="https://sublime.wbond.net/">package control</a> which is a package manager for Sublime Text that allows you to easily install plugins. To install package manager copy the following code in the Sublime Text console which can be accessed by pressing <code>ctrl + back tick</code> on your keyboard. After that restart the editor to finish the installation:</p>

<p><code>
import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
</code></p>

<p>Note that the code above is for Sublime Text 2, if you&rsquo;re using Sublime Text 3 then use the following code:</p>

<p><code>
import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<p>After restarting sublime text you can now press <code>ctrl + shift + p</code>, select &lsquo;install package&rsquo; and press <code>enter</code>, this will load all the available plugins from the plugin repository. From there you can just search for the plugin that you want to install.</p>

<p>And now for the plugins:</p>

<ul>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCS</a> &ndash; a PHP code quality tool.</li>
<li><a href="http://emmet.io/">Emmet</a> &ndash; previously known as Zen Coding. If that doesn&rsquo;t ring a bell then Emmet is basically a tool for improving productivity by implementing shortcuts for generating code that you would normally write out by hand. All you have to do is to write something like this:</li>
</ul>


<p><code>
html:5
</code></p>

<p>And right after pressing <code>tab</code> you get a whole bunch of code written out for you:</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body></p>

<p></body>
</html>
```</p>

<ul>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">Sidebar Enhancements</a> &ndash; allows you to create a new file and it will immediately ask you the filename, duplicating or copying files and folders from the sidebar, and a bunch of other good stuff that the default sublime text sidebar doesn&rsquo;t allow you to do.</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a> &ndash; allows for easier visualization of where the ending bracket is.</li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a> &ndash; keeps a history of clipboard items so you can just paste them in later.</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">Docblockr</a> &ndash; pretty much like emmet but only for document blocks. Useful for writing comments.</li>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a> &ndash; allows for easy alignment of code. All you have to do is press <code>ctrl + alt + a</code> on your keyboard.</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-for-ST2">Sublime Linter</a> &ndash; inline linting for a bunch of languages (PHP, HTML, CSS, Ruby, etc). If you don&rsquo;t know what linting is, its basically a process of analyzing code to determine potential errors. In most cases its used by web developers to check their code quality against a specific coding standard. For example, when coding in JavaScript its not usually required to put semi-colons but if you&rsquo;re using Sublime linter it will remind you to put those semi-colons in if you forget it. If you have unused variables in your code the linter will also complain and it will tell you that variable <code>z</code> isn&rsquo;t actually used in your code.</li>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime">EditorConfig</a> &ndash; tool for implementing coding conventions. You can use this to specify whether to use tabs or spaces for specific file types (<code>.js</code>, <code>.css</code>) or whether to use double quotes or single quotes for the quote type. You can do all that by installing the editorconfig plugin for the text editor that you&rsquo;re using. Then create a <code>.editorconfig</code> file in the root of your project directory or any directory in your project if you want to use different rules for different directories. Here&rsquo;s a sample <code>.editorconfig</code> file:</li>
</ul>


<p>```
root = true</p>

<p>[*]
end_of_line = lf
insert_final_newline = false
charset = utf-8
trim_trailing_whitespace = true
quote_type = double</p>

<p>[*.php]
indent_style = space
indent_size = 4</p>

<p>[*.py]
indent_style = space
indent_size = 4</p>

<p>[*.js]
indent_style = space
indent_size = 2</p>

<p>[*.css]
indent_style = space
indent_size = 5
```</p>

<p>As you can see from the sample above you can specify a whole bunch of settings. You can also have different rules for different file types.</p>

<h4>IDE</h4>

<p>There&rsquo;s also this thing called the IDE or Integrated Development Environment which is basically text editors on steroids. They have huge install size since they allow you to do more than just writing code. IDE&rsquo;s packs a bunch of features which you would not normally find in a text editor such as compiling code. Some IDE&rsquo;s such as Visual Studio also allows you to build the GUI of applications by simply dragging and dropping GUI elements (text boxes, buttons, etc.) from a toolbox. Other features include code completion (intellisense), debugger, integrated services (allows viewing and manipulating the database right from the IDE).</p>

<h3>Conclusion</h3>

<p>Text editors and IDEs are the main weapons of every web developer. Without it they won&rsquo;t be able to produce any code. So its important to learn the ins and outs of the text-editor or IDE that you are using to maximize your productivity when using it. Be sure to check out the resources below for more Sublime Text awesomeness.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.hongkiat.com/blog/sublime-text-tips/">Sublime Text Tips and Tricks</a></li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Perfect Workflow in Sublime Text 2</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">Popular Sublime Text Plugins</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">Compariosn of Text Editors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Comparison of Integrated Development Environments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: In-Browser Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/"/>
    <updated>2014-02-09T12:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools</id>
    <content type="html"><![CDATA[<p>In this series of blog posts I&rsquo;m going to give you an overview of some of the tools that are commonly used by web developers to get their work done. You can expect some examples on how to install and use each tool but I won&rsquo;t be going too deep. The main purpose is to simply give you an idea on what tools are available, how to use them and encourage you to integrate them into your workflow. Note that the tools that will be mentioned in this blog post aren&rsquo;t platform specific so you can use them whether you&rsquo;re developing in Windows, Linux or Mac. Over the coming weeks I&rsquo;m going to walk you through the following:</p>

<ul>
<li>In-Browser Tools</li>
<li>Text Editor</li>
<li>Virtualization</li>
<li>Web Servers</li>
<li>Command Line Utilities</li>
<li>Package Managers</li>
<li>Source Control</li>
<li>Build Tools</li>
<li>Linting</li>
<li>Testing</li>
<li>Language Compilers</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end Frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous</li>
</ul>


<!-- more -->


<h3>In-Browser Tools</h3>

<p>First on the list is the browser tools. Browser tools are a set of tools that live on the browser which can help you in inspecting and debugging web applications.</p>

<h4>Chrome Developer Tools</h4>

<p>One of the most popular browser tool today is the Chrome Developer Tools. You can access it by pressing <code>Ctrl + Shift + I</code> or <code>Cmd + Opt + I</code> on your keyboard. By default this opens up the last panel that you have accessed.</p>

<ul>
<li><strong>Elements</strong> &ndash; allows DOM inspection and modification, changes are reflected on the page as you update.</li>
<li><strong>Network</strong> &ndash; this is where you can view all of the HTTP requests made by your web project. The size and time it took to download each requested file are also viewable so the network panel is mostly used for evaluating the performance of your web project in terms of the HTTP requests that are made.</li>
<li><strong>Sources</strong> &ndash; used for viewing and updating the source files used by your web project. If you selected a JavaScript file it will also allow you to debug it.</li>
<li><strong>Timeline</strong> &ndash; used for evaluating the performance of your web project in terms of frames and memory consumed</li>
<li><strong>Profiles</strong> &ndash; used for profiling JavaScript performance</li>
<li><strong>Resources</strong> &ndash; kind of similar with the sources panel, but it doesn&rsquo;t allow you to edit the source files. It also allows you to view and modify cookie and local storage information.</li>
<li><strong>Audits</strong> &ndash; evaluates the web page performance in terms of network utilization and css and JavaScript performance.</li>
<li><strong>Console</strong> &ndash; allows you to run JavaScript code and inspect JavaScript objects.</li>
</ul>


<h4>Useful Extensions and Plugins</h4>

<ul>
<li><strong>Web Developer</strong> &ndash; packs various extensions and tools to help in testing web pages <a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">[firefox]</a></li>
<li><strong>Tincr</strong> &ndash; allows live reloading of web pages as you make changes to the source file. The saving of changes is also bi-directional which means that if you edit the file in the sources panel of the Chrome Developer Tools the changes will also get saved to the source file. Pretty sweet! <a href="https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih?hl=en">[chrome]</a></li>
<li><strong>Pagespeed Insights</strong> &ndash; used for evaluating the performance of web pages based on industry best practices. It will give you some suggestions on how you can improve the performance of your website based on its evaluation. <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">[chrome]</a></li>
<li><strong>YSlow</strong> &ndash; the same as Pagespeed Insights. <a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">[firefox]</a></li>
</ul>


<h4>Firefox Developer Tools</h4>

<p>Pretty much the same with the Chrome Developer Tools. It also allows you to inspect and modify a web page, debug JavaScript code, monitor and inspect HTTP requests as they happen. During my testing I found out that most of the features are the same, the only tool that is not present by default in the Chrome Developer Tools is the 3d view for web pages.</p>

<p><img src="/images/posts/whirlwind_tour_web_developer_tools/3dview.png" alt="3d view" /></p>

<h4>Firebug</h4>

<p>The in-browser tool that started it all. It was already around before Chrome Dev Tools and Firefox Dev Tools came out. Most of the features are also the same with that of Chrome Dev Tools and Firefox Dev Tools.</p>

<h3>Conclusion</h3>

<p>In-browser tools are a nice way to easily design and test websites. They allow you to do almost everything right from the browser itself. The main benefit of this is instant feedback. You get to see what effect your changes have on the website right after making the change. Tools like tincr even make it possible to commit your changes to your source files so you won&rsquo;t have to go back to the text-editor and commit your changes.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks">Chrome Developer Tools Tools Tips and Tricks</a></li>
<li><a href="https://getfirebug.com/faq/">Firebug</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Tools">Firefox Developer Tools</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging into Chrome Dev Tools]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools/"/>
    <updated>2013-04-21T17:15:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/21/digging-into-chrome-dev-tools</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to walk you through some of the things that we can do with the Chrome Developer Tools to improve our web development workflow.</p>

<!--More-->


<h3>Accessing Chrome Dev Tools</h3>

<p>You can access the Chrome Developer Tools by clicking on the Chrome Settings button &ndash;> Tools &ndash;> Developer Tools.</p>

<h4>Elements Panel</h4>

<p>First there&rsquo;s the elements panel which we can use to inspect and edit the html that is used in a web page.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/elements_panel.jpg" alt="elements panel" /></p>

<p>This is very useful for when you want to edit the HTML of the web page that you&rsquo;re working on, adding some classes or attributes on the fly.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/element_options.jpg" alt="elements options" /></p>

<p>As you can see from the screenshot above there&rsquo;s a bunch of things that you can do with the currently selected element like copying its HTML, Edit the HTML, or deleting the node which you can do by just pressing delete on your keyboard. If you mess up you can always press on ctrl + z to undo the changes that you&rsquo;ve made.</p>

<p>You can also edit entire HTML blocks or navigate directly to the parent element of the currently selected element.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/edit_html_block.jpg" alt="edit html blocks" /></p>

<p>You can also drag elements around by holding the left mouse button and then dragging the element to where you want it to be and then finally releasing it.</p>

<p>Another thing that you can do within the elements panel is live editing of the CSS used in a particular element.</p>

<p>You can add new styles by pressing tab while the cursor is inside the value of the last property for a specific selector. As you can see from the screenshot below it also gives you a nice auto-completion for every property and values that are currently supported by the browser.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/add_styling.jpg" alt="add styling" /></p>

<p>You can also disable a specific style by unchecking the checkbox before the property:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/disable_styling.jpg" alt="remove styling" /></p>

<p>To delete a property entirely you can press delete while the cursor is either inside of the property or the value.</p>

<p>There&rsquo;s also a sweet color picker which you can use to experiment on the color that you want to use.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/color_picker.jpg" alt="color picker" /></p>

<p>You can also directly edit the css file by clicking on the name of the css file that you want to edit.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/css_file.jpg" alt="css file" /></p>

<p>After that you can just edit the file like you usually do in a text-editor and the web page will be automatically updated as you type in the value for each property. The only difference is that you don&rsquo;t get the auto-completion while in this mode.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/css_editing.jpg" alt="css editing" /></p>

<p>But the only problem with this is that all your changes only lives on the browser once you refresh the page all your changes will be gone. And the only plugin-less solution would be to click on the filename of the css file that you&rsquo;ve edited then copy all of its contents and then paste it back on your source file. Or you can actually right click on the file and then click on save.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/save_css.jpg" alt="save css file" /></p>

<h3>Resources Panel</h3>

<p>Next is the resources panel where we can see some of the resources that the web page has loaded on initial page load.
That includes the current page (html), images, script files (mainly JavaScript), stylesheets, and other types of media.
Each of these files are group according to their file type so all stylesheets are under the same group, all the JavaScript are in the same group, etc. Also note that the ordering depends on what has been loaded first. So the first files that were loaded during page load are first on the list.</p>

<p>From the resources panel you can also see what&rsquo;s stored in Web SQL, Indexed DB, local storage, session storage, cookies, and application cache which is mainly specified in the manifest file whenever you want your application to be accessed offline.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/resources_panel.jpg" alt="resources panel" /></p>

<p>The resources panel also gives you a nice preview of the file that you&rsquo;re currently viewing.
For images you get something like this:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/image_preview.jpg" alt="image preview" /></p>

<p>And for HTML, CSS, and JavaScript files you get to view the source:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/html_source.jpg" alt="html source" /></p>

<h3>Network Panel</h3>

<p>Next is the network panel where you can see the list of files which are loaded by the web page.
Either on initial page load or while the users are interacting with the web page.
So you can actually see the AJAX requests, template files and other network requests in the network panel.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/network_panel.jpg" alt="network panel" /></p>

<p>Here are some of the information that you can see on the Network Panel:</p>

<p><strong>Name</strong> &ndash; the name of the file that was requested.</p>

<p><strong>Method</strong> &ndash; the method that was used to get the specific file (GET, POST).</p>

<p><strong>Type</strong> &ndash; the <a href="http://en.wikipedia.org/wiki/MIME">type of file</a> that was requested.</p>

<p><strong>Status</strong> &ndash; the status of the request <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">status</a>. The common status are 200 OK which means the request was successful and the file was directly downloaded from the server. There&rsquo;s also 304 not modified.</p>

<p><strong>Initiator</strong> &ndash; the page that requested the file or resource. This is usually the current page.</p>

<p><strong>Size</strong> &ndash; the size of the requested file in kilobytes.</p>

<p><strong>Time</strong> &ndash;  the time between making the request and the server&rsquo;s first response in milliseconds.</p>

<p><strong>Timeline</strong> &ndash; shows the waiting and receiving time for each file. The waiting time is the amount of time in which the browsers waits for the file upon requesting it. The receiving time is the amount of time in which the file is downloaded.</p>

<p>Clicking on each file allows you to view the request headers, preview, response, cookies and the timing.</p>

<p><strong>headers</strong> &ndash; this shows you the details of the request like the Request URL which is the URL to the file that is requested.
The request method which is usually GET or POST. The status code which you also saw from the network request summary earlier.</p>

<p>There&rsquo;s also the Request Headers and Response Headers. The Request Headers are the information that is present in the browser. And the Response Headers is the information returned from the server.</p>

<p>Some of the information that are present in the Request Headers are the  Referer which is basically the url of the file that initially requested the file or resource, the User-Agent is the browser used by the user to access the web page.</p>

<p>While the Response Headers contains information like the name of the Server (Apache, ECS, Nginx and a bunch of others), the current system date of the server, the <a href="http://en.wikipedia.org/wiki/HTTP_ETag">entity tag</a>.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/network_request.jpg" alt="network request" /></p>

<p><strong>preview</strong> &ndash; this is usually the source of the file. If its an image file you usually get a preview of the image.</p>

<p><strong>response</strong> &ndash; the same as preview but this time you only get the raw data.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/response.jpg" alt="response" /></p>

<p><strong>cookies</strong> &ndash; this is usually the cookies stored by the website that the user is currently looking at.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/cookies.jpg" alt="cookies" /></p>

<p><strong>timing</strong> &ndash; the same as the information displayed in the waterfall timeline that you see on the network request summary only this time its only for the file that you have clicked on.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/timing.jpg" alt="timing" /></p>

<h3>Sources Panel</h3>

<p>The sources panel allows you to view and edit the source files used in the current web page.
We kind of touch on this earlier when we click on a filename on the elements panel we get redirected to the sources panel and then it allows us to edit the file that we selected and the changes would be automatically reflected on the page. But that&rsquo;s just on the css side of things. You can actually debug JavaScript code as well in the sources panel. The official Chrome Dev Tools documentation already had us covered in the <a href="https://developers.google.com/chrome-developer-tools/docs/scripts-breakpoints">Breakpoints</a> section so I won&rsquo;t delve much in how that&rsquo;s done.</p>

<h3>Timeline Panel</h3>

<p>The timeline panel allows you to view information regarding the performance of your web app. Things like paint times, frames per second, and memory consumption. It gives you a complete overview of how your web app performs.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/timeline_panel.jpg" alt="timeline panel" /></p>

<p>You can start using the timeline panel by clicking on the <code>record</code> button found at the lower left portion of chrome dev tools.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/record_button.jpg" alt="record button" /></p>

<p>Then interact with your app a bit. Usually you would interact on the parts of your app in which you want to measure the performance. Once you&rsquo;re done click on the <code>stop</code> button.</p>

<p>On first look this might really look complicated. I also had no idea where the hell should I start looking the first time I used the timeline panel.</p>

<p>First let&rsquo;s talk about the colors that you see in the timeline panel:</p>

<p><strong>Blue</strong> &ndash; sending of requests and network related stuff.
<strong>Yellow</strong> &ndash; execution of JavaScript code.
<strong>Purple</strong> &ndash; css calculation and rendering.
<strong>Green</strong> &ndash; repaints (updating the page).</p>

<p>The length of these colors depends on the amount of time (in milliseconds) that the browser executed the operation.
That&rsquo;s about all I can share about the timeline panel. I&rsquo;m not really in the level yet of measuring the performance of the applications that I&rsquo;m trying to build especially in the frontend because I do more backend than I do frontend.</p>

<h3>Console</h3>

<p>The console panel allows you to play around with JavaScript code that you want to include in your application.
It also serves as a shortcut in selecting elements in the DOM.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/console_select.jpg" alt="selecting in the console" /></p>

<p>There are also some shortcuts which you can use to select elements.</p>

<p>To select the element that is currently selected in the elements panel you can use <code>$0</code>:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/dollar_zero.jpg" alt="$0" /></p>

<p>Of course you can also use <code>$1</code>, <code>$2</code> and other numbers for as far as your memory can reach to select the elements that were previously selected. So if you select the body then the main wrapper then the first child of that wrapper. <code>$0</code> returns the first child of the wrapper, <code>$1</code> returns the wrapper, and <code>$0</code> returns the body.</p>

<p>Other things that the console allows you to do:</p>

<ul>
<li><p>view errors &ndash; the console automatically allows you to view errors in your JavaScript code like parse errors when trying to call <code>JSON.parse</code> on an invalid JSON string.</p></li>
<li><p>assertion &ndash; checking if a specific condition is true. You can use the <code>assert</code> method to do assertions.
For example when checking if the following values are true:</p></li>
</ul>


<p><img src="/images/posts/digging_into_chrome_dev_tools/console_assert_numbers.jpg" alt="asserting values" /></p>

<p>As you can see from the screenshot above the first two conditions returned <code>undefined</code> which means the assertion has pass. While on the 3rd condition the assertion failed since were using the strict equality operator which also checks the data type of the variable and not just its value.</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/typeof.jpg" alt="typeof" /></p>

<p>You can also assert return values from functions as well:</p>

<p><img src="/images/posts/digging_into_chrome_dev_tools/assert_functions.jpg" alt="asserting functions" /></p>

<p>As you can see from the screenshot above the first assertion failed since 3 is not equal to 4. But the second assertion passes since 3 is less than 4. This is a pretty simple example but you can also have more complex functions checked by <code>console.assert</code> as long as they have return values which it can check.</p>

<h3>Resources</h3>

<p><a href="https://developers.google.com/chrome-developer-tools/">Chrome Dev Tools Documentation</a></p>
]]></content>
  </entry>
  
</feed>
