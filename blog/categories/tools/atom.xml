<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-10-01T10:57:13+00:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Linting]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting/"/>
    <updated>2016-01-09T16:25:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting</id>
    <content type="html"><![CDATA[<p>Yo! It&rsquo;s been a while but I&rsquo;ve decided to continue this series on A Whirlwind Tour of Web Developer Tools. For those who don&rsquo;t know, I started this series a year ago but then I got so busy with work and I became an author at Sitepoint. So you can only count the number of in-depth tutorials with your fingers. But I quit my job and now I have a lot of free-time. That is why I no longer have any excuse not to continue what I started.</p>

<p>Ok enough with the life update. Now let&rsquo;s move on to the main topic of this article. This is part eight of the series on Web Developer Tools where I&rsquo;m going to walk you through linting. Linting is the process of running a program that will check the quality of code in order to avoid any potential errors. Take for example the following code:</p>

<p>```javascript
function main(){
  if(x == y){</p>

<pre><code>return 'Hello, World!'
</code></pre>

<p>  }
  return &lsquo;Hello&rsquo;;
}
```</p>

<p>By looking at the code, you can immediately see that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. The semicolon is also missing from the first <code>return</code> statement. But if add this function to a JavaScript file, you will see that it doesn&rsquo;t actually cause any errors until you add the code that will call the function. Only then will you realize that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. But JavaScript doesn&rsquo;t actually complain if you miss a semicolon or two so the first <code>return</code> statement won&rsquo;t probably cause any errors. This is because of the automatic semicolon insertion in JavaScript. I know the example that I gave is a bit contrived but you get the point. As developers we sometimes miss the obvious things such as defining a variable or putting a semicolon. That is why there are tools to help us avoid making these kinds of mistakes. Linters are one of those. In the world of web development there are a bunch of tools which can be classified as linters. I&rsquo;m going to walk you through some of those in this tutorial.</p>

<h3>Markup Validation Service</h3>

<p>The <a href="https://validator.w3.org/">markup validation service</a> by the World Wide Web Consortium allows developers to check the validity of the HTML code that they&rsquo;ve written. It uses the doctype defined at the very top of the document as a basis for which specific rules to use for checking the code. You can supply a URL, upload a file or directly input the HTML code that you want to check. Here&rsquo;s an example:</p>

<p><img src="/images/posts/devtools_linters/w3c-validator.png" alt="w3c validator" /></p>

<p>As you can see from the screenshot, it gives you three types of feedback: info, warning and error. Info gives you general information about the page. Warnings are messages telling you that you can do better. Or something could be improved. In the example above it says that the document uses unicode private use areas. Which is basically another way of saying that undefined unicode characters shouldn&rsquo;t be used in publicly available documents. Lastly there&rsquo;s the error. These are messages that tells you to fix something because it might cause problems to the users of your website. In the example above, it&rsquo;s saying that an <code>alt</code> attribute should always be defined, except in specific conditions. And then it points out to the SVG logo of the website which should probably have an <code>alt</code> assigned to it. This is important because some users might be partially disabled (color-blind, partially blind, etc.) might be using a screenreader to interact with your website. And the value that you have placed in the <code>alt</code> attribute is read out by the screenreader. If there&rsquo;s nothing there then the user won&rsquo;t be able to know what he&rsquo;s currently focusing at.</p>

<h3>HTMLHint</h3>

<p><a href="http://htmlhint.com/">HTMLHint</a> is a linter for HTML code. Unlike the markup validation service, this allows you to specify what specific validation rules are to be used to check your HTML code. For example you can specify that all tags should be in lowercase. Or that in every file, an ID can only be used once. Here&rsquo;s an example:</p>

<p><img src="/images/posts/devtools_linters/htmlhint.png" alt="htmlhint" /></p>

<p>HTMLHint gives you feedback on which specific line has problems in it. And if you hover over the line number, you will see what the specific error is. In the example above you can see that the errors are:</p>

<ul>
<li>the id <code>a_unique_id</code> has been used twice. It doesn&rsquo;t matter that the elements used are different as long as an ID is used more than once, it triggers the error on the lines in which the ID is used for the second time.</li>
<li>the <code>div</code> with the ID of <code>a_unique_id</code> hasn&rsquo;t been closed. Note that this doesn&rsquo;t get triggered on the line where the tag hasn&rsquo;t been closed. Instead it gets triggered on the nearest closing tag which doesn&rsquo;t have a pair.</li>
</ul>


<p>At the bottom part of the website, you can check or uncheck rules depending on what you&rsquo;d like to apply. There are are a number of rules you can choose from and the naming is pretty self-explanatory so I won&rsquo;t be delving into that.</p>

<h3>CSSLint</h3>

<p><a href="http://csslint.net/">CSSLint</a> as the name suggests, is a linter for CSS code. Just like HTMLHint it allows you to specify which validation rules you&rsquo;d like to apply for the checking of your CSS code. With CSSLint there are mostly warning rules but you can trigger errors as well. Such as when a specific rule is empty, or when using unknown CSS properties, or disallowing duplicate one&rsquo;s. Warning rules on the other hand requires you to add fallback colors if you&rsquo;re using <code>hsl</code>, <code>rgba</code>, <code>rgb</code>, or <code>hsla</code> to specify colors. Older browsers might not support those methods of specifying colors so you&rsquo;ll have to provide a fallback in hexadecimal format. Another example is disallowing units for 0 values. This is mostly for performance benefits. Here&rsquo;s an example CSS code that I&rsquo;ve checked with CSSLint:</p>

<p>```css
body {</p>

<pre><code>font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
padding: 0;
margin: 0;
height: 100%;
width: 100%;
</code></pre>

<p>}</p>

<h1>settings-button {</h1>

<pre><code>float: right;
margin-top: 20px;
margin-right: 20px;
</code></pre>

<p>}</p>

<p>h1 {</p>

<pre><code>padding-left: 40px;
display: inline-block;
</code></pre>

<p>}</p>

<h1>message {</h1>

<pre><code>padding: 20px 40px;
background: #64CF49;
</code></pre>

<p>}</p>

<h1>sidebar {</h1>

<pre><code>width: 20%;
float: left;
background-color: #67B6DA;
position: fixed;
height: 100%;
</code></pre>

<p>}</p>

<h1>items-container {</h1>

<pre><code>width: 80%;
float: left;
position: relative;
margin-left: 20%;
background-color: #F7F7F7;
</code></pre>

<p>}</p>

<p>ul li {</p>

<pre><code>list-style: none;
</code></pre>

<p>}</p>

<h1>sidebar h3 {</h1>

<pre><code>border-bottom: 3px solid;
padding: 0;
padding-left: 30px;
</code></pre>

<p>}</p>

<h1>types li {</h1>

<pre><code>padding: 10px 30px;
</code></pre>

<p>}</p>

<p>ul#types {</p>

<pre><code>padding: 0;
font-size: 15px;
</code></pre>

<p>}</p>

<h1>types li a {</h1>

<pre><code>text-decoration: none;
color: #575757;
</code></pre>

<p>}</p>

<h1>items {</h1>

<pre><code>padding: 0 20px;
</code></pre>

<p>}</p>

<h1>items li a {</h1>

<pre><code>text-decoration: none;
color: #3A3A3A;
display: inline-block;
</code></pre>

<p>}</p>

<h1>items li {</h1>

<pre><code>padding: 20px;
</code></pre>

<p>}</p>

<h1>items li:hover {</h1>

<pre><code>background-color: #DFDFDF;
</code></pre>

<p>}</p>

<p>.item-info {</p>

<pre><code>display: inline-block;
width: 100%;
font-size: 15px;
color: #8A8A8A;
margin-top: 5px;
</code></pre>

<p>}
```</p>

<p>And then it showed me the following feedback:</p>

<p><img src="/images/posts/devtools_linters/csslint.png" alt="csslint" /></p>

<p>As you can see I&rsquo;ve used a lot of ID&rsquo;s in this css file so CSSLint is complaining that I shouldn&rsquo;t use ID&rsquo;s. This is mainly because CSSLint have this idea that ID&rsquo;s are completely unique and therefore there&rsquo;s no room for reuse. CSSLint advocates the use of OOCSS (Object-oriented CSS) whose main principle is the reusability of code by means of using objects.</p>

<p>Another warning is the use of overqualified selectors:</p>

<p>```css
ul#types{</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>It&rsquo;s saying that just using <code>#types</code> would suffice.</p>

<p>The last type of warning is the heading should not be qualified warning:</p>

<p>```css</p>

<h1>sidebar h3 {</h1>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>This is because headings are considered as top-level styles. This means that you shouldn&rsquo;t define their styles under a specific element. Because their appearance should be consistent throughout the entire website. Note that this is not saying that headings cannot be nested under a specific element. You can do that but when you&rsquo;re declaring their styles it should be just on its own so that you can ensure that they look the same throughout the whole website.</p>

<h3>JSHint</h3>

<p><a href="http://jshint.com/">JSHint</a> helps to detect errors and potential problems in your JavaScript code. It checks for undefined variables, the use of <code>eval</code> (we all know that <code>eval</code> is evil right?), unused variables and <a href="http://jshint.com/docs/options/">many others</a>. In the JSHint website you can configure which rules to apply by clicking on the <em>configure</em> link. Here&rsquo;s an example of how it works:</p>

<p><img src="/images/posts/devtools_linters/jshint.png" alt="jshint" /></p>

<p>As you can see it provides you with some code metrics. It tells you how many functions has been defined, how many variables are not defined and how many are not used.</p>

<p>It also tells you the cyclomatic complexity of the largest functions. In case you&rsquo;re wondering, <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a> is just a fancy term for the complexity of a specific program. You can see that the cyclomatic complexity of the largest function that I&rsquo;ve defined is 2. And the median (average) complexity of all the functions in the file is 1.5. People generally say that a cyclomatic complexity of 0 to 5 is fine. But if you get around 6 or more then you should consider refactoring your code.</p>

<p>Another warning that you can see in the example is the missing &ldquo;use strict&rdquo; statement. This is a way of telling the browser to use strict mode. I haven&rsquo;t really dived into strict mode yet but the main idea is that adding this literal expression at the very top of each JavaScript file and at the very top of each function makes the browser complain more about your code. Take for example the following code:</p>

<p><code>javascript
x = "y"; //browser: sweet!
console.log(x);
</code></p>

<p>Without invoking strict mode, the browser would happily execute this piece of code for you. But with strict mode it will complain that you haven&rsquo;t defined <code>x</code> yet.</p>

<p><code>javascript
"use strict";
x = "y"; //browser: Uncaught ReferenceError: x is not defined
console.log(x);
</code></p>

<h3>Command Line Tool</h3>

<p>HTMLHint, CSSLint, and JSHint can all be used through the command line. We&rsquo;re going to take a look at how to do that in this section.</p>

<p>The first thing that you need to do is to install node.js and npm. But we&rsquo;re not going to go through that here because I previously mentioned it in my article on <a href="http://wern-ancheta.com/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers/">package managers</a>. Go ahead and check that out if you don&rsquo;t already have node.js and npm installed.</p>

<p>Once you&rsquo;ve installed node.js and npm, you can now install htmlhint, csslint, and jshint using npm:</p>

<p><code>
npm install -g htmlhint csslint jshint
</code></p>

<p>You can now immediately use them right after the installation is complete:</p>

<p><code>
htmlhint index.html
csslint style.css
jshint main.js
</code></p>

<p>Note that each of these tools already comes with default options. So if you were to execute each of the commands above, you will most likely get a warning or an error if your code is already complex enough. But you can also specify which rules to apply by creating a configuration file inside of your project directory.</p>

<p>For HTMLHint the configuration file that you have to create is <code>.htmlhintrc</code> and it looks something like this:</p>

<p>```json
{</p>

<pre><code>"tagname-lowercase": true,
"attr-lowercase": true,
"tag-pair": true,
"doctype-first": true,
"tag-self-close": true,
"attr-no-duplication": true,
"attr-value-double-quotes": true,
"attr-value-not-empty": false,
"title-require": true,
"id-unique": true,
"inline-style-disabled": true, 
"inline-script-disabled": true,
"doctype-html5": true,
"alt-require": false
</code></pre>

<p>}
```</p>

<p>You can find the rules that you can specify in <a href="https://github.com/yaniswang/HTMLHint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s the HTMLHint cli-tool in action:</p>

<p><img src="/images/posts/devtools_linters/htmlhint-cli.png" alt="htmlhint-cli" /></p>

<p>And here&rsquo;s the file that I checked:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Document&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div&gt;
    &lt;p id="boom"&gt;&lt;/p&gt;
    &lt;span id="boom"&gt;&lt;/span&gt;
    &lt;STRONG&gt;&lt;/STRONG&gt;
    &lt;strong&gt;&lt;/strong&gt;
    &lt;span&gt;
    &lt;i data href=fldsfl BOOM="bam!" style="color:red;"&gt;&lt;b&gt;dds&lt;/b&gt;&lt;/i&gt;
    &lt;div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>For CSSLint it&rsquo;s <code>.csslintrc</code> and it looks like this:</p>

<p><code>json
{
  "adjoining-classes": false,
  "box-sizing": false,
  "box-model": false,
  "compatible-vendor-prefixes": false,
  "floats": false,
  "font-sizes": false,
  "gradients": false,
  "important": false,
  "known-properties": false,
  "outline-none": false,
  "qualified-headings": false,
  "regex-selectors": false,
  "shorthand": false,
  "text-indent": false,
  "unique-headings": false,
  "universal-selector": false,
  "unqualified-attributes": false
}
</code></p>

<p>Note that I&rsquo;ve pick up that configuration straight from <a href="https://github.com/twbs/bootstrap/blob/master/less/.csslintrc">bootstrap&rsquo;s</a> <code>.csslintrc</code> file. You can find the rules for CSSLint in <a href="https://github.com/CSSLint/csslint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s CSSLint&rsquo;s cli-tool in action:</p>

<p><img src="/images/posts/devtools_linters/csslint-cli.png" alt="csslint-cli" /></p>

<p>Here&rsquo;s the stylesheet that was checked:</p>

<p>```css
body {</p>

<pre><code>font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
padding: 0;
margin: 0;
height: 100%;
width: 100%;
</code></pre>

<p>}</p>

<h1>settings-button {</h1>

<pre><code>float: right;
margin-top: 20px;
margin-right: 20px;
</code></pre>

<p>}</p>

<p>h1 {</p>

<pre><code>padding-left: 40px;
display: inline-block;
</code></pre>

<p>}</p>

<h1>message {</h1>

<pre><code>padding: 20px 40px;
background: #64CF49;
</code></pre>

<p>}</p>

<h1>sidebar {</h1>

<pre><code>width: 20%;
float: left;
background-color: #67B6DA;
position: fixed;
height: 100%;
</code></pre>

<p>}</p>

<h1>items-container {</h1>

<pre><code>width: 80%;
float: left;
position: relative;
margin-left: 20%;
background-color: #F7F7F7;
</code></pre>

<p>}</p>

<p>ul li {</p>

<pre><code>list-style: none;
</code></pre>

<p>}</p>

<h1>sidebar h3 {</h1>

<pre><code>border-bottom: 3px solid;
padding: 0;
padding-left: 30px;
</code></pre>

<p>}</p>

<h1>types li {</h1>

<pre><code>padding: 10px 30px;
</code></pre>

<p>}</p>

<p>ul#types {</p>

<pre><code>padding: 0;
font-size: 15px;
</code></pre>

<p>}</p>

<h1>types li a {</h1>

<pre><code>text-decoration: none;
color: #575757;
</code></pre>

<p>}</p>

<h1>items {</h1>

<pre><code>padding: 0 20px;
</code></pre>

<p>}</p>

<h1>items li a {</h1>

<pre><code>text-decoration: none;
color: #3A3A3A;
display: inline-block;
</code></pre>

<p>}</p>

<h1>items li {</h1>

<pre><code>padding: 20px;
</code></pre>

<p>}</p>

<h1>items li:hover {</h1>

<pre><code>background-color: #DFDFDF;
</code></pre>

<p>}</p>

<p>.item-info {</p>

<pre><code>display: inline-block;
width: 100%;
font-size: 15px;
color: #8A8A8A;
margin-top: 5px;
</code></pre>

<p>}
```</p>

<p>Lastly there&rsquo;s jshint. Here&rsquo;s a sample <code>.jshintrc</code> file which I&rsquo;ve taken from <a href="https://github.com/CSSLint/csslint/blob/master/.jshintrc">CSSLint</a>. CSSLint is basically written in JavaScript that&rsquo;s why it has its own <code>.jshintrc</code> file to help the developers in checking their code.</p>

<p>```json
{</p>

<pre><code>"camelcase": true,
"curly": true,
"eqeqeq": true,
"es3": true,
"forin": true,
"immed": true,
"indent": 4,
"latedef": true,
"newcap": true,
"noarg": true,
"noempty": true,
"nonbsp": true,
"quotmark": "double",
"strict": true,
"undef": true,
"unused": true
</code></pre>

<p>}
```</p>

<p>You can find a list of options <a href="http://jshint.com/docs/options/">here</a>.</p>

<p>And here is JSHint&rsquo;s cli tool in action:</p>

<p><img src="/images/posts/devtools_linters/jshint-cli.png" alt="jshint-cli" /></p>

<p>With this script file being checked:</p>

<p>```javascript
&ldquo;use strict&rdquo;;
x = &ldquo;y&rdquo;;
console.log(x);</p>

<p>function beam(){</p>

<pre><code>return x + u;
</code></pre>

<p>}
```</p>

<h3>Build Tool Integration</h3>

<p>Ok so we have a slight improvement over just copying and pasting the code that we want to check in the HTMLHint, CSSLint, and JSHint website. But wouldn&rsquo;t it be great if we don&rsquo;t need to execute the command every time we need to check? And in real-world projects you would most likely have multiple css, JavaScript and HTML files. So executing the commands for each of those files would be too troublesome and time-consuming. That is where build tools comes in. Luckily I&rsquo;ve already done an article specifically about <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">build tools</a> so if you&rsquo;re new to it then be sure to check that out. Then you can go back to this article once you have an idea how to use a build tool.</p>

<p>Ok so you&rsquo;re back. Hopefully you&rsquo;ve learned all about Grunt and Gulp. In this article we&rsquo;ll be using Gulp and the Gulp plugins for HTMLHint, CSSLint and JSHint. You can install those with the following command:</p>

<p><code>
npm install gulp gulp-htmlhint gulp-csslint gulp-jshint
</code></p>

<p>Optionally you can also install the formatters to make the reports more beautiful.</p>

<p><code>
npm install htmlhint-stylish jshint-stylish
</code></p>

<p>Note that there&rsquo;s also a package called <a href="https://www.npmjs.com/package/csslint-stylish">csslint-stylish</a> but it currently doesn&rsquo;t work with Gulp. If you&rsquo;re reading this article at a later time be sure to check out that page and see if it already works for Gulp.</p>

<p>The next step is to create a <code>gulpfile.js</code> file in the root of your project directory and then add the following code:</p>

<p>```javascript
var gulp   = require(&lsquo;gulp&rsquo;);</p>

<p>var htmlhint = require(&ldquo;gulp-htmlhint&rdquo;);
var csslint = require(&lsquo;gulp-csslint&rsquo;);
var jshint = require(&lsquo;gulp-jshint&rsquo;);</p>

<p>gulp.task(&lsquo;lint_html&rsquo;, function(){</p>

<pre><code>gulp.src("*.html")
    .pipe(htmlhint())
    .pipe(htmlhint.reporter("htmlhint-stylish"));
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;lint_css&rsquo;, function(){
  gulp.src(&lsquo;*.css&rsquo;)</p>

<pre><code>.pipe(csslint())
.pipe(csslint.reporter());
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;lint_js&rsquo;, function(){</p>

<pre><code>gulp.src('*.js')
    .pipe(jshint())
    .pipe(jshint.reporter("jshint-stylish"));
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;watch&rsquo;, function() {</p>

<pre><code>gulp.watch('*.html', ['lint_html']);
gulp.watch('*.css', ['lint_css']);
gulp.watch('*.js', ['lint_js']);
</code></pre>

<p>});
```</p>

<p>Like I said earlier, I won&rsquo;t go deep into this because I&rsquo;ve already written a whole article on <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">Build Tools</a>. Basically what this file does is to declare all the task that we want to perform with Gulp. We have four tasks in total, one for each linter and one for watching files in a specific directory. The only task that we need to execute is the last one:</p>

<p><code>
gulp watch
</code></p>

<p>What this does is to watch all the HTML files and then execute the HTML Linter. The same is true with the other file types. The linter for each specific file type is executed once you save a file. So if you press <code>ctrl + s</code> on your keyboard, the task is immediately executed. What you can do is you can either switch windows (<code>alt + tab</code>) or put the command line window and your text-editor side by side so you get instant feedback on your code.</p>

<h3>Text-editor Integration</h3>

<p>For the final part we&rsquo;re going to look at how to integrate the linting tools in the text-editor. I&rsquo;m a Sublime Text user so I&rsquo;ll be using it for the examples. But if you&rsquo;re using another text-editor or IDE be sure to check out if these tools are also available.</p>

<p>The first thing that you need to do is to install the SublimeLinter plugin with Sublime <a href="https://packagecontrol.io/">Package Control</a>.</p>

<p>Once installed, determine where HTMLHint, CSSLint, and JSHint are installed in your computer. In Ubuntu you can do something like:</p>

<p><code>
which htmlhint
which csslint
which jshint
</code></p>

<p>That will return the path to the executable file. For me it was <code>/home/wern/.nvm/v4.0.0/bin/csslint</code> for csslint. Note that <code>csslint</code> in that path is the executable file itself. So the path that you actually want is <code>/home/wern/.nvm/v4.0.0/bin</code>. It returned the same path for HTMLHint and JSHint for me so I only need that one path. Once you&rsquo;ve found it, go ahead and copy that path.</p>

<p>Next open Sublime Text, click on the <em>preferences</em> menu > <em>package settings</em> > <em>SublimeLinter</em> > <em>Settings &ndash; User</em>. This opens the user configuration file for SublimeLinter. Add the following into it and then save.</p>

<p><code>json
{}
</code></p>

<p>Open the file again by going through the same steps above. This time Sublime Text has already added the default configurations in there. What you need to do now is to look for the <code>paths</code> object and under your current operating system at the path to where the HTMLHint, CSSLint and JSHint executables are. Because I&rsquo;m using Ubuntu I had to put it inside <code>linux</code> object.</p>

<p>```json
&ldquo;paths&rdquo;: {</p>

<pre><code>"linux": [
    "/home/wern/.nvm/v4.0.0/bin"
],
"osx": [],
"windows": []
</code></pre>

<p>},
```</p>

<p>Once you&rsquo;re done, save the file then restart Sublime Text (close it and open again).</p>

<p>Open the Sublime Text console by pressing <code>ctrl + `</code> then look for something similar to the following:</p>

<p><code>
SublimeLinter: htmlhint activated: /home/wern/.nvm/v4.0.0/bin/htmlhint
SublimeLinter: jshint activated: /home/wern/.nvm/v4.0.0/bin/jshint
SublimeLinter: csslint activated: /home/wern/.nvm/v4.0.0/bin/csslint
</code></p>

<p>This tells you that SublimeLinter has successfully picked up the paths to where the linters are installed. If you&rsquo;re seeing that then you&rsquo;re good to go, if not then be sure to check if the path that you&rsquo;ve supplied really contains the executable code for each of those linters.</p>

<p>Here are some screenshot that shows the linters in action:</p>

<p><img src="/images/posts/devtools_linters/htmlhint-text.png" alt="htmlhint text editor" /></p>

<p><img src="/images/posts/devtools_linters/csslint-text.png" alt="csslint text editor" /></p>

<p><img src="/images/posts/devtools_linters/jshint-text.png" alt="jshint text editor" /></p>

<p>The yellow dots indicates warnings, while the red dots indicate errors. If you move your cursor over to the line where a dot is, you can see the actual message on the status bar (bottom left corner of the screen). Pretty sweet right?</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it! In this article you&rsquo;ve learned how to use some of the tools that you could use to help you with determining potential problems in your HTML, CSS and JavaScript code. You&rsquo;ve also learned how to integrate this into your workflow by making use of the command-line tool or the text-editor integration.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/yaniswang/HTMLHint/wiki">HTMLHint Wiki</a></li>
<li><a href="https://github.com/CSSLint/csslint/wiki">CSSLint Wiki</a></li>
<li><a href="https://github.com/jshint/jshint/wiki/Documentation">JSHint Wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools of Trade]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/05/tools-of-trade/"/>
    <updated>2015-12-05T07:19:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/05/tools-of-trade</id>
    <content type="html"><![CDATA[<p>Every developer has their own set of &ldquo;go to tools&rdquo; when it comes to developing applications. Such as the stack, programming tools and libraries that would make specific tasks easier to implement.
In this article I&rsquo;m going to share some of the tools and resources that I usually use in my day to day web development practice.</p>

<h3>LAMP</h3>

<p>Since I&rsquo;m running Ubuntu on my machine, I use the LAMP (Linux, Apache, MySQL, PHP) stack for all of my projects. Linux being the Operating System, Apache as the web server, MySQL for the database and PHP for the programming language.</p>

<h3>Composer</h3>

<p><a href="https://getcomposer.org/">Composer</a> is a package manager for PHP. It handles the installation of various PHP libraries which can be found at <a href="https://packagist.org/">Packagist.org</a>.</p>

<h3>Laravel</h3>

<p>For medium-sized projects (takes about 2-5 months to build), I use the <a href="http://laravel.com/">Laravel</a> framework. And for small-sized (takes about 2 days to 3 weeks to build), I use the <a href="http://lumen.laravel.com/">Lumen</a> framework which is basically a lightweight version of Laravel. I chose it because of the sheer elegance of code that can be written when using the framework. It also comes with a lot features that I need in most of my projects. Such as database migrations, seeding, routing, templating and easy integration with third-party libraries.</p>

<h3>jQuery</h3>

<p>They say jQuery is for sissies, but I don&rsquo;t really mind. As long as the tool works, it doesn&rsquo;t really matter. jQuery is basically the all in one solution for all my JavaScript needs. It makes it easy to select and manipulate the elements in the page, listen to events and make AJAX requests. I haven&rsquo;t done a web project where I didn&rsquo;t need jQuery.</p>

<h3>Sublime Text</h3>

<p>My text-editor of choice, though I admit that I&rsquo;m still using an unregistered copy. So I still see the purchase pop-up every now and then. Though I have plans to buy a license in the future. But as they say &ldquo;someday I&rsquo;ll buy a sublime text license but today isn&rsquo;t that day&rdquo;. What I liked with <a href="http://www.sublimetext.com/">Sublime Text</a> is that it makes writing code faster. You can also install plugins which integrates with other programs such as JSHint or Git.</p>

<h3>Git</h3>

<p>Most developers today are using <a href="http://git-scm.com/">Git</a>, probably because of Github. But that doesn&rsquo;t really matter. Git is an awesome software by itself, even without Github. For the uninitiated, Git is a version control software which allows you to make snapshots of your project so that you can easily revert later or share your changes to your team. Github on the other hand, is a web based Git repository hosting service with lots of other nice features. Go check it out yourself. But the key takeaway is that Github makes collaboration much easier with the set of tools that it provides.</p>

<h3>Cordova</h3>

<p>Ocassionally I get mobile app development projects. This is where <a href="https://cordova.apache.org/">Cordova</a> comes in handy. It basically makes it easier to develop apps for any of the platforms (Android, iOS, Windows, etc.) that it supports by making use of web technologies (HTML, CSS, JavaScript). Access to native device APIs are also provided by making use of plugins.</p>

<h3>Bootstrap</h3>

<p>I admit, I&rsquo;m not a designer and my CSS skills could certainly improve. Making things pretty isn&rsquo;t really my forte. That&rsquo;s why front-end frameworks such as <a href="http://getbootstrap.com/">Bootstrap</a> really helps. It keeps my mind off making things pretty so I can just concentrate on the functionality.</p>

<h3>Chrome/Chromium</h3>

<p>The main browser that I use for testing the web applications that I build. The developer tools is what really makes it shine. It&rsquo;s interface is really intuitive and easy to use. Almost every aspect of your web application can be inspected and tested by using their developer tools.</p>

<h3>Skype</h3>

<p>Since I&rsquo;m mostly working remotely, there&rsquo;s a need for exchanging messages and making calls. Skype helps me with that. It&rsquo;s also cross-platform, so I can install it no matter what machine I&rsquo;m using. Recently they also released <a href="https://web.skype.com/en/">Skype for web</a> which makes things even more easier.</p>

<h3>Bitbucket</h3>

<p><a href="https://bitbucket.org/">Bitbucket</a> is another Git repository hosting service. Well there&rsquo;s already Github, but the thing is you can only have public repositories on Github. Bitbucket on the other hand allows you to have private repositories for free. That&rsquo;s pretty much the only reason why I used Bitbucket. I need my projects to be private so I use it instead of Github.</p>

<h3>Node.js</h3>

<p>If a project calls for real-time functionality such as chat applications, nothing beats <a href="https://nodejs.org/en/">Node.js</a>. It provides an event-driven architecture and a non-blocking I/O API. This allows real-time applications to be built with ease.</p>

<h3>Socket.io</h3>

<p><a href="http://socket.io/">Socket.io</a> is a library that makes it easy to build real-time applications. It&rsquo;s often used in tandem with Node.js.</p>

<h3>Virtualbox</h3>

<p>If a project requires me to test on a different platform and browser such as Internet Explorer or Safari on Windows. I usually use <a href="https://www.virtualbox.org/">Virtualbox</a>. I guess I don&rsquo;t really have much of a choice. Other than Virtualbox, I&rsquo;m not really aware of any other software that can virtualize an OS.</p>

<h3>AWS</h3>

<p><a href="http://aws.amazon.com/">Amazon Web Services</a> as the name suggests is a collection of Web Services offered by Amazon. I only use ec2 (elastic compute cloud), s3 (simple storage service) and cloudfront (CDN) though. The cool thing about their web services is that they&rsquo;re tightly integrated with each other. Which means that you can easily use s3 within an ec2 instance without having to do much of the setup. They also provide an API which can be used to programatically upload files to their servers.</p>

<h3>DigitalOcean</h3>

<p>Recently I also started using <a href="https://www.digitalocean.com/">Digitalocean</a> for my personal projects. Mainly because its very affordable (only $5 a month for the lowest tier) and easy to resize (I can upgrade or downgrade any time).</p>

<h3>Carbon</h3>

<p>Carbon is a PHP library for working with dates.</p>

<h3>Moment</h3>

<p>Basically the Carbon equivalent for JavaScript. The nice thing is that you can use it on both the client-side and server-side (node.js).</p>

<h3>Intervention Image</h3>

<p>When there&rsquo;s a need for image processing in a PHP application, I always grab <a href="http://image.intervention.io/">intervention image</a> through Composer. Resizing, cropping, blurring, change orientation, optimizing, name it and intervention image has it. But what hit the jackpot is that it works nicely with Laravel without having to do much setup.</p>

<h3>Twig</h3>

<p>Blade is the default templating engine used by Laravel so I use that without having second thoughts. But whenever I work outside Laravel, I have to use something like <a href="http://twig.sensiolabs.org/">Twig</a> to handle my templating needs.</p>

<h3>Handlebars</h3>

<p>My templating engine of choice when I&rsquo;m using JavaScript.</p>

<h3>Mandrill</h3>

<p>Whenever I need to send out emails from an application, <a href="https://www.mandrill.com/">Mandrill</a> is the tool of choice. Its a no-brainer since Laravel makes it easy to send emails using services such as Mandrill.</p>

<h3>Faker</h3>

<p>As programmers we all love automating things. <a href="https://github.com/fzaninotto/Faker">Faker</a> does exactly that. It generates fake data for you so you don&rsquo;t have to enter it manually through the application that you&rsquo;re building.</p>

<h3>Dropzone</h3>

<p><a href="http://www.dropzonejs.com/">Dropzone</a> is my file upload libary of choice. It&rsquo;s easy to get started using it. But it also makes it easy for developers to customize.</p>

<h3>Stripe</h3>

<p>Whenever a project needs to accept payments from its users, <a href="https://stripe.com/">Stripe</a> is my service of choice. I&rsquo;m not really confident enough that I&rsquo;d be able to implement a payment system which is safe from every hacker. Just the thought of saving the hash of credit card numbers on a database sends shivers to my spine. Stripe takes that fear away. I know the guys at Stripe know their stuff.</p>

<h3>Paypal</h3>

<p>For simple payment needs, <a href="https://www.paypal.com/">Paypal</a> is the tool. And BTW, this is also how I receive payments. It integrates with almost every bank on the planet so you can easily withdraw your money using your bank of choice.</p>

<h3>Twilio</h3>

<p>Whenever there&rsquo;s a need for voice enabled apps or SMS verification, nothing beats <a href="https://www.twilio.com/">Twilio</a>.</p>

<h3>Guzzle</h3>

<p>&ldquo;No man is an island&rdquo;, the same is true with web applications. More often than not, you&rsquo;ll find the need to integrate with third party services. That&rsquo;s where <a href="http://docs.guzzlephp.org/en/latest/">Guzzle</a> comes in, it&rsquo;s a PHP library for making http requests. If the API that you&rsquo;re working on doesn&rsquo;t already come with a library for making requests, then Guzzle is for you.</p>

<h3>thujohn/pdf-l4</h3>

<p>For applications that require printing of reports. <a href="https://github.com/thujohn/pdf-l4">Thujohn&rsquo;s pdf-l4</a> library does it.</p>

<h3>Datatables</h3>

<p>If an application requires searching or paginating through a table of data, <a href="https://www.datatables.net/">datatables</a> does the trick. What&rsquo;s great is that there&rsquo;s also a <a href="https://github.com/Chumper/Datatable">datatable</a> library for Laravel 4 which makes it easy to integrate to a Laravel project.</p>

<h3>Beanstalk</h3>

<p><a href="http://kr.github.io/beanstalkd/">Beanstalk</a> is a queue system. You basically use it for running time-consuming tasks such as sending out emails or processing images. There&rsquo;s also a library called <a href="https://github.com/pda/pheanstalk">Pheanstalk</a> which makes it easy to work with Beanstalk for queueing tasks.</p>

<h3>Elasticsearch</h3>

<p>I use <a href="https://www.elastic.co/">Elasticsearch</a> if there&rsquo;s a need for fast searches. Elasticsearch if a full-text search server that is based on <a href="https://lucene.apache.org/core/">Apache Lucene</a>. It works with</p>

<h3>schickling/laravel-backup</h3>

<p>Any decent developer would implement a database backup and restore functionality for each of the applications that they build. For Laravel developers, the <a href="https://github.com/schickling/laravel-backup">laravel-backup</a> library is one choice. It allows you to easily backup your database on a folder in the server or in an Amazon s3 bucket.</p>

<h3>Cron</h3>

<p>We all know Cron. It&rsquo;s the thing that we use whenever we need to execute something at specific intervals.</p>

<h3>Express</h3>

<p>Express is a framework for Node.js. From their website itself: &ldquo;Express: Fast, unopinionated, minimalist web framework for Node.js&rdquo;. It handles routing and serving of static files. That&rsquo;s all it really does but you can easily install third-party libraries for talking to the database or handling views and you wouldn&rsquo;t have any problem. Its unopinionated so you can do whatever the fuck you want and it won&rsquo;t complain.</p>

<h3>Picnic CSS</h3>

<p>Recently for some of my personal projects, I used <a href="http://www.picnicss.com/">picnic css</a>. Think of it as a lightweight bootstrap. It makes your UI beautiful without all the cruft that usually comes with bootstrap. It&rsquo;s also modularized into a set of plugins. So you can just include the plugins that you need.</p>

<h3>Conclusion</h3>

<p>In this article you&rsquo;ve learned about some of the tools that I usually use in my projects. What about you? What are your &ldquo;go to&rdquo; tools when it comes to developing applications?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My OSX Development Environment]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment/"/>
    <updated>2015-08-09T20:32:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/09/my-osx-development-environment</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had my fair share of <a href="/blog/2013/07/13/my-linux-development-environment/">Windows</a> and <a href="/blog/2013/05/19/my-windows-development-environment/">Linux</a> development. This time I&rsquo;d like to share with you the development tools I use in my OSX machine.</p>

<h3>Homebrew</h3>

<p>A must have for every Mac Developer, the missing package manager for OS X. If you came from Ubuntu, this is basically the same as <code>apt-get</code>. You can install it using ruby. Ruby already comes pre-installed in mac so you can execute the following command directly.</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>Once that&rsquo;s done you can now install every developer that you can think of by using <code>brew install</code>. Packages in Homebrew are called formulas, you can find them on <a href="http://brewformulas.org/">homebrewformulas.org</a> or in the <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">Homebrew repository at Github</a>.</p>

<h3>MAMP</h3>

<p>MAMP is the equivalent of the LAMP stack on Mac. It basically stands for Mac Apache MySQL PHP. You can install it by downloading the installer from the <a href="https://www.mamp.info/en/downloads/">MAMP downloads page</a>. These days I only use A of MAMP for testing scripts. Since I usually develop PHP applications using the Laravel framework which can already serve your project while you&rsquo;re developing. This basically takes care of the A and P part of MAMP.</p>

<h3>Sublime Text</h3>

<p>I&rsquo;m not a big fan of IDE&rsquo;s (Integrated Development Environment) so I use a plain old text editor when writing code. My text editor of choice is still Sublime Text mainly due to how its simplicity and good performance. It just allows me to code without having to think too much about how I can use the different bells and whistles. You can download the installer from the <a href="http://www.sublimetext.com/2">downloads page</a>.</p>

<h3>Node</h3>

<p>Node has become quite the dependency for every thing. Development tools such as Gulp and Sass requires Node.js to be installed. Well not exactly Node.js but NPM. But why would you want to install Node without NPM? They&rsquo;re like inseparable twin brothers. So better install Node which already comes with NPM since sooner or later you would also need Node anyway. You can install Node by using the Node Version Manager (NVM). You can download it by using curl and then piping it to the shell:</p>

<p><code>
curl https://raw.github.com/creationix/nvm/master/install.sh | sh
</code></p>

<p>Once that&rsquo;s done, you can list the node versions that are currently available.</p>

<p><code>
nvm ls-remote
</code></p>

<p>From there you can install the version that you want.</p>

<p><code>
nvm install v0.12.7
</code></p>

<p>And then finally set it as default.</p>

<p><code>
nvm alias default v0.12.7
nvm use default
</code></p>

<h3>Git</h3>

<p>Git is my version control system of choice. You can install it via homebrew.</p>

<p><code>
brew install git
</code></p>

<p>Don&rsquo;t forget to set your global config after installing:</p>

<p><code>
git config --global user.name "Wern Ancheta"
git config --global user.email "myemail@gmail.com"
</code></p>

<p>You can also set the credential helper to use osxkeychain. This allows you to cache your password so that you don&rsquo;t need to enter it every time you push to the server.</p>

<p><code>
git config --global credential.helper osxkeychain
</code></p>

<h3>Xcode</h3>

<p>I needed Xcode to compile and build the Cordova app that I was developing. Xcode comes with an iOS simulator which is great for testing Cordova apps to be deployed on an iOS device. You can install it using the following command:</p>

<p><code>
xcode-select --install
</code></p>

<p>If you don&rsquo;t want to deal with the command-line, you can simply get it from <a href="https://developer.apple.com/downloads/">the apple developer downloads page</a> and look for the most recent version of Xcode. Be warned that Xcode is 2.6GB in size so it might take a while to download depending on your download speed.</p>

<h3>Cordova</h3>

<p>Cordova is a set of device APIs that allows mobile app developers to access native device functions such as the camera through JavaScript. You can install it by using npm. Cordova basically does all the heavy-lifting when it comes to developing Hybrid Mobile Apps.</p>

<p><code>
npm install -g cordova
</code></p>

<h3>Ionic</h3>

<p>Ionic is my Hybrid Mobile App Framework of choice. You can also install it with npm.</p>

<p><code>
npm install -g ionic
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Package Managers]]></title>
    <link href="http://wern-ancheta.com/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers/"/>
    <updated>2014-03-30T02:10:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers</id>
    <content type="html"><![CDATA[<p>In this part of the series I&rsquo;ll walk you through package managers. I believe the definition available at <a href="http://en.wikipedia.org/wiki/Package_management_system">Wikipedia</a> really gives a good overview on what package managers are:</p>

<p><blockquote><p>In software, a package management system, also called package manager, is a collection of software tools to automate the process of installing, upgrading, configuring, and removing software packages for a computer&rsquo;s operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites.</p></blockquote></p>

<p>In simple terms package managers make it easy to install and modify software. In this blog post we&rsquo;ll be walking through some of the package managers available for Linux, Mac and Windows. And also package managers for easily installing front-end dependencies like jQuery or Twitter Bootstrap.</p>

<!-- more -->


<h4>Advanced Package Tool</h4>

<p>First on the list is the Advanced Package Tool. It is the package manager used in Ubuntu and other Debian based Linux Distributions. You can use it to install new software, upgrade existing software or updating the package list index.</p>

<h5>Searching for Packages</h5>

<p>You can search for packages using the following command:</p>

<p><code>
apt-cache search package_name
</code></p>

<p>The <code>package_name</code> here doesn&rsquo;t have to be exact as the package manager itself will list out all possible matches and not exact one&rsquo;s.  So for example if you&rsquo;re trying to install filezilla:</p>

<p><img src="/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/apt-cache-searchfilezilla.png" alt="apt-cache search" /></p>

<p>An alternative for doing a search is directly addressing a specific package from the terminal. So if you want to use install <code>php</code> you simply execute the following command:</p>

<p><code>
php
</code></p>

<p>If the package which adds this specific command to your system path is not installed yet. Apt will make a suggestion on which package to install along with the command on how to install it.</p>

<h5>Installing Packages</h5>

<p>To install a package all you have to do is execute <code>sudo apt-get install</code> followed by the name of the package that you want to install:</p>

<p><code>
sudo apt-get install filezilla
</code></p>

<h5>List Package Dependencies</h5>

<p>Dependencies are the packages that needs to be installed before you can use the package that you want to install. These are installed by default so you won&rsquo;t really need to install them manually. If you want to know the dependencies of a specific package:</p>

<p><code>
apt-cache depends package_name
</code></p>

<h5>Removing Packages</h5>

<p>To remove installed packages:</p>

<p><code>
sudo apt-get remove filezilla
</code></p>

<p>If you also want to remove the configuration files for a specific package:</p>

<p><code>
sudo apt-get remove --purge package_name
</code></p>

<h5>Updating Package List</h5>

<p>To download the package lists from the repositories and updates those to get information on the most recent versions of packages and their dependencies:</p>

<p><code>
sudo apt-get update
</code></p>

<h5>Upgrading Installed Packages</h5>

<p>To upgrade all existing packages:</p>

<p><code>
sudo apt-get upgrade
</code></p>

<p>To upgrade a specific package:</p>

<p><code>
sudo apt-get upgrade package_name
</code></p>

<p>Executing the command above will list out all the available upgrades to the package. Just select <code>y</code> to confirm the installation of the upgrades when its being asked.</p>

<h5>Alternatives</h5>

<p>If you are using a Linux distribution that is not Debian based. You might want to use the following:</p>

<ul>
<li>zypper</li>
<li>yum</li>
<li>urpmi</li>
<li>rpm</li>
<li>dpkg</li>
</ul>


<p>They basically have the same idea with <code>apt</code>. And most of them even have almost the same commands in order to accomplish something. All you have to do is substitute. So for example if you have <code>yum</code> installed on your system and you want to install filezilla, you simply use the <code>yum install</code> command:</p>

<p><code>
yum install filezilla
</code></p>

<h4>Chocolatey</h4>

<p>Chocolatey is a package manager for Windows. Its pretty much the equivalent of <code>apt-get</code> in Windows.</p>

<p>To install chocolatey, open up the command line and execute the following command:</p>

<p><code>
@powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET PATH=%PATH%;%systemdrive%\chocolatey\bin
</code></p>

<p>What this does is to download the chocolatey installer and copies it into the Windows path so it can be called from anywhere.</p>

<p>Here&rsquo;s a list of all the available <a href="https://chocolatey.org/packages">chocolatey packages</a>.
As you can see, chocolatey is built with programmers in mind so there are packages for easily installing git, nodejs, ruby, python, phantomjs, vim and any other developer tool that you can think of. For your convenience, I&rsquo;ve compiled some development tools and their corresponding install command below:</p>

<p><strong>Sublime Text 2</strong></p>

<p><code>
cinst sublimetext2
</code></p>

<p><strong>Fiddler</strong></p>

<p><code>
cinst fiddler
</code></p>

<p><strong>Node JS</strong></p>

<p><code>
cinst nodejs
</code></p>

<p><strong>Console2</strong></p>

<p><code>
cinst Console2
</code></p>

<p><strong>Putty</strong></p>

<p><code>
cinst putty
</code></p>

<p><strong>Git</strong></p>

<p><code>
cinst git.install
</code></p>

<p><strong>Ruby</strong></p>

<p><code>
cinst ruby
</code></p>

<p><strong>Python</strong></p>

<p><code>
cinst python
</code></p>

<p><strong>Vim</strong></p>

<p><code>
cinst vim
</code></p>

<p><strong>Mercurial</strong></p>

<p><code>
cinst hg
</code></p>

<p><strong>Curl</strong></p>

<p><code>
cinst curl
</code></p>

<p><strong>Wget</strong></p>

<p><code>
cinst Wget
</code></p>

<p><strong>Yeoman</strong></p>

<p><code>
cinst Yeoman
</code></p>

<p><strong>Easy Install</strong></p>

<p><code>
cinst easy.install
</code></p>

<p><strong>Cygwin</strong></p>

<p><code>
cinst Cygwin
</code></p>

<p><strong>Expresso</strong></p>

<p><code>
cinst expresso
</code></p>

<p><strong>Vagrant</strong></p>

<p><code>
cinst vagrant
</code></p>

<p><strong>MySQL</strong></p>

<p><code>
cinst mysql
</code></p>

<p><strong>PHP</strong></p>

<p><code>
cinst php
</code></p>

<p><strong>Everything</strong></p>

<p><code>
cinst Everything
</code></p>

<h4>Homebrew</h4>

<p>Homebrew is a package manager for Mac OS. You can install it by executing the following command from the terminal:</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></p>

<p>Note that the command above uses ruby. Ruby is already pre-installed on Mac OS so you can just execute it without installing Ruby.</p>

<p>Once homebrew is installed you can then start installing packages by using the <code>brew</code> command. So for example if you want to install git:</p>

<p><code>
brew install git
</code></p>

<p>Here&rsquo;s a <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">list of homebrew packages</a> that you can install. Note that you will have to omit the <code>.rb</code> extension. So when installing the <code>wget.rb</code> package you only have to execute the following command:</p>

<p><code>
brew install wget
</code></p>

<h4>NPM</h4>

<p>NPM is the package manager that comes with Node. Its commonly used for installing JavaScript tools that runs on the command line such as Grunt, Bower and Yeoman. Or JavaScript libraries or frameworks that you can use on your project such as Express, Underscore and Socket.IO.</p>

<h5>Installing Node</h5>

<p>Like I said earlier NPM comes with Node so you have to install Node before you can use NPM.
The first choice for installing Node would be to <a href="http://nodejs.org/download/">download the installer</a> that was built for the operating system that you&rsquo;re using. If that doesn&rsquo;t work you can try any of the methods below:</p>

<p>In Linux you can install Node from the terminal by executing the following commands:</p>

<p><code>
sudo apt-get install python-software-properties python g++ make
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
</code></p>

<p>For Windows, you can install <a href="https://chocolatey.org/">chocolatey</a> then install Node by executing the following command:</p>

<p><code>
cinst nodejs
</code></p>

<p>For Mac OS, you install <a href="http://brew.sh/">homebrew</a> then install Node by executing the following command:</p>

<p><code>
brew install node
</code></p>

<p>If all else fails, be sure to do a google search on each error that pops out and follow through any solution that you might find.</p>

<h5>Installing NVM</h5>

<p>Another option would be to install Node using NVM (Node Version Manager). A bash script that allows you to install and manage multiple versions of Node. Note that the following method requires Git to be installed, so if you don&rsquo;t have it already installed on your machine you can download the available installers from the <a href="http://git-scm.com/downloads">Git Download Page</a>. After downloading check out the <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">guide on how to install git</a>.</p>

<p>Going back to installing nvm. You can do that by executing the following command:</p>

<p><code>
curl https://raw.github.com/creationix/nvm/master/install.sh | sh
</code></p>

<p>The command above copies nvm binaries into your system path so you can just call <code>nvm</code> from any directory after the installation is done.</p>

<p>You can install any version of Node by using the <code>nvm install</code> command:</p>

<p><code>
nvm install 0.10
</code></p>

<p>Once the installation is done you can then tell nvm to use the specific version that you installed:</p>

<p><code>
nvm use 0.10
</code></p>

<h5>Using NPM</h5>

<p><strong>Installing Packages Locally</strong></p>

<p>Once that&rsquo;s done you can now install packages via npm by using the following command:</p>

<p><code>
npm install package_name
</code></p>

<p>This installs the package under the <code>node_modules</code> folder in your working directory.</p>

<p>You can install packages using the above method but the preferred method is to create a <code>package.json</code> file in which you specify all the dependencies of your current project. This allows you to easily install and manage the dependencies of your project using only the <code>npm install</code> command. Here&rsquo;s an example <code>package.json</code> file which depends on <code>express</code> and <code>jade</code>:</p>

<p>```
{</p>

<pre><code>"name": "super-awesome-app",
"version": "0.0.1",
"private": true,
"dependencies": {
  "express": "&gt;=3.0.0",
  "jade": "&gt;=1.1.5"
}
</code></pre>

<p>}
```</p>

<p>Breaking it down:</p>

<ul>
<li><code>name</code> &ndash; the name of your app, note that this should be a machine friendly name.</li>
<li><code>version</code> &ndash; the version of your app</li>
<li><code>private</code> &ndash; supplying a value of <code>true</code> tells npm that your app is private, therefore it shouldn&rsquo;t be listed in the npm registry.</li>
<li><code>dependencies</code> &ndash; an object containing the name and version of packages in which your app depends. You can use the <a href="https://www.npmjs.org/">npm website</a> to search for packages that you can install.</li>
</ul>


<p>Once you have a valid <code>package.json</code> in the root of your project directory. You can just execute <code>npm install</code> from the root of your project directory. This will install all your dependencies under the <code>node_modules</code> folder:</p>

<p><img src="/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/node-modules.png" alt="node modules" /></p>

<p>The packages will be installed in their own folders. There&rsquo;s also the <code>.bin</code> folder where the executable file for each packages can be called.</p>

<p><strong>Installing Packages Globally</strong></p>

<p>If you want to install a specific package globally, simply add the <code>-g</code> option:</p>

<p><code>
npm install -g package_name
</code></p>

<p>This will install the package under the <code>/usr/local/lib/node_modules</code> directory or the <code>node_modules</code> directory of wherever node is installed.</p>

<p><strong>Searching for Packages</strong></p>

<p>You can also search for packages using the <code>npm search</code>:</p>

<p><code>
npm search grunt
</code></p>

<p>This might take a while the first time you execute it since it will be downloading an index of all the packages that are available in the npm repository. But if you&rsquo;re on Google Fiber there&rsquo;s no problem.</p>

<p><strong>Uninstalling Packages</strong></p>

<p>You can uninstall packages using the <code>uninstall</code> command:</p>

<p><code>
npm uninstall moment
</code></p>

<p>Be sure to add the <code>-g</code> option if you installed the package globally:</p>

<p><code>
npm uninstall grunt -g
</code></p>

<h4>Bower</h4>

<p>Bower is the package manager for front-end dependencies of your app. Its specifically useful for easily installing libraries such as jQuery or Twitter Bootstrap. It is loader agnostic, which means that you can use any module loader such as AMD or CommonJS.</p>

<p>Bower is available from npm so you can install it via nvm:</p>

<p><code>
npm install -g bower
</code></p>

<p>A global install is recommended for bower so that you can use it from any project.</p>

<h5>Installing Packages</h5>

<p>Once bower is installed you can then start installing packages in your working directory by using the <code>bower install</code> command:</p>

<p><code>
bower install package_name
</code></p>

<p>The command above will install the latest version by default. If you want to install a specific version you do:</p>

<p><code>
bower install package_name#version_number
</code></p>

<p>If you&rsquo;re not sure about the name of a specific package that you&rsquo;re trying to install you can visit the <a href="http://bower.io/search/">bower website</a> and search for it.</p>

<p>The command above will install the package under the <code>bower_components</code> folder by default. But if you want it to install somewhere else you can do so by creating a <code>.bowerrc</code> file. So for example if you want bower to install your apps dependencies under the <code>libraries</code> folder:</p>

<p><code>
{
  "directory": "libraries"
}
</code></p>

<p>Again there&rsquo;s more than one way to go with things. With bower you can also install your apps dependencies by creating a <code>bower.json</code> file where you will specify its dependencies. Note that this is very similar to that of the <code>package.json</code> file that we used earlier with npm, the only difference is that were requiring front-end dependencies:</p>

<p>```
{
  &ldquo;name&rdquo;: &ldquo;my-super-awesome-app&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"bootstrap": "~3.1.1",
"moment": "~2.0.0",
"jquery": "~1.10.2"
</code></pre>

<p>  },
  &ldquo;private&rdquo;: true
}
```</p>

<h5>Listing Installed Packages</h5>

<p>You can also list out packages that are currently installed by using the <code>list</code> command:</p>

<p><code>
bower list
</code></p>

<p>This will list out all the packages and their dependencies:</p>

<p><img src="/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/bower-packages.png" alt="bower list" /></p>

<p>Inspecting the screenshot above you can see that bootstrap depends on jquery.
And sure enough when we open up the <code>bower.json</code> file inside the <code>bootstrap</code> directory we can see that <code>jquery</code> is listed under the <code>dependencies</code>:</p>

<p>```
{
  &ldquo;name&rdquo;: &ldquo;bootstrap&rdquo;,
  &ldquo;version&rdquo;: &ldquo;3.1.1&rdquo;,
  &ldquo;main&rdquo;: [</p>

<pre><code>"./dist/css/bootstrap.css",
"./dist/js/bootstrap.js",
"./dist/fonts/glyphicons-halflings-regular.eot",
"./dist/fonts/glyphicons-halflings-regular.svg",
"./dist/fonts/glyphicons-halflings-regular.ttf",
"./dist/fonts/glyphicons-halflings-regular.woff"
</code></pre>

<p>  ],
  &ldquo;ignore&rdquo;: [</p>

<pre><code>"**/.*",
"_config.yml",
"CNAME",
"composer.json",
"CONTRIBUTING.md",
"docs",
"js/tests"
</code></pre>

<p>  ],
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"jquery": "&gt;= 1.9.0"
</code></pre>

<p>  }
}
```</p>

<p>Bower automatically installs the dependencies of each of your dependencies. Pretty neat!
Since we have specified <code>jquery</code> as a dependency under the <code>bower.json</code> file of our project bower already knows that it should install that version of jquery (<code>1.10.2</code>) instead of the one specified under the <code>bower.json</code> file under the <code>bootstrap</code> directory.</p>

<h5>Updating Packages</h5>

<p>You can also update installed packages using the <code>update</code> command. Be sure to update the <code>bower.json</code> file to use a later version of your apps dependencies and then execute the following command:</p>

<p><code>
bower update
</code></p>

<p>This will update all the installed packages in your project directory. You can also update specific packages by specifying the package name:</p>

<p><code>
bower update bootstrap
</code></p>

<h5>Uninstalling Packages</h5>

<p>You can also uninstall packages by using the <code>uninstall</code> command. This can take one or more packages. In the example below were uninstalling both <code>bootstrap</code> and <code>moment</code>:</p>

<p><code>
bower uninstall bootstrap moment
</code></p>

<h4>Jam</h4>

<p>Another front-end dependency package manager is Jam. What&rsquo;s nice about Jam is that it was built with asynchronous module loading in mind. It uses AMD (Asynchronous Module Definition) for loading up the dependencies of your app asynchronously.</p>

<p>Just like Bower you can install Jam using npm:</p>

<p><code>
npm install -g jam
</code></p>

<p><strong>Installing Packages</strong></p>

<p>You can install packages using the <code>install</code> command followed by the name of the package that you want to install:</p>

<p><code>
jam install jquery
</code></p>

<p>This will install your dependencies on the <code>jam</code> directory. Notice that a <code>require.config.js</code> and <code>require.js</code> file is also created. This is because Jam uses <a href="http://requirejs.org/">requireJS</a> to asynchronously load your dependencies. This means that you can load your dependencies by requiring them instead of using script tags and specifying the source.</p>

<p>The <code>require.js</code> file created by Jam is customized based on the packages that you have installed on your project directory. You&rsquo;ll have to include it first before trying to require your dependencies:</p>

<p>```</p>

<script src="jam/require.js"></script>




<script>
  require(['jquery'], function ($) {
    $('body').text('Zup world!');
  });
</script>


<p>```</p>

<p>Do note that installing a package using the method above isn&rsquo;t recommended since you will most likely have to install other packages as your project grows. The recommended method is creating a <code>package.json</code> file where you specify all your apps dependencies:</p>

<p>```
{
  &ldquo;jam&rdquo;: {</p>

<pre><code>"packageDir": "public/vendor",
"baseUrl": "public",
"dependencies": {
    "bootstrap" : "~2.3.2",
    "jquery" : "~2.0.0",
    "moment" : "~1.7.2",
    "underscore" : "~1.3.3"
}
</code></pre>

<p>  }
}
```</p>

<p>The <code>packageDir</code> is where packages are installed.
The <code>baseUrl</code> is the directory in which to make relative package paths from.
The <code>dependencies</code> is where you specify the name and version of a package to install.
Once you&rsquo;re ready to install just execute the <code>jam install</code> command in the root of your project directory.</p>

<p>If at a later time you decide to add another dependency you can just add it to the <code>package.json</code> file. In the example below were adding <code>knockout</code> version <code>2.2.0</code> as a dependency:</p>

<p>```
{
  &ldquo;jam&rdquo;: {</p>

<pre><code>"packageDir": "public/vendor",
"baseUrl": "public",
"dependencies": {
    "bootstrap" : "~2.3.2",
    "jquery" : "~2.0.0",
    "moment" : "~1.7.2",
"underscore" : "~1.3.3",
    "knockout" : "~2.2.0"
}
</code></pre>

<p>  }
}
```</p>

<p>Once you&rsquo;ve added the new dependency simply execute the <code>jam install</code> command again. Jam will also update the <code>require.js</code> and <code>require.config.js</code> file to include your new dependency.</p>

<p><strong>Require.js File</strong></p>

<p>Inspecting the <code>require.js</code> file we can see that the following code has been added near the bottom of the file:</p>

<p>```
var jam = {</p>

<pre><code>"packages": [
    {
        "name": "jquery",
        "location": "jam/jquery",
        "main": "dist/jquery.js"
    }
],
"version": "0.2.17",
"shim": {}
</code></pre>

<p>};</p>

<p>if (typeof require !== &ldquo;undefined&rdquo; &amp;&amp; require.config) {</p>

<pre><code>require.config({
"packages": [
    {
        "name": "jquery",
        "location": "jam/jquery",
        "main": "dist/jquery.js"
    }
],
"shim": {}
</code></pre>

<p>});
}
else {</p>

<pre><code>var require = {
"packages": [
    {
        "name": "jquery",
        "location": "jam/jquery",
        "main": "dist/jquery.js"
    }
],
"shim": {}
</code></pre>

<p>};
}</p>

<p>if (typeof exports !== &ldquo;undefined&rdquo; &amp;&amp; typeof module !== &ldquo;undefined&rdquo;) {</p>

<pre><code>module.exports = jam;
</code></pre>

<p>}
```</p>

<p>As you can see it contains the name, location and the main file of the packages that you installed. So that when you require them later on on your script it knows exactly where to find them and which file to load. If you&rsquo;re new to the concept of module loading be sure to check out the following resources:</p>

<ul>
<li><a href="http://www.sitepoint.com/understanding-requirejs-for-effective-javascript-module-loading/">Understanding RequireJS for Effective Module Loading</a></li>
<li><a href="http://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a></li>
</ul>


<p><strong>Searching for Packages</strong></p>

<p>You can search for jam packages using the <code>search</code> command:</p>

<p><code>
jam search package_name
</code></p>

<p>You can also use the <a href="http://jamjs.org/packages/#/">jam packages page</a> to look for packages to install.</p>

<p><strong>Uninstalling Packages</strong></p>

<p>You can uninstall packages by executing the following command:</p>

<p><code>
jam remove jquery
</code></p>

<p>This will also update the <code>require.config.js</code> and <code>require.js</code> file. Note that this won&rsquo;t update your <code>package.json</code> file so you have to remove the specific dependency in that file as well if you don&rsquo;t want it to get installed when you execute the <code>jam install</code> command later on. Also note that if the specific package that you are trying to remove is a dependency of another package jam won&rsquo;t remove it. Here&rsquo;s an example of removing a package in which another package is dependent on:</p>

<p><img src="/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/remove-error.png" alt="jam remove error" /></p>

<p><strong>Compiling Scripts</strong></p>

<p>Jam also allows you to compile your script and its dependencies using the <code>compile</code> command:</p>

<p><code>
jam compile -i script -o main
</code></p>

<p>Breaking the command down, we used the <code>-i</code> option to specify the input file. The input file is basically the main JavaScript file used by our app. Here&rsquo;s an example:</p>

<p>```
require([&lsquo;jquery&rsquo;], function ($) {</p>

<pre><code>$('body').text('zup world!');
</code></pre>

<p>});
```</p>

<p>The <code>-o</code> is where we specify the output. By default jam saves the output file on the directory where the <code>compile</code> command is called.</p>

<p>The <code>compile</code> command assumes that you have a <code>package.json</code> file where you specified the <code>baseUrl</code>. In the <code>package.json</code> file that we used earlier the <code>baseUrl</code> is set to <code>public</code>. This means that jam will look into the <code>public</code> directory for the <code>script.js</code> file. Note that we didn&rsquo;t have to specify the extension (<code>.js</code>) in the example since jam already assumes that the extension is <code>.js</code>.</p>

<h4>Browserify</h4>

<p>Unlike npm, bower or jam browserify is not really considered a full-fledged package manager since it doesn&rsquo;t allow you to install or manage packages. However it allows you to write node.js-style modules in the front-end.</p>

<p>Browserify is also preffered to be installed globally since you can use it on multiple projects:</p>

<p><code>
npm install -g browserify
</code></p>

<p>Once you&rsquo;re done installing you can then install the packages in which your app depends on:</p>

<p><code>
npm install jquery
</code></p>

<p>Then you can use the package that you just installed by requiring it into your main JavaScript file (<code>js/main.js</code>):</p>

<p>```
var $ = require(&lsquo;jquery&rsquo;);
$(function(){</p>

<pre><code>$('body').text('zup world from browserify!');
</code></pre>

<p>});
```</p>

<p>Note that you won&rsquo;t be able to run this on the browser just yet. You first have to compile it using browserify. Execute the following command on the root of your apps directory:</p>

<p><code>
browserify js/main.js -o dist/js/main.js
</code></p>

<p>The command above assumes that you have your main JavaScript file inside the <code>js</code> directory which is under the root directory of your app. The <code>-o</code> option allows you to specify the output file. In this case the output file is under <code>dist/js/main.js</code>. This will be the file that you&rsquo;re going to link into the page where you plan to run the script (<code>index.html</code>):</p>

<p>```</p>

<script src="dist/js/main.js"></script>


<p>```</p>

<p>When you run this file in the browser you will see the following output:</p>

<p><code>
zup world from browserify!
</code></p>

<p>If you want to minify the output of browserify you can also install uglify js:</p>

<p><code>
npm install -g uglify-js
</code></p>

<p>Then pipe browserify&rsquo;s output to <code>uglify-js</code>:</p>

<p><code>
browserify js/main.js | uglify-js &gt; dist/js/main.js
</code></p>

<p>Note that in the above command we didn&rsquo;t supply the <code>-o</code> option so that browserify will simply return the output as a string. We then piped it to the <code>uglify-js</code> command and specifying the output file from there.</p>

<p>Browserify is a good alternative to RequireJS for managing the front-end dependencies of your app.</p>

<h4>Component</h4>

<p>Lastly there&rsquo;s component, a package manager that allows you to write modular commonjs components.</p>

<p>To install component:</p>

<p><code>
npm install -g component
</code></p>

<p><strong>Searching for Components</strong></p>

<p>You can then find a list of components that you can install from this <a href="https://github.com/component/component/wiki/Components">page</a>. Or use the <code>search</code> command to search for existing components that matches your query:</p>

<p><code>
component search jquery
</code></p>

<p><strong>Installing a Component</strong></p>

<p>Writing an app using component requires a <code>component.json</code> file to be created in the root of the app:</p>

<p>```
{
  &ldquo;name&rdquo;: &ldquo;component-tester&rdquo;,
  &ldquo;description&rdquo;: &ldquo;testing component&rdquo;,
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"component/datepicker": "*"
</code></pre>

<p>  },
  &ldquo;main&rdquo;: &ldquo;main.js&rdquo;,
  &ldquo;scripts&rdquo;: [</p>

<pre><code>"main.js"
</code></pre>

<p>  ]
}
```</p>

<p>The <code>component.json</code> file looks similar to the <code>package.json</code> and <code>bower.json</code> file that we&rsquo;ve seen so far. Remember that the <code>name</code> should be a machine-friendly name. There&rsquo;s also a bit difference in the name of the dependencies. The convention used by component is <code>author/component</code> in order to avoid naming collisions. In the example above we only have one dependency which is the <code>component/datepicker</code>. This allows us to add a datepicker on text fields.
We also have to specify the main JavaScript file (<code>main.js</code>). There&rsquo;s also the <code>scripts</code> where we specify the other scripts that is used by the app. In this case we only have the main JavaScript file so its the only file that we put in.</p>

<p>Once you&rsquo;re done building the <code>component.json</code> file execute the <code>install</code> command to install your dependencies:</p>

<p><code>
component install
</code></p>

<p>This will install your dependencies under the <code>components</code> directory:</p>

<p><img src="/images/posts/2014-02-25-a-whirlwind-tour-of-web-developer-tools-package-managers/components.png" alt="components directory" /></p>

<p>As you can see from the screenshot above component creates a bunch of folders under the components directory. When you open up the folders you will see that there&rsquo;s a <code>component.json</code> file in each of them. Here&rsquo;s the contents of the <code>component.json</code> file under the <code>component/aurora</code> directory:</p>

<p>```
{
  &ldquo;name&rdquo;: &ldquo;aurora&rdquo;,
  &ldquo;repo&rdquo;: &ldquo;component/aurora&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Aurora theme for Calendar, Popover, and Tip&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;keywords&rdquo;: [</p>

<pre><code>"aurora",
"theme",
"bundle"
</code></pre>

<p>  ],
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"component/aurora-popover": "*",
"component/aurora-calendar": "*"
</code></pre>

<p>  },
  &ldquo;development&rdquo;: {}
}
```</p>

<p>As you can see it also specifies its on dependency. There&rsquo;s also an additional <code>repo</code> property, this is the Github repository in which the component is hosted. To access it from the browser all you have to do is prefix it with github.com/{repo}.</p>

<p>Checking out each of the dependencies you can see that they&rsquo;re also installed on your <code>components</code> directory each with their own assets (stylesheets, scripts and images).</p>

<p>And that is the philosophy behind component. Splitting up packages into multiple distinct modules. This encourages code-reuse. This means that you will be able to easily import and add various dependencies in your app. But only those that are really needed. This means that a component can comprise of many different components that represent a single module.</p>

<p>Going back to our example. In the <code>main.js</code> file put in the following code:</p>

<p><code>
var picker = require('datepicker');
var el = document.querySelector('[name=date]');
picker(el);
</code></p>

<p>What this does is requiring the <code>datepicker</code> component that we installed earlier and transforms all the elements which has a <code>name</code> of <code>date</code> into a date picker.</p>

<p>Once you&rsquo;re done with that execute the <code>build</code> command:</p>

<p><code>
component build
</code></p>

<p>This will tell component to build the components that you installed. In simple terms this brings in all the components together in a single file. One main file for each file type. By default component saves these files into the <code>build</code> directory of your app. So the main stylesheet will be named <code>build.css</code> and the main script file will be named <code>build.js</code>. You can then use it from any page in your app:</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;component test&lt;/title&gt;
&lt;link rel="stylesheet" href="build/build.css"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;input type="text" name="date" id="birthday" placeholder="Pick a date"&gt;
&lt;script src="build/build.js"&gt;&lt;/script&gt;
&lt;script&gt;
require('component-tester');
&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>As you can see from the code above we&rsquo;re calling up what&rsquo;s in our main JavaScript file (<code>main.js</code>) by requiring it into the page:</p>

<p><code>
require('component-tester');
</code></p>

<p>The name here is basically the name that you used in your <code>component.json</code> file earlier.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this blog post we&rsquo;ve gone over some of the package managers that we can use to easily install and manage software. We&rsquo;ve also gone over some of the front-end package managers. We have barely scratch the surface in this blog post. The next step would be to find a way in which these package managers will fit into your current workflow. Or you can also look at how to automate the building of the final script so you won&rsquo;t have to manually build the dependencies together with the main script of your app.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer">Package Managers: An Introductory Guide For The Uninitiated Front-End Developer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Command Line Utilities]]></title>
    <link href="http://wern-ancheta.com/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities/"/>
    <updated>2014-03-08T14:45:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/03/08/a-whirlwind-tour-of-web-developer-tools-command-line-utilities</id>
    <content type="html"><![CDATA[<p>In this part five of the series A Whirlwind Tour of Web Developer Tools I&rsquo;ll walk you through some of the tools that you can use in the command line.  But before we dive in to some of the tools lets first define what a command line is. According to <a href="http://en.wikipedia.org/wiki/Command-line_interface">Wikipedia</a>:</p>

<p><blockquote><p>A command-line interface (CLI), also known as command-line user interface, console user interface, and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines).</p></blockquote></p>

<p>So the command line is basically an interface where you can type in a bunch of commands to interact with the computer.</p>

<!--more-->


<h3>Command Line Basics</h3>

<p>Before we jump into the tools its important that we first understand the basics of using the command line. To access the command line in Linux press <code>ctrl + alt + t</code> on your keyboard. For Mac just look for the terminal from your menu. And for Windows just press <code>window + r</code> and then type in <code>cmd</code> then press <code>enter</code>.</p>

<h4>Commonly used Commands</h4>

<p>Here are some of the commands that you&rsquo;ll commonly used on a day to day basis:</p>

<ul>
<li><strong>cd</strong> &ndash; change directory</li>
<li><strong>mkdir</strong> &ndash; create a new directory</li>
<li><strong>rmdir</strong> &ndash; delete an existing directory</li>
<li><strong>touch</strong> &ndash; create an empty file</li>
<li><strong>pushd</strong> &ndash; push directory</li>
<li><strong>popd</strong> &ndash; pop directory</li>
<li><strong>ls</strong> &ndash; list files in a specific directory</li>
<li><strong>grep</strong> &ndash; find specific text inside files</li>
<li><strong>man</strong> &ndash; read a manual page</li>
<li><strong>apropos</strong> &ndash; lists outs commands that does a specific action</li>
<li><strong>cat</strong> &ndash; print out all the contents of a file</li>
<li><strong>less</strong> &ndash; view the contents of a file (with pagination)</li>
<li><strong>sudo</strong> &ndash; execute command as super user</li>
<li><strong>chmod</strong> &ndash; modify the file permissions</li>
<li><strong>chown</strong> &ndash; change file ownership</li>
<li><strong>find</strong> &ndash; find files from a specific directory</li>
<li><strong>pwd</strong> &ndash; print working directory</li>
<li><strong>history</strong> &ndash; returns a list of the commands that you have previously executed</li>
<li><strong>tar</strong> &ndash; creates a tar archive from a list of files</li>
</ul>


<p>If you are on Windows some commands might not be available to you. The solution would be to either switch to Linux, I definitely recommend Linux Mint or Ubuntu if you&rsquo;re planning to switch. Or if you want to stick with Windows you can install <a href="http://www.cygwin.com/">Cygwin</a> or the <a href="http://unxutils.sourceforge.net/">GNU utilities</a> for Windows.</p>

<p>I won&rsquo;t go ahead and provide you with a tutorial on how to use the commands above. There&rsquo;s tons of tutorials out there so use Google to your advantage. You also have the <code>man</code> command to help you out. Here&rsquo;s how to use the <code>man</code> command:</p>

<p><code>
man cd
</code></p>

<p>This will output all the information related to the <code>cd</code> command and how to use it.
The <code>man</code> command is useful if you already know the name of the command. But in case you do not already know you also have access to the <code>apropos</code> command which lists out commands that matches a specific action. Here&rsquo;s how to use it:</p>

<p><code>
apropos delete
</code></p>

<p>Executing the command above produces an output similar to the following:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/apropos.png" alt="apropos" /></p>

<p>As you can see you can pretty much scan through the results and determine the command that you need to use based on the description provided.  So if you want to delete a file you can just call the <code>unlink</code> command.</p>

<h4>Aliases</h4>

<p>Once you&rsquo;ve gotten comfortable with the default commands you can start using shortcuts in order to make typing commands faster and easier. You can add aliases by creating a <code>.bash_aliases</code> file inside your home directory then add contents similar to the following:</p>

<p><code>
alias subl='/usr/bin/subl'
alias c='clear'
alias install='sudo apt-get install'
alias cp='cp -iv'
alias mv='mv -iv'
alias md='mkdir'
alias t='touch'
alias rm='rm -i'
alias la='ls -alh'
alias web-dir='cd ~/web_files'
alias e='exit'
alias s='sudo'
alias a='echo "------------Your aliases------------";alias'
alias ni='sudo npm install'
alias snemo='sudo nemo'
alias gi='git init'
alias ga='git add'
alias gc='git commit -m'
alias gca='git commit --amend -m'
alias gu='git push'
alias gd='git pull'
alias gs='git status'
alias gl='git log'
</code></p>

<p>As you can see from the example above to add an alias simply put <code>alias</code> followed by the alias that you want to use, then <code>=</code> and followed by the path to the executable wrapped in quotes. If you do not know the path to the executable file you can use the <code>which</code> command followed by the command that you usually use. For example for the <code>less</code> command:</p>

<p><code>
which less
</code></p>

<p>It will then output the path to the executable file:</p>

<p><code>
/usr/bin/less
</code></p>

<p>This is the path that you can add in the specific alias.</p>

<h3>Command Line Tools</h3>

<h4>Wget</h4>

<p>Useful for pulling files from a server. For example you can use this to download a specific library or asset for your project into your current working directory:</p>

<p><code>
wget http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.10/angular.min.js
</code></p>

<p>The command above will pull the file from the URL that you specified and copy it into the directory where your current terminal window is opened.</p>

<h4>Curl</h4>

<p>Curl is used for making HTTP request. I&rsquo;d like to describe it as a browser but for the command line. You can do all sorts of stuff with Curl. For example you can use it to request a specific page from the web:</p>

<p><code>
curl http://anchetawern.github.io
</code></p>

<h5>Basic HTTP Authentication</h5>

<p>If the page uses basic HTTP authentication you can also specify a user name and a password. In the example below I am using Curl to request my recently bookmarked links from the delicious API:</p>

<p><code>
curl -u username:password  https://api.del.icio.us/v1/posts/recent
</code></p>

<h5>Saving the Results to a File</h5>

<p>This will return an XML string. If you want to copy the result to a file you can simply redirect the output to a file:</p>

<p><code>
curl -u username:password  https://api.del.icio.us/v1/posts/recent &gt; recent-bookmarks.xml
</code></p>

<h5>Getting Header Information</h5>

<p>If you only want to get the header information from a specific request you can add the <code>-I</code> option:</p>

<p><code>
curl -I http://google.com
</code></p>

<p>This will output a result similar to the following:</p>

<p><code>
Location: http://www.google.com/
Content-Type: text/html; charset=UTF-8
Date: Fri, 21 Feb 2014 10:16:19 GMT
Expires: Sun, 23 Mar 2014 10:16:19 GMT
Cache-Control: public, max-age=2592000
Server: gws
Content-Length: 219
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic
</code></p>

<p>This is the same as the one that you see under the network tab in Chrome Developer Tools under the headers section.</p>

<h5>Interacting with Forms</h5>

<p>You can also perform actions on forms. So for example if you have the following form from a web page somewhere:</p>

<p>```html
<form action="form.php" method="GET"></p>

<pre><code>&lt;input type="text" name="query"&gt;
&lt;input type="submit"&gt;
</code></pre>

<p></form>
```</p>

<p>You can fill up the form and perform the action as if you&rsquo;re in a browser by simply getting the required inputs and supplying them from your command:</p>

<p><code>
curl http://localhost/tester/curl/form.php?query=dogs
</code></p>

<p>For forms which has its method set to <code>POST</code>. You can also make the request using curl. All you have to do is add a <code>--data</code> option followed by the name-value pair. With the name being the name assigned to the input and the value is the value that you want to supply:</p>

<p><code>
curl --data "query=cats" http://loca/form.php?query=cats
</code></p>

<h5>Spoofing the HTTP referrer</h5>

<p>You can also spoof the http-referrer when making a request:</p>

<p><code>
curl --referer http://somesite.com http://anothersite.com
</code></p>

<p>This reminds us that using the HTTP referrer as a means of checking whether to perform a specific action or not is really useless as it can be easily spoofed.</p>

<h5>Follow Redirects</h5>

<p>Curl also allows you to follow redirects. So for example if you&rsquo;re accessing a page which has a redirect like this:</p>

<p><code>php
&lt;?php
header('Location: anotherfile.php');
echo 'zup yo!';
?&gt;
</code></p>

<p>Simply using the following command will result in the execution of the <code>echo</code> statement below the redirect:</p>

<p><code>
curl http://localhost/tester/curl/file.php
</code></p>

<p>But if you add the <code>--location</code> option curl will follow the page that is specified in the redirect:</p>

<p><code>
curl --location http://localhost/tester/curl/file.php
</code></p>

<p>So the output of the command above will be the contents of the <code>anotherfile.php</code>.</p>

<h5>Cookies</h5>

<p>You can also supply cookie information on the requests that you make. So for example you are requesting a page which uses cookies as a means of determining if a user is logged in or not (note: you shouldn&rsquo;t use this kind of code in production):</p>

<p>```
&lt;?php
$name = $_COOKIE[&ldquo;name&rdquo;];
$db->query(&ldquo;SELECT id FROM tbl_users WHERE name = &lsquo;$name&rsquo;&rdquo;);
if($db->num_rows > 0){</p>

<pre><code>echo 'logged in!';
</code></pre>

<p>}else{</p>

<pre><code>echo 'sorry user does not exist';
</code></pre>

<p>}
?>
```</p>

<p>To request from the page above just add the <code>--cookie</code> option followed by the cookies that the page needs:</p>

<p><code>
curl --cookie "name=fred" http://localhost/tester/curl/cookie.php
</code></p>

<p>If you need to specify more than one cookie simply separate them with a semi-colon:</p>

<p><code>
curl --cookie "name=fred;age=22" http://localhost/tester/curl/cookie.php
</code></p>

<h4>jq</h4>

<p>If you normally work with web API&rsquo;s in your job, you might find the jq utility useful. What this does is formatting JSON strings, it also adds syntax highlighting so they become more readable.  To install jq all you have to do is download the <code>jq</code> file from the <a href="http://stedolan.github.io/jq/download/">downloads page</a> and then move it into your <code>bin</code> folder:</p>

<p><code>
mv ~/Downloads/jq /bin/jq
</code></p>

<p>After that you can start using jq to process JSON strings that comes from curl requests by simply piping it to the <code>jq</code> command. For example, we are making a request to the following file:</p>

<p>```php
&lt;?php
$names = array(</p>

<pre><code>array(
    'fname' =&gt; 'Gon',
    'lname' =&gt; 'Freecs',
    'nen_type' =&gt; 'enhancement',
    'abilities' =&gt; array(
        'rock', 'paper', 'scissors'
    )
), 
array(
    'fname' =&gt; 'Killua',
    'lname' =&gt; 'Zoldyc',
    'nen_type' =&gt; 'transmutation',
    'abilities' =&gt; array(
        'lightning bolt',
        'thunderbolt',
        'godspeed'
    )
),
array(
    'fname' =&gt; 'Kurapika',
    'lname' =&gt; '',
    'nen_type' =&gt; array('conjuration', 'specialization'),
    'abilities' =&gt; array(
        'holy chain',
        'dowsing chain',
        'chain jail',
        'judgement chain',
        'emperor time'
    )
),
array(
    'fname' =&gt; 'Isaac',
    'lname' =&gt; 'Netero',
    'nen_type' =&gt; 'enhancement',
    'abilities' =&gt; array(
        '100-Type Guanyin Bodhisattva',
        'First Hand',
        'Third Hand',
        'Ninety-Ninth Hand'
    )
),
array(
    'fname' =&gt; 'Neferpitou',
    'lname' =&gt; '',
    'nen_type' =&gt; 'specialization',
    'abilities' =&gt; array(
        'Terpsichora',
        'Doctor Blythe',
        'Puppeteering'
    )
)
</code></pre>

<p>);
echo json_encode($names);
```</p>

<p>Normally we would do something like this:</p>

<p><code>
curl http://localhost/tester/curl/json.php
</code></p>

<p>But this returns a result that looks like this:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/json-string.png" alt="json string" /></p>

<p>Piping the result to <code>jq</code>:</p>

<p><code>
curl http://localhost/tester/curl/json.php | jq "."
</code></p>

<p>We get a result similar to the following:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/jq.png" alt="jq formatted" /></p>

<p>Pretty sweet! But you can do much more than that, check out the <a href="http://stedolan.github.io/jq/manual/">manual page</a> for the jq project for more information.</p>

<h4>Vim</h4>

<p>Vim is a text-editor that is based on Vi, which is a text-editor that&rsquo;s pre-installed on common Linux distributions. But hey you might say that the main topic of this blog post is command-line tools why are we suddenly talking about text-editors here? Well its because Vim is tightly coupled with the terminal. It&rsquo;s like a terminal-text editor crossbreed. You can both execute commands and write code with it.</p>

<p>You can download Vim from the <a href="http://www.vim.org/download.php">Vim downloads page</a> simply select the version that&rsquo;s applicable to the operating system that you&rsquo;re currently using. But if you&rsquo;re on Linux mint, Ubuntu or other Linux distributions that uses <code>apt-get</code> then you simply execute the following command from the terminal:</p>

<p><code>
sudo apt-get install vim
</code></p>

<p>There are lots of tutorials in the web that can help you with learning vim (I&rsquo;ll link to them later). But for now I&rsquo;m going to give you a quick tutorial to get you started.</p>

<p>First thing that you need to know is how to open up files with vim. You can do it by executing the following command:</p>

<p><code>
vim file_that_you_want_to_edit.txt
</code></p>

<p>You can also open up more than one file:</p>

<p><code>
vim file1.txt file2.txt file3.txt
</code></p>

<p>You can then switch between the files while on command mode. First list out the files that are currently opened in vim:</p>

<p><code>
:ls
</code></p>

<p>This will give you an output of the list of files with an id that you can use to refer to them when switching:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/ls.png" alt="list of files" /></p>

<p>To switch to <code>file2.txt</code> you can use the <code>:b</code> command followed by its id:</p>

<p><code>
:b2
</code></p>

<p>An alternative would be to use the file name itself:</p>

<p><code>
:b file2.txt
</code></p>

<p>Or you can also just switch to the next file:</p>

<p><code>
:bn
</code></p>

<p>Or switch to the previous file:</p>

<p><code>
:bp
</code></p>

<p>Second thing that you need to know is that vim has 3 modes:</p>

<ul>
<li><strong>command</strong> &ndash; used for telling vim to do things. This is the default mode that vim is in when you open it. If you are on another mode other than the command mode you can press on <code>esc</code> to go back to the command mode.</li>
<li><strong>insert</strong> &ndash; used for inserting things on the current file that you&rsquo;re working on. This is basically the text editor mode. You can only get to this mode when you are currently on the command mode. To get to this mode press the <code>i</code> key.</li>
<li><strong>visual</strong> &ndash; used for selecting text. Just like the insert mode you can only get to this mode when you are in command mode. To get to this mode press the <code>v</code> key.</li>
</ul>


<p><strong>Basic Commands</strong></p>

<p>Here are some of the basic commands that you would commonly use when working with a file. Note that you can only type in these commands while you are in command mode.</p>

<ul>
<li><code>:w</code> &ndash; save file</li>
<li><code>:wq</code> &ndash; save file and quit</li>
<li><code>:q!</code> &ndash; quit vim without saving the changes</li>
<li><code>u</code> &ndash; undo last action</li>
<li><code>ctrl + r</code> &ndash; redo</li>
<li><code>x</code> &ndash; delete character under the cursor</li>
<li><code>dd</code> &ndash; delete current line</li>
<li><code>D</code> &ndash; delete to the end of the line. The main difference between this and the <code>dd</code> command is that the <code>dd</code> command deletes even the line breaks but the <code>D</code> command simply deletes to the end of the line leaving the line break behind.</li>
</ul>


<p><strong>Basic Navigation</strong></p>

<p>You can navigate a file while you&rsquo;re in the command mode or insert mode by pressing the arrow keys. You can also use the following keys for navigating but only when you are in command mode:</p>

<ul>
<li><code>h</code> &ndash; left</li>
<li><code>l</code> &ndash; right</li>
<li><code>j</code> &ndash; down</li>
<li><code>k</code> &ndash; up</li>
<li><code>0</code> &ndash; move to the beginning of the line</li>
<li><code>$</code> &ndash; move to the end of the line</li>
<li><code>w</code> &ndash; move forward by one word</li>
<li><code>b</code> &ndash; move backward by one word</li>
<li><code>gg</code> &ndash; move to the top of the screen</li>
<li><code>G</code> &ndash; move to the bottom of the screen</li>
<li><code>line_numberH</code> &ndash; move to a specific line number</li>
</ul>


<p><strong>Searching Text</strong></p>

<p>You can search for a specific text while you are in command mode by pressing the <code>/</code> key and entering the text that you want to search for and then press enter to execute the command. Vim will then highlight each instance of the text. You can move to the next instance by pressing the <code>n</code> key or <code>N</code> to go back to the previous instance.</p>

<p><strong>Modifying Text</strong></p>

<p>You can modify text by switching to insert mode. You can switch to insert mode by first going to command mode (<code>esc</code> key) then press the <code>i</code> key.  Once you are on insert mode you can now start typing text just like you do with a normal text editor. While inside this mode and you want to select specific text to copy press the <code>esc</code> key to go back to command mode and then press the <code>v</code> key to switch to visual mode. From the visual mode you can then start selecting the text. To copy the text switch to the command mode then press the <code>y</code> key. To paste the copied text press the <code>p</code> key. You can do the same thing when you want to cut and paste. Simply use the <code>d</code> key instead of the <code>y</code> key.</p>

<p><strong>Vim Configuration</strong></p>

<p>You can use the <code>.vimrc</code> file to configure vim settings. It doesn&rsquo;t exist by default so you have to create it under the home directory:</p>

<p><code>
touch ~/.vimrc
</code></p>

<p>Some of the most common configuration that you would want to add:</p>

<p><code>
syntax on
set number
set wrap
set tabstop=2
</code></p>

<p>Here&rsquo;s a description of what each option does:</p>

<ul>
<li><strong>syntax on</strong> &ndash; this enables syntax highlighting</li>
<li><strong>set number</strong> &ndash; this enables line numbers</li>
<li><strong>set wrap</strong> &ndash; this tells vim to word wrap visually</li>
<li><strong>set tabstop</strong> &ndash; you can use this to specify the tab size. In the example above I&rsquo;ve set it to <code>2</code> so when you press tab vim will insert 2 spaces</li>
</ul>


<p><strong>Resources for learning Vim</strong></p>

<p>Be sure to check out the resources below to learn more about Vim. Learning Vim is really a painful process since you have to memorize a whole bunch of commands and practice it like you&rsquo;re practicing how to play the piano. Learning Vim is not that easy, lots of practice is required before you can get productive with using it. You can easily get away with just using a text-editor when writing code but if you want some productivity boost then take the time to really learn Vim even if it is painful. Here are some resources for learning Vim:</p>

<ul>
<li><a href="http://www.danielmiessler.com/study/vim/">Vim Tutorial and Primer</a></li>
<li><a href="http://vim.wikia.com/wiki/Vim_Tips_Wiki">Vim Wikia Page</a></li>
<li><a href="http://vimcasts.org/">Vimcasts</a> &ndash; screencasts on Vim</li>
<li><a href="http://code.tutsplus.com/articles/25-vim-tutorials-screencasts-and-resources--net-14631">25 Vim Tutorials, Screencasts and Resources</a></li>
<li><a href="http://www.openvim.com/tutorial.html">Vim Interactive Tutorial</a></li>
<li><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Learning Vim Progressively</a></li>
<li><a href="http://www.cs.swarthmore.edu/help/vim/home.html">Vim Tips and Tricks</a></li>
<li><strong>Vimtutor</strong> &ndash; not really a website, this is the vim guide that comes with installing vim. You can access it by executing <code>vimtutor</code> from your terminal</li>
</ul>


<h4>Siege</h4>

<p>Siege is an HTTP load testing and benchmarking utility. You can mainly use this tool to stress test your web project with a bunch of requests to see how it holds up. Execute the following command to install siege:</p>

<p><code>
sudo apt-get install siege
</code></p>

<p>To use it you can execute:</p>

<p><code>
siege -b -t60S -c30 http://url-of-the-web-project-that-you-want-to-test
</code></p>

<p>The <code>-b</code> option tells siege to run the tests without delay. By default siege runs the test with a one second delay between each requests. Adding the <code>-b</code> option makes sure that the requests are made concurrently.</p>

<p>The <code>-t60S</code> option tells siege to run the tests in 60 seconds (60S). If you want to run it for 30 minutes you can do <code>30M</code>. Or <code>1H</code> for an hour.</p>

<p>The <code>-c30</code> option tells siege to have 30 concurrent connections.</p>

<p>The last part of the command is the url that you want to test. If you only want to test out one url you can directly specify it in the command. But if you want to test out more than one url then you can create a new text file with the urls that you want to test out (one url per line) and then add the <code>-f</code> option followed by the path to the text file that you created to tell siege that you want to make use of a file:</p>

<p><code>
siege -b -t60S -c30 ~/test/urls.text
</code></p>

<p>Here&rsquo;s an example usage of siege:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/siege.png" alt="siege" /></p>

<p>Interpreting the results above:</p>

<ul>
<li><strong>transactions</strong> &ndash; the total number of hits to the server.</li>
<li><strong>availability</strong> &ndash; This is the availability of your web project to users. Ideally you would want the availability to be 100%. Anything below it would mean that some users accessing your web project won&rsquo;t be able to access it because of the load.</li>
<li><strong>elapsed time</strong> &ndash; this is the time you specified in your options when you executed siege. It wouldn&rsquo;t be perfect though, as you can see from the results above we only got 59.37 seconds but we specified 60 seconds.</li>
<li><strong>data transferred</strong> &ndash; the size of transferred data for each request</li>
<li><strong>response time</strong> &ndash; the average response time for each request</li>
<li><strong>transaction rate</strong> &ndash; the number of hits to the server per second</li>
<li><strong>throughput</strong> &ndash; the average number of bytes transferred every second from the server to all the simulated users</li>
<li><strong>concurrency</strong> &ndash; the average number of simultaneous connections</li>
<li><strong>successful transactions</strong> &ndash; the number of successful transactions</li>
<li><strong>failed transactions</strong> &ndash; the number of failed transactions</li>
<li><strong>longest transaction</strong> &ndash; the total number of seconds the longest transaction took to finish</li>
<li><strong>shortest transaction</strong> &ndash; the total number of seconds the shortest transaction took to finish</li>
</ul>


<h4>Sed</h4>

<p>Sed is a tool for automatically modifying files. You can basically use this for writing scripts that does search and replace on multiple files. A common use case for developers would be for writing scripts that automatically formats source code according to a specific <a href="http://en.wikipedia.org/wiki/Coding_conventions">coding standard</a>.</p>

<p>Yes you can do this sort of task using the built-in search and replace utility on text-editors like Sublime Text. But if you want something that lets you specify a lot of options and offers a lot of flexibility then sed is the tool for the job.
Sed is pre-installed on most Linux distributions and also on Mac OS so you won&rsquo;t really have to do any installation. For windows users there&rsquo;s also <a href="http://gnuwin32.sourceforge.net/packages/sed.htm">Sed for Windows</a> which you can install.</p>

<p>Here&rsquo;s an example on how to use sed. For example you have the following file (<code>sed-test.php</code>):</p>

<p><code>php
&lt;?php
$superStars = array();
$rockStars = array();
$keyboardNinjas = array();
?&gt;
</code>
And you want to modify all variable declarations to be all in lowercase. You would do something like:</p>

<p><code>
sed 's/\$\([A-Za-z]*\([\$A-Za-z_,\s]*\)\)/$\L\1/' sed-test.php
</code></p>

<p>Sed will then output the following result in the terminal screen:</p>

<p><code>
&lt;?php
$superstars = array();
$rockstars = array();
$keyboardninjas = array();
?&gt;
</code></p>

<p>To save the changes to the same file you need to do a little bit of a trick since sed doesn&rsquo;t have the functionality to commit the changes to the input file. The trick would be to temporarily save the results to a new file (<code>sed-test.new.php</code>) and then use <code>mv</code> to rename the new file (<code>sed-test.new.php</code>) to the old file name (<code>sed-test.php</code>) :</p>

<p><code>
sed 's/\$\([A-Za-z]*\([\$A-Za-z_,\s]*\)\)/$\L\1/' sed-test.php &gt; sed-test.new.php
mv sed-test.new.php sed-test.php
</code></p>

<p>If you want to learn more about sed check out the following resources:
&ndash; <a href="http://www.grymoire.com/Unix/Sed.html">Sed &ndash; An Introduction and Tutorial</a>
&ndash; <a href="http://sed.sourceforge.net/local/docs/An_introduction_to_sed.html">Getting Started with Sed</a></p>

<p>You can also check out the following related tools:</p>

<ul>
<li><a href="http://www.tutorialspoint.com/unix_commands/tr.htm">tr</a></li>
<li><a href="http://www.grymoire.com/Unix/Awk.html">awk</a></li>
</ul>


<h4>Ruby Gems</h4>

<p>There&rsquo;s also lots of command line tools in the Ruby world. And you can have access to those tools by installing Ruby.</p>

<p>In Linux and in Mac OS you can install Ruby by using RVM (Ruby Version Manager). First make sure that all the packages are up to date by executing the following command:</p>

<p><code>
sudo apt-get update
</code></p>

<p>We will get RVM by using Curl so we also have to install it:</p>

<p><code>
sudo apt-get install curl
</code></p>

<p>Once curl is installed, download rvm using curl and then pipe it to <code>bash</code> so we can use it immediately right after the download is finished:</p>

<p><code>
curl -L https://get.rvm.io | bash -s stable
</code></p>

<p>Install Ruby version <code>1.9.3</code> using rvm. For this step you don&rsquo;t really have to stick with version <code>1.9.3</code>. If there is already a later and stable version available you can use that as well:</p>

<p><code>
rvm install 1.9.3
</code></p>

<p>Tell rvm to use Ruby version <code>1.9.3</code>:</p>

<p><code>
rvm use 1.9.3
</code></p>

<p>You can then install the latest version of <code>rubygems</code>:</p>

<p><code>
rvm rubygems latest
</code></p>

<p>For Windows users you can just use the <a href="http://rubyinstaller.org/">ruby installer for Windows</a>.</p>

<p>Once ruby gems is installed you can now install gems like there&rsquo;s no tomorrow. Here&rsquo;s a starting point: <a href="http://www.awesomecommandlineapps.com/gems.html">Ruby Gems for Command-line Apps</a>. On the next section there&rsquo;s a gem called <code>tmuxinator</code> that you can install to manage tmux projects easily.</p>

<h4>Tmux</h4>

<p>Tmux or terminal multiplexer is an application that allows you to multiplex several terminal windows. It basically makes it easier to work on several related terminal windows. In Linux you can install tmux from the terminal by executing the following command:</p>

<p><code>
sudo apt-get install tmux
</code></p>

<p>For Mac OS you can install tmux through brew:</p>

<p><code>
brew install tmux
</code></p>

<p>And on Windows tmux is not really directly supported. You first have to install <a href="http://cygwin.org/">cygwin</a> and then add <a href="http://sourceforge.net/mailarchive/message.php?msg_id=30850840">this patch</a> to install tmux. Or if you don&rsquo;t want to go through all the trouble you can install <a href="http://sourceforge.net/projects/console/files/">console2</a> which is a tmux alternative for Windows.</p>

<p>Once you&rsquo;re done installing tmux you can now go ahead and play with it. To start tmux first create a new named session:</p>

<p><code>
tmux new -s name_of_session
</code></p>

<p>This will create a new tmux session with the name that you supplied:
<img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux.png" alt="tmux session" /></p>

<p>You can then execute commands just like you do with a normal terminal window.
If you want to create a new window press <code>ctrl + b</code> then release and then press <code>c</code>. This will create a new window under the current session:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-new-window.png" alt="tmux new window" /></p>

<p>As you can see from the screenshot above we now have two windows (see the text highlighted in green on the lower part of the terminal window on the left side). One is named <code>0:bash</code> and the other is <code>1:bash*</code>. The one with the <code>*</code> is the current window.</p>

<p>You can rename the current window by pressing <code>ctrl + b</code> then release and then <code>,</code>. This will prompt you to enter a new name for the window. You can just press enter once you&rsquo;re done renaming it:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-rename-window.png" alt="tmux rename window" /></p>

<p>To switch between the windows you can either press <code>ctrl + b</code> then release and then the index of the window that you want to switch to. You can determine the index by looking at the lower left part of the terminal screen. So if you have only two windows opened the index can either be 0 or 1. You can also press <code>ctrl + b</code> then release and then <code>p</code> for previous or <code>n</code> for next window.</p>

<p>You can also further divide each window into multiple panes by pressing <code>ctrl + b</code> then release and then the <code>%</code> key to divide the current window vertically or the <code>"</code> key to divide it horizontally. This will give you a screen similar to the following:</p>

<p><img src="/images/posts/2014-02-21-a-whirlwind-tour-of-web-developer-tools-command-line-utilities/tmux-panes.png" alt="tmux panes" /></p>

<p>You can then switch between those panes by pressing <code>ctrl + b</code> then release and then the <code>o</code> key.</p>

<p>What&rsquo;s good about tmux is that it allows you to keep multiple terminal sessions and you&rsquo;ll be able to access them even after restarting your computer. To list out available sessions you can execute the following command:</p>

<p><code>
tmux ls
</code></p>

<p>This will list out all the sessions that you created using the <code>tmux new - s</code> command or simply <code>tmux</code>. You can then open up the specific session by executing the following command:</p>

<p><code>
tmux attach -t name_of_session
</code></p>

<p>If you no longer want to work with a particular session you can just do the following:</p>

<p><code>
tmux kill-session -t name_of_session
</code></p>

<p>Or if you want to kill all sessions:</p>

<p><code>
tmux kill-server
</code></p>

<p>There&rsquo;s also this ruby gem called <a href="http://rubygems.org/gems/tmuxinator">tmuxinator</a> which allows you to create and manage complex tmux sessions easily. You can install it via ruby gems:</p>

<p><code>
gem install tmuxinator
</code></p>

<p>Or if you&rsquo;re like me and you installed Ruby via RVM:</p>

<p><code>
rvmsudo gem install tmuxinator
</code></p>

<p>You can then create project-based tmux sessions. To create a new project you can do:</p>

<p><code>
tmuxinator open name_of_project
</code></p>

<p>This will create a <code>name_of_project.yml</code> file under the <code>~/.tmuxinator</code> directory. You can then open up this file and modify the default configuration. For me I simply deleted the commented lines (except for the first one which is the path to the current file) and then specified the project path. In my case its the <code>octopress</code> directory under the home directory. Then under the <code>windows</code> the <code>layout</code> is <code>main-vertical</code>, this means that the panes that I will specify would be divided vertically.  There would be 2 panes, one is empty so I can just type in whatever commands I wish to execute and the other is <code>rake preview</code> which is the command for previewing an octopress blog locally:</p>

<p>```</p>

<h1>~/.tmuxinator/blog.yml</h1>

<p>name: blog
root: ~/octopress</p>

<p>windows:
  &ndash; editor:</p>

<pre><code>  layout: main-vertical
  panes:
    - #empty
    - rake preview
</code></pre>

<p>```</p>

<p>To open up the project at a later time you execute the following:</p>

<p><code>
tmuxinator start name_of_project
</code></p>

<p>If you do not know the name of a specific project, you can list out all projects using the following command:</p>

<p><code>
tmuxinator list
</code></p>

<p>If you no longer wish to work with a project in the future:</p>

<p><code>
tmuxinator delete name_of_project
</code></p>

<h4>SSH</h4>

<p>SSH can be used to login to remote servers. SSH is pre-installed on both Linux and Mac OS. But for Windows you can use the alternative which is <a href="http://sshwindows.sourceforge.net/">open SSH</a> since SSH isn&rsquo;t installed on Windows by default.</p>

<h5>Logging in to remote server</h5>

<p>Once you have SSH installed you can now login to a remote server by executing the following command:</p>

<p><code>
ssh username@hostname
</code></p>

<p>Where the username is the <code>username</code> given to you by your web host. While the <code>hostname</code> can be a domain name, public dns or an IP address. For <a href="https://www.openshift.com/">Openshift</a> its something like:</p>

<p><code>
xxxxxxxxxxxxxxxxxxxxxxxxxxxx@somesite-username.rhcloud.com
</code></p>

<p>Where <code>x</code> is a random string of number and letters.</p>

<p>Executing the <code>ssh</code> command with the correct username and hostname combination will prompt you to enter your password. Again, the password here is the password given to you by your web host.</p>

<h5>SSH Keys</h5>

<p>You can also make use of SSH keys to authenticate yourself to a remote server. This will allow you to login without entering your password.</p>

<p>To setup an ssh key navigate to the <code>.ssh</code> directory:</p>

<p><code>
cd ~/.ssh
</code></p>

<p>If you don&rsquo;t have already one, create it by executing the following command:</p>

<p><code>
mkdir ~/.ssh
</code></p>

<p>Once you&rsquo;re done with that, check if you already have a private and public key pair in the <code>~/.ssh</code> directory:</p>

<p><code>
ls
</code></p>

<p>It would look something like <code>id_rsa</code> and <code>id_rsa.pub</code>.
If you don&rsquo;t already have those 2 files generate it by executing:</p>

<p><code>
ssh-keygen -t rsa -C "your_email@provider.com"
</code></p>

<p>This generates the <code>id_rsa</code> and <code>id_rsa.pub</code> files using your email address as the label. You can also use other information as the label.</p>

<p>Next copy the public key (<code>id_rsa.pub</code>) into the remote server by using secure copy (<code>scp</code>):</p>

<p><code>
scp -p id_rsa.pub username@hostname
</code></p>

<p>Now open up a new terminal window and login to the remote server.</p>

<p><code>
ssh username@hostname
</code></p>

<p>Check if the <code>id_rsa.pub</code> has indeed been copied by using the following command:</p>

<p><code>
ls -al id_rsa.pub
</code></p>

<p>If it returns &ldquo;there&rsquo;s no such file or directory&rdquo; return to the other terminal window (local machine) and execute the <code>scp</code> command again.</p>

<p>Once that&rsquo;s done the next step is to copy all the contents of the <code>id_rsa.pub</code> file into the <code>authorized_keys</code> file inside the <code>.~/ssh</code> directory:</p>

<p><code>
cat id_rsa.pub &gt; ~/.ssh/authorized_keys
</code></p>

<p>Next update the <code>/etc/ssh/sshd_config</code> file using either <code>vi</code> or <code>nanoc</code>:</p>

<p><code>
vi /etc/ssh/sshd_config
</code></p>

<p>Uncomment the line where it says <code># AuthorizedKeysFile</code>, to uncomment all you have to do is remove the <code>#</code> symbol right before it. Vi is basically like vim so the key strokes that you use are pretty much the same. So first you place the cursor right above the <code>#</code> symbol then press <code>x</code> to delete the <code>#</code> symbol. And then press the <code>esc</code> key to go back to command mode and then type in <code>:wq</code> to save and quit editing the file:</p>

<p><code>
AuthorizedKeysFile %h/.ssh/authorized_keys
</code></p>

<p>Just make sure the path that its pointing to is the same path as the file that we updated earlier.
The <code>%h</code> refers to the host so its basically the same as saying <code>~/.ssh/authorized_keys</code>.</p>

<p>Once all of that is done you can now test it out by logging in once again. Note that for the first time after the update is done it will still ask you the password. But for the next one&rsquo;s it will no longer ask you the password.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! The command line is a must-use tool for every developer. In this blog post we&rsquo;ve covered the essentials of using the command line along with some tools that can help you become more productive when it comes to using it.
There&rsquo;s a lot more command line tools that I haven&rsquo;t covered in this blog post. I believe those tools deserves a blog post of their own so I&rsquo;ll be covering each of those in a future part of this series. For now I recommend that you check out the resources below for more command-line ninja skills.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://cli.learncodethehardway.org/book/">Command Line Crash Course</a></li>
<li><a href="http://kkovacs.eu/cool-but-obscure-unix-tools/">Cool but Obscure Unix Tools</a></li>
<li><a href="http://www.commandlinefu.com/commands/browse">Command Line Fu</a></li>
<li><a href="http://coding.smashingmagazine.com/2012/10/29/powerful-command-line-tools-developers">Powerful Command Line Tools for Developers</a></li>
<li><a href="http://community.linuxmint.com/tutorial/view/244">Linux Terminal Command Reference</a></li>
<li><a href="http://ss64.com/osx/">Mac OS Command Reference</a></li>
<li><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds.mspx?mfr=true">Windows Command Reference</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
