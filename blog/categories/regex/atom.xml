<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: regex | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/regex/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2014-03-06T18:47:55+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with Regular Expressions]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/08/13/playing-with-regular-expressions/"/>
    <updated>2012-08-13T21:18:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/08/13/playing-with-regular-expressions</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s learn by examples this time. This kind of thing has already been done a couple of times by awesome people but I also want to do it so no amount of
duplication is going to make me stop doing this. It&rsquo;s my own version of an introduction to regular expressions after all. Be sure to checkout the resources.</p>

<ul>
<li><code>g</code> makes the match global, just add this character at the end of your pattern like this: <code>/PATTERN/g</code></li>
<li><code>\d</code> matches all the digits</li>
<li><code>\D</code> matches all non-digits this includes letters(both uppercase &amp; lowercase), symbols, whitespaces</li>
<li><code>\s</code> matches all whitespaces</li>
<li><code>\S</code> matches all non-whitespace this letters(both uppercase &amp; lowercase), symbols, numbers</li>
<li><code>()</code> used for grouping</li>
<li><code>(a|b|c)</code> matches every occurence a, b or c</li>
<li><code>(cat)</code> matches every cat</li>
<li><code>[]</code> character set. it&rsquo;s kind of the same with using the parenthesis but when using this you don&rsquo;t need the pipes(|) to separate what specific group of characters you want to match since everything inside the brackets is treated as a single entity</li>
<li><code>[\w]</code> matches a single character of any word character</li>
<li><code>\w</code> matches all words</li>
<li><code>{3}</code> specific length</li>
<li><code>\d{2}</code> matches every digit which has a length of 2</li>
<li><code>{1,3}</code> range</li>
<li><code>\b</code> boundary. You can use this to set boundaries. For example if you only want to select 3-digit numbers you might try doing this: <code>\d{3}</code> but this selects every digit which has a length of 3. So if you have 300500, it selects 300 and then 500 but what we want to select is only numbers which are 3-digit like 500, 100, 200, 450, etc.</li>
<li><code>\b\d{3}\b</code> so you do something like this to specify a boundary that you only want numbers which are 3-digit independently so that 300500 won&rsquo;t be selected</li>
<li><code>\b[a-zA-z]{4}\b</code> selects every 4 letter word(words without numbers on it) which independently exists</li>
<li><code>\w{10}</code> matches every word which has a length of 10</li>
<li><code>[a-zA-Z](a|e|o)y</code> matches anything that begins with a letter(both uppercase and lowercase) which is immediately followed by an a,e or u then immediately followed by a y</li>
<li><code>+</code> matches everything preceeding the string specified</li>
<li><code>.</code> matches every character(symbols, numbers, whitespaces, letters)</li>
<li><code>\.</code>  matches the dot symbol. You can pretty much apply this to every special character that is used in Regular Expressions such as <code>$, ^, +</code> for matching symbols.</li>
<li><code>\b[\w-]+@[A-Za-z]+\.[a-z]{2,4}\b</code>  matches an email. An email composes of a username, the @ sign, then the domain name(gmail,ymail), the . sign, then a 2-4 character extension(edu, ph, com)</li>
<li><code>\b[\w-]+@[A-Za-z]+\.[a-z]{2,4}+(\.[a-z]{2})?\b</code>  matches an email which has a country extension after the actual domain name extension(org, edu, com) like: <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x61;&#98;&#99;&#64;&#x79;&#97;&#104;&#111;&#x6f;&#x2e;&#99;&#x6f;&#x6d;&#46;&#106;&#112;">&#x61;&#98;&#99;&#x40;&#x79;&#x61;&#x68;&#111;&#111;&#46;&#x63;&#111;&#x6d;&#46;&#x6a;&#112;</a> for people from Japan</li>
</ul>


<h3>Resources</h3>

<ul>
<li><a href="http://codular.com/regex">Introduction to Regular Expressions</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/you-dont-know-anything-about-regular-expressions/">You don&rsquo;t know anything about regular expressions</a></li>
<li><a href="http://net.tutsplus.com/tutorials/other/8-regular-expressions-you-should-know/">8 regular expressions that you should know</a></li>
<li><a href="http://www.regular-expressions.info/">Regular Expressions Official Site</a></li>
<li><a href="http://net.tutsplus.com/tutorials/php/regular-expressions-for-dummies-screencast-series/">Regular Expressions for Dummies</a></li>
<li><a href="http://gskinner.com/RegExr/">Regular Expressions Playground</a> &ndash; you can play with Regular Expressions to your hearts content using this tool(available on both desktop and browser)</li>
</ul>

]]></content>
  </entry>
  
</feed>
