<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-07-11T20:26:57+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Antares Web]]></title>
    <link href="http://anchetawern.github.io/blog/2015/03/07/introduction-to-antares-web/"/>
    <updated>2015-03-07T07:27:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/03/07/introduction-to-antares-web</id>
    <content type="html"><![CDATA[<p>Welcome to yet another promotional post on another side-project of mine. This time its the web version of Antares. If you don&rsquo;t know what Antares is, its basically a news app for Android. Its a news app targeted to developers to be exact. You can read all about it here: <a href="/blog/2015/02/15/introduction-to-antares/">Introduction to Antares</a>.</p>

<p>So yeah, Antares web is just a website were you can read all the news from popular sources such as Hacker News, Product Hunt, Medium, Designer News, Slashdot and many others. There are also news coming from popular curators such as echojs and developer newsletters. The news items are ordered from the latest to the least latest so you&rsquo;re assured that the ones on top are the latest one. Antares uses infinite scrolling. So if you missed yesterday&rsquo;s news, you can always scroll until you find something you&rsquo;re interested in reading.</p>

<h3>Future Plans</h3>

<ul>
<li>More news sources.</li>
<li>Viewing of news on a specific date.</li>
<li>Top news. Something simple like logging the view count on each link based on the number of clicks it gets. And then ordering the results from the most number of views to the least.</li>
<li>Mobile version. Currently it doesn&rsquo;t look that good on mobile. Especially on devices below 400px width.</li>
<li>Social Sharing. Facebook, Twitter, LinkedIn sharing. And possibly Google plus. I&rsquo;ll just add it as a button below each news link, so that users can easily share. Integration with my <a href="/blog/2014/09/28/introduction-to-ahead/">Ahead project</a> seems to be a good idea as well. So users can easily schedule posts to their social accounts for later publishing.</li>
<li>Bookmarking. I&rsquo;m looking at pocket integration. So each news link will have its own button for saving to pocket.</li>
</ul>


<p>That&rsquo;s all for now. If you want to know more about this project. You can always visit <a href="/projects/antares_web/">its project page</a>. If you&rsquo;re a developer, you can check out this project at <a href="https://github.com/anchetaWern/antares">Github</a>. Feel free to contribute.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Antares]]></title>
    <link href="http://anchetawern.github.io/blog/2015/02/15/introduction-to-antares/"/>
    <updated>2015-02-15T17:05:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/02/15/introduction-to-antares</id>
    <content type="html"><![CDATA[<p>As a developer there&rsquo;s no question as to why we need to <a href="http://programmers.stackexchange.com/questions/161099/why-do-developers-need-to-keep-up-to-date-with-technologies-and-methodologies">keep ourselves updated</a>. And that is why reading blogs is really important. There&rsquo;s no shortage of the most important people to follow on twitter, newsletters, podcasts and screencasts that helps us to keep up to date. But as the years pass the amount of resources that we use to keep ourselves updated tends to grow. This results in a browser window that looks like this:</p>

<p><img src="/images/posts/antares/tabs.png" alt="too many tabs" /></p>

<p>Just the act of opening the interesting links in new tabs can take up to 30 minutes or more (I know, I&rsquo;ve been there). All because of the sheer amount of resources that were trying to maintain. I&rsquo;ve been doing that for years, and as my collection of resources grew larger, it only became harder and harder to read all of those things that are seemingly important. That is when I had the idea of creating an app which would still allow me to keep up to date, but will save me the time in opening all those links in a new tab. That is what Antares is all about. Its essentially a news app for developers. It collects content from interesting places such as Hacker News, Github, Designer News, Medium, Readability Top Reads, Slashdot, EchoJS, SidebarIO, and Product Hunt. It also collects all the content linked from popular developer newsletters such as JavaScriptWeekly, HTML5Weekly, PHPWeekly, CSSWeekly, Web Design Weekly and many others. Its basically an all in one tool for keeping up to date. As for me, it also have the effect of just letting go. Because having all those newsletters sent in my email has this mental effect that its something I need to open no matter what. The kind of feeling that its your responsibility to read through all those articles being pointed out in the newsletter. The feeling that you&rsquo;d miss out on something really important if you don&rsquo;t. Antares isn&rsquo;t like that. You can just install it and let it sit there. And you only really open it if you have some free time. The news just keeps on flowing in there but it doesn&rsquo;t make you feel that you&rsquo;ll miss out on one half of your life as a developer if you don&rsquo;t.</p>

<p>For the technical side of things, I used <a href="http://ionicframework.com/">Ionic framework</a> to build the app. Under the hood it uses HTML, CSS and JavaScript. Ionic is tied with Angular.js so there&rsquo;s really not much choice about what JavaScript framework to use. For the back-end I used Laravel to scrape the necessary data from all the relevant resources. It is then stored in a MySQL database. The data (mainly a title and a URL) is then requested via AJAX from the mobile app. Ionic then handles the presentation. To give you an idea, here&rsquo;s a couple of screenshot of how the app looks like:</p>

<p><img src="/images/posts/antares/hn.jpg" alt="hacker news" /></p>

<p><img src="/images/posts/antares/news.jpg" alt="article" /></p>

<p>As a developer who loves working on the back-end, I didn&rsquo;t really bother customizing the look and feel of the app.</p>

<p>This blog post is getting rather long for an introduction. Here&rsquo;s the <a href="https://play.google.com/store/apps/details?id=com.wern.antares">link to the app on Google Play Store</a>. If you got a Windows Phone, I also have the <code>.xap</code> file which you can use to install Antares. Antares doesn&rsquo;t have a version for apple devices. Mainly because it costs around $99 per year to be included in their developer program. As someone who doesn&rsquo;t really plan to make any money out of this. I think its unwise to pay for that amount. I&rsquo;m already paying $10 per month for the server costs and I paid $25 to put the app in the Google Play Store so I guess that&rsquo;s enough expenses on my part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Laravel Bootstrap Starter]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3/"/>
    <updated>2014-10-04T19:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/04/introduction-ton-l4b3</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still on side-project frenzy. This week its the <a href="https://github.com/anchetaWern/laravel-bootstrap-starter">Laravel Bootstrap Starter</a>.
I created this project to make it easier for me to setup a Laravel project faster. I&rsquo;m using Laravel in the company that I work for and every time I start a new project I have to install it via composer, configure it so that it doesn&rsquo;t show <code>/public</code> in the URL. From there I add the default controllers, add the sign up and login code, add the functionality for updating and resetting password, install node, grunt and then bower. And then install the grunt plugins that I need for front-end performance optimization. The list goes on, and just setting up a project may take a whole day. That&rsquo;s why I decided to create this project.</p>

<h3>Features</h3>

<p>Like most of the projects that I decided to do so far. It only contains the essential features:</p>

<ul>
<li>sign up and login</li>
<li>resetting passwords</li>
<li>admin (updating account information)</li>
</ul>


<h3>Future Plans</h3>

<p>As I move along with this project I&rsquo;m gonna be adding the following features:</p>

<ul>
<li><strong>social login</strong> &ndash; google, twitter, facebook, linkedin</li>
<li><strong>database backup</strong> &ndash; every project must have an automated database backup functionality. I&rsquo;m thinking of using cron for running the backup script and then upload the backup to an Amazon s3 bucket.</li>
<li><strong>generators</strong> &ndash; there are 2 projects doing this already, one is <a href="https://github.com/JeffreyWay/Laravel-4-Generators">Jeffrey Way&rsquo;s Laravel 4 Generators</a> and the other is <a href="https://github.com/wdollar/Laravel-4-Generators-Bootstrap-3">Wes Dollar&rsquo;s forked version</a>, both looks pretty good. I think I&rsquo;ll be able to get some ideas from these projects. Basically the plan here is to be able to use the terminal for generating boilerplate code which I can then build upon.</li>
<li><strong>build tool integration</strong> &ndash; I want to be able to just hit one command and it will install and configure everything that I need to get the project started. Yeoman seems to be a very good fit for this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Ahead]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead/"/>
    <updated>2014-09-28T09:20:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/28/introduction-to-ahead</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been in side-project frenzy these past few weeks. And this time I&rsquo;m writing again about another side-project that I&rsquo;ve been working on, its called <a href="https://github.com/anchetaWern/ahead">Ahead</a>. Ahead is an app that allows you to schedule posts to your facebook, twitter and linkedin accounts. Pretty much like Buffer. But Buffer has limits for free accounts, that&rsquo;s why I built this app so I can schedule posts without limits.</p>

<h3>How to Use</h3>

<p>You can use Ahead by going to its <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">demo website</a>. Create and account then login. Once logged in, go to the networks page and connect the accounts where you want to publish by clicking on the connect button:</p>

<p><img src="/images/posts/intro_to_ahead/networks.png" alt="networks" /></p>

<p>Once your accounts has been connected, you can now start scheduling posts:</p>

<p><img src="/images/posts/intro_to_ahead/schedulenew_post.png" alt="schedule new post" /></p>

<p>You can check the time in which your post will be published from the posts page. From the published column you can also see if your post has already been published or not:</p>

<p><img src="/images/posts/intro_to_ahead/posts.png" alt="posts" /></p>

<p>If you don&rsquo;t want to select the networks in which you want to publish all the time, you can visit the settings page and then select the networks which you want to select by default:</p>

<p><img src="/images/posts/intro_to_ahead/settings.png" alt="settings" /></p>

<p>If you don&rsquo;t want your posts to be published one hour after another you can also add custom schedules by visiting the schedules page:</p>

<p><img src="/images/posts/intro_to_ahead/schedule.png" alt="new schedule" /></p>

<p>Just select an interval that you want and it will be available as an option when you schedule a new post. Of course you can also select a default schedule from the settings page once you&rsquo;re done creating a schedule. Currently only the following intervals are supported:</p>

<ul>
<li>every 1 hour</li>
<li>every 2 hours</li>
<li>every 3 hours</li>
<li>every 4 hours</li>
<li>every 5 hours</li>
<li>random time in the next 72 hours (3 days)</li>
<li>random time in the next 168 hours (1 week)</li>
</ul>


<h3>Future Plans</h3>

<p>Ahead is still in early stages of development. Its already quite functional but I&rsquo;m planning to add the following features in the future:</p>

<ul>
<li><strong>Publish posts without links</strong> &ndash; currently it can only publish posts with links in it. I originally envisioned this project for my personal use only and I don&rsquo;t really schedule posts without links in it.</li>
<li><strong>Add social login</strong> &ndash; currently you can only start using the app by signing up with your email.</li>
<li><strong>Email verification</strong> &ndash; currently you can use fake emails when signing up.</li>
<li><strong>Editing and deleting posts</strong> &ndash; currently you can no longer edit posts that has already been scheduled. I&rsquo;m planning to add an edit or delete feature in order for users to be able to make changes to their scheduled posts.</li>
<li><strong>Immediate publishing</strong> &ndash; currently only scheduled posts are supported.</li>
<li><strong>Add custom intervals to schedules</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Publicizr]]></title>
    <link href="http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr/"/>
    <updated>2014-09-21T09:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/09/21/introduction-to-publicizr</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I started building a project called <a href="https://github.com/anchetaWern/publicizr">Publicizr</a>. I created it for the sole purpose of easily publishing a link to my Facebook, Twitter and LinkedIn profile whenever I publish a new post on this blog.</p>

<h3>Dependencies</h3>

<p>This project depends on the following Ruby gems in order to work:</p>

<ul>
<li><a href="https://github.com/hexgnu/linkedin">linkedin</a> &ndash; used for connecting/publishing to Linkedin.</li>
<li><a href="https://github.com/sferik/twitter">twitter</a> &ndash; used for connecting/publishing to Twitter.</li>
<li><a href="https://github.com/arsduo/koala">koala</a> &ndash; used for connecting/publishing to Facebook.</li>
<li><a href="https://github.com/mperham/em-resolv-replace">em-resolv-replace</a> &ndash; used for fixing the issue with koala not being able to publish to Facebook from the localhost.</li>
</ul>


<h3>How to Install</h3>

<p>You can install Publicizr by requiring the following Ruby gems in the Gemfile used by your static blogging engine:</p>

<p><code>
gem 'linkedin', '~&gt; 1.0.0'
gem 'twitter', '~&gt; 5.11.0'
gem 'koala', '~&gt; 1.10.1'
gem 'em-resolv-replace', '~&gt; 1.1.3'
</code></p>

<p>Once you&rsquo;ve added those, save the changes to the Gemfile then execute <code>bundle install</code> on your terminal.</p>

<p>Once everything is installed, look for the <code>Rakefile</code> used in your static blogging engine. For Octopress/Jekyll its located in its root directory. Next add the following on the <code>Rakefile</code>. If the <code>Rakefile</code> is requiring other gems, just put these below those gems. If not then put it on the first line of the <code>Rakefile</code>:</p>

<p><code>
require "twitter"
require "koala"
require "linkedin"
require "resolv-replace"
</code></p>

<p>Next, put these on the last line of the <code>Rakefile</code>:</p>

<p>```
desc &ldquo;Publish post to facebook, twitter and linkedin&rdquo;
task :publish, :content do |t, args|</p>

<p>  if args.content</p>

<pre><code>post = args.content


#start post to twitter
tweet = Twitter::REST::Client.new do |config|
  config.consumer_key        = "{twitter-app-key}"
  config.consumer_secret     = "{twitter-app-secret}"
  config.access_token        = "{twitter-user-token}"
  config.access_token_secret = "{twitter-user-secret}"
end

tweet.update(post)
#end post to twitter

#start post to facebook
@graph = Koala::Facebook::API.new("{facebook-user-token}")
@graph.put_wall_post(post)
#end post to facebook

#start post to linkedin
linked_in = LinkedIn::Client.new('{linkedin-app-key}', '{linkedin-app-secret}')
linked_in.authorize_from_access('{linkedin-user-token}', '{linkedin-user-secret}')

linked_in.add_share(:comment =&gt; post)
#end post to linkedin

puts "Your post has been shared!"
</code></pre>

<p>  else</p>

<pre><code>puts "Supply your post!"
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Basically what it does is declaring a rake task that will publish whatever content you pass into it. If you don&rsquo;t need to publish to all 3 (Facebook, Twitter, LinkedIn), feel free to comment out the lines between the lines which says &lsquo;#start post to facebook&rsquo; and &lsquo;#end post to facebook&rsquo;. Just replace &lsquo;facebook&rsquo; with your social network of choice.</p>

<p>At this point the project still requires you to create your own app on each of the social networks. You can do that by visiting the following links and then look for the page for creating a new app:</p>

<ul>
<li><a href="https://developers.facebook.com/">Facebook</a></li>
<li><a href="https://dev.twitter.com/">Twitter</a></li>
<li><a href="https://developer.linkedin.com/">LinkedIn</a></li>
</ul>


<p>Once that&rsquo;s done, you also need to create an app using your language of choice (PHP, Ruby, or Python) that will allow you to retrieve user tokens. If you&rsquo;re primarily a PHP developer you can use the following libraries to ease the work that you need to do:</p>

<ul>
<li><a href="https://github.com/thephpleague/oauth2-client">thephpleagues/oauth2-client</a> &ndash; supports facebook and linkedin.</li>
<li><a href="https://github.com/themattharris/tmhOAuth">thmOAuth</a> &ndash; supports twitter.</li>
</ul>


<p>Once you&rsquo;ve acquired the applications keys and user tokens you can now replace the values which says something like <code>{twitter-app-key}</code>, <code>{twitter-app-secret}</code> on the <code>publish</code> task in your <code>Rakefile</code>. Basically anything that&rsquo;s wrapped in curly brackets, you need to replace those in order for the plugin to fully function.</p>

<h3>How to Use</h3>

<p>You can use publicizr by executing the <code>publish</code> task then supplying the content of your post as an argument:</p>

<p><code>
rake publish["new blog post: newsletters I subscribe to http://wern-ancheta.com/blog/2014/09/07/newsletters-i-subscribe-to/"]
</code></p>

<h3>Support</h3>

<p>Any Ruby based static blogging engine is supported. You can check out this <a href="http://blog.iwantmyname.com/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html">big list of static blogging engines</a> and look for the ones that are built using Ruby.</p>

<h3>Future Plans</h3>

<p>Publicizr is already useable but still requires a bunch of work in order to get setup and running. That&rsquo;s why I plan to add the following features in the future:</p>

<ul>
<li>automatically detect last post that was created and publish it automatically when the blog is deployed.</li>
<li>website for retrieving user access tokens which you can then paste into the rake file. This removes the need for creating your own apps and retrieving your keys from it.</li>
</ul>

]]></content>
  </entry>
  
</feed>
