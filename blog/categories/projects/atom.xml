<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-07-24T18:30:27+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Octo-wysiwyg]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/20/introduction-to-octo-wysiwyg/"/>
    <updated>2014-02-20T05:30:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/20/introduction-to-octo-wysiwyg</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve quit my job recently so lots of time freed up for me to learn something and work on personal projects that I&rsquo;ve been thinking of doing since last year. And so the past couple of weeks I&rsquo;ve been busy working on a personal project and learning more on tooling to improve my productivity as a developer.</p>

<!--more-->


<p>Enough about my life story. This blog post is about the project that I was working on recently, and that is Octo-wysiwyg. The first project that I finally got started among the many others that have been buried in the todo list for ages.</p>

<p>Octo-wysiwyg is an app for easily creating posts in Octopress. Yes Octopress is pretty much complete and you can easily create posts by opening up a terminal and using the <code>rake new_post['title of your blog post']</code> command. But after that you usually have to search for the newly created file in the <code>octopress/source/_posts</code> folder and open it up on a text-editor before you can begin writing. That&rsquo;s ok but you have to go through those  steps every time you want to write something. And also you don&rsquo;t get a live HTML preview of the things that you&rsquo;re writing since you are on a text-editor. You can probably use sites like <a href="http://markable.in/editor/">markable.in</a> or <a href="http://dillinger.io/">dillinger.io</a> if you only want a live preview but after that you would need to paste what you have written into the original markdown file that was generated by Octopress.</p>

<p>Enter Octo-wysiwyg, this app allows you to easily create posts by adding keyboard shortcuts to generate common markdown syntax like headings, images, blockquotes, and code blocks.</p>

<h3>Installation</h3>

<p>Copy it anywhere on your file system. Then update the <code>config.rb</code> to include the proper file paths.</p>

<p>This app depends on the following ruby gems so you also have to install it before you can start using the app:</p>

<ul>
<li>sinatra</li>
<li>redcarpet</li>
<li>data_uri</li>
<li>stringex</li>
</ul>


<h3>Using the App</h3>

<p>Execute the following command from the terminal:</p>

<p><code>
ruby /path/to/octo-wysiwyg/octo-wysiwyg.rb
</code></p>

<p>Or if you want to use <a href="http://rubygems.org/gems/shotgun">shotgun</a>:</p>

<p><code>
shotgun /path/to/octo-wysiwyg/octo-wysiwyg.rb
</code></p>

<p>Then access it from the browser when using Sinatra:</p>

<p><code>
http://localhost:4567
</code></p>

<p>Or shotgun:</p>

<p><code>
http://localhost:9393
</code></p>

<h3>Creating a New Post</h3>

<p>You can create a new post by accessing <code>http://localhost:9393/new</code> from your browser. The port number assumes that you&rsquo;re using the shotgun ruby gem. If you&rsquo;re using sinatra use <code>4567</code> as the port. This will give you the following UI:</p>

<p><img src="/images/posts/2014-02-20-introduction-to-octo-wysiwyg/newpost.png" alt="new post" /></p>

<p>All you have to do is input the title of your post and click the &lsquo;create post&rsquo; button or press enter.</p>

<h3>Updating Existing Posts</h3>

<p>There are two ways to update existing posts. You can either do it from the edit page (<a href="http://localhost:9393/edit">http://localhost:9393/edit</a>) or from the list page (<a href="http://localhost:9393/list">http://localhost:9393/list</a>). If you do it from the edit page you will have to browse for a markdown file from the <code>octopress/source/_posts</code> folder and click on &lsquo;upload&rsquo;.
If you do it from the list page, you can simply select from the list of posts by clicking on the link:</p>

<p><img src="/images/posts/2014-02-20-introduction-to-octo-wysiwyg/posts.png" alt="list of posts" /></p>

<p>Once you&rsquo;ve selected a post you will be redirected to the edit page which looks something like this:
<img src="/images/posts/2014-02-20-introduction-to-octo-wysiwyg/octowysiwyg.png" alt="edit page" /></p>

<p>Note that the posts are arranged based on the date that the post was first published.</p>

<h3>Deleting Posts</h3>

<p>You cannot delete existing posts. However, you can set the post to <code>publish: false</code>. This will prevent the post from getting published on your blog the next time you deploy using <code>rake gen_deploy</code>.</p>

<h3>Keyboard Shortcuts</h3>

<p>You can use the following keyboard shortcuts to easily generate markdown syntax:</p>

<ul>
<li><code>ctrl + s</code> &ndash; save post</li>
<li><code>ctrl + 1</code> to <code>ctrl + 6</code> &ndash; headings 1 to 6</li>
<li><code>f1</code> &ndash; code block</li>
<li><code>f2</code> &ndash; read more link</li>
<li><code>ctrl + b</code> &ndash; bold</li>
<li><code>ctrl + i</code> &ndash; italic</li>
<li><code>ctrl + q</code> &ndash; blockquote</li>
<li><code>ctrl + g</code> &ndash; insert markdown image tag</li>
<li><code>ctrl + u</code> &ndash; upload image &ndash; this will prompt you to upload an image, the uploaded image will be automatically added on the current document and the uploaded image will be copied over to the octopress image directory that you selected</li>
</ul>


<h3>Demo</h3>

<p>A demo of the app is available <a href="http://ruby-wern.rhcloud.com/list">here</a> though I&rsquo;ve disabled the upload feature to prevent usage abuse.</p>

<h3>Future Plans</h3>

<p>As people usually say, start with something simple and then iterate afterwards. I&rsquo;m pretty much satisfied with the current features of this app now. The proof is that I&rsquo;m currently using it to write this blog post. However I want to make use of my remaining free time to work on another project so I&rsquo;m going to suspend the development of this project for now. Here are some of the features that I plan to add in the future:</p>

<ul>
<li>emmet-like syntax for generating html and css code</li>
<li>creating pages</li>
<li>line numbers for markdown</li>
</ul>


<h3>Contribute</h3>

<p>If you want to contribute to this project, or you noticed some issues, or you want to throw in some ideas for the next version please visit the <a href="https://github.com/anchetaWern/octo-wysiwyg">octo-wysiwyg github page</a> I&rsquo;d really appreciate i</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Portfolio plugin for Octopress]]></title>
    <link href="http://anchetawern.github.io/blog/2013/08/18/introduction-to-portfolio-plugin-for-octopress/"/>
    <updated>2013-08-18T20:19:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/08/18/introduction-to-portfolio-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to introduce Portfolio, an Octopress plugin that I created for easily creating portfolio pages based on the images on your filesystem.</p>

<p>The portfolio plugin is a liquid tag type of plugin which means that it gives you the ability to use the tag to generate a specific content. In this case the portfolio plugin allows you to generate image tags based on the images in a directory that you specify.</p>

<h3>How to Install</h3>

<p>You can install the portfolio plugin by simply copying the <code>portfolio.rb</code> file into the <code>plugins</code> directory of your Octopress installation.</p>

<h3>How to Setup</h3>

<p>You can setup the plugin by opening up the <code>_config.yml</code> file and specify the root directories in which the plugin will look for the files that it will be using.</p>

<p><code>
portfolio_root: /portfolio
portfolio_img_root: /images/pages/portfolio
portfolio_path: /web_files/blog/octopress/source/images/pages/portfolio
portfolio_url: images/posts/pages/portfolio
</code></p>

<p>The <code>portfolio_root</code> is the name of the directory where your portfolio is saved.
The <code>portfolio_img_root</code> is where the images for your portfolio is saved.
The <code>portfolio_path</code> is the actual path in your filesystem where your portfolio is saved.
And the <code>portfolio_url</code> is the address where you can access your portfolio from the browser.</p>

<p>The plugin doesn&rsquo;t come with a default styling so you have to add them on your own. You can simply hook up to the markup that has been provided,
that is the <code>gallery-item</code> class.
In the example above I gave it a default <code>width</code> and <code>height</code>.
The <code>overflow</code> is set to hidden so that the image that it contains won&rsquo;t overflow.
The <code>margin</code> is <code>10px</code> all around. Lastly, its floated to the left so it would align nicely.
You can add this on the <code>sass/base/_layout.scss</code> file or anywhere you feel would be appropriate.</p>

<p>```css</p>

<h1>content .gallery-item {</h1>

<pre><code>float: left;
width: 390px;
height: 150px;
overflow: hidden;
margin: 10px;
border: 1px solid lightgray;
</code></pre>

<p>}
```</p>

<p>Next create a directory where the details of your projects will reside. The ideal location would be in the <code>octopress/source</code> directory. This should be the same as the value of the <code>portfolio_path</code> that you have included in your <code>_config.yml</code> file earlier. Each of your project will have its own directory, so if you have a project named <code>echo</code> then you have to create the following directory: <code>octopress/source/portfolio/echo</code>.</p>

<p>Also create the directory where the images for each of your project will reside. Following the path that we specified earlier we should have the following directory for project <code>echo</code>:</p>

<p><code>
octopress/source/images/pages/portfolio/echo
</code></p>

<p>The <code>echo</code> directory is where you will save your images. If you intend to use lightbox or any other alternative you can simply put <code>small-</code> as a prefix to the name of your image files. The images with this prefix will automatically be used as the initial image and the one without it will be larger image. So if you have an image file named <code>index.png</code> you also need to have <code>small-index.png</code> file. Of course this should also be resized. Having the browser do the resizing for you by setting the width and height of the image using css is not a good idea.</p>

<p>It&rsquo;s also recommended that you run your images through an image optimizer before you actually add them to the directory as Octopress won&rsquo;t optimize it automatically. This is to ensure that your project page will load faster.</p>

<h3>How to Use</h3>

<p>You can use the plugin by using the <code>portfolio</code> liquid tag followed by a single space then the name of your project. Just put on underscores if you need spaces. Also there shouldn&rsquo;t be any special characters. For our imaginary <code>echo</code> project:</p>

<p>
<code>
{% portfolio echo %}
</code>
</p>

<h3>Resources</h3>

<p><a href="http://jekyllrb.com/docs/plugins/">Jekyll Plugins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to FGenerate]]></title>
    <link href="http://anchetawern.github.io/blog/2012/11/05/introduction-to-fgenerate/"/>
    <updated>2012-11-05T21:38:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2012/11/05/introduction-to-fgenerate</id>
    <content type="html"><![CDATA[<p>Here I am again writing yet another introduction for a project that I&rsquo;m currently working on. FGenerate probably gives you an idea on what this project is all about. I&rsquo;ll give you 3 seconds to guess. 1.. 2.. 3..</p>

<p>This project is all about generating code. The first time I had an idea.
Of course this might be better off being a Sublime Text plugin or a plugin for a Text-editor or IDE but its not quite my level yet to be writing plugins for native applications and I&rsquo;m specifically concentrated on the web alone that&rsquo;s why I decided to write the app using JavaScript and PHP.</p>

<p>I actually started this project 2 months ago hoping that I could use it on my next project to make my life easier.
Like any other idea it started small. I only wanted to generate forms based on mysql database at first but I later on
thought that I could actually create an app that will save me plenty of time in doing repetitive stuff like hand coding html forms, AJAX form submission, hand coding tables and looping through the records from a database, form validation, user login and user management (roles, transactions and limiting what each user can do in the system), saving, updating, deleting data from the database.</p>

<p>Like many of us who have already a lot of experience doing this stuff over and over again I also got tired.</p>

<p>And that is why I created <a href="https://github.com/anchetawern/yellowpill">yellowpill</a> and <a href="https://github.com/anchetawern/fgenerate">fgenerate</a> to help ease the pain in doing this repetitive and mindless task for developers. If possible I&rsquo;d like this app to do everything for me because I&rsquo;m really lazy.</p>

<p>Ok enough with the drama this blog post is all about FGenerate. FGenerate is still a very young project (2 months old) so there aren&rsquo;t much features yet. And yes there are still a whole bunch of bugs.</p>

<h4>How To Install</h4>

<p>First you&rsquo;ll have to put the fgenerate folder on your web root. Edit the <code>config.php</code> file and <code>config.js</code> file to match your database configuration. And access the app at <code>localhost/fgenerate</code></p>

<h4>How To Use</h4>

<p>The first thing you&rsquo;ll see is a select box where you can see all of your mysql database.
Just select one of those and click on connect:</p>

<p><img src="/images/posts/fgenerate/fgenerate.jpg" alt="fgenerate" /></p>

<p>Once you&rsquo;ve selected a database to work on you will see the tables from that database. You can select one or more depending on your needs:</p>

<p><img src="/images/posts/fgenerate/tables.jpg" alt="tables" /></p>

<p>Then select the fields that you want to used on your form. You can control the defaults by editing the <code>config.js</code> file.
The input fields that are generated are usually text fields.</p>

<p><img src="/images/posts/fgenerate/fields.jpg" alt="fields" /></p>

<p>From there you can customize the form.
FGenerate is making use of html5 forms and form attributes like <code>required</code> and <code>pattern</code>
And this is the only form of validation that is available for now but I&rsquo;ll be adding JavaScript validation later for browsers that doesn&rsquo;t support the new form features in html5.</p>

<p><img src="/images/posts/fgenerate/customize.jpg" alt="customize" /></p>

<p>Once you&rsquo;re done with the customization you can go ahead and check the html code that is generated and simply copy it.</p>

<p><img src="/images/posts/fgenerate/htmlcode.jpg" alt="htmlcode" /></p>

<h4>Todo</h4>

<p>There&rsquo;s still a lot of things that needs to be done for this project. Though I started this 2 months ago I never actually got to update it again after 2-3 weeks of working with it. Here are some of the things that needs to be done:</p>

<ul>
<li>reordering of fields</li>
<li>deselecting fields and tables &ndash; currently the fields that are already in the form cannot be deleted when you uncheck the tables and fields which refers to the field</li>
<li>defining templates &ndash; the templates are largely dependent on twitter bootstrap. I would also like to add templates for foundation and maybe let users define their own templates</li>
<li>generating client-side validation code since html5 validation only works for browsers that actually support html5 form validation it would also be wise to add a separate client-side validation as well for non-supported browsers</li>
<li>removing id&rsquo;s, classes and field attributes that are used to customize the form are still in the generated html code like <code>edit_field</code> and <code>contenteditable="true"</code></li>
<li>reset everything when connecting to a database</li>
<li>generating php code for populating <code>datalist</code> and <code>select</code> options</li>
<li>generating JavaScript code for submitting form data to database</li>
<li>generating tables (since the queries are already generated by my yellowpill project, fgenerate will only generate the skeleton of the table)</li>
</ul>


<h4>Join Me</h4>

<p>And with that I encourage you to join me in this project. Joining doesn&rsquo;t necessarily mean helping in the development, if you&rsquo;re interested in how far this project will go please spread the word so that I might be able to get someone to join me in the development. It would be awesome if someone more awesome will be joining me but I&rsquo;ll also accept those who wish to learn (I really hope you can learn something even if my code isn&rsquo;t that great). So yeah if you&rsquo;re interested please leave a comment, if you know of a library or another project that already does this also leave a comment. If you want to join me, please talk to me on twitter. My twitter username is @wern_ancheta Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Yellowpill]]></title>
    <link href="http://anchetawern.github.io/blog/2012/10/21/introduction-to-yellowpill/"/>
    <updated>2012-10-21T18:25:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2012/10/21/introduction-to-yellowpill</id>
    <content type="html"><![CDATA[<p>These past few days I was only focusing on updating my personal projects.
Personal projects are never really done until you&rsquo;re satisfied with the quality of code
and there are no longer features that you can think of.</p>

<p>And now I&rsquo;m writing yet another blog post introducing yet another personal project which I call YellowPill.
There are a bunch of Github projects which were named RedPill and BluePill (both from the awesome movie The Matrix) so
I decided to name it YellowPill so its unique. I can&rsquo;t really think of a cool name that is related to the project itself
so I&rsquo;ve just stick with YellowPill.</p>

<p>YellowPill is a project that came out of a need to quickly create a database in MySql and out of the laziness to use
Google to search for existing tools that can do the job for me.</p>

<p>The project is only 3 days old, but like any other project it always starts small (probably taking 4 days to 1 week to finish)
but always becomes bigger as the idea further develops.</p>

<p>Here are the things that I currently have on my mind (which I basically snatched from the README file):</p>

<ul>
<li>Creating new database</li>
<li>Selecting database to be used</li>
<li>Improve response messages. Currently the application does not issue an error if the operation cannot be performed or something went wrong</li>
<li>Ordering of fields</li>
<li>Visualization on which tables are connected and which fields connects the tables</li>
<li>Dropping database</li>
<li>Transferring current fields from current table to another</li>
<li>Generating queries based on selected fields from different tables (I&rsquo;ve only thought of this last night while lying on my bed)</li>
</ul>


<p>Here&rsquo;s a screenshot of what I currently have.</p>

<p><img src="/images/posts/yellowpill/yellowpill.jpg" alt="yellowpill" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Postr]]></title>
    <link href="http://anchetawern.github.io/blog/2012/10/01/introduction-to-postr/"/>
    <updated>2012-10-01T21:10:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2012/10/01/introduction-to-postr</id>
    <content type="html"><![CDATA[<p>I finally got the time to post something to my blog. These past 2 weeks I have been busy with my side project which I call Postr.
The main topic of this post is basically the Postr App which is now accessible at <a href="https://postr-wern.rhcloud.com/">postr-wern.rhcloud.com</a>
It may still have a few bugs but I think its already usable. Postr is an app that will allow you to simultaneously update your
status on Facebook which includes your facebook profile, groups where you are a member, and pages which you have liked. It can also post
to Twitter.</p>

<h4>Some Mistakes</h4>

<p>I&rsquo;ve also made some mistakes while I was creating the app. Here are some of those:</p>

<ul>
<li><p>First I wrote too much repeated code. It was so easy at first because I was
just copy pasting things here and there but I remembered the Don&rsquo;t Repeat Yourself policy for programmers so I&rsquo;ve done
some refactoring to reduce the lines of code especially on the client side. What I&rsquo;ve done is to encapsulate the logic inside a single
method and supplied different arguments to alter the results.</p></li>
<li><p>Second, I underestimated how much the codebase will grow. My plans
were pretty small at first, just simultaneously post to social networking sites. Boom! Done! That&rsquo;s what I thought. I also thought that
it will only keep me busy for a week but that was a mistake. Because of that mistake I also wrote the backend code (PHP) in procedural form.
That was really a stupid mistake and I ended up having to replace almost every procedural code that I&rsquo;ve written and converted it to OOP.</p></li>
<li><p>Third, I was too eager to finish it at the shortest time possible which was probably the root of all the problems that I encountered.
I worked on the project full time 7 days a week (or maybe not cause I also watched some anime and read some blogs for 2 or more hours).
This was probably a good thing cause I was really focused in finishing it. But it has also caused me to write some crappy code which I had
to replace later on.</p></li>
<li><p>Fourth is the lack of planning. I didn&rsquo;t even created a mockup as a basis for the app that I&rsquo;m trying to create. I didn&rsquo;t even sketched or
wrote anything on paper. I started typing codes immediately.</p></li>
</ul>


<h4>Problems Encountered</h4>

<p>Like any other human person I also encountered some problems.</p>

<ul>
<li><p>First is the problems with inputs (arguments). I didn&rsquo;t double-checked what I was typing and that lead to output that I didn&rsquo;t expect.</p></li>
<li><p>Second is a problem regarding version control. I&rsquo;m using Git and I&rsquo;m very happy with it.
And yes I only know the commands that I use daily like <code>git add [some file]</code> , <code>git commit -m "[what did I do?]"</code>, <code>git push</code>, <code>git branch</code>, <code>git checkout</code>, <code>git rm</code>.
There are times when I just Google things up and I just mindlessly execute the first command that I see (probably from Stackoverflow).
There was a time when I suddenly execute <code>git rm *.php</code>. Guess what happened. I&rsquo;ll give you 3 seconds (though your probably already know if you&rsquo;re using Git daily).
The command deleted all the php files in my project. Thankfully I was able to commit my changes before doing that dreadful mistake.
Another Google search and I found the command <code>git reset --hard HEAD</code> which saved my life. What it does is to revert back to the previous commit.</p></li>
<li><p>Third is the problem with deployment. I&rsquo;ve deployed the Postr app to <code>Openshift</code> which is a free application platform.
I&rsquo;m on Windows so I guess its only natural that I will have problems when I push my code to a Linux Server.
The problem that I had was that its not loading the resources from a <code>CDN</code> specifically <code>JQuery UI</code> at first I thought that there
was a problem with my input but the problem was simply that the resource were not being loaded. Because of this I had to download <code>JQuery UI</code> to the app folder.</p></li>
</ul>


<h4>Things I learned</h4>

<ul>
<li><p>I learned about the Facebook SDK a lot. I learned about <code>fql</code> and that you could join tables using <code>fql.multiquery</code>.
I also learned that you cannot do <code>SELECT *</code> using <code>fql</code> you really have to explicitly tell facebook the fields that you need.
I also learned that client side can read the current session even if the user has logged in to Facebook using PHP. This is by setting the <code>cookie</code> property to <code>true</code>
when initializing Facebook via the <code>FB.init</code> method.</p></li>
<li><p>I also learned how to create Facebook, Twitter, LinkedIn, Google, and Tumblr apps. Basically the only thing that&rsquo;s common to them is that
they have an access token and access secret which you can then paste into the library that you are going to use to connect to the <code>API's</code> that
they provide. The libraries are mostly using <code>curl</code> to communicate with the <code>API</code> that the service provides.</p></li>
<li><p>I also learned about a super awesome PHP library called <a href="http://eden.openovate.com/">eden</a> which is used for rapid prototyping.
It has some really nice classes for connecting to Twitter, Facebook, Google Plus and other online services which you can easily use to connect to those
services easily.</p></li>
</ul>


<h4>Walkthrough</h4>

<p>Here&rsquo;s a little walkthrough of the app.</p>

<p>Index page.</p>

<p>  <img src="/images/posts/postr/index.jpg" alt="postrIndex" /></p>

<p>Postr main age where you can create your status updates.</p>

<p>  <img src="/images/posts/postr/postr.jpg" alt="postrMain" /></p>

<p>Main settings.</p>

<p>  <img src="/images/posts/postr/postrsettings.jpg" alt="mainsettings" /></p>

<p>Facebook settings</p>

<p>  <img src="/images/posts/postr/fbsettings.jpg" alt="fbSettings" /></p>

<h4>Features to be Added in the Future</h4>

<p>Of course this doesn&rsquo;t end here. Here are some features that I would certainly add in the future:</p>

<ul>
<li>Posting status updates to LinkedIn, Google Plus, and Tumblr</li>
<li>Fetching old status updates from Facebook, Twitter, Google Plus and Tumblr and allow the user to post it to other social networking sites.</li>
<li>Scheduling of posts &ndash; Openshift also supports Cron Jobs but the main problem will be expiring access tokens. I love twitter cause their access tokens doesn&rsquo;t expire.</li>
</ul>


<h4>Conclusion</h4>

<p>That&rsquo;s pretty much everything I wanted to say about Postr. If anyone is interested in testing it out please go to <a href="http://postr-wern.rhcloud.com">postr-wern.rhcloud.com</a> and let me know if it breaks for you. Thanks!</p>
]]></content>
  </entry>
  
</feed>
