<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: infinite-scroll | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/infinite-scroll/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-05-14T09:09:28+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Implement Infinite Scroll in Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2015/03/01/how-to-implement-scroll-in-laravel/"/>
    <updated>2015-03-01T14:39:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/03/01/how-to-implement-scroll-in-laravel</id>
    <content type="html"><![CDATA[<p>In this quick tip I&rsquo;ll be showing you how to easily implement infinite scroll in laravel. In the back-end, we will be using laravel&rsquo;s pagination functionality. And in the front-end, we&rsquo;ll be using <a href="https://github.com/infinite-scroll/infinite-scroll">jQuery infinite scroll</a>. You can ahead and download the jquery.infinitescroll.min.js file from that page and save it on your project directory.</p>

<p>First thing that you need to do is return the data that you want to infinitely scroll from the controller:</p>

<p>```php
&lt;?php
public function getNewsPage(){</p>

<pre><code>$date = date('Y-m-d');
$news = News::where('date', '=', $date)-&gt;paginate(10);
$page_data = array(
    'news' =&gt; $news
);
return View::make('news', $page_data);
</code></pre>

<p>}
?>
```</p>

<p>And then from your view file (<code>news.blade.php</code>) just loop through the items that you wish to output:</p>

<p>```html</p>

<div id="news">
    <ul id="items">             
    @foreach($news as $item)
        <li class="item">
            <a href="" target="_blank"></a>
        </li>
    @endforeach
    
    </ul>
</div>


<p>```</p>

<p>Be sure to include jquery and jquery.infinitescroll.min.js file before the closing body tag:</p>

<p>```html</p>

<script src=""></script>


<script src=""></script>


<p></body>
```</p>

<p>Next, create the javascript file that will call the infinitescroll plugin and add the following code:</p>

<p>```javascript
(function(){</p>

<pre><code>var loading_options = {
    finishedMsg: "&lt;div class='end-msg'&gt;Congratulations! You've reached the end of the internet&lt;/div&gt;",
    msgText: "&lt;div class='center'&gt;Loading news items...&lt;/div&gt;",
    img: "/assets/img/ajax-loader.gif"
};

$('#items').infinitescroll({
  loading : loading_options,
  navSelector : "#news .pagination",
  nextSelector : "#news .pagination li.active + li a",
  itemSelector : "#items li.item"
});
</code></pre>

<p>})();
```</p>

<p>Breaking it down. First we wrap everything in a self-executing anonymous function to make sure that the script that were writing won&rsquo;t have a way of messing up with the other scripts in our page, if any. Next, we setup options required by infinite scroll by means of a JavaScript object. Here&rsquo;s a brief description of each:</p>

<ul>
<li><code>finishedMsg</code> &ndash; the html or text that you want to show once the user has reached the last page.</li>
<li><code>msgText</code> &ndash; the text that you want to show while the next page is being loaded from the back-end.</li>
<li><code>img</code> &ndash; the image that you want to show while the next page is being loaded from the back-end. Usually this is a gif animation that indicates that something is happening.</li>
</ul>


<p>Next we call the infinitescroll plugin on the main news wrapper. This takes up an object as its argument. The object contains the following items:</p>

<ul>
<li><code>loading</code> &ndash; the loading options that we have setup earlier.</li>
<li><code>navSelector</code> &ndash; the jquery selector that targets the pagination wrapper. Laravel gives it a class of <code>pagination</code> by default.</li>
<li><code>nextSelector</code> &ndash; the element indicating the next page. Laravel adds the <code>active</code> class on the <code>li</code> representing the current page. So all we need to do is to traverse to the next one by using the <code>+</code> selector and then the anchor element.</li>
<li><code>itemSelector</code> &ndash; an individual item.</li>
</ul>


<h3>Conclusion</h3>

<p>That&rsquo;s it for this quick tip. With the jquery infinite scroll plugin and laravel&rsquo;s pagination functionality, you can implement infinite scroll in your apps with ease.</p>
]]></content>
  </entry>
  
</feed>
