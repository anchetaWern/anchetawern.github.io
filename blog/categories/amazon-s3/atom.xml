<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: amazon-s3 | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/amazon-s3/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-08-02T19:54:30+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon S3]]></title>
    <link href="http://wern-ancheta.com/blog/2015/06/05/getting-started-with-amazon-s3/"/>
    <updated>2015-06-05T05:28:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/06/05/getting-started-with-amazon-s3</id>
    <content type="html"><![CDATA[<p>Amazon S3 is Amazon&rsquo;s file storage service. It allows users to upload their files to their server, for later access or for sharing to other people. In this tutorial I&rsquo;m going to walk you through how to use amazon s3 within your PHP applications.</p>

<p>First thing that you need to do is create a <code>composer.json</code> file and add the following:</p>

<p>```
{</p>

<pre><code>"require": {
    "aws/aws-sdk-php": "2.7.*@dev"
}
</code></pre>

<p>}
```</p>

<p>Next execute <code>composer install</code> from your terminal to install the Amazon Web Service SDK.</p>

<p>Once the installation is done you can now create a <code>tester.php</code> file which we will use for interacting with the Amazon AWS API. Add the following code to the file:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Aws\S3\Exception\S3Exception;
use Aws\Common\Aws;
?>
```</p>

<p>What the code above does is include the autoload file so that we can use the AWS SDK from our file. Next we set to use the <code>Aws\S3\Exception\S3Exception</code> and <code>Aws\Common\Aws</code> namespace so can access the different classes that are available in those namespaces. One of which classes is the <code>Aws</code> class which we can use to set the configuration options for the Bucket where we are trying to connect to. All we have to do is call the <code>factory</code> method and pass in the path to the configuration file:</p>

<p><code>php
&lt;?php
$aws = Aws::factory('config.php');
?&gt;
</code></p>

<p>The configuration file contains the following code:</p>

<p>```php
&lt;?php
return array(</p>

<pre><code>'includes' =&gt; array('_aws'),
'services' =&gt; array(  
    'default_settings' =&gt; array(
        'params' =&gt; array(
            'credentials' =&gt; array(
                'key'    =&gt; 'YOUR_AWS_API_KEY',
                'secret' =&gt; 'YOUR_AWS_API_SECRET',
            ),
            'region' =&gt; 'YOUR_BUCKET_REGION'
        )
    )
)
</code></pre>

<p>);
?>
```</p>

<p>The configuration file basically just returns an array that contains the options that we need. First of those is the <code>includes</code>, which allows us to bootstrap the configuration file with AWS specific features. Next is the <code>services</code> where we specify the API credentials and region.</p>

<h4>Uploading Files</h4>

<p>Once that&rsquo;s done we can now upload files to the s3 bucket of your choice by using the <code>$aws</code> object and calling the <code>get</code> method. This method takes up the name of the AWS service you want use. In this case were using s3 so we put in <code>s3</code>. Next we call the <code>putObject</code> method on the <code>$s3</code> object and pass in the required parameters as an array. The required keys are <code>Bucket</code>, <code>Key</code>, <code>Body</code> and <code>ACL</code>. <code>Bucket</code> is the name of the bucket where you want to upload the file. <code>Key</code> is the path to the file. With s3 you don&rsquo;t have to worry if the directory where you are uploading the file already exists. No matter how deep it is, s3 automatically creates the directories for you. Next is the <code>Body</code> which takes up the results of the <code>fopen</code> method call. This method takes up the path to the file in your local computer and the operation you want to perform. In this case we just want to read the file contents so we specify <code>r</code>. Next is the <code>ACL</code> or the Access Control List of an object. Its basically like a file permission. Here we specified <code>public-read</code> which means that the file can be read publically. For more information about ACL, you can check out <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">this page</a>. We wrap all of those code inside a try catch so we can handle errors gracefully.</p>

<p>```php
&lt;?php
$s3 = $aws->get(&lsquo;s3&rsquo;);</p>

<p>try{</p>

<pre><code>$s3-&gt;putObject(array(
    'Bucket' =&gt; 'NAME_OF_BUCKET',
    'Key' =&gt; '/path/to/file/filename',
    'Body' =&gt; fopen('/path/to/file_to_uploads', 'r'),
    'ACL' =&gt; 'public-read',
));
</code></pre>

<p>}catch (S3Exception $e){</p>

<pre><code>echo "There was an error uploading the file.&lt;br&gt;";
echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Deleting Files</h3>

<p>Next here&rsquo;s how to delete existing files from your s3 bucket. This uses the <code>deleteObject</code> method which takes up the name of the bucket and the path to the file as its argument.</p>

<p>```php
&lt;?php
try{</p>

<pre><code>$s3-&gt;deleteObject(array(
    'Bucket' =&gt; 'NAME_OF_BUCKET',
    'Key' =&gt; '/path/to/file/filename'
));
</code></pre>

<p>}catch(S3Exception $e){</p>

<pre><code>echo "There was an error deleting the file.&lt;br&gt;";
echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Listing Buckets</h3>

<p>Lastly here&rsquo;s how to get a list of buckets that are currently in your Amazon Account:</p>

<p>```php
&lt;?php
$result = $s3->listBuckets();</p>

<p>foreach ($result[&lsquo;Buckets&rsquo;] as $bucket) {</p>

<pre><code>echo "{$bucket['Name']} - {$bucket['CreationDate']}&lt;br&gt;";
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to work with Amazon S3 from within your PHP applications. Specifically, we&rsquo;ve taken a look at how to upload files, delete files and list buckets.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-s3.html">Amazon Simple Storage Service PHP Guide</a></li>
<li><a href="http://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.S3.S3Client.html">AWS S3 API Reference</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
