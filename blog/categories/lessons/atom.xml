<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lessons | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/lessons/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-07-24T18:30:27+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things I wish I was told when I first started Web Development]]></title>
    <link href="http://anchetawern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development/"/>
    <updated>2013-02-09T14:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development</id>
    <content type="html"><![CDATA[<p>In this post I want to share some of the things I wish someone told me when I first started Web Development.
Things that could have made me a better developer.
Things that could have gotten me into the right path when I first started.</p>

<!--More-->


<h3>The learning doesn&rsquo;t stop</h3>

<p>There&rsquo;s always a new technology, tools, and methodology
that you will need to learn in order to become a better developer.
This is a truth not just for web developers but for any profession as well.
The only thing is the learning in the web development industry have to go in a faster pace if you want to stay in the game.</p>

<h3>There are many ways to accomplish one thing</h3>

<p>There are many ways to accomplish one thing but there are only
a few best practices that you need to follow.
Best practices are industry standard way of doing things.
Always Google the best practices for every programming language, technology, tool or methodology that you&rsquo;re trying to learn.
So that you will be doing things the right way right from the very start.
For PHP there&rsquo;s <a href="http://www.phptherightway.com/">PHP the right way</a>, <a href="http://phpbestpractices.org/">PHP Best Practices</a> and the <a href="http://php.net/">official PHP site</a>. And for JavaScript there&rsquo;s <a href="http://jstherightway.com/">JS the right way</a>.</p>

<h3>Not everything in the web is right</h3>

<p>When I was in College we started learning HTML and CSS using <a href="http://www.w3schools.com/">W3Schools</a> and <a href="http://www.htmlgoodies.com/">HTMLGoodies</a>. And we used the following to build an HTML page:</p>

<ul>
<li>TD colspan and TD rowspan</li>
<li>Frames</li>
<li><blink> tags</li>
</ul>


<p>Yuck right? But now there&rsquo;s <a href="https://developer.mozilla.org/en-US/">MDN</a> and <a href="http://www.webplatform.org/">Web Platform</a> that teaches us the right way of doing things.</p>

<p>Going back to the main topic. Not everything in the web is right so don&rsquo;t believe everything people say.
Most of the tutorials in the web shows you how to do things but often times its not a best practice.
So don&rsquo;t just blindly copy and paste codes that you find in the web.
Always see to it that you perform a Google search on the specific method that the author have used in the blog
post and check what other people are saying and decide for yourself which method you would follow.</p>

<h3>There are lots of learning resources that you could use</h3>

<p>There are lots of learning resources that you could use.
But always try to check the authority of where you&rsquo;re learning from.
Check what other people says about that particular resource.
Lastly see for yourself if they can give you the education that you need (teaches the standard way of doing things not the hacky way).
Here are some of the learning resources that I would personally recommend:</p>

<ul>
<li><a href="http://www.codecademy.com">Code Academy</a></li>
<li><a href="https://www.udacity.com/">Udacity</a></li>
<li><a href="http://www.codeschool.com/">Code School</a></li>
<li><a href="https://www.khanacademy.org/">Khan Academy</a></li>
</ul>


<h3>There&rsquo;s always something to improve</h3>

<p>The code that you write today won&rsquo;t be perfect. 3 or 4 days later you will see something that
needs improvement. Sometimes you will even ask yourself: why did I even write this crappy code?
Or maybe: Who wrote this? It sucks!</p>

<h3>There are lots of tools that you could use</h3>

<p>And by tools I mean the tools that you can use for developing applications.
Sublime Text is really hot these days but it doesn&rsquo;t mean that you should use it.
The tools that you will use always depends on which feels right for you.
If dreamweaver feels right for you and you think you&rsquo;re productive when using it then don&rsquo;t give it up.
Although its always recommended that you try out different tools so that you&rsquo;ll have
an idea of how it can help you achieve your daily development tasks.</p>

<h3>There will never be enough time learn everything you want to learn</h3>

<p>No matter how much time you have there will never be enough time to learn everything
you want to learn so take it easy. Learn one technology at a time.
Everything that is rushed ends up like crap. You just have to enjoy while learning.
Make sure you understand everything that you&rsquo;re learning and don&rsquo;t take shortcuts.</p>

<h3>Expose Your Skills</h3>

<p>If you plan on Freelancing then this is the way to go.
Share your thoughts in the technologies, tools, coding practices, and methodologies that you&rsquo;re using.
Answer some questions on <a href="http://stackoverflow.com/">Stackoverflow</a>, join discussions at <a href="http://news.ycombinator.com/">Hacker News</a>, create a youtube channel and upload some video tutorials that you have created.
Create side projects and upload your code to <a href="https://github.com/">Github</a>.
Create a portfolio and LinkedIn or Twitter account to show your skills to the world.
I won&rsquo;t be able to assure you that this will get you a job but its a good start to give you the exposure that you need. Just make sure that all of the content that you&rsquo;re producing is good. Don&rsquo;t publish anything that hasn&rsquo;t been proof-read. When writing a tutorial don&rsquo;t assume too much but don&rsquo;t give out too much information either.</p>

<h3>Salary doesn&rsquo;t really matter when first starting out</h3>

<p>The salary that you make doesn&rsquo;t really matter when first starting out.
There are even people who do a project for free just to have something to put
on their portfolio. What is important is that you&rsquo;re given the time to learn the technologies
required to do the job and you&rsquo;re not being pressured into producing an application in a week.
Because if that&rsquo;s the job that you&rsquo;re going to do when first starting out then you&rsquo;ll only end up
with writing crappy code. Nothing good actually comes out from being pressured and being forced to finish things fast.</p>

<h3>Love what you do</h3>

<p>Lastly, you must love what you do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons Learned from putting a Software into Production Testing]]></title>
    <link href="http://anchetawern.github.io/blog/2012/12/25/lessons-learned-from-putting-a-software-into-production-testing/"/>
    <updated>2012-12-25T20:09:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2012/12/25/lessons-learned-from-putting-a-software-into-production-testing</id>
    <content type="html"><![CDATA[<ol>
<li>Write Code</li>
<li>Test in the browser</li>
<li>If it works, continue writing another code. If it doesn&rsquo;t, identify what&rsquo;s wrong with the code and debug it.</li>
</ol>


<p>Does these steps look familiar to you? Usually that&rsquo;s enough for small-sized software which only takes 1-2 months to develop. But the same is not true for medium-large sized software which takes 3-12 months to develop.</p>

<p>I&rsquo;ve made a lot of mistakes when I developed a large size software and here are some of those:</p>

<ul>
<li>No server-side validation</li>
<li>Repeated code everywhere</li>
<li>Procedural code everywhere</li>
<li>Not using MVC</li>
<li>Non-defensive programming</li>
<li>No code written for when things doesn&rsquo;t go as expected (error handlers)</li>
<li>No code written that will handle concurrency</li>
<li>No unit testing</li>
</ul>


<p>I&rsquo;ve made a lot of mistakes that I don&rsquo;t want others to repeat again that&rsquo;s why I&rsquo;m writing about it.</p>

<h4>No server-side validation</h4>

<p>Don&rsquo;t write validation code for just the server side or client side alone.
There should be validations written for both the client side and the server side.
This may sound absurd but that&rsquo;s just how things should be.
We need to write client side validation code to automatically inform the user as soon as possible(onKeyUp, onBlur)
if the inputted data is invalid or incorrect.
But we also need to write server side validation to deal with malicious users who can simply disable JavaScript in their browsers to compromise the client side validation. This will also serve as a backup validation in case your client side validation fails you.</p>

<h4>Repeated code everywhere</h4>

<p>Don&rsquo;t just copy and paste code everywhere. Normally you would do this to save time but you&rsquo;re not actually saving time in the long-run. It will be a nightmare maintaining code that has the same code everywhere. This means that if there are some changes in the markup you will have to change the JavaScript code which depends on that markup.
You can say that you won&rsquo;t ever need to make changes but it will always happen. No code is ever written on stone.</p>

<h4>Procedural code everywhere</h4>

<p>You would also want to avoid writing procedural code. You will most likely have to write object oriented code for medium-large sized software to avoid code repetition.
The main idea behind object oriented programming is that you write classes which has member variables and methods that you can reuse later on.</p>

<h4>Not Using MVC</h4>

<p>MVC is basically a way to separate the business logic (computations, how you treat the data) from the presentation (things that the user sees). In other words its a way on how you organize your code so that its easier to find things later on. It usually takes longer to write code that follows the MVC pattern but the time that you will save in maintaining(understanding) code written in this pattern would be the biggest reason why you would want to use it.</p>

<h4>Non-defensive Programming</h4>

<p>You would also want to avoid the mentality that things can&rsquo;t go wrong. Because the truth is they always will(especially on production). Always be a negative thinker when programming. Think of ways in which your code can break.
Think of user inputs that can break through your validation and test them against your code. Always ask the question &ldquo;what if?&rdquo;.</p>

<ul>
<li>What if I enter an sql query that drops the whole table from the database?</li>
<li>What if the server suddenly burns and turns to ashes?</li>
<li>What if the data wasn&rsquo;t backed up and the server is strucked by lightning?</li>
<li>What if the system is used by 1 million users at the same time?</li>
</ul>


<p>Just don&rsquo;t go overboard when asking yourself these questions. Just think of what can possibly happen.</p>

<h4>No code written for when things doesn&rsquo;t go as expected (error handlers)</h4>

<p>Always write code that will handle errors no matter how smoothly you think the software will flow.
It&rsquo;s like the Plan B for when Plan A fails.</p>

<h4>No code written that will handle concurrency</h4>

<p>Always try to see to it that the code that you are writing will be able to handle concurrency.
What I mean by concurrency is that when 10 million users try to register an account on your app at once.
What will happen to the server or the database? Be sure you know how many users will most likely use the software at once then test against it.</p>

<h4>No unit testing</h4>

<p>Lastly there&rsquo;s unit testing. If you&rsquo;re not aware of TDD you should start researching and apply it on your future projects. It&rsquo;s a good way to ensure that the code is really working. You will have to write twice or thrice as much code when applying TDD but the amount of time that you can save in ensuring that a piece of code still works after some modifications and updates would be the main reason why you would want to use TDD.</p>

<p>Those are the things that I hope I knew when I created a large-sized software.</p>
]]></content>
  </entry>
  
</feed>
