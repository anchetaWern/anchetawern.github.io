<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ajax | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2014-02-18T17:03:11+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to perform cross-domain AJAX requests]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests/"/>
    <updated>2013-10-24T18:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how you can perform cross-domain AJAX requests.
There&rsquo;s really no bullet-proof method of doing this. It might work, it might not since AJAX requests should only be performed within the same domain due to security concerns.</p>

<!-- more -->


<p>Note that I&rsquo;m not going to show how to perform an AJAX request to any domain from any domain. What I&rsquo;m going to show you is how to perform an AJAX request to a different domain which you have control over the code.</p>

<p>For example you want to get some data via AJAX from <code>xyz.com</code>. You are making the request from <code>abc.com</code> so it wouldn&rsquo;t work if you do something like:</p>

<p>```javascript
$.get(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;}, function(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>});
```</p>

<p>If you have control over the code that returns the response that you need, all you need to do is to convert the data that you&rsquo;re returning to JSON string and then wrap it up with a function call. Here&rsquo;s an example:</p>

<p><code>php
&lt;?php
$data = array('fname' =&gt; 'haru', 'lname' =&gt; 'tora');
echo "parse_results(" . json_encode($data) . ")";
?&gt;
</code> entry_title</p>

<p>When calling the method from <code>abc.com</code> all you have to do is to use the <code>$.getJSON()</code> method and declare the same function that you used on <code>xyz.com</code>. In this case the name of the function is <code>parse_results()</code>:</p>

<p>```javascript
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.getJSON(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;});
```</p>

<p>You can also use the more robust <code>$.ajax()</code> method if you want:</p>

<p>```
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.ajax({</p>

<pre><code>url : 'http://xyz.com/get_data',
type : 'GET',
dataType: 'jsonp',
data : {
    'data' : 'abc'
}
</code></pre>

<p>});
```</p>

<p>If this doesn&rsquo;t work you can also use the <a href="https://github.com/nbio/csshttprequest">csshttprequest</a> library:</p>

<p>```
CSSHttpRequest.get(</p>

<pre><code>"http://somewhere/in/the/interwebs",
function(response){ 
    //do something with the response
}
</code></pre>

<p>);
```</p>

<p>Note that you can only use this library to pass in arguments using GET:</p>

<p>```
var title = $(&lsquo;#title&rsquo;).val();</p>

<p>CSSHttpRequest.get(</p>

<pre><code>"http://somewhere/in/the/interwebs?title=" + title,
function(response){ 
    //do something with the response
}
</code></pre>

<p>);
```</p>
]]></content>
  </entry>
  
</feed>
