<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-03-03T06:56:45+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Fake Data in PHP with Faker]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker/"/>
    <updated>2016-01-28T07:13:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker</id>
    <content type="html"><![CDATA[<p>In the good old days, I often test PHP applications by accessing it directly from the browser and input the data in the forms. Today, with the explosion of <a href="https://github.com/ziadoz/awesome-php">awesome PHP libraries</a> you can now generate most kinds of data by using code alone. The data can then be directly inserted into the database. This reduces the need to input data directly into the app. In this tutorial, I&rsquo;ll be walking you through <a href="https://github.com/fzaninotto/Faker">Faker</a>, a PHP library that generates fake data for you.</p>

<h3>Installation</h3>

<p>You can install Faker by executing the following command. Note that this requires you to have <a href="https://getcomposer.org/">Composer</a> installed.</p>

<p><code>
composer require fzaninotto/faker
</code></p>

<h3>Concepts</h3>

<p>Here are a few concepts that you need to remember before moving on.</p>

<ul>
<li><strong>generators</strong> &ndash; responsible for generating data.</li>
<li><strong>providers</strong> &ndash; the data source for generators. Generators can&rsquo;t really stand by themselves. Providers really shine on the localization feature of Faker. Real places, phone numbers in countries can be generated by Faker through the use of providers.</li>
<li><strong>formatters</strong> &ndash; these are the properties that you can access from a specific generator. Examples include name, city, address, and phoneNumber.</li>
</ul>


<h3>Usage</h3>

<p>To use Faker from your file, you need to include the vendor autoload file and create a new Faker instance.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$faker = Faker\Factory::create();
?>
```</p>

<h4>Localization</h4>

<p>Since Faker is an open-source project that anyone can contribute to, lots of localized providers has already been added. You can take advantage of this by passing in the locale when you create a new Faker instance. For example, if you live in the Philippines:</p>

<p><code>php
&lt;?php
$faker = Faker\Factory::create('en_PH');
?&gt;
</code></p>

<p>You can then generate an address in the Philippines by using the <code>address</code> formatter. Note that it&rsquo;s only down to the city level. This means that the street and barangay are using the default providers.</p>

<p><code>php
&lt;?php
echo $faker-&gt;address;
?&gt;
</code></p>

<p>Note that each provider doesn&rsquo;t have generators for every possible formatter. For example, the <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider/en_PH">Philippine provider</a> has only generators for the Address and PhoneNumber. This means that you can only have localized values for those. All the other formatters will utilize the default ones provided by Faker.
For a list of providers, check out <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider">this page</a> in their Github repo.</p>

<h4>Formatters</h4>

<p>Here are the formatters that I commonly use in my projects.</p>

<p>```php
&lt;?php
//person
$faker->name;
$faker->firstName(&lsquo;male&rsquo;);
$faker->lastName;</p>

<p>//address
$faker->address;
$faker->streetName;
$faker->streetAddress;
$faker->postCode;
$faker->address;
$faker->country;</p>

<p>//company
$faker->company;</p>

<p>//date and time
$faker->year;
$faker->month; //number representation of a month
$faker->monthName;
$faker->timezone; //valid php timezone (<a href="http://php.net/manual/en/timezones.php">http://php.net/manual/en/timezones.php</a>)
$faker->time; //string time
$faker->dateTime; //datetime object
$faker->unixTime; //unix timestamp</p>

<p>//internet
$faker->email;
$faker->userName;
$faker->password;</p>

<p>//payment
$faker->creditCardType;
$faker->creditCardNumber;</p>

<p>//images
$faker->imageUrl(50, 60); //where width=50 and height=60
?>
```</p>

<h4>Creating New Providers</h4>

<p>If you want to create a provider for your own project, you can easily extend Faker. For example, if you want to generate random pokemon names. The first thing that you need to do is to declare the namespace in which the class belongs. Next, declare a new class and have it extend the faker provider base class. Inside the class, create an array of Pokemon names. Create a new function and call it <code>pokemon</code>, this is the function that will be called later on to generate a random pokemon name. To pick a random item from the array you created, use the <code>randomElement</code> function and then pass in the array which you want to use as the data source.</p>

<p>```php
&lt;?php
namespace Faker\Provider;</p>

<p>class Pokemon extends \Faker\Provider\Base {</p>

<p>  protected static $pokemon = array(</p>

<pre><code>'Pikachu',
'Bulbasaur',
'Cubone',
'Charizard',
'Marowak',
'Gastly',
'Alakazam',
'Arcanine',
'Vaporeon',
'Flareon',
'Venusaur',
'Wartortle'
</code></pre>

<p>  );</p>

<p>  public function pokemon(){</p>

<pre><code>return static::randomElement(static::$pokemon);
</code></pre>

<p>  }
}
?>
```</p>

<p>Save the file and name it <code>Pokemon.php</code>. You can save it any where in your project as long as you can easily reference it from your main file.</p>

<p>On your main file, include the vendor autoload together with the file that you&rsquo;ve just created.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
require_once 'Pokemon.php';
?&gt;
</code></p>

<p>Create a new faker generator. This is a bare bones generator with no providers assigned to it. So if you use <code>$faker-&gt;name</code>, all you get is an error.</p>

<p><code>php
&lt;?php
$faker = new Faker\Generator();
?&gt;
</code></p>

<p>If you want to use the default providers, you can include them by calling the <code>addProvider</code> method and passing in a new instance of the provider that you want to include.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\en_US\Person($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Address($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\PhoneNumber($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Company($faker));
$faker-&gt;addProvider(new Faker\Provider\Lorem($faker));
$faker-&gt;addProvider(new Faker\Provider\Internet($faker));
?&gt;
</code></p>

<p>To add the new Pokemon provider.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\Pokemon($faker));
?&gt;
</code></p>

<p>Once that&rsquo;s done, you can now call the new <code>pokemon</code> formatter.</p>

<p><code>
&lt;?php
$faker-&gt;pokemon; //marowak
?&gt;
</code></p>

<h4>Integration with Your PHP Application</h4>

<p>Most PHP frameworks today already comes with a database seeding feature. If you&rsquo;re using Laravel, it has a database <a href="http://laravel.com/docs/5.0/migrations">migration and seeding functionality</a>. You can simply install Faker into your project, generate a new seeder and then use Faker inside the seeder. This allows you to seed your database with Fake data in a single command by using <a href="http://laravel.com/docs/5.0/artisan">Artisan CLI</a>. If your framework doesn&rsquo;t include a seeding feature, you can use Phinx, a database-migration tool for PHP. This tool also allows you to <a href="http://docs.phinx.org/en/latest/seeding.html">create seeders for your database</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Faker library to generate fake and random data for testing your PHP applications. Check out the <a href="https://github.com/fzaninotto/Faker">official github page</a> for more information regarding its usage.</p>
]]></content>
  </entry>
  
</feed>
