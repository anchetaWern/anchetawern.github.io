<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-03-28T13:10:40+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Stripe API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/03/22/getting-started-with-stripe-api/"/>
    <updated>2015-03-22T11:08:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/03/22/getting-started-with-stripe-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through the Stripe&rsquo;s API. Let&rsquo;s start by defining what Stripe is. From the Stripe website itself:</p>

<p><blockquote><p>Stripe is a developer-friendly way to accept payments online and in mobile apps.<br/>We process billions of dollars a year for thousands of companies of all sizes.</p></blockquote></p>

<p>Now we know that Stripe is a payment processor, similar to Paypal.</p>

<p>With Stripe, you can accept payments in three ways:</p>

<ul>
<li>Embedded Form</li>
<li>Custom Form</li>
<li>Mobile App Integration</li>
</ul>


<p>In this tutorial I&rsquo;ll only be walking you through the first two: embedded form and custom form.</p>

<h3>Embedded Form</h3>

<p>If you do not want to bother with creating your own checkout forms, an embedded form is the way to go. An embedded form is basically Stripe&rsquo;s checkout widget. All you have to do is include their script on your website, specifically inside a form element. And the front-end side is already handled for you.</p>

<p>```html
<form action="/checkout.php" method="POST">
  &lt;script</p>

<pre><code>src="https://checkout.stripe.com/checkout.js" class="stripe-button"
data-key="pk_test_xxxxxxxxxxxxxxxxxxx"
data-amount="1000"
data-name="Web Development"
data-description="Develop a website"
data-image="http://mywebsite.com/img/logo.png"&gt;
</code></pre>

<p>  </script>
</form>
```</p>

<p>Breaking it down. For the script to work, you need to supply a value to the following attributes:</p>

<ul>
<li><code>src</code> &ndash; Stripe&rsquo;s checkout script. This should be <code>https://checkout.stripe.com/checkout.js</code></li>
<li><code>data-key</code> &ndash; your stripe publishable key. You can find it by clicking on your username, then select &lsquo;account settings&rsquo;, then click on the &lsquo;api keys&rsquo; tab. From there you can use either your test publishable key or your live publishable key. The test key is used for testing. This allows you to supply a fake credit card number and pay for a fake product or service. After successful payment, you can see your fake client from the <a href="https://dashboard.stripe.com/customers">customers</a> page on your Stripe dashboard. Don&rsquo;t forget to switch to <a href="https://dashboard.stripe.com/test/customers">test</a>.</li>
<li><code>data-amount</code> &ndash; the amount you want to charge in cents. Just multiply what you want to charge by 100. So for example you want to charge $10, you need to supply 1000 instead.</li>
<li><code>data-name</code> &ndash; the name of your product or service.</li>
<li><code>data-description</code> &ndash; the description of your product or service.</li>
<li><code>data-image</code> &ndash; your logo. This should be an absolute url.</li>
</ul>


<p>Next we need to install Stripe&rsquo;s library via <a href="https://getcomposer.org/">composer</a>. Add the following code on your <code>composer.json</code> file:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"stripe/stripe-php": "2.*"
</code></pre>

<p>  }
}
```</p>

<p>Once that&rsquo;s done, execute <code>composer install</code> from your terminal. This will fetch the library from the repository.</p>

<p>Next create the <code>checkout.php</code> file and add the following code:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $<em>POST[&lsquo;stripeToken&rsquo;];
$email = $</em>POST[&lsquo;stripeEmail&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, first we included the <code>vendor/autoload.php</code> file so that we can use the Stripe library on our script. Next we initialize the library by setting the Stripe secret key. Next we get the data supplied by Stripe for us from the front-end. The <code>stripeToken</code> is the unique token generated by Stripe, this represents the transaction that the client made on the front-end. That is, paying $10 for our service. Next is the <code>stripeEmail</code>, this is basically just the email supplied by the client. Next we wrap the stripe charge call in a try catch statement. This allows us to capture any error returned by the API and show it to the client. Calling the stripe charge method requires 4 arguments:</p>

<ul>
<li><code>amount</code> &ndash; the amount that you want to charge in cents.</li>
<li><code>currency</code> &ndash; the currency code representing the currency that we want to use.</li>
<li><code>source</code> &ndash; the token that stripe generated on the front-end.</li>
<li><code>description</code> &ndash; a text that we want to assign to the charge. This is usually the clients email. But you can add more details such as the name of the service if you&rsquo;re offering more than one product or service.</li>
</ul>


<p>If the API call is successful, this method returns a whole bunch of data. Such as the amount paid, and the description. In most cases you&rsquo;ll basically only want the id of the transaction. You can get this by accessing the <code>id</code> property:</p>

<p><code>
$charge_id = $charge-&gt;id;
</code></p>

<p>You can then save this on your database as a reference. But of course you can always see this on <a href="https://dashboard.stripe.com/test/payments">your payments page</a>.</p>

<h3>Custom Forms</h3>

<p>If you need to ask additional information from your clients. Or you just want to use your own form. You can use custom forms. This allows you to write your own markup, supply your own fields and style them the way you want it with css. Here&rsquo;s an example of how a custom checkout form might look like:</p>

<p>```html
<form action="checkout.php" method="POST" id="payment-form">
  <div class="errors"></div></p>

<p>  <div></p>

<pre><code>&lt;label for="email"&gt;Email&lt;/label&gt;
&lt;input type="email" id="email" name="email"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="name"&gt;Name&lt;/label&gt;
&lt;input type="text" id="name" name="name"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="card-number"&gt;Card Number&lt;/label&gt;
&lt;input type="text" size="20" data-stripe="number" id="card-number" name="card-number"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="cvc"&gt;Security Code&lt;/label&gt;
&lt;input type="text" size="4" data-stripe="cvc" id="cvc" name="cvc"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
&lt;input type="text" data-stripe="exp-month" name="exp-month"&gt;
&lt;span&gt; / &lt;/span&gt;
&lt;input type="text" data-stripe="exp-year" name="exp-year"/&gt;
</code></pre>

<p>  </div></p>

<p>  <button type="submit">Pay</button>
</form>
```</p>

<p>This form works with the Stripe checkout script by adding the <code>data-stripe</code> attribute to the following fields. Just supply the value on the right-hand side as the value for the <code>data-stripe</code> attribute depending on the field:</p>

<ul>
<li>card number &ndash; <code>card-number</code></li>
<li>security code or cvc &ndash; <code>cvc</code></li>
<li>card expiration month &ndash; <code>exp-month</code></li>
<li>card expiration year &ndash; <code>exp-year</code></li>
</ul>


<p>Next we need to include the stripe checkout script:</p>

<p>```html</p>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>


<p>```</p>

<p>And then set the publishable key. This allows stripe to identify which stripe account the request came from:</p>

<p>```html</p>

<script>
Stripe.setPublishableKey('pk_test_xxxxxxxxxxxxxxxxxxx');
</script>


<p>```</p>

<p>Next we need to define the method that will process the response that we get from Stripe when the client submits the payment form. This takes up 2 parameters: status and response. The status is the <a href="https://stripe.com/docs/api#errors">status code</a>. The response contains the actual Stripe response. This is an object containing information about the transaction. One of those is the <code>id</code> which is basically the token that we need to pass in to the back-end. All we have to do is to append it to the payment form so it gets submitted with the rest of the fields. If there is an error with the request, an error property becomes available in the response object. This contains the error message, we just show it to the user by supplying it as a value to the <code>errors</code> div. After that, we enable the submit button so the client can fix the errors and submit the form again:</p>

<p>```javascript
function processStripeResponse(status, response){
  var form = $(&lsquo;#payment-form&rsquo;);</p>

<p>  if(response.error){</p>

<pre><code>form.find('.errors').text(response.error.message);
form.find('button').prop('disabled', false);
</code></pre>

<p>  }else{</p>

<pre><code>var token = response.id;
form.append($('&lt;input type="hidden" name="stripeToken" /&gt;').val(token));
form.get(0).submit();
</code></pre>

<p>  }
};
```</p>

<p>Next we define the event handler for when the payment form is submitted. This calls the <code>createToken</code> method which requires the payment form and the response handler as its arguments. Don&rsquo;t forget to return <code>false</code> so the form doesn&rsquo;t get submitted. The response handler will be the one which will trigger the submit if the response doesn&rsquo;t have any errors:</p>

<p>```javascript
$(function(){
  $(&lsquo;#payment-form&rsquo;).submit(function(event) {</p>

<pre><code>var form = $(this);
form.find('button').prop('disabled', true);

Stripe.card.createToken(form, processStripeResponse);

return false;
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>On the back-end we can just use the previous code and use the custom fields that we added. Note that the <code>stripeToken</code> field stays the same. We don&rsquo;t need to pass the card number, security code and expiration date:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $_POST[&lsquo;stripeToken&rsquo;];</p>

<p>$email = $<em>POST[&lsquo;email&rsquo;];
$name = $</em>POST[&lsquo;name&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to interact with the Stripe API in order to easily process payments.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://stripe.com/docs">Stripe Docs</a></li>
<li><a href="https://stripe.com/docs/api?lang=php">Stripe API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RabbitMQ in PHP]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php/"/>
    <updated>2014-11-16T15:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php</id>
    <content type="html"><![CDATA[<p><blockquote><p>This article was originally published at Binpress:<br/><a href="http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164">http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164</a></p></blockquote></p>

<p>In this tutorial I&rsquo;m going to walk you through how you can use RabbitMQ in PHP. But first what is RabbitMQ? RabbitMQ is a message broker software. It acts as a middleman between a producer and a consumer. Producer being the data that we want to pass, and consumer being the entity that we want to pass it to. RabbitMQ uses a queue, you can think of it as a mailbox where you drop your letters. RabbitMQ then takes the letters and delivers it to its destination.</p>

<h3>Installing RabbitMQ</h3>

<p>In Ubuntu and other debian based operating system you can install RabbitMQ by executing the following commands from your terminal:</p>

<p><code>
echo "deb http://www.rabbitmq.com/debian/ testing main"  | sudo tee  /etc/apt/sources.list.d/rabbitmq.list &gt; /dev/null
sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
sudo apt-key add rabbitmq-signing-key-public.asc
sudo apt-get update
sudo apt-get install rabbitmq-server -y
sudo service rabbitmq-server start
sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart
</code></p>

<p>What the first command does is to append the rabbitmq source to the software sources list. Next we download the rabbitmq signing key using <code>wget</code>. Then add the key to Ubuntu. Next we call <code>apt-get update</code> to update the software sources list. Next we install the RabbitMQ server, start it then enable RabbitMQ management plugin. This provides an HTTP-based API management for monitoring your RabbitMQ server. Finally we restart the RabbitMQ server so that changes will take effect.
The default username and password is <code>guest</code>. And the default port in which it runs is <code>5672</code>.</p>

<p>If you&rsquo;re on another operating system, you can find how to install RabbitMQ for your specific operating system here: <a href="http://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a>.</p>

<h3>Working with RabbitMQ</h3>

<p>Once you&rsquo;re done installing RabbitMQ, we can now install the AMQP library for PHP. This implements the AMQP (Advanced Messaging Queue Protocol) protocol. As the name suggests it is a protocol used for messaging.
Start by creating a new directory, this is where we will put all the files for testing RabbitMQ. Next create a composer.json file and add the following:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>  "videlalvaro/php-amqplib": "2.2.*"
</code></pre>

<p>  }
}
```</p>

<p>Next, open up your terminal and <code>cd</code> into the directory you created earlier then execute <code>composer install</code> to install the AMQP library.</p>

<p>Before we move on, lets also install <a href="http://swiftmailer.org/">Swiftmailer</a>. You can do that by executing the following command from your terminal. This also adds an entry to Swiftmailer to your composer.json:</p>

<p><code>
composer require swiftmailer/swiftmailer @stable
</code></p>

<p>We will be using Swiftmailer for the sample app that were going to create. What we will do is create an app that will send emails for our users. Normally emails takes a few seconds before it is sent, adding an attachment to the email also adds to that time. In the real world we don&rsquo;t really want our users to wait. What we want to do is make them believe that we have already sent the email for them by outputting to the screen that their message has been sent.
This is where RabbitMQ comes in. We will use it as some sort of a mailbox in which multiple users can just drop their messages in. RabbitMQ will then take care of sending the messages in the background.</p>

<h4>Sending Messages</h4>

<p>First lets create the form to be used for sending emails. This will accept the name and email address of the sender, the email address of the receiver and then the subject and message. Name the file <code>form.php</code>:</p>

<p>```html
&lt;?php
if(!empty($_GET[&lsquo;sent&rsquo;])){
?></p>

<div>
    Your message was sent!
</div>


<p>&lt;?php
}
?>
<form action="mailer.php" method="POST"></p>

<pre><code>&lt;div&gt;
    &lt;label for="from"&gt;From&lt;/label&gt;
    &lt;input type="text" name="from" id="from"&gt;       
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="from_email"&gt;From Email&lt;/label&gt;
    &lt;input type="text" name="from_email" id="from_email"&gt;       
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="to_email"&gt;To Email&lt;/label&gt;
    &lt;input type="text" name="to_email" id="to_email"&gt;           
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="subject"&gt;Subject&lt;/label&gt;
    &lt;input type="text" name="subject" id="subject"&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="message"&gt;Message&lt;/label&gt;
    &lt;textarea name="message" id="message" cols="30" rows="10"&gt;&lt;/textarea&gt;   
&lt;/div&gt;
&lt;div&gt;
    &lt;button type="submit"&gt;Send&lt;/button&gt;
&lt;/div&gt;
</code></pre>

<p></form>
```</p>

<p>Next, create the file which will push the message into the queue. Name the file <code>sender.php</code>.
Require the <code>autoload.php</code> file so that our dependencies will be automatically loaded by PHP. Then use the <code>AMQPConnection</code> and <code>AMQPMessage</code> from the AMQP library. <code>AMQPConnection</code> allows us to create a new connection to the RabbitMQ server and <code>AMQPMessage</code> allows us to create messages that we can push to the queue.</p>

<p>```php
&lt;?php
require_once <strong>DIR</strong> . &lsquo;/vendor/autoload.php&rsquo;;
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;</p>

<p>$connection = new AMQPConnection(&lsquo;localhost&rsquo;, 5672, &lsquo;guest&rsquo;, &lsquo;guest&rsquo;);
$channel = $connection->channel();</p>

<p>$channel->queue_declare(&lsquo;email_queue&rsquo;, false, false, false, false);</p>

<p>$data = json_encode($_POST);</p>

<p>$msg = new AMQPMessage($data, array(&lsquo;delivery_mode&rsquo; => 2));
$channel->basic_publish($msg, &lsquo;&rsquo;, &lsquo;email_queue&rsquo;);</p>

<p>header(&lsquo;Location: form.php?sent=true&rsquo;);
?>
```</p>

<p>Breaking it down, first we create a new connection by creating a new instance of the <code>AMQPConnection</code> class. This requires the following arguments:</p>

<ul>
<li><strong>host</strong> &ndash; the host in which the RabbitMQ server is running. In this case we&rsquo;ve installed RabbitMQ on the same computer we are running the script in. So it should be <code>localhost</code>. Note that in the real world we install RabbitMQ on a another server, different from the one were using to serve our websites. So instead of <code>localhost</code> we use the public ip address of that server.</li>
<li><strong>port</strong> &ndash; the port in which the RabbitMQ server is running.</li>
<li><strong>user</strong> &ndash; the username to use for logging in to the server. By default the username is set to <code>guest</code>.</li>
<li><strong>password</strong> &ndash; the password of the user. By default the password is set to <code>guest</code>.</li>
</ul>


<p>Next we create a channel. We can do that by calling the <code>channel()</code> method from the connection that we have just declared.</p>

<p><code>
&lt;?php
$channel = $connection-&gt;channel();
?&gt;
</code></p>

<p>Next we declare the queue to be used by calling the  <code>queue_declare</code> method.</p>

<p><code>
&lt;?php
$channel-&gt;queue_declare('email_queue', false, false, false, false);
?&gt;
</code></p>

<p>The <code>queue_declare</code> method takes up the following arguments:</p>

<ul>
<li><strong>queue name</strong> &ndash; a name that you want to use for the queue, you can supply anything for this.</li>
<li><strong>passive</strong> &ndash; a boolean value for specifying whether to check for an existing exchange.</li>
<li><strong>durable</strong> &ndash; a boolean value for specifying whether the RabbitMQ holds on to a queue when the server crashes.</li>
<li><strong>exclusive</strong> &ndash; a boolean value for specifying whether the queue is used by only one connection.</li>
<li><strong>auto-delete</strong> &ndash; a boolean value for specifying whether the queue is deleted when the last subscriber unsubscribes.</li>
</ul>


<p>Next we convert the POST data that we receive from the form to a JSON string. We can only pass strings as a message so we&rsquo;ll have to convert this later on into an array on the receiver&rsquo;s end.</p>

<p><code>
&lt;?php
$data = json_encode($_POST);
?&gt;
</code></p>

<p>Next we create a new message. This accepts 2 arguments: the data and an array of options. For the array of options we specify the <code>delivery_mode</code> to 2 which means that the message is persistent. This means that it isn&rsquo;t lost when the server crashes or an error occurs.</p>

<p><code>
&lt;?php
$msg = new AMQPMessage($data, array('delivery_mode' =&gt; 2));
?&gt;
</code></p>

<p>Next we publish the message by calling the <code>basic_publish()</code> method on the channel. This accepts 3 arguments: the message, the exchange and the name of the queue. If you&rsquo;re wondering why we set the value of exchange to an empty string, that&rsquo;s because we don&rsquo;t really need it. The exchange is commonly used for pub-sub patterns. What were using here is just basic publish.</p>

<p><code>
&lt;?php
$channel-&gt;basic_publish($msg, '', 'email_queue');
?&gt;
</code></p>

<p>Finally we just redirect the user to the form.</p>

<p><code>
&lt;?php
header('Location: form.php?sent=true');
?&gt;
</code></p>

<h4>Receiving Messages</h4>

<p>Now were ready to write the code that will receive the messages sent by users. Name the file <code>receiver.php</code>. Here&rsquo;s the full contents of the file:</p>

<p>```
&lt;?php
require_once <strong>DIR</strong> . &lsquo;/vendor/autoload.php&rsquo;;
use PhpAmqpLib\Connection\AMQPConnection;</p>

<p>$connection = new AMQPConnection(&lsquo;localhost&rsquo;, 5672, &lsquo;guest&rsquo;, &lsquo;guest&rsquo;);
$channel = $connection->channel();</p>

<p>$channel->queue_declare(&lsquo;email_queue&rsquo;, false, false, false, false);</p>

<p>echo &lsquo; * Waiting for messages. To exit press CTRL+C&rsquo;, &ldquo;\n&rdquo;;</p>

<p>$callback = function($msg){</p>

<pre><code>echo " * Message received", "\n";
$data = json_decode($msg-&gt;body, true);

$from = $data['from'];
$from_email = $data['from_email'];
$to_email = $data['to_email'];
$subject = $data['subject'];
$message = $data['message'];

$transporter = Swift_SmtpTransport::newInstance('smtp.gmail.com', 465, 'ssl')
  -&gt;setUsername('YOUR_GMAIL_EMAIL')
  -&gt;setPassword('YOUR_GMAIL_PASSWORD');

$mailer = Swift_Mailer::newInstance($transporter);  

$message = Swift_Message::newInstance($transporter)
    -&gt;setSubject($subject)
    -&gt;setFrom(array($from_email =&gt; $from))
    -&gt;setTo(array($to_email))
    -&gt;setBody($message);

$mailer-&gt;send($message);

echo " * Message was sent", "\n";
$msg-&gt;delivery_info['channel']-&gt;basic_ack($msg-&gt;delivery_info['delivery_tag']);
</code></pre>

<p>};</p>

<p>$channel->basic_qos(null, 1, null);
$channel->basic_consume(&lsquo;email_queue&rsquo;, &lsquo;&rsquo;, false, false, false, false, $callback);</p>

<p>while(count($channel->callbacks)) {</p>

<pre><code>$channel-&gt;wait();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, the first 5 lines of code are basically the same as the one we have on the <code>sender.php</code> file. Then we just output a message saying how we can stop the file from running. We need to run this file from the terminal so to stop it we just hit <code>CTRL + C</code>.</p>

<p>Next we declare a named function. This will be used for processing the message that we passed from the sender. The first thing it does is output that the message was received. Then we use <code>json_decode()</code> to convert the JSON string back to an array.</p>

<p>```
&lt;?php
$callback = function($msg){</p>

<pre><code>echo " * Message received", "\n";
$data = json_decode($msg-&gt;body, true);
</code></pre>

<p>};
?>
```</p>

<p>Next we extract the data and assign them to each of their own variables:</p>

<p><code>
&lt;?php
$from = $data['from'];
$from_email = $data['from_email'];
$to_email = $data['to_email'];
$subject = $data['subject'];
$message = $data['message'];
?&gt;
</code></p>

<p>Next we declare a new transporter to be used by Swiftmailer. This allows us to use a gmail account for sending emails. Declaring a new instance accepts 3 arguments: the host, port and the encryption. Then we set the username and password.</p>

<p>```
&lt;?php
$transporter = Swift_SmtpTransport::newInstance(&lsquo;smtp.gmail.com&rsquo;, 465, &lsquo;ssl&rsquo;)</p>

<pre><code>  -&gt;setUsername('YOUR_GMAIL_EMAIL')
  -&gt;setPassword('YOUR_GMAIL_PASSWORD');
</code></pre>

<p>?>
```</p>

<p>Next we declare a new mailer instance, and supplying the transporter as an argument.</p>

<p><code>
&lt;?php
$mailer = Swift_Mailer::newInstance($transporter);  
?&gt;
</code></p>

<p>Next create a new message, this also takes up the transporter as its argument. We then set the subject, from field, to field, and body of the message.</p>

<p>```
&lt;?php
$message = Swift_Message::newInstance($transporter)</p>

<pre><code>    -&gt;setSubject($subject)
    -&gt;setFrom(array($from_email =&gt; $from))
    -&gt;setTo(array($to_email))
    -&gt;setBody($message);
</code></pre>

<p>?>
```</p>

<p>Finally we send the message and output that the message was sent. The last line basically tells RabbitMQ that the sending of the message has indeed been successful.</p>

<p>```
&lt;?php
$mailer->send($message);
echo &ldquo; * Message was sent&rdquo;, &ldquo;\n&rdquo;;</p>

<p>$msg->delivery_info[&lsquo;channel&rsquo;]&ndash;>basic_ack($msg->delivery_info[&lsquo;delivery_tag&rsquo;]);
?>
```</p>

<h4>Running the program</h4>

<p>You can now run the receiver by going to your terminal and executing the following command:</p>

<p><code>
php receiver.php
</code></p>

<p>Once its running, go to your browser and access the <code>sender.php</code> file. Enter the details of your message and click on send. You&rsquo;re instantly greeted by a &lsquo;Your message was sent!&rsquo; text but if you immediately check your email account its not there yet. If its not there then the queue is still processing it. Check the output displayed on the terminal window where you executed the receiver. You should see a &lsquo;Message was sent&rsquo; output if the email was already sent.</p>

<h3>Conclusion</h3>

<p>RabbitMQ is a nice way for implementing messaging applications such as the one we created in this tutorial. We have barely scratch the surface with this tutorial. I recommend you check out the <a href="http://www.rabbitmq.com/getstarted.html">getting started guides</a> and the <a href="http://www.rabbitmq.com/documentation.html">documentation</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Datatables with Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel/"/>
    <updated>2014-08-10T16:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be walking you through how you can use datatables in Laravel. But first, let me give you a quick intro on what Datatabes is. <a href="http://datatables.net/">Datatables</a> is basically a jQuery plugin that allows you to add advanced interaction controls to your HTML tables. Things like search, pagination, sorting, and ordering. Datatables allows you to add those kinds of functionality into your tables with minimal code.</p>

<p>In this tutorial were going to be using a Laravel package called <a href="https://github.com/Chumper/Datatable">Chumper</a>. Chumper allows us to easily create Datatables which uses the data returned from a model as its data source.</p>

<p>First thing that you need to do is to add the following in your <code>composer.json</code> file:</p>

<p>```
&ldquo;require&rdquo;: {</p>

<pre><code>"chumper/datatable": "2.*",
</code></pre>

<p>}
```</p>

<p>If you got other packages that you need for your project, just add it on the last part of the <code>require</code> item. Once you&rsquo;re done with that, execute <code>composer update</code> from your terminal to install Chumper.</p>

<p>Once composer finishes installing Chumper, add the service provider for Chumper into the <code>providers</code> array in your <code>app.php</code> file inside the <code>app/config</code> directory of your Laravel installation:</p>

<p><code>
'Chumper\Datatable\DatatableServiceProvider',
</code></p>

<p>Still inside the <code>app.php</code> file, also add the following under the aliases array:</p>

<p><code>
'Datatable' =&gt; 'Chumper\Datatable\Facades\DatatableFacade',
</code></p>

<p>Once that&rsquo;s done, you can now create the main configuration file by executing the following from the terminal:</p>

<p><code>
php artisan config:publish chumper/datatable
</code></p>

<p>The main configuration file is stored under <code>app/config/packages/chumper/datatable/config.php</code> so go ahead and edit that if you want to change the default settings provided by Chumper. Things like the class or ID given to the tables generated can be configured from that file. This is particularly useful if you want to use classes or IDs to style the datatables in a specific way. Other than that the default settings can be used for most cases.</p>

<p>Now that we have configured Chumper, we can now add a route that will return the page where the datatable is displayed in your <code>routes.php</code> file. In the example below, we have the a controller called <code>AdminController</code> and were using the data returned by the <code>users</code> method as a response whenever the <code>users</code> route is accessed via the <code>GET</code> method:</p>

<p><code>php
&lt;?php
Route::get('users', 'AdminController@users');
?&gt;
</code></p>

<p>Next we also need to add the route that will return the data into the client side. By default, Chumper uses the server for processing queries made through the datatable. This means that it only gets the actual data that is needed instead of getting all of the records in the database table that you specify. In the code below, were giving a name of <code>api.users</code> to the <code>api/users</code> route so that we can refer to it later in the controller. The <code>uses</code> keyword allows you to specify a controller action to the route. Its basically the same thing as what we did above but that&rsquo;s the way to do it if you&rsquo;re using named routes.</p>

<p><code>
&lt;?php
Route::get('api/users', array('as' =&gt; 'api.users', 'uses' =&gt; 'AdminController@getUsersDataTable'));
?&gt;
</code></p>

<p>Under your controller, here&rsquo;s the method that returns the page where the datatable is displayed:</p>

<p>```
&lt;?php
public function users(){</p>

<pre><code>$table = Datatable::table()
    -&gt;addColumn('Name', 'Last Login', 'View')
    -&gt;setUrl(route('api.users'))
    -&gt;noScript();

$this-&gt;layout-&gt;content = View::make('admin.users', array('table' =&gt; $table));
</code></pre>

<p>}
?>
```</p>

<p>The code above assumes that you&rsquo;re using <a href="http://laravel.com/docs/templates">Laravel layouts</a>. If you don&rsquo;t know how to use layouts in Laravel, be sure to check out the docs. Breaking the code down, the following code allows you create the datatable. You can add columns to it by using the <code>addColumn</code> method. This method takes up the names that you want to give to the header for each field in the table. The <code>setUrl</code> method allows you to set the route that the datatable will use for processing queries made through it. Earlier we created a route and named it <code>api.users</code> so in the <code>setUrl</code> method all we have to do is to use the <code>route</code> method and then supply the name of the route which is responsible for returning the data for processing the queries. Lastly, we call the <code>noScript()</code> method to specify that we don&rsquo;t want to add the JavaScript code in the response that will be returned.</p>

<p>```
&lt;?php
$table = Datatable::table()</p>

<pre><code>-&gt;addColumn('Name', 'Last Login', 'View')
-&gt;setUrl(route('api.users'))
-&gt;noScript();
</code></pre>

<p>?>
```</p>

<p>Next is the method which processes the queries made through the datatable:</p>

<p>```
&lt;?php
public function getUsersDataTable(){</p>

<pre><code>$query = User::select('name', 'active', 'last_login', 'id')-&gt;get();

return Datatable::collection($query)
    -&gt;addColumn('last_login', function($model){
        return date('M j, Y h:i A', strtotime($model-&gt;last_login));
    })
    -&gt;addColumn('id', function($model){
        return '&lt;a href="http://anchetawern.github.io/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
    })
    -&gt;searchColumns('name', 'last_login')
    -&gt;orderColumns('name', 'last_login')
    -&gt;make();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, the code below allows you to specify the fields that you want to use for the response. These are the actual field names in your database table:</p>

<p><code>
&lt;?php
$query = User::select('name', 'last_login', 'id')-&gt;get();
?&gt;
</code></p>

<p>Next, we return the actual data using the <code>collection</code> method in the <code>Datatable</code> class. Well, not actually the <code>Datatable</code> class, since its just the Facade that we used earlier in the <code>app.php</code> file. The <code>collection</code> method requires the result set returned by our query to the users table earlier so we just set that as the argument. After that, we can call the <code>addColumn</code> method to update the presentation of the data returned for that specific field. In the case of the <code>last_login</code> field, its stored in the database as a time stamp which looks like this: <code>2014-07-29 11:37:39</code>. We don&rsquo;t really want to present that to the user like that so we format it using the <code>date</code> method. The first argument is the format that you want. In this case we want something like this: <code>Jul 29, 2014 11:37 AM</code>. Looking at the <a href="http://php.net/manual/en/function.date.php">official docs</a>, we know that we can do that by specifying the following: <code>M j, Y h:i A</code>. The second argument is a unix timestamp. We can convert the raw data that came from the database into a unix timestamp by using the <code>strtotime</code> method, so we do just that. Next is the <code>id</code> field. We don&rsquo;t actually want to display the users id to the user, what we want is to display a link that would lead the user to the page where more details for the user can be viewed. Thus we return an HTML anchor tag which uses the id as one of the component for the actual link.</p>

<p>```
&lt;?php
return Datatable::collection($query)</p>

<pre><code>-&gt;addColumn('last_login', function($model){
    return date('M j, Y h:i A', strtotime($model-&gt;last_login));
})
-&gt;addColumn('id', function($model){
    return '&lt;a href="http://anchetawern.github.io/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
})
</code></pre>

<p>?>
```</p>

<p>Lastly, we can now display the datatable in our view. If you&rsquo;re using <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, it should look similar to this one:</p>

<p>
``` html
@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="col-md-12">
  <h3>Users</h3>
  {{ $table->render() }}
  {{ $table->script() }}
  </div>
</div>


<p>@stop
```
</p>

<p>And don&rsquo;t forget to include the datatables stylesheet and JavaScript file on your views. You can download datatables from <a href="http://datatables.net/">datatables.net</a> or you can just use cdnjs:</p>

<p>```html
<link rel="stylesheet" type="text/css" href="http://anchetawern.github.io//cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/css/jquery.dataTables.min.css"></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.4/js/jquery.dataTables.min.js"></script>


<p>```</p>

<p>And yes, datatables depends on jQuery so you also need to include that before including datatables.</p>

<p>Yup! as simple as that! All we have to do is to call the <code>render()</code> method to render the actual datatabase. And then we also call the <code>script()</code> method to render the JavaScript file that would do the talking to the server every time the user interacts with the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zillow API]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api/"/>
    <updated>2014-03-20T14:01:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to have a quick look at the Zillow API. But before we move on with actually writing some code lets first define what Zillow is. Taken from the <a href="http://www.zillow.com/corp/About.htm">Zillow about page</a> itself:</p>

<p><blockquote><p>Zillow is a home and real estate marketplace dedicated to helping homeowners, home buyers, sellers, renters, real estate agents, mortgage professionals, landlords and property managers find and share vital information about homes, real estate, mortgages and home improvement.</p></blockquote></p>

<p>To sum it up Zillow is a place where you can find useful information on real estate properties that are up for sale or rent.</p>

<!-- more -->


<h4>Getting a Zillow Web Service ID</h4>

<p>In order to start making requests to the Zillow API you must first register an account with them. Registering with zillow is free, all you have to do is visit the <a href="http://www.zillow.com/">zillow homepage</a> and click on the join link. After that just enter all the information that is being asked. Once registered go to the <a href="http://www.zillow.com/webservice/Registration.htm">API registration page</a> and enter the necessary information:</p>

<p><img src="/images/posts/2014-03-20-getting-started-with-zillow-api/api-signup.png" alt="zillow api registration" /></p>

<p>Just check the specific API that you will need for your project, agree to the terms of use then click on the submit button. Zillow will also ask about a sample URL where you will use the API, if you do not have a specific URL in mind you can just place <code>http://localhost</code> or some other URL which you can use for testing purposes.</p>

<p>Once that&rsquo;s done zillow will email you the API details. All you need here is the value for the Zillow Web Services Identification (ZWSID).</p>

<h4>GetSearchResults API</h4>

<p>Now that we have a zillow web service ID its time to test out some of the API methods that are available. First on the list is the <code>GetSearchResults API</code> which you can use to find real estate information for a specific address. Note that an address must be posted first by an owner or an agent in the <a href="http://www.zillow.com/for-sale-by-owner/">Zillow site</a> before it can be viewed.</p>

<p>The URL for requesting search results is <code>http://www.zillow.com/webservice/GetSearchResults.htm</code>.</p>

<p>It requires 3 url encoded arguments to be passed in:</p>

<ul>
<li><strong>zws-id</strong> &ndash; the zillow web service id</li>
<li><strong>address</strong> &ndash; the address of the property to search (e.g. 3799 S Las Vegas Blvd, Las Vegas, NV 89109, United States)</li>
<li><strong>citystatezip</strong> &ndash; the city + state combination or the zip code of the address that you specified in the <code>address</code> field.</li>
</ul>


<p>A successful request will return an XML file containing all the search results. Here&rsquo;s a JSON string representation of the XML file that will be returned:</p>

<p>```json
{</p>

<pre><code>request: {
    address: '',
    citystatezip: ''
},
message: {
    text: '',
    code: ''
},
response: {
    results: {
        result: [
            {
                zpid: '',
                link: {
                    homedetails: '',
                    graphsanddata: '',
                    comparables: ''
                },
                address: {
                    street: '',
                    zipcode: '',
                    city: '',
                    state: '',
                    latitude: '',
                    longitude: ''
                },
                zestimate: {
                    amount: '',
                    last-updated: '',
                    oneWeekChange: {
                        @attributes: {
                            deprecated: ''
                        }
                    },
                    valueChange: '',
                    valuationRange: {
                        low: '',
                        high: ''
                    },
                    percentile: ''
                },
                localRealEstate: {
                    region: {
                        @attributes: {
                            id: '',
                            type: '',
                            name: ''
                        },
                        links: {
                            overview: '',
                            forSaleByOwner: '',
                            forSale: ''
                        }
                    }
                }
            }
        ]
    }
}
</code></pre>

<p>}
```</p>

<p>And no the results doesn&rsquo;t exactly return empty strings for the values of each of the properties. I just did it that way so you can focus on the actual properties that are returned.</p>

<p>Here&rsquo;s an example PHP code that makes a request to the zillow API using <code>file_get_contents</code>. You can also use <code>curl</code> to have the benefit of error handling but to keep things simple lets stick with <code>file_get_contents</code> for this tutorial:</p>

<p>```php
&lt;?php
$zillow_id = &lsquo;xxx&rsquo;; //the zillow web service ID that you got from your email</p>

<p>$search = $<em>GET[&lsquo;address&rsquo;];
$citystate = $</em>GET[&lsquo;citystate&rsquo;];
$address = urlencode($search);
$citystatezip = urlencode($citystate);</p>

<p>$url = &ldquo;<a href="http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip">http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip</a>&rdquo;;</p>

<p>$result = file_get_contents($url);
$data = simplexml_load_string($result);
?>
```</p>

<p>Once the request is completed you can just access individual properties using the arrow notation. In the example below were accessing the <code>zpid</code> property:</p>

<p><code>
&lt;?php
echo $data-&gt;response-&gt;results-&gt;result[0]-&gt;zpid;
?&gt;
</code></p>

<p>But what happens when we enter an address which doesn&rsquo;t exist in the zillow database? For that you can check the value for the <code>message.code</code>:</p>

<p><code>
&lt;?php
$code = $data-&gt;message-&gt;code;
?&gt;
</code></p>

<p>This contains a 1-3 digit number. <code>0</code> basically means that the request was successful and that there are results that are returned. <code>507</code> or <code>508</code> means that there&rsquo;s no exact match for the inputted address. There are a bunch of other error codes which you can use so check out the messages and codes section in the <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">search results api page</a> for more information.</p>

<p>For more information regarding the search results API check out <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">this page</a></p>

<h4>GetZestimate API</h4>

<p>Another API Method that we can use is the <code>GetZestimate</code>. This returns information regarding the zestimate of a specific property. A Zestimate is Zillow&rsquo;s estimated market value, computed using a proprietary formula. You can use the <code>GetZestimate</code> method by making a request to this URL: <code>http://www.zillow.com/webservice/GetZestimate.htm</code>.</p>

<p>The <code>GetZestimate</code> method only requires 2 arguments: the <code>zws-id</code> and the <code>zpid</code>. Of this 2 arguments the <code>zpid</code> is of interest since we didn&rsquo;t use it in the previous method. The <code>zpid</code> is basically a unique ID assigned by zillow to a specific property.</p>

<p>If you might have noticed earlier the <code>SearchResults</code> method already returns some zestimate data:</p>

<p>```json
zestimate: {</p>

<pre><code>amount: '',
last-updated: '',
oneWeekChange: {
    @attributes: {
        deprecated: ''
    }
},
valueChange: '',
valuationRange: {
    low: '',
    high: ''
},
percentile: ''
</code></pre>

<p>}
```</p>

<p>You can pretty much use this one if you don&rsquo;t need detailed information about a specific zestimate of a property. But if need more detailed information the <code>GetZestimate</code> method is the one that you need to use. Here&rsquo;s the JSON string representation of the result that it returns:</p>

<p>```
{</p>

<pre><code>request: {
    zpid: ''
},
message: {
   text: '',
   code: ''
},
response: {
    zpid: '',
    links: {
        homedetails: '',
        graphsanddata: '',
        mapthishome: '',
        comparables: ''
    },
    address: {
        street: '',
        zipcode: '',
        city: '',
        state: '',
        latitude: '',
        longitude: ''
    },
    zestimate: {
        amount: '',
        last-update: '',
        oneWeekChange: '',
        valueChange: '',
        valuationRange: {
            low: '',
            high: ''
        },
        percentile: ''
    },
    localRealEstate: {
        region: {
            links: {
                overview: '',
                forSaleByOwner: '',
                forSale
            }
        }
    },
    regions: {
        zipcode-id: '',
        city-id: '',
        county-id: '',
        state-id: ''
    }
}
</code></pre>

<p>}
```</p>

<p>The one caveat about the <code>GetZestimate</code> method is that it cannot be used without having information on the <code>zpid</code>. And you can only get the <code>zpid</code> with the <code>GetSearchResults</code> method so the <code>GetZestimate</code> method is always used in tandem with the <code>GetSearchResults</code> method unless you&rsquo;re saving <code>zpid</code>&rsquo;s in your database.</p>

<p>If you want to know more about the <code>GetZestimate</code> method check out the <a href="http://www.zillow.com/howto/api/GetZestimate.htm">documentation</a></p>

<h4>GetChart</h4>

<p>The last method that I&rsquo;m going to talk about in this tutorial is the <code>GetChart</code> method. You can use the <code>GetChart</code> method to get a URL to an image which shows the historical zestimates for a specific property. You can make a request to this method by using this URL: <code>http://www.zillow.com/webservice/GetChart.htm</code></p>

<p>The <code>GetChart</code> method requires the following argument to be passed in:</p>

<ul>
<li><code>zws-id</code></li>
<li><code>zpid</code> &ndash; the unique ID assigned by zillow to the specific property</li>
<li><code>unit-type</code> &ndash; you can either use <code>dollar</code> or <code>percent</code> as the value. This is basically use for specifying whether to display the dollar changed or the percent changed of a specific property</li>
<li><code>height</code> &ndash; the height of the image to return in pixels</li>
<li><code>width</code> &ndash; the width of the image to return in pixels</li>
</ul>


<p>You can pretty much guess the <code>unit-type</code> that was used for this image. Yep that&rsquo;s right its in dollars. So the image above is basically showing that the value for the specific property went up from 96,000 dollars to 104,000 dollars over a period of about one year. You can actually specify this value by passing in the <code>chartDuration</code> argument. Then you can have values like <code>1year</code>, <code>2years</code> or <code>10years</code>. If you don&rsquo;t specify anything it defaults to &lsquo;1year&rsquo;.</p>

<p>For more information regarding the <code>GetChart</code> method check out its <a href="http://www.zillow.com/howto/api/GetChart.htm">documentation</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! Like with any other getting started guide we&rsquo;ve only scratched the surface with this tutorial. There&rsquo;s a lot more that you can do with Zillow API so be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.zillow.com/howto/api/APIOverview.htm">Zillow API Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with SPBAS]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/03/getting-started-with-spbas/"/>
    <updated>2014-02-03T09:55:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/03/getting-started-with-spbas</id>
    <content type="html"><![CDATA[<p>As developers we often need to sell the applications that were creating. Places like the Google Web Store, Codecanyon, Apple Store, Shopify App Store exist for that matter. These repositories are good places to start but it often requires you to upload your work and have it reviewed by other developers so they are ensured that the app that you submitted meets their criteria.</p>

<!-- more -->


<p>This is often a tedious process and sometimes you have to wait for a specific period of time before your app gets approved.
With SPBAS you can skip that process altogether and host your own business automation software on a server of your choice.
In this post I&rsquo;ll be walking you through SPBAS, short for SolidPHP Business Automation Software. With SPBAS you can easily host the apps that you have created and have people who wants to buy your app pay you via the payment method of your choice. Note that I won&rsquo;t be discussing about the specific features of this business automation software as the <a href="https://solidphp.atlassian.net/wiki/display/docs/Home">official documentation</a> already has a plenty of that information available. Rather I&rsquo;d like to focus on the developer&rsquo;s perspective. Things like setting up SPBAS and how to actually get up and running with it. I&rsquo;m not going to go in-depth with the concepts such as licensing and the different options that are available. Instead I&rsquo;m going to stick with only the necessary parts in order to get up and running quickly with SPBAS.</p>

<h3>Getting SPBAS</h3>

<p>Before you can begin installation, you first have to register with SPBAS. To register simply go to the SPBAS site, click on customer area and click on the register tab.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/spbas-registration.png" alt="spbas registration" /></p>

<p>Once you&rsquo;re done with that simply login to the account and click on the order tab. The order page lists all the available products. For this guide were simply going to use the Free version so click on the link under the SPBAS 25 Free version.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/spbas-order.png" alt="spbas order" /></p>

<p>After that, click on the add to cart button to add the specific product into your cart.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/add-to-cart.png" alt="add to cart" /></p>

<p>Then click on the checkout button.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/checkout.png" alt="checkout" /></p>

<p>After that you will be ask to enter your business details. Once you&rsquo;re done entering your business details simply click on the continue to next step button. You will then be redirected to the order summary page just click on the ok button at this point to confirm that your order is correct. If everything went well you will see a screen similar to the following:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/order-complete.png" alt="order complete" /></p>

<p>At that point your product license will have been emailed to you by SPBAS. You can use the product license on your SPBAS installation later on. If you didn&rsquo;t receive your license details you can also access it from the customer area. To access your license details from the customer area, just click on the dashboard link and under the My Packages section click on the licenses link. This will redirect you to the &lsquo;My Packages&rsquo; page which you will see the product that you ordered earlier. Just click on the view details link once you&rsquo;re on that page to view the details for that specific package. Once you&rsquo;re on the package details page just click on the licenses tab to view your license key. Copy your license key and store it somewhere safe, a password manager like keepass or lastpass will do. You will be using the license key later.</p>

<p>Once you&rsquo;re done saving the license key, click on the downloads tab then select the current release. At the time of writing of this post the current SPBAS version is 3.2.0. If they already have anything higher than that by the time you read this simply stick with that version instead. Under the current release directory is the SPBAS zip file, download the zip file and extract it on your machine then copy it to your web directory or upload it to a server somewhere using Filezilla or other FTP clients.</p>

<h3>Installing Ioncube</h3>

<p>SPBAS has been encoded with Ioncube so it requires the ioncube PHP module to be installed on the server before you can make use of it. In case you don&rsquo;t know what encoding is, its used to obfuscate code so that when its source file is opened it cannot be understood by a human. Its a way to protect intellectual property. Because as you already know PHP is an interpreted language so the code that you write is pretty much exposed to anyone who has access to the source files.</p>

<p>You can install ioncube by downloading the ioncube loader from the <a href="http://www.ioncube.com/loaders.php">ioncube website</a>. All you have to do is select the loader that&rsquo;s applicable for your machine. The first step is to determine the Operating System that you&rsquo;re using and the version of PHP installed. You can do that by executing the <code>phpinfo()</code> function:</p>

<p><code>php
&lt;?php
phpinfo();
?&gt;
</code></p>

<p>Access the file from your browser and look at the header:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/phpinfo.png" alt="phpinfo" /></p>

<p>As you can see from the screenshot above I&rsquo;m running PHP version 5.5.7 on Ubuntu Raring Ringtail (13.04). Looking at the loaders available from the ioncube website there&rsquo;s no loader that&rsquo;s specifically for Ubuntu 13.04 so the closest one that I could download is the one for Linux (x86). Under the archives I downloaded the zip file and extracted it on my machine. If you&rsquo;re using Windows then all you have to do is download the one&rsquo;s that are under the Windows installer column and select the one that&rsquo;s applicable to your Operating System and PHP installation.</p>

<p>After extracting (on Ubuntu) or executing the installer file on Windows, copy the directory extracted from the ioncube loader zip file on your web directory and access the <code>loader-wizard.php</code> from your browser. This will give you an idea whether your installation was successful. If it wasn&rsquo;t successful the loader wizard will show all the warnings and will give you an idea on what went wrong so you can fix it.</p>

<p>Here&rsquo;s an example of an error from the loader wizard:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/loader-wizard.png" alt="loader wizard" /></p>

<p>As you can see from the screenshot above it will automatically detect where the correct loader files are located and shows you where it should be installed. Simply follow the instructions and restart apache once you&rsquo;re done:</p>

<p><code>
sudo service apache2 restart
</code></p>

<h4>Common Installation Issues</h4>

<p>Here are some of the common issues when installing ioncube:</p>

<ul>
<li><strong>PHP Fatal error The Loader must appear as the first entry in the php.ini file in Unknown on line 0</strong> &ndash; this means that the ioncube loader must be the first module that should be loaded by PHP. In Ubuntu you can do this by going to the following directory:</li>
</ul>


<p><code>
/etc/php5/apache2/conf.d
</code></p>

<p>And create a new file and name it <code>01-ioncube.ini</code> then put the following contents:</p>

<p><code>
zend_extension = /usr/lib/php5/20121212/ioncube_loader_lin_5.4.so
</code></p>

<p>This ensures that the ioncube loader is first on the queue.
Do note that the path here should be the same as the path that was mentioned in the loader wizard and that the loader file, in this case the loader file is the <code>ioncube_loader_lin_5.4.so</code> file should exist in the location specified. The loader files are stored in the directory that you extracted earlier and its stored along with the <code>loader-wizard.php</code> file. And don&rsquo;t forget to restart apache once you&rsquo;re done making the changes.</p>

<ul>
<li><p><strong>The installed loader is for PHP 5.4 but your server is running PHP 5.5</strong> &ndash; this means that the loader and the PHP version isn&rsquo;t compatible. To solve this problem you have to use the loader that&rsquo;s specific to your PHP version. There&rsquo;s really no problem with this if you&rsquo;re able to access the loader wizard since it already mentions from there which loader version you have to install.</p></li>
<li><p><strong>PHP version used for encoding the files isn&rsquo;t the same as the ioncube loader version</strong> &ndash; unfortunately there&rsquo;s really nothing that you can do with this one. If the PHP software that you&rsquo;re trying to use was encoded with ioncube that has a lower or higher version than that of the ioncube loader that your machine has then it won&rsquo;t work. The basic rule is that the encoder version should be the same as the loader version.</p></li>
</ul>


<h3>Installing SPBAS</h3>

<p>Once you have successfully installed Ioncube you can now install SPBAS. You can do that by extracting the SPBAS zip file that you downloaded earlier into your web directory. The default file name of the extracted directory is <code>rename_upload_me</code> so you have to rename the directory to something like <code>spbas</code> so its easily recognizable. When accessing SPBAS from your browser for the first time you have to access the install path:</p>

<p><code>
http://localhost/spbas/install/
</code></p>

<p>Once you&rsquo;re in the install page simply follow the installation instructions to install SPBAS.</p>

<h3>Configuration</h3>

<p>After installing SPBAS you&rsquo;re now ready for configuration. Configuring SPBAS can be done by logging into your administrator account and accessing specific areas that you want to configure. In this section I&rsquo;ll be walking you through some of the most common configurations to get you up and running with SPBAS.</p>

<h4>Products</h4>

<p>To add products all you have to do is click on the following links in order: settings &ndash;> storefronts &amp; products &ndash;> products &ndash;> add product</p>

<p>Once you&rsquo;re in the add product page simply enter the details for the application that you&rsquo;re trying to sell:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/1-add-new-product.png" alt="add product" /></p>

<h4>Pricing Tier</h4>

<p>After adding a product you have to add a pricing tier. Things such as the minimum quantity, maximum quantity and price can be added here. You can add a price tier by going to: settings &ndash;> storefronts &amp; products &ndash;> products &ndash;> find the product that you want &ndash;> manage &ndash;> product price tier &ndash;> add price tier</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/2-Add-pricing-tier.png" alt="add pricing tier" /></p>

<h4>System Configuration</h4>

<p>After adding the pricing tier for a specific product you may also want to configure the overall system settings. Things such as the date format, time format, default upload path and your SPBAS license key can be added from here. The system configuration page can be accessed by going to: admin &ndash;> system &ndash;> application &ndash;> system configuration</p>

<p>If you still remember that license key that you got from the SPBAS website earlier that&rsquo;s the one that you should supply in the SPBAS license key field. Another important configuration is the media upload path. This is where the product files are going to be uploaded.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/3-setup-upload-path.png" alt="system configuration" /></p>

<h4>Licensing Method</h4>

<p>Next is the optional licensing method. I said optional because not all products requires a license in order to work. If the application that you&rsquo;re trying to sell is a one-time payment only then there&rsquo;s no need to setup a licensing method. But if you&rsquo;re application requires a license in order to work then read on.
The licensing method is the type of licensing that you want to use for the products that you&rsquo;re selling. A licensing method can be added by going to: settings &ndash;> licensing &ndash;> licensing methods &ndash;> add a new method</p>

<p>Note that the SPBAS is the recommended licensing method as its the only licensing method that&rsquo;s actively developed.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/4-add-licensing-method.png" alt="licensing method" /></p>

<p>Once you&rsquo;re done selecting the licensing method and giving it an easily recognizable name you can now add the details for that specific licensing method. Things such as the license prefix, license validation options and max instances of each issued license can be set from this page. Here&rsquo;s an example configuration for a licensing method:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/5-add-details-to-licensing-method.png" alt="licensing method details" /></p>

<p>As I have said earlier I&rsquo;m only going to discuss about the necessary parts in order to easily get up and running with SPBAS. If you want to dive in deeper with the licensing options available and what each of the options mean, you can check the <a href="https://solidphp.atlassian.net/wiki/display/docs/Licensing">documentation on licensing</a>.</p>

<h4>Download Category</h4>

<p>Next is the download category. Download categories is part of the group of settings for setting up downloads for your products.
To add a new download category go to: settings &ndash;> media &ndash;> downloads &ndash;> new category</p>

<p>From there you can create a new download category. Simply click on the add category button once you&rsquo;re done giving the download category a name.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/6-add-download-category.png" alt="add download category" /></p>

<p>Once you&rsquo;re done with that you can now add a specific media or the archive version of the product that you&rsquo;re trying to sell to that download category. You can do that by going to: settings &ndash;> media &ndash;> downloads &ndash;> media</p>

<p>Then simply supply the display name and the actual file name. Note that the file should exist in the media upload path that you supplied earlier in the system configuration page. If this doesn&rsquo;t work, simply use the web upload feature in which you can manually upload the files. After that click on the add media to category button to add the files to a specific download category.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/7-add-media-to-download-category.png" alt="add media to download category" /></p>

<h4>Media Set</h4>

<p>Media sets are categories of downloads that can be assigned to product price tiers as assets. In simple terms they are used to link pricing tiers to the files for a specific product. You can add a media set by going to: settings &ndash;> media &ndash;> media sets &ndash;> add media set</p>

<p>Give the media set a name that can be easily recognized as part of a specific price tier and click on the add new button.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/8-addmedia-set.png" alt="add media set" /></p>

<p>Once you&rsquo;re done with that simply assign the media set to a specific product price tier by checking the checkbox beside the product pricing tier. You can access the following page by clicking on the manage link beside the media set that you created:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/9-assign-asset-pricing-tier-to-media-set.png" alt="assign asset to media set" /></p>

<p>After that you can now assign a media category to the media set. You can do this by going to: settings &ndash;> media &ndash;> media sets &ndash;> assign media to sets</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/10-assign-media-category-to-media-set.png" alt="assign media category to media set" /></p>

<h4>Assigning License Method as an Asset</h4>

<p>In order to create new license keys you must first assign the licensing method to a product price tier. After you do this customers can order the product, or you as an admin can manually add a package, which will result in a license key asset being issued to the customer account. The customer can then enter the license key into your application to activate it. To assign a licensing method click the Assign as Asset menu link and check the box beside each relevant product price tier.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/11-assign-asset-pricing-tier-to-licensing-method.png" alt="assign asset to licensing method" /></p>

<h4>Assigning Product Order to Form</h4>

<p>Finally you can now assign a specific product to the order form. This will allow customers to see your product listed on the order page of your SPBAS installation. You can do that by going to: settings &ndash;> storefronts &amp; products &ndash;> order forms</p>

<p>Once you are there simply check the checkbox beside the Products to assign your products to your order form.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/12-assign-product-to-order-form.png" alt="assign product order to form" /></p>

<h3>Licensing Implementation</h3>

<p>You can implement licensing by including the <code>SPBAS.class.php</code> somewhere in your app. And include a code that&rsquo;s similar to the code below:</p>

<p>```php
&lt;?php
include &lsquo;SPBAS.class.php&rsquo;
$license_key = trim($_POST[&lsquo;lickey&rsquo;]); //license key inputted by the user</p>

<p>$spbas = new spbas(); //initialize spbas</p>

<p>if(!empty($license_key)){</p>

<pre><code>$spbas-&gt;license_key = trim($license_key);

$spbas-&gt;api_server = 'http://localhost/spbas/api/index.php'; //the URL in which SPBAS is hosted 
$spbas-&gt;secret_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';  //the secret key from the licensing method

$spbas-&gt;validate(); //check if the license key is valid

$response = array();

if(empty($spbas-&gt;errors)){

    $db-&gt;query("INSERT INTO tbl_settings SET license = '$license_key'"); //save license into the database

    /* 
    some code here to activate the application
    */

    //setup success response
    $response = array(
        'type' =&gt; 'success', 
        'text' =&gt; 'You have successfully Activated the plugin!'
    );  
}else{
    //setup error response
    $response = array(
        'type' =&gt; 'error',
        'text' =&gt; $spbas-&gt;errors
    );
}

echo json_encode($response);
</code></pre>

<p>}
?>
```</p>

<p>You may want to encode this specific part of the code using something like Ioncube so the implementation details are protected. One final thing to note is that the ioncube loader should also be installed on the server where you plan to deploy.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://solidphp.atlassian.net/wiki/display/docs/Home">SPBAS Documentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
