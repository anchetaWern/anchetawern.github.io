<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-12-05T18:09:55+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Get the Logo of Any Company]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company/"/>
    <updated>2015-11-28T12:17:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company</id>
    <content type="html"><![CDATA[<p>In one of my previous projects called <a href="/projects/stockswitch/">StockSwitch</a>, I had the need to fetch and utilize the logo of companies that are included in the NYSE, NASDAQ, and AMEX. In this article, I&rsquo;ll be showing you how you can get the logo for any company so that you can use it in your projects.</p>

<p>The best way to get the logo of any company is via Clearbit&rsquo;s logo API. All you have to do is replace the value of <code>{DOMAIN-NAME}</code> with the domain name used by the company that you want.</p>

<p><code>
https://logo.clearbit.com/{DOMAIN-NAME}
</code></p>

<p>For example, you want to utilize Google&rsquo;s logo in your project. Simply create a new image tag and link to <code>logo.clearbit.com</code> followed by the domain name.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com"&gt;
</code></p>

<p>You can also pass in the following optional parameters.</p>

<ul>
<li>size &ndash; the size in pixels of the logo. The highest value I found to be valid is 800px. And the lowest is 5px.</li>
<li>format &ndash; you can pass either <code>png</code> or <code>jpg</code>.</li>
<li>greyscale &ndash; pass in a value of <code>true</code> if you want the logo to be in greyscale.</li>
</ul>


<p>For example, you want the image to be in 50px and the format is png.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com?size=50&amp;format=png"&gt;
</code></p>

<p>You can also save it on your own server so you don&rsquo;t use Clearbit&rsquo;s resources every time the company logos are requested. Here&rsquo;s a sample code on how you might do it in php.</p>

<p>```php
&lt;?php
$companies = array(</p>

<pre><code>'facebook.com',
'google.com',
'oracle.com',
'amazon.com',
'ebay.com',
'uber.com',
'twitter.com',
'github.com'
</code></pre>

<p>);</p>

<p>foreach($companies as $company){</p>

<pre><code>$url = "https://logo.clearbit.com/{$company}?size=150&amp;format=png";
$contents = file_get_contents($url);
file_put_contents('logos/' . $company . '.png' , $contents);
</code></pre>

<p>}
?>
```</p>

<p>The code above gets the contents returned from the clearbit logo URL and then saves it to the <code>logos</code> directory in the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dates and Times in PHP with Carbon]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon/"/>
    <updated>2015-10-31T17:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon</id>
    <content type="html"><![CDATA[<p>When writing PHP applications there&rsquo;s often a need for working with dates and times. In this tutorial, I&rsquo;ll be walking you through Carbon, a simple PHP API extension for the DateTime class. It basically makes working with dates and times a lot more easier. I&rsquo;ve personally used this library on my <a href="https://github.com/anchetaWern/ahead">Ahead</a> project, a Laravel app for scheduling posts to social media sites like Facebook, Twitter and LinkedIn.</p>

<h3>Installation</h3>

<p>To install Carbon, you need to use <a href="https://getcomposer.org/">Composer</a>.</p>

<p><code>
composer require nesbot/carbon
</code></p>

<h3>Usage</h3>

<p>Include the vendor autoload in your file and then use the <code>Carbon</code> class in the <code>Carbon</code> namespace.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Carbon\Carbon;
?>
```</p>

<h4>Getting the Current Date and Time</h4>

<p>You can get the current date and time using the <code>now</code> method. If you do not specify an argument, it uses the default timezone from your PHP config.</p>

<p><code>php
&lt;?php
echo Carbon::now(); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>If you want to use a different timezone, you can pass a <a href="http://php.net/manual/en/timezones.php">valid timezone</a> as the argument.</p>

<p><code>php
&lt;?php
echo Carbon::now('Asia/Manila'); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>Aside from the <code>now</code> method, there&rsquo;s also <code>today</code>, which returns the start of today&rsquo;s date, <code>yesterday</code>, which returns the start of the date yesterday, and <code>tomorrow</code>, which returns the start of the date tomorrow.</p>

<p><code>php
&lt;?php
echo Carbon::today()-&gt;toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::yesterday()-&gt;toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::tomorrow()-&gt;toDateTimeString(); //2015-07-27 00:00:00
?&gt;
</code></p>

<h4>Converting to String</h4>

<p>By default, methods in Carbon returns a datetime object. Though its an object, you can directly output it using <code>echo</code> because of the <code>__toString</code> magic method. But if you want to convert it to a string, you can use the <code>toDateString</code> or <code>toDateTimeString</code> methods.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;toDateString(); //2015-07-26
echo Carbon::now()-&gt;toDateTimeString(); //2015-07-26 20:22:50
?&gt;
</code></p>

<h4>Parsing Dates</h4>

<p>You can also parse dates in all sorts of formats using the <code>parse</code> method.</p>

<p>```php
&lt;?php
echo Carbon::parse(&lsquo;2015/03/30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30 00:10:25&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:10:25</p>

<p>echo Carbon::parse(&lsquo;today&rsquo;)&ndash;>toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::parse(&lsquo;yesterday&rsquo;)&ndash;>toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::parse(&lsquo;tomorrow&rsquo;)&ndash;>toDateTimeString(); //2015-07-27 00:00:00
echo Carbon::parse(&lsquo;2 days ago&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 20:49:53
echo Carbon::parse(&lsquo;+3 days&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 20:49:53
echo Carbon::parse(&lsquo;+2 weeks&rsquo;)&ndash;>toDateTimeString(); //2015-08-09 20:49:53
echo Carbon::parse(&lsquo;+4 months&rsquo;)&ndash;>toDateTimeString(); //2015-11-26 20:49:53
echo Carbon::parse(&lsquo;-1 year&rsquo;)&ndash;>toDateTimeString(); //2014-07-26 20:49:53
echo Carbon::parse(&lsquo;next wednesday&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 00:00:00
echo Carbon::parse(&lsquo;last friday&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 00:00:00
?>
```</p>

<h4>Constructing Dates</h4>

<p>You can also construct dates by using individual parts such as the year month and day.</p>

<p>```php
&lt;?php
$year = &lsquo;2015&rsquo;;
$month = &lsquo;04&rsquo;;
$day = &lsquo;12&rsquo;;</p>

<p>echo Carbon::createFromDate($year, $month, $day); //2015-04-12 20:55:59</p>

<p>$hour = &lsquo;02&rsquo;;
$minute = &lsquo;15&rsquo;:
$second = &lsquo;30&rsquo;;</p>

<p>echo Carbon::create($year, $month, $day, $hour, $minute, $second); //2015-04-12 02:15:30
?>
```</p>

<p>Optionally, you can pass in any valid timezone as the last argument for the <code>create</code> and <code>createFromDate</code> methods.</p>

<h4>Manipulating Dates</h4>

<p>Manipulating dates can be done by using <code>add</code> (to add) or <code>sub</code> (to subtract) followed by the unit of time you want to add or subtract. For example, you want to add a specific number of days to the specific date, you use the <code>addDays</code> method. There&rsquo;s also the <code>modify</code> method which allows you to pass in the modification that you want. It takes the format of <code>+</code> or <code>-</code> followed by the unit value and the unit. So if you want to add a year to the current date, you use <code>+1 year</code>. Check out the examples below to have an idea what else you can do.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;addDays(25); //2015-08-20 21:10:00
echo Carbon::now()-&gt;addWeeks(3); //2015-08-16 21:10:00
echo Carbon::now()-&gt;addHours(25); //2015-07-27 22:10:00
echo Carbon::now()-&gt;subHours(2); //2015-07-26 19:10:00
echo Carbon::now()-&gt;addHours(2)-&gt;addMinutes(12); //2015-07-26 23:22:00
echo Carbon::now()-&gt;modify('+15 days'); //2015-08-10 21:10:00
echo Carbon::now()-&gt;modify('-2 days'); //2015-07-24 21:10:00
?&gt;
</code></p>

<p>Commonly in PHP apps are international. This means that you need to work with different timezones. Here&rsquo;s how to convert from one timezone to another.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;setTimezone('America/Los_Angeles'); //2015-07-26 06:23:48
?&gt;
</code></p>

<h4>Comparing Dates</h4>

<p>You can use the following methods to compare dates in Carbon.</p>

<ul>
<li><code>min</code> &ndash; returns the smaller date.</li>
<li><code>max</code> &ndash; returns the larger date.</li>
<li><code>eq</code> &ndash; check if two dates are the same.</li>
<li><code>gt</code> &ndash; check if the first date is greater than the second date.</li>
<li><code>lt</code> &ndash; check if the first date is less than the second date.</li>
<li><code>gte</code> &ndash; check if the first date is greater than or equal to the second date.</li>
<li><code>lte</code> &ndash; check if the first date is lesser than or equal to the second date.</li>
</ul>


<p>Other helpful methods include <code>isWeekDay</code>, <code>isWeekend</code>, <code>isYesterday</code>, <code>isFuture</code> and <code>isPast</code>.</p>

<h4>Laravel Integration</h4>

<p>If you&rsquo;re on Laravel, you can just add an alias for the Carbon library in the <code>aliases</code> in the <code>app/config/app.php</code>.</p>

<p><code>
'Carbon' =&gt; 'Carbon\Carbon'
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Carbon library in PHP. Carbon is a really nice and easy way to work with dates in PHP. Be sure to check out the <a href="http://carbon.nesbot.com/docs/">official docs</a> to learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PDO in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php/"/>
    <updated>2015-10-10T20:20:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through how to use the PDO extension in PHP to connect to a MySQL database.</p>

<h3>Connecting to the Database</h3>

<p>The PDO extension is installed by default on modern versions of PHP so you don&rsquo;t have to worry about not having it on the machine. You should be upgrading to a recent version any way to take advantage of the security patches and other updates.</p>

<p>To connect to the database, you have to supply a data source name (DSN) as the first argument when creating a new instance of the PDO class. And then pass in the username and password of the user you want to login to the database as the second and third argument. You need to wrap the code in a <code>try..catch</code> block because it will return an error if there&rsquo;s a problem connecting to the database. Next, set the error mode to return an exception if there&rsquo;s an error executing a specific database query. And finally, set the emulation of prepared statements to <code>false</code>. This allows you to use the native parametrized query feature of the database instead of emulating it in the PHP side.</p>

<p>```php
&lt;?php
$dsn = &lsquo;mysql:dbname=DATABASE-NAME;host=DB-HOST&rsquo;;
$username = &lsquo;DATABASE-USER&rsquo;;
$password = &lsquo;USER-PASSWORD&rsquo;;
try {</p>

<pre><code>$db = new PDO($dsn, $username, $password);
$db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
</code></pre>

<p>} catch (PDOException $e){</p>

<pre><code>echo 'could not connect to the database';
</code></pre>

<p>}
?>
```</p>

<h3>Inserting Data</h3>

<p>Open up phpmyadmin or any database management tool that you&rsquo;re using and create a new database. Then execute the following query to create a <code>users</code> table. We will be using this table for executing queries in the database. If you&rsquo;re following along, don&rsquo;t forget to update the data source name to match the name of the database.</p>

<p><code>sql
CREATE TABLE IF NOT EXISTS `users` (
`id` int(11) NOT NULL,
  `name` varchar(300) NOT NULL,
  `age` int(11) NOT NULL,
  `email` varchar(300) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
</code></p>

<p>Once that&rsquo;s created, you can now try inserting a new user row in the <code>users</code> table. Just pass in the typical INSERT query as an argument to the <code>query</code> method using the new PDO instance that you created earlier.</p>

<p>```php
&lt;?php
$name = &lsquo;yoh asakura&rsquo;;
$age = 10;
$email = &lsquo;<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#121;&#x6f;&#104;&#x2d;&#97;&#115;&#x61;&#x6b;&#117;&#114;&#97;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#121;&#x6f;&#104;&#45;&#x61;&#115;&#97;&#107;&#x75;&#x72;&#97;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a>&rsquo;;</p>

<p>$db->query(&ldquo;INSERT INTO users SET name = &lsquo;$name&rsquo;, age = &lsquo;$age&rsquo;, email = &lsquo;$email&rsquo;&rdquo;);
?>
```</p>

<h3>Updating Data</h3>

<p>If you want to update a specific user, you still use the <code>query</code> method. The only difference is the query that you are passing in. This time you have to pass in an <code>UPDATE</code> query to set the new values and then use the <code>WHERE</code> clause to specify which specific row you want to update. In this case it&rsquo;s the first row in the <code>users</code> table.</p>

<p>```php
&lt;?php
$id = 1;
$name = &lsquo;ren tao&rsquo;;
$age = 10;
$email = &lsquo;<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#114;&#101;&#110;&#45;&#x74;&#97;&#111;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x72;&#x65;&#x6e;&#x2d;&#x74;&#97;&#x6f;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#109;</a>&rsquo;;</p>

<p>$db->query(&ldquo;UPDATE users SET name = &lsquo;$name&rsquo;, age = &lsquo;$age&rsquo;, email = &lsquo;$email&rsquo; WHERE id = &lsquo;$id&rsquo;&rdquo;);
?>
```</p>

<h3>Deleting Data</h3>

<p>If you want to delete a specific row, use the <code>DELETE</code> query and a <code>WHERE</code> clause to specify which rows you want to delete.</p>

<p><code>php
&lt;?php
$id = 1;
$db-&gt;query("DELETE  FROM users WHERE id = '$id'");
?&gt;
</code></p>

<h3>Selecting Data</h3>

<p>Selecting data still uses the same <code>query</code> method. Only this time you have to pass in a <code>SELECT</code> query. Then you can loop through the results and access the column that you want to output just like you would when accessing an item in an associative array.</p>

<p>```php
&lt;?php
$results = $db->query(&ldquo;SELECT name FROM users&rdquo;);
foreach($results as $row){</p>

<pre><code>echo $row['name'] . "&lt;br&gt;";
</code></pre>

<p>}
?>
```</p>

<p>If you think objects look better, you can use the <code>setAttribute</code> method to modify the default fetch mode.</p>

<p><code>php
&lt;?php
$db-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
?&gt;
</code></p>

<h3>Prepared Statements</h3>

<p>Prepared statements makes your queries more secure. Why? Because data is treated as data when you use prepared statements. This means that SQL statements such as <code>OR DROP TABLE users</code> wouldn&rsquo;t work if the user inputs an SQL statement instead of the expected data.
This is implemented in PDO by calling the <code>prepare</code> method and then passing in the query that you wish to execute. But instead of supplying the data directly, you replace it with placeholders. In this case the placeholder is <code>:name</code>.
You then call the <code>execute</code> method to actually execute the query. This method accepts an associative array containing the placeholder as the key and the actual value that you want to pass in as its value. Finally, you call the <code>FetchAll</code> method to fetch all the results that was returned.</p>

<p>```php
&lt;?php
$query = $db->prepare(&ldquo;SELECT name FROM users WHERE name LIKE :name&rdquo;);
$query->execute(array(</p>

<pre><code>':name' =&gt; 'Mr.%'
</code></pre>

<p>));</p>

<p>$results = $query->FetchAll();
foreach($results as $row){</p>

<pre><code>echo $row-&gt;name . "&lt;br&gt;";
</code></pre>

<p>}
?>
```</p>

<p>For queries that&rsquo;s only expected to return a single row, you can use the <code>fetch</code> method instead.</p>

<p><code>php
&lt;?php
$query = $db-&gt;prepare('SELECT name FROM users WHERE id = :id');
$query-&gt;execute(array(':id' =&gt; 2));
$user = $query-&gt;fetch();
echo $user-&gt;name;
?&gt;
</code></p>

<h3>Transactions</h3>

<p>Transactions in databases is a sequence of database operations that are treated as a single unit. You can use it to ensure that all the queries that you want to execute are all completed successfully. If one fails, nothing is actually committed to the database.</p>

<p>To test transactions, open up your database management tool of choice and execute the following. This will create the <code>other_details</code> table which stores the other details of a user.</p>

<p><code>sql
CREATE TABLE IF NOT EXISTS `other_details` (
`id` int(11) NOT NULL,
  `school` varchar(300) NOT NULL,
  `city` varchar(300) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
</code></p>

<p>For the example below, I&rsquo;m using a library called <a href="https://github.com/fzaninotto/Faker">Faker</a>. You can use it to generate fake data to be inserted into the database. You can install it through composer by executing the following command in your working directory.</p>

<p><code>
composer require fzaninotto/faker
</code></p>

<p>Once that&rsquo;s done installing, you can include the autoload file so that it&rsquo;s loaded in the current file. You can then create a new instance of it and then use the generator that you want. In the code below I&rsquo;m using the <code>name</code>, <code>numberBetween</code>, <code>email</code>, <code>company</code> and <code>city</code> generators.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$faker = Faker\Factory::create();</p>

<p>$name = $faker->name;
$age = $faker->numberBetween(10, 35);
$email = $faker->email;</p>

<p>$school = $faker->company;
$city = $faker->city;
?>
```</p>

<p>You can then create a new transaction by calling the <code>beginTransaction</code> method. Any queries that are executed after calling this wouldn&rsquo;t actually commit to the database until you call the <code>commit</code> method. In the example below, I&rsquo;m executing a query to insert a new user into the <code>users</code> table as well as the <code>other_details</code> table. If any of those 2 queries fails, it won&rsquo;t be committed to the database.</p>

<p>```php
&lt;?php
$db->beginTransaction();</p>

<p>$query = $db->prepare(&ldquo;INSERT INTO users SET name = :name, age = :age, email = :email&rdquo;);
$query->execute(array(&lsquo;:name&rsquo; => $name, &lsquo;:age&rsquo; => $age, &lsquo;:email&rsquo; => $email));</p>

<p>$query2 = $db->prepare(&ldquo;INSERT INTO other_details SET school = :school, course = :city&rdquo;);
$query2->execute(array(&lsquo;:school&rsquo; => $school, &lsquo;:city&rsquo; => $city));</p>

<p>$db->commit();
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to use the PDO extension in PHP. Note that it&rsquo;s not only the MySQL database that PDO supports. It also supports other databases such as CUBRID, PostgreSQL, SQLite and many others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Introduction to phpsh]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh/"/>
    <updated>2015-10-03T11:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh</id>
    <content type="html"><![CDATA[<p>In this quick-tip I&rsquo;ll introduce you to a tool called <a href="http://www.phpsh.org/">phpsh</a>. This project has been created for quite some time now. It was created at Facebook but is no longer actively being developed. But this shouldn&rsquo;t stop you from using it. It&rsquo;s a really important tool to have especially when you want to quickly test a PHP script. PHPsh is an interactive shell for PHP. It&rsquo;s features include the following:</p>

<ul>
<li>readline history</li>
<li>tab completion</li>
<li>quick access to documentation</li>
</ul>


<p>You can download it directly from <a href="http://github.com/facebook/phpsh/zipball/master">this link</a>.</p>

<p>Once you&rsquo;re done downloading phpsh, extract the zip file and navigate to the extracted folder. Then execute the following commands to install it in your system.</p>

<p><code>
python setup.py build
sudo python setup.py install
</code></p>

<p>Once that&rsquo;s done, you can now open any terminal window and execute <code>phpsh</code> to start using it.</p>

<p>To get documentation regarding a specific function, use the <code>d</code> command followed by the name of the function you want to look up. Here are a few examples.</p>

<p><code>
d echo
d array_push
d array_filter
</code></p>

<p>It will then output the documentation.</p>

<p>```</p>

<h1>echo</h1>

<p>(PHP 4, PHP 5)</p>

<p>echo &mdash; Output one or more strings</p>

<h3>Description</h3>

<p>void echo ( string $arg1 [, string $&hellip; ] )</p>

<p>Outputs all parameters.</p>

<p>echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses.</p>

<p>echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the <a href="#ini.short-open-tag">short_open_tag</a> configuration setting enabled.</p>

<p><code>I have &lt;?=$foo?&gt; foo.</code></p>

<h3>Parameters</h3>

<p>arg1</p>

<p>The parameter to output.</p>

<p>&hellip;</p>

<h3>Return Values</h3>

<p>No value is returned.</p>

<h3></h3>

<p>```</p>

<p>Aside from directly accessing the docs, you can also write and execute any PHP code that you wish to test. Here&rsquo;s a screenshot of me declaring an array and then looping through it.</p>

<p><img src="/images/posts/phpsh/php-sh.png" alt="phpsh" /></p>

<p>You can also connect to a database and perform operations on it.</p>

<p><img src="/images/posts/phpsh/db.png" alt="db" /></p>

<p>That&rsquo;s it for this quick-tip. I hope I&rsquo;ve encouraged you to use phpsh on your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations in PHP with Phinx]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx/"/>
    <updated>2015-09-20T17:29:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx</id>
    <content type="html"><![CDATA[<p>Gone are the days where you use the export functionality of your database management tool and share the SQL file to your team mates. Most PHP frameworks today already comes with a database migration tool which you can use to construct and make changes to your database and easily share them through your version control system of choice. In this tutorial I&rsquo;ll be walking you through <a href="https://phinx.org/">Phinx</a>, a database migration tool for PHP.</p>

<p>If you don&rsquo;t know what a database migration is, it&rsquo;s basically a way to version your database. Pretty much like what you do with version control systems like Git, SVN or Mercurial. It allows you to make changes to your database and easily rollback any of those changes later on if you make a mistake or if there are some changes that needs to be implemented. You can then share the changes you&rsquo;ve made to your team by committing it to your version control system and pushing it to the main repository of your project. Your team mates can then pull those changes into their own copy and run the migrations so that they have the same state of the database as you do.</p>

<h3>Installation</h3>

<p>You can install Phinx through Composer by executing the following commands on your terminal. If you have an existing project, you can navigate to your project directory and execute it from there.</p>

<p><code>
composer require robmorgan/phinx
composer install --no-dev
</code></p>

<p>Next create a <code>migrations</code> folder. This is where the database migrations are going to be stored.</p>

<p>Finally, execute the following command to initialize Phinx.</p>

<p><code>
php vendor/bin/phinx init
</code></p>

<h3>Configuration</h3>

<p>When Phinx was initialized, you might have noticed that it created a <code>phinx.yml</code> file on the root of your project. This file is the Phinx configuration. This is where you can modify the database used by Phinx for production, development and testing environments. By default Phinx uses the development environment so go ahead and modify the details for that.</p>

<p>```
paths:</p>

<pre><code>migrations: %%PHINX_CONFIG_DIR%%/migrations
</code></pre>

<p>environments:</p>

<pre><code>default_migration_table: phinxlog
default_database: development
production:
    adapter: mysql
    host: localhost
    name: production_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

development:
    adapter: mysql
    host: localhost
    name: development_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

testing:
    adapter: mysql
    host: localhost
    name: testing_db
    user: root
    pass: ''
    port: 3306
    charset: utf8
</code></pre>

<p>```</p>

<h3>Usage</h3>

<p>Using Phinx mainly composed of the following workflow:</p>

<ol>
<li>Create a migration</li>
<li>Modify the migration class</li>
<li>Run the migration</li>
<li>If you need to make a change to a previous migration, roll it back, make the change to the migration class and run the migration again.</li>
</ol>


<h4>Creating Migrations</h4>

<p>To create a new migration, you use the Phinx shell script. Below is a migration for creating a users table.</p>

<p><code>
php vendor/bin/phinx create CreateUsersTable
</code></p>

<p>This creates a new file in the <code>migrations</code> directory. For me it created a file named <code>20150727004941_create_users_table.php</code>. The filename is made up of the timestamp and the machine-friendly version of the name of the migration that you provided.</p>

<p>It&rsquo;s best practice that you name your migrations based on what they do, so that you can easily look for them if you need to modify something. Each migration should only be doing one specific task so that you can easily roll them back without having to worry about side-effects. Creating a users table should add the fields that are necessary to that table. But if you&rsquo;re modifying a specific table, in most cases, you should only modify one field at a time. For example, you need to modify the data type from <code>INT</code> to <code>VARCHAR</code>. Only modify one field. But if it makes sense to change two or more fields in a single migration, then do so. For example, if you need to modify the length of the <code>username</code> and <code>password</code> fields so they can accomodate more data.</p>

<p>Going back to the migration file. Open it up if you haven&rsquo;t yet. Here&rsquo;s how it looks like by default.</p>

<p>```php
&lt;?php</p>

<p>use Phinx\Migration\AbstractMigration;</p>

<p>class CreateUsersTable extends AbstractMigration
{</p>

<pre><code>/**
 * Change Method.
 *
 * Write your reversible migrations using this method.
 *
 * More information on writing migrations is available here:
 * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class
 */
public function change()
{

}
</code></pre>

<p>}
?>
```</p>

<p>Phinx already creates a skeleton class for you s you only need to modify what&rsquo;s in the <code>change</code> function. This is where you need to add the code for modifying your database. In this case the change is to create a <code>users</code> table. Add the following inside the <code>change</code> function.</p>

<p>```php
&lt;?php
  $table = $this->table(&lsquo;users&rsquo;);
  $table->addColumn(&lsquo;username&rsquo;, &lsquo;string&rsquo;)</p>

<pre><code>  -&gt;addColumn('email', 'string')
  -&gt;addColumn('password', 'string')
  -&gt;create();
</code></pre>

<p>?>
```</p>

<p>The table is declared using the <code>table</code> function. This accepts the name of the table as its argument. The fields are then added by calling the <code>addColumn</code> method in the table. This accepts 2 required arguments: the name of the field and the data type. Finally, the <code>create</code> function is called to actually create the table. Once that&rsquo;s done, save the file.</p>

<p>Let&rsquo;s pretend we forgot to add the <code>photo</code> field, so create another migration to add that.</p>

<p><code>
php vendor/bin/phinx migrate AddPhotoFieldToUsersTable
</code></p>

<p>Add the following inside the <code>change</code> method.</p>

<p>```php</p>

<pre><code>$table = $this-&gt;table('users');
$table-&gt;addColumn('photo', 'string', array('after' =&gt; 'username'))
        -&gt;update();
</code></pre>

<p>```</p>

<p>Nothing new here, the only thing that&rsquo;s changed is the method to be called to actually execute the change that you need to make. In this case instead of <code>create</code>, the <code>update</code> method is used. This is how Phinx will know that you are trying to update the <code>users</code> table by adding the <code>photo</code> field.</p>

<h4>Running Migrations</h4>

<p>You can run all the migrations that haven&rsquo;t been run yet by using the <code>migrate</code> command.</p>

<p><code>
php vendor/bin/phinx migrate
</code></p>

<p>It would output something similar to the following when the migration is run.</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727004941 CreateUsersTable: migrating
 == 20150727004941 CreateUsersTable: migrated 0.3325s</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: migrating
 == 20150727013547 AddPhotoFieldToUsersTable: migrated 0.5018s</p>

<p>All Done. Took 0.6773s
```</p>

<p>You can now check if the table was actually created by opening your database management tool of choice. Also notice that there is a <code>phinxlog</code> table in your database. This is used by Phinx to keep track of which specific migrations were run and the start and end time for each. The migration is determined by its version, which is basically the first part of the file name for a specific migration file. On my testing, the version is <code>20150727004941</code>.</p>

<h4>Rolling Back Changes</h4>

<p>To rollback changes you can use the <code>rollback</code> command which does exactly the opposite of the <code>migrate</code> command. All it does is rollback everything that has changed on the last migrate.</p>

<p><code>
php vendor/bin/phinx rollback
</code></p>

<p>The command above outputs something similar to the following:</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: reverting
 == 20150727013547 AddPhotoFieldToUsersTable: reverted 0.4672s</p>

<p> == 20150727004941 CreateUsersTable: reverting
 == 20150727004941 CreateUsersTable: reverted 0.1503s</p>

<p>All Done. Took 0.6175s
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to create database migrations with Phinx. Be sure to check out the <a href="http://docs.phinx.org/en/latest/">official documentation</a> if you want to learn more.</p>
]]></content>
  </entry>
  
</feed>
