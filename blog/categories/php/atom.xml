<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-01-28T06:55:35+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Fake Data in PHP with Faker]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker/"/>
    <updated>2016-01-28T07:13:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker</id>
    <content type="html"><![CDATA[<p>In the good old days, I often test PHP applications by accessing it directly from the browser and input the data in the forms. Today, with the explosion of <a href="https://github.com/ziadoz/awesome-php">awesome PHP libraries</a> you can now generate most kinds of data by using code alone. The data can then be directly inserted into the database. This reduces the need to input data directly into the app. In this tutorial, I&rsquo;ll be walking you through <a href="https://github.com/fzaninotto/Faker">Faker</a>, a PHP library that generates fake data for you.</p>

<h3>Installation</h3>

<p>You can install Faker by executing the following command. Note that this requires you to have <a href="https://getcomposer.org/">Composer</a> installed.</p>

<p><code>
composer require fzaninotto/faker
</code></p>

<h3>Concepts</h3>

<p>Here are a few concepts that you need to remember before moving on.</p>

<ul>
<li><strong>generators</strong> &ndash; responsible for generating data.</li>
<li><strong>providers</strong> &ndash; the data source for generators. Generators can&rsquo;t really stand by themselves. Providers really shine on the localization feature of Faker. Real places, phone numbers in countries can be generated by Faker through the use of providers.</li>
<li><strong>formatters</strong> &ndash; these are the properties that you can access from a specific generator. Examples include name, city, address, and phoneNumber.</li>
</ul>


<h3>Usage</h3>

<p>To use Faker from your file, you need to include the vendor autoload file and create a new Faker instance.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$faker = Faker\Factory::create();
?>
```</p>

<h4>Localization</h4>

<p>Since Faker is an open-source project that anyone can contribute to, lots of localized providers has already been added. You can take advantage of this by passing in the locale when you create a new Faker instance. For example, if you live in the Philippines:</p>

<p><code>php
&lt;?php
$faker = Faker\Factory::create('en_PH');
?&gt;
</code></p>

<p>You can then generate an address in the Philippines by using the <code>address</code> formatter. Note that it&rsquo;s only down to the city level. This means that the street and barangay are using the default providers.</p>

<p><code>php
&lt;?php
echo $faker-&gt;address;
?&gt;
</code></p>

<p>Note that each provider doesn&rsquo;t have generators for every possible formatter. For example, the <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider/en_PH">Philippine provider</a> has only generators for the Address and PhoneNumber. This means that you can only have localized values for those. All the other formatters will utilize the default ones provided by Faker.
For a list of providers, check out <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider">this page</a> in their Github repo.</p>

<h4>Formatters</h4>

<p>Here are the formatters that I commonly use in my projects.</p>

<p>```php
&lt;?php
//person
$faker->name;
$faker->firstName(&lsquo;male&rsquo;);
$faker->lastName;</p>

<p>//address
$faker->address;
$faker->streetName;
$faker->streetAddress;
$faker->postCode;
$faker->address;
$faker->country;</p>

<p>//company
$faker->company;</p>

<p>//date and time
$faker->year;
$faker->month; //number representation of a month
$faker->monthName;
$faker->timezone; //valid php timezone (<a href="http://php.net/manual/en/timezones.php">http://php.net/manual/en/timezones.php</a>)
$faker->time; //string time
$faker->dateTime; //datetime object
$faker->unixTime; //unix timestamp</p>

<p>//internet
$faker->email;
$faker->userName;
$faker->password;</p>

<p>//payment
$faker->creditCardType;
$faker->creditCardNumber;</p>

<p>//images
$faker->imageUrl(50, 60); //where width=50 and height=60
?>
```</p>

<h4>Creating New Providers</h4>

<p>If you want to create a provider for your own project, you can easily extend Faker. For example, if you want to generate random pokemon names. The first thing that you need to do is to declare the namespace in which the class belongs. Next, declare a new class and have it extend the faker provider base class. Inside the class, create an array of Pokemon names. Create a new function and call it <code>pokemon</code>, this is the function that will be called later on to generate a random pokemon name. To pick a random item from the array you created, use the <code>randomElement</code> function and then pass in the array which you want to use as the data source.</p>

<p>```php
&lt;?php
namespace Faker\Provider;</p>

<p>class Pokemon extends \Faker\Provider\Base {</p>

<p>  protected static $pokemon = array(</p>

<pre><code>'Pikachu',
'Bulbasaur',
'Cubone',
'Charizard',
'Marowak',
'Gastly',
'Alakazam',
'Arcanine',
'Vaporeon',
'Flareon',
'Venusaur',
'Wartortle'
</code></pre>

<p>  );</p>

<p>  public function pokemon(){</p>

<pre><code>return static::randomElement(static::$pokemon);
</code></pre>

<p>  }
}
?>
```</p>

<p>Save the file and name it <code>Pokemon.php</code>. You can save it any where in your project as long as you can easily reference it from your main file.</p>

<p>On your main file, include the vendor autoload together with the file that you&rsquo;ve just created.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
require_once 'Pokemon.php';
?&gt;
</code></p>

<p>Create a new faker generator. This is a bare bones generator with no providers assigned to it. So if you use <code>$faker-&gt;name</code>, all you get is an error.</p>

<p><code>php
&lt;?php
$faker = new Faker\Generator();
?&gt;
</code></p>

<p>If you want to use the default providers, you can include them by calling the <code>addProvider</code> method and passing in a new instance of the provider that you want to include.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\en_US\Person($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Address($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\PhoneNumber($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Company($faker));
$faker-&gt;addProvider(new Faker\Provider\Lorem($faker));
$faker-&gt;addProvider(new Faker\Provider\Internet($faker));
?&gt;
</code></p>

<p>To add the new Pokemon provider.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\Pokemon($faker));
?&gt;
</code></p>

<p>Once that&rsquo;s done, you can now call the new <code>pokemon</code> formatter.</p>

<p><code>
&lt;?php
$faker-&gt;pokemon; //marowak
?&gt;
</code></p>

<h4>Integration with Your PHP Application</h4>

<p>Most PHP frameworks today already comes with a database seeding feature. If you&rsquo;re using Laravel, it has a database <a href="http://laravel.com/docs/5.0/migrations">migration and seeding functionality</a>. You can simply install Faker into your project, generate a new seeder and then use Faker inside the seeder. This allows you to seed your database with Fake data in a single command by using <a href="http://laravel.com/docs/5.0/artisan">Artisan CLI</a>. If your framework doesn&rsquo;t include a seeding feature, you can use Phinx, a database-migration tool for PHP. This tool also allows you to <a href="http://docs.phinx.org/en/latest/seeding.html">create seeders for your database</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Faker library to generate fake and random data for testing your PHP applications. Check out the <a href="https://github.com/fzaninotto/Faker">official github page</a> for more information regarding its usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Information About Any Company with Clearbit's Company API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/19/getting-information-about-any-company-with-clearbits-company-api/"/>
    <updated>2015-12-19T13:41:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/19/getting-information-about-any-company-with-clearbits-company-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how you can get information from any company using the Clearbit Company API.</p>

<p>Start by signing up for an account on the Clearbit website. An API key will be assigned to your account after signing up. This allows you to make a request to their API.</p>

<p>Next, install Guzzle on your working directory. Guzzle is an HTTP library for PHP. It is used to easily make requests to any API.</p>

<p><code>
composer require guzzlehttp/guzzle:~6.0
</code></p>

<p>Include the vendor autoload file on your file and create a new Guzzle client with the following base uri: <code>https://company.clearbit.com/</code>.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$client = new GuzzleHttp\Client(array(&lsquo;base_uri&rsquo; => &lsquo;<a href="https://company.clearbit.com/">https://company.clearbit.com/</a>&rsquo;));
?>
```</p>

<p>To use the API, make a <code>get</code> request to the <code>v1/companies/domain/</code> endpoint followed by the domain name of the company that you want. Pass in the <code>auth</code> as an option. This allows you to specify the API key which you got from Clearbit.</p>

<p>```php
&lt;?php
$response = $client->get(&lsquo;v1/companies/domain/google.com&rsquo;, array(</p>

<pre><code>'auth' =&gt; array('YOUR-CLEARBIT-API-KEY', '')
</code></pre>

<p>));
?>
```</p>

<p>You can then get the response body by calling the <code>getBody</code> method in the response. In the example below, the response is converted to an array using the <code>json_decode</code> method.</p>

<p>```php
&lt;?php
$data = json_decode($response->getBody(), true);
?></p>

<pre>
<?php print_r($data); ?>
</pre>


<p>```</p>

<p>The output will look something like the following.</p>

<p>```</p>

<pre><code>Array
</code></pre>

<p>(</p>

<pre><code>[id] =&gt; 1d396c21-e421-4dd9-988e-55a8200c6e10
[name] =&gt; Google
[legalName] =&gt; Google Inc
[domain] =&gt; google.com
[domainAliases] =&gt; Array
    (
        [0] =&gt; covet.com
        [1] =&gt; appspotchat.com
        [2] =&gt; ggh-uae.com
        [3] =&gt; remail.com
        [4] =&gt; orkut.com
        [5] =&gt; goolge.com
        [6] =&gt; picasa.com
        [7] =&gt; blogspot.ru
        [8] =&gt; sparkbuy.com
        [9] =&gt; pushlife.com
        [10] =&gt; greenparrotpictures.com
        [11] =&gt; phonetic-arts.com
        [12] =&gt; omnisio.com
        [13] =&gt; googlecloud.com
        [14] =&gt; weardrobe.com
        [15] =&gt; ojos-inc.com
        [16] =&gt; akwan.com.br
        [17] =&gt; appliedsemantics.com
        [18] =&gt; gemail.com.br
        [19] =&gt; wosix.com
        [20] =&gt; firstinwireless.com
        [21] =&gt; cloudmarket.me
        [22] =&gt; riya.com
        [23] =&gt; teronamanagement.com
        [24] =&gt; sxz.co
        [25] =&gt; womenfitnessinsider.com
        [26] =&gt; webtocracy.org
        [27] =&gt; webtocracy.com
        [28] =&gt; webtocracy.net
        [29] =&gt; superapple.org
        [30] =&gt; storktechnology.com
        [31] =&gt; sourful.com
        [32] =&gt; snapchatdeals.com
        [33] =&gt; quarterthree.com
        [34] =&gt; puwak.com
        [35] =&gt; nudevilla.com
        [36] =&gt; nemzis.com
        [37] =&gt; ryanstull.com
        [38] =&gt; mckayfamily.org
        [39] =&gt; marksearle.net
        [40] =&gt; opentolink.com
        [41] =&gt; lewispi.com
        [42] =&gt; levkova.com
        [43] =&gt; katenka.net
        [44] =&gt; imize.net
        [45] =&gt; google.us
        [46] =&gt; com.google
        [47] =&gt; gogle.com
        [48] =&gt; oingo.com
        [49] =&gt; googlesyndication.com
        [50] =&gt; ggoogle.com
        [51] =&gt; google.io
        [52] =&gt; blogspot.ae
        [53] =&gt; gogole.com
        [54] =&gt; hijab.pw
        [55] =&gt; industrial-perception.com
        [56] =&gt; googlr.com
        [57] =&gt; googleadservices.com
        [58] =&gt; talkbin.com
        [59] =&gt; picnik.com
        [60] =&gt; postrank.com
        [61] =&gt; appjet.com
        [62] =&gt; google.co
        [63] =&gt; zabrinalee.com
        [64] =&gt; blu-ray.us
        [65] =&gt; picasa.net
        [66] =&gt; googleproductforums.com
        [67] =&gt; googlelabs.com
        [68] =&gt; googlee.com
        [69] =&gt; gooogle.com
        [70] =&gt; diychef.com
        [71] =&gt; googl.com
        [72] =&gt; gmail.co
        [73] =&gt; blogger.ch
        [74] =&gt; mozingo.me
        [75] =&gt; orkut.org
        [76] =&gt; lifescapeinc.com
        [77] =&gt; firehunt.com
        [78] =&gt; google.info
        [79] =&gt; veremey.net
        [80] =&gt; docverse.com
    )

[url] =&gt; http://google.com
[site] =&gt; Array
    (
        [url] =&gt; http://google.com
        [title] =&gt; Google
        [h1] =&gt; 
        [metaDescription] =&gt; Search the world's information, including webpages, images, videos and more. Google has many special features to help you find exactly what you're looking for.
        [metaAuthor] =&gt; 
    )

[category] =&gt; Array
    (
        [sector] =&gt; Consumer Discretionary
        [industryGroup] =&gt; Media
        [industry] =&gt; Media
        [subIndustry] =&gt; Publishing
    )

[tags] =&gt; Array
    (
    )

[description] =&gt; Google’s mission is to organize the world’s information and make it universally accessible and useful.
[location] =&gt; 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA
[geo] =&gt; Array
    (
        [streetNumber] =&gt; 1600
        [streetName] =&gt; Amphitheatre Parkway
        [subPremise] =&gt; 
        [city] =&gt; Mountain View
        [state] =&gt; California
        [country] =&gt; United States
        [postalCode] =&gt; 94043
        [lat] =&gt; 37.4224206
        [lng] =&gt; -122.0843021
    )

[logo] =&gt; https://logo.clearbit.com/google.com
[facebook] =&gt; Array
    (
        [handle] =&gt; google
        [likes] =&gt; 
    )

[linkedin] =&gt; Array
    (
        [handle] =&gt; company/google
    )

[twitter] =&gt; Array
    (
        [handle] =&gt; google
        [id] =&gt; 20536157
        [bio] =&gt; News and updates from Google
        [followers] =&gt; 11873983
        [following] =&gt; 448
        [location] =&gt; Mountain View, CA
        [site] =&gt; http://t.co/twxHxOtTvy
        [avatar] =&gt; https://pbs.twimg.com/profile_images/522909800191901697/FHCGSQg0_normal.png
    )

[angellist] =&gt; Array
    (
        [id] =&gt; 32203
        [handle] =&gt; google
        [description] =&gt; Google’s mission is to organize the world’s information and make it universally accessible and useful.
        [followers] =&gt; 7097
        [blogUrl] =&gt; http://googleblog.blogspot.com/
    )

[crunchbase] =&gt; Array
    (
        [handle] =&gt; google
    )

[emailProvider] =&gt; 
[type] =&gt; public
[ticker] =&gt; 
[phone] =&gt; +1 650-253-0000
[metrics] =&gt; Array
    (
        [alexaUsRank] =&gt; 1
        [alexaGlobalRank] =&gt; 1
        [googleRank] =&gt; 9
        [employees] =&gt; 10000
        [marketCap] =&gt; 
        [raised] =&gt; 1700000000
    )

[tech] =&gt; Array
    (
        [0] =&gt; google_analytics
        [1] =&gt; double_click
        [2] =&gt; google_adwords
        [3] =&gt; doubleclick
        [4] =&gt; google_apps
    )
</code></pre>

<p>)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing Passwords in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php/"/>
    <updated>2015-12-11T12:35:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;re going to take a look at some of the libraries that allows us secure passwords in PHP.</p>

<h3>Password Compat</h3>

<p>The first library that we&rsquo;re going to look at is Password Compat. You can install it through <a href="https://getcomposer.org/">Composer</a> by using the following command.</p>

<p><code>
composer require ircmaxell/password-compat
</code></p>

<p>Once it&rsquo;s done installing, you can the include the vendor autoload file so you can use its functions.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
?&gt;
</code></p>

<p>The <code>password_hash</code> function is used to hash passwords. It accepts the password that you want to hash as its first argument and the algorithm to be used for password hashing as its second. In the example below, <code>PASSWORD_DEFAULT</code> is used. This allows you to use the most secure algorithm that&rsquo;s currently available to PHP. At the time of writing of this article, the most secure algorithm that&rsquo;s available to PHP is bcrypt. So that&rsquo;s the one that&rsquo;s being used when you specify <code>PASSWORD_DEFAULT</code> as the second argument.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$hash = password_hash($password, PASSWORD_DEFAULT);
?&gt;
</code></p>

<p>There&rsquo;s also an optional third argument which allows you to change the CPU <code>cost</code> of hashing the password. By default the <code>cost</code> is 10. So if you have a less powerful server you can change it to something lower. The <code>cost</code> can have a value between 4 and 31.</p>

<p><code>php
&lt;?php
$hash = password_hash($password, PASSWORD_DEFAULT, array('cost' =&gt; 7));
?&gt;
</code></p>

<p>You can then store the hash in your database.</p>

<p>To validate if a password matches the hash stored in the database, use the <code>password_verify</code> method. This accepts the password as the first argument and the hash as the second. So in your application you might have a query to select the user based on its email or username and then you use the hash that was returned for the second argument.</p>

<p>```php
&lt;?php
if(password_verify($password, $hash)){</p>

<pre><code>echo 'valid';   
</code></pre>

<p>}else{</p>

<pre><code>echo 'invalid';
</code></pre>

<p>}
?>
```</p>

<h3>PHPAss</h3>

<p>PHPAss is one of the older password hashing libraries that are available for PHP. Nevertheless it doesn&rsquo;t make it less secure than any of the password securing methods in this article. It uses the blowfish algorithm to hash passwords.</p>

<p>Execute the following to install PHPAss.</p>

<p><code>
composer require hautelook/phpass
</code></p>

<p>After including the vendor autoload file, set your current file to use the <code>PasswordHash</code> class in the <code>Hautelook</code> namespace.</p>

<p><code>php
&lt;?php
use Hautelook\Phpass\PasswordHash;
?&gt;
</code></p>

<p>Create a new password hasher instance. This accepts 2 required arguments. First is the base-2 logarithm of the iteration count used for password stretching. The second a boolean value for setting if the password will use portable hashes. The values that I&rsquo;ve set below are the default one&rsquo;s. Those will do for most use cases.</p>

<p><code>php
&lt;?php
$passwordHasher = new PasswordHash(8, false);
?&gt;
</code></p>

<p>You can then call the <code>HashPassword</code> method to actually hash the password. This hash should then be stored into the database.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$hash = $passwordHasher-&gt;HashPassword($password);
?&gt;
</code></p>

<p>You can check if a password is valid by using the <code>CheckPassword</code> method. This accepts the password as its first argument and the hash that came from the database as the second.</p>

<p>```php
&lt;?php
$passwordMatch = $passwordHasher->CheckPassword($password, $hash);
if($passwordMatch){</p>

<pre><code>echo 'valid';
</code></pre>

<p>}else{</p>

<pre><code>echo 'invalid';
</code></pre>

<p>}
?>
```</p>

<h3>PHP Password Lib</h3>

<p>PHP Password Lib is one of those libraries that isn&rsquo;t really recommended for production use. As mentioned in their <a href="https://github.com/ircmaxell/PHP-PasswordLib">Github page</a> itself, it&rsquo;s currently in beta and should be used at your own risk.</p>

<p>In order to install PHP Password Lib, you first have to add a <code>minimum-stability</code> option and set it to <code>dev</code>. Also set <code>prefer-stable</code> to <code>true</code> so that composer will default to installing the stable versions of the other libraries that you&rsquo;re installing via composer.</p>

<p><code>
"minimum-stability": "dev",
"prefer-stable": true
</code></p>

<p>Can&rsquo;t really find the library in <a href="https://packagist.org">Packagist</a> so you need to add the following to your <code>composer.json</code> file directly.</p>

<p><code>
"PasswordLib/PasswordLib": "*"
</code></p>

<p>Once that&rsquo;s done, execute <code>composer update</code> to update the dependencies.</p>

<p>To use the library, create a new instance of the <code>PasswordLib</code> class and then use it to call the <code>createPasswordHash</code> method to hash a password.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$lib = new PasswordLib\PasswordLib();
$hash = $lib-&gt;createPasswordHash($password);
?&gt;
</code></p>

<p>Just like the previous libraries it also comes with its own verify function.</p>

<p>```php
&lt;?php
$is_valid = $lib->verifyPasswordHash($password, $hash);
if($is_valid){</p>

<pre><code>echo 'yep';
</code></pre>

<p>}else{</p>

<pre><code>echo 'nope';
</code></pre>

<p>}
?>
```</p>

<p>Aside from the generating and verifying hashes, it also allows you to generate random tokens. A sample use case would be when users request for their password to be reset. That&rsquo;s commonly done by sending an email to the user. That email contains a link with a query parameter on it which has a random string as its value. That string is the token. Which is used for fetching the password reset request that was saved in the database.</p>

<p><code>php
&lt;?php
$token = $lib-&gt;getRandomToken(35);
echo $token; // Mpe/H3oLamOqEV4uxTwu.fuhKpb5p/u4BMu
?&gt;
</code></p>

<h3>zxcvbn-php</h3>

<p>zxcvbn-php is a library for estimating password strength.</p>

<p>You can install it by executing the following command.</p>

<p><code>
composer require bjeavons/zxcvbn-php
</code></p>

<p>To use the library, make use of the <code>ZxcvbnPhp\Zxcvbn</code> namespace.</p>

<p><code>php
&lt;?php
use ZxcvbnPhp\Zxcvbn;
?&gt;
</code></p>

<p>You can then determine the password score by calling the <code>passwordStrength</code> method.</p>

<p><code>php
&lt;?php
$zxcvbn = new Zxcvbn();
$password = 'mypassword';
$strength = $zxcvbn-&gt;passwordStrength($password);
echo $strength['score'];
?&gt;
</code></p>

<p>Based on my testing, it returns 0 if the password is not secure or easy to crack. And return 4 if it is secure. I haven&rsquo;t found any values between those and there&rsquo;s nothing higher than 4 so I assume it can only return a score of either 4 or 0. The result contains other data as well. Things like the entropy, calc_time and crack_time.</p>

<h3>GenPhrase</h3>

<p>Lastly, we&rsquo;re going to take a look at GenPhrase. This library allows us to generate secure passphrases in PHP.</p>

<p>To install GenPhrase, execute the following on your terminal.</p>

<p><code>
composer require genphrase/genphrase
</code></p>

<p>One note about the installation though. It&rsquo;s also mentioned in their <a href="https://github.com/timoh6/GenPhrase">official Github project page</a>. It mentioned that GenPhrase should be obtained only via secure connection using Github. This is because Composer is susceptible to man-in-the-middle attacks. If you&rsquo;re just testing, it&rsquo;s fine to install this library via composer. But if you&rsquo;re following this tutorial to implement this library on a production server then think again. You&rsquo;ve been warned.</p>

<p>To use GenPhrase, create a new instance of the <code>Password</code> class under the <code>GenPhrase</code> namespace. Then call the <code>generate</code> method to generate the random passphrase.</p>

<p><code>php
&lt;?php
$gen = new GenPhrase\Password();
echo $gen-&gt;generate(); // Slum treble Boost rack
?&gt;
</code></p>

<p>You can also pass the <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory">entropy</a>) as an argument. By default the value is 50. But you can have a value between 26 and 120.</p>

<p><code>php
&lt;?php
echo $gen-&gt;generate(60); // soviet!Retain8skinny&amp;spoil
?&gt;
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to secure passwords in PHP using the <a href="https://github.com/ircmaxell/password_compat">Password Compat</a>, <a href="https://github.com/hautelook/phpass">phpass</a>, <a href="https://github.com/ircmaxell/PHP-PasswordLib">PHP Password Lib</a>, <a href="https://github.com/bjeavons/zxcvbn-php">zxcvbn</a> and <a href="https://github.com/timoh6/GenPhrase">GenPhrase</a> libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get the Logo of Any Company]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company/"/>
    <updated>2015-11-28T12:17:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company</id>
    <content type="html"><![CDATA[<p>In one of my previous projects called <a href="/projects/stockswitch/">StockSwitch</a>, I had the need to fetch and utilize the logo of companies that are included in the NYSE, NASDAQ, and AMEX. In this article, I&rsquo;ll be showing you how you can get the logo for any company so that you can use it in your projects.</p>

<p>The best way to get the logo of any company is via Clearbit&rsquo;s logo API. All you have to do is replace the value of <code>{DOMAIN-NAME}</code> with the domain name used by the company that you want.</p>

<p><code>
https://logo.clearbit.com/{DOMAIN-NAME}
</code></p>

<p>For example, you want to utilize Google&rsquo;s logo in your project. Simply create a new image tag and link to <code>logo.clearbit.com</code> followed by the domain name.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com"&gt;
</code></p>

<p>You can also pass in the following optional parameters.</p>

<ul>
<li>size &ndash; the size in pixels of the logo. The highest value I found to be valid is 800px. And the lowest is 5px.</li>
<li>format &ndash; you can pass either <code>png</code> or <code>jpg</code>.</li>
<li>greyscale &ndash; pass in a value of <code>true</code> if you want the logo to be in greyscale.</li>
</ul>


<p>For example, you want the image to be in 50px and the format is png.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com?size=50&amp;format=png"&gt;
</code></p>

<p>You can also save it on your own server so you don&rsquo;t use Clearbit&rsquo;s resources every time the company logos are requested. Here&rsquo;s a sample code on how you might do it in php.</p>

<p>```php
&lt;?php
$companies = array(</p>

<pre><code>'facebook.com',
'google.com',
'oracle.com',
'amazon.com',
'ebay.com',
'uber.com',
'twitter.com',
'github.com'
</code></pre>

<p>);</p>

<p>foreach($companies as $company){</p>

<pre><code>$url = "https://logo.clearbit.com/{$company}?size=150&amp;format=png";
$contents = file_get_contents($url);
file_put_contents('logos/' . $company . '.png' , $contents);
</code></pre>

<p>}
?>
```</p>

<p>The code above gets the contents returned from the clearbit logo URL and then saves it to the <code>logos</code> directory in the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dates and Times in PHP with Carbon]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon/"/>
    <updated>2015-10-31T17:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon</id>
    <content type="html"><![CDATA[<p>When writing PHP applications there&rsquo;s often a need for working with dates and times. In this tutorial, I&rsquo;ll be walking you through Carbon, a simple PHP API extension for the DateTime class. It basically makes working with dates and times a lot more easier. I&rsquo;ve personally used this library on my <a href="https://github.com/anchetaWern/ahead">Ahead</a> project, a Laravel app for scheduling posts to social media sites like Facebook, Twitter and LinkedIn.</p>

<h3>Installation</h3>

<p>To install Carbon, you need to use <a href="https://getcomposer.org/">Composer</a>.</p>

<p><code>
composer require nesbot/carbon
</code></p>

<h3>Usage</h3>

<p>Include the vendor autoload in your file and then use the <code>Carbon</code> class in the <code>Carbon</code> namespace.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Carbon\Carbon;
?>
```</p>

<h4>Getting the Current Date and Time</h4>

<p>You can get the current date and time using the <code>now</code> method. If you do not specify an argument, it uses the default timezone from your PHP config.</p>

<p><code>php
&lt;?php
echo Carbon::now(); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>If you want to use a different timezone, you can pass a <a href="http://php.net/manual/en/timezones.php">valid timezone</a> as the argument.</p>

<p><code>php
&lt;?php
echo Carbon::now('Asia/Manila'); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>Aside from the <code>now</code> method, there&rsquo;s also <code>today</code>, which returns the start of today&rsquo;s date, <code>yesterday</code>, which returns the start of the date yesterday, and <code>tomorrow</code>, which returns the start of the date tomorrow.</p>

<p><code>php
&lt;?php
echo Carbon::today()-&gt;toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::yesterday()-&gt;toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::tomorrow()-&gt;toDateTimeString(); //2015-07-27 00:00:00
?&gt;
</code></p>

<h4>Converting to String</h4>

<p>By default, methods in Carbon returns a datetime object. Though its an object, you can directly output it using <code>echo</code> because of the <code>__toString</code> magic method. But if you want to convert it to a string, you can use the <code>toDateString</code> or <code>toDateTimeString</code> methods.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;toDateString(); //2015-07-26
echo Carbon::now()-&gt;toDateTimeString(); //2015-07-26 20:22:50
?&gt;
</code></p>

<h4>Parsing Dates</h4>

<p>You can also parse dates in all sorts of formats using the <code>parse</code> method.</p>

<p>```php
&lt;?php
echo Carbon::parse(&lsquo;2015/03/30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30 00:10:25&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:10:25</p>

<p>echo Carbon::parse(&lsquo;today&rsquo;)&ndash;>toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::parse(&lsquo;yesterday&rsquo;)&ndash;>toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::parse(&lsquo;tomorrow&rsquo;)&ndash;>toDateTimeString(); //2015-07-27 00:00:00
echo Carbon::parse(&lsquo;2 days ago&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 20:49:53
echo Carbon::parse(&lsquo;+3 days&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 20:49:53
echo Carbon::parse(&lsquo;+2 weeks&rsquo;)&ndash;>toDateTimeString(); //2015-08-09 20:49:53
echo Carbon::parse(&lsquo;+4 months&rsquo;)&ndash;>toDateTimeString(); //2015-11-26 20:49:53
echo Carbon::parse(&lsquo;-1 year&rsquo;)&ndash;>toDateTimeString(); //2014-07-26 20:49:53
echo Carbon::parse(&lsquo;next wednesday&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 00:00:00
echo Carbon::parse(&lsquo;last friday&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 00:00:00
?>
```</p>

<h4>Constructing Dates</h4>

<p>You can also construct dates by using individual parts such as the year month and day.</p>

<p>```php
&lt;?php
$year = &lsquo;2015&rsquo;;
$month = &lsquo;04&rsquo;;
$day = &lsquo;12&rsquo;;</p>

<p>echo Carbon::createFromDate($year, $month, $day); //2015-04-12 20:55:59</p>

<p>$hour = &lsquo;02&rsquo;;
$minute = &lsquo;15&rsquo;:
$second = &lsquo;30&rsquo;;</p>

<p>echo Carbon::create($year, $month, $day, $hour, $minute, $second); //2015-04-12 02:15:30
?>
```</p>

<p>Optionally, you can pass in any valid timezone as the last argument for the <code>create</code> and <code>createFromDate</code> methods.</p>

<h4>Manipulating Dates</h4>

<p>Manipulating dates can be done by using <code>add</code> (to add) or <code>sub</code> (to subtract) followed by the unit of time you want to add or subtract. For example, you want to add a specific number of days to the specific date, you use the <code>addDays</code> method. There&rsquo;s also the <code>modify</code> method which allows you to pass in the modification that you want. It takes the format of <code>+</code> or <code>-</code> followed by the unit value and the unit. So if you want to add a year to the current date, you use <code>+1 year</code>. Check out the examples below to have an idea what else you can do.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;addDays(25); //2015-08-20 21:10:00
echo Carbon::now()-&gt;addWeeks(3); //2015-08-16 21:10:00
echo Carbon::now()-&gt;addHours(25); //2015-07-27 22:10:00
echo Carbon::now()-&gt;subHours(2); //2015-07-26 19:10:00
echo Carbon::now()-&gt;addHours(2)-&gt;addMinutes(12); //2015-07-26 23:22:00
echo Carbon::now()-&gt;modify('+15 days'); //2015-08-10 21:10:00
echo Carbon::now()-&gt;modify('-2 days'); //2015-07-24 21:10:00
?&gt;
</code></p>

<p>Commonly in PHP apps are international. This means that you need to work with different timezones. Here&rsquo;s how to convert from one timezone to another.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;setTimezone('America/Los_Angeles'); //2015-07-26 06:23:48
?&gt;
</code></p>

<h4>Comparing Dates</h4>

<p>You can use the following methods to compare dates in Carbon.</p>

<ul>
<li><code>min</code> &ndash; returns the smaller date.</li>
<li><code>max</code> &ndash; returns the larger date.</li>
<li><code>eq</code> &ndash; check if two dates are the same.</li>
<li><code>gt</code> &ndash; check if the first date is greater than the second date.</li>
<li><code>lt</code> &ndash; check if the first date is less than the second date.</li>
<li><code>gte</code> &ndash; check if the first date is greater than or equal to the second date.</li>
<li><code>lte</code> &ndash; check if the first date is lesser than or equal to the second date.</li>
</ul>


<p>Other helpful methods include <code>isWeekDay</code>, <code>isWeekend</code>, <code>isYesterday</code>, <code>isFuture</code> and <code>isPast</code>.</p>

<h4>Laravel Integration</h4>

<p>If you&rsquo;re on Laravel, you can just add an alias for the Carbon library in the <code>aliases</code> in the <code>app/config/app.php</code>.</p>

<p><code>
'Carbon' =&gt; 'Carbon\Carbon'
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Carbon library in PHP. Carbon is a really nice and easy way to work with dates in PHP. Be sure to check out the <a href="http://carbon.nesbot.com/docs/">official docs</a> to learn more about it.</p>
]]></content>
  </entry>
  
</feed>
