<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-05-09T20:09:36+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Lumen]]></title>
    <link href="http://anchetawern.github.io/blog/2015/05/09/getting-started-with-lumen/"/>
    <updated>2015-05-09T13:12:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/05/09/getting-started-with-lumen</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through Lumen, a lightweight framework from the same guys that made Laravel. Lumen is basically a lighter version of Laravel.</p>

<h3>Installation</h3>

<p>You can install Lumen by using composer&rsquo;s <code>create-project</code> command. Simply execute the following command on your preferred install directory:</p>

<p><code>
composer create-project laravel/lumen --prefer-dist
</code></p>

<p>Once the installation is done, you can navigate to the <code>lumen</code> directory and execute the following:</p>

<p><code>
php artisan serve --port=7771
</code></p>

<p>This will serve the project on port 7771 of your localhost:</p>

<p><code>
http://localhost:7771/
</code></p>

<p>If the installation completed successfully, you will be greeted by the default screen.</p>

<h3>Using Third Party Libraries</h3>

<p>You can use third party libraries with Lumen by adding the package that you want to install in the <code>composer.json</code> file. Here&rsquo;s an example:</p>

<p>```
&ldquo;require&rdquo;: {</p>

<pre><code>"laravel/lumen-framework": "5.0.*",
"vlucas/phpdotenv": "~1.0",
"elasticsearch/elasticsearch": "~1.0",
"guzzlehttp/guzzle": "~5.0"
</code></pre>

<p>},
```</p>

<p>Note that the lumen-framework and phpdotenv is there by default since those are needed in order for Lumen to work. In the above file we have added elasticsearch and guzzlehttp as our dependencies.</p>

<p>You can then make Lumen aware of these libraries by initializing them on the files where you want to use them:</p>

<p><code>php
&lt;?php
$http_client = new \GuzzleHttp\Client();
$es_client = new \Elasticsearch\Client();
?&gt;
</code></p>

<h3>Configuration</h3>

<p>By default Lumen is pretty bare-bones. Which means that we need to do some configuration if we want to use some of the features that we usually have in Laravel. In Lumen you can enable most of those functionalities by editing the <code>bootstrap/app.php</code> file.</p>

<h4>Enabling Sessions</h4>

<p>You can enable sessions by removing the comment on the middleware which says <code>Illuminate\Session\Middleware\StartSession</code>:</p>

<p>```php
&lt;?php
$app->middleware([</p>

<pre><code>//'Illuminate\Cookie\Middleware\EncryptCookies',
//'Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse',
'Illuminate\Session\Middleware\StartSession',
//'Illuminate\View\Middleware\ShareErrorsFromSession',
//'Laravel\Lumen\Http\Middleware\VerifyCsrfToken',
</code></pre>

<p>]);
?>
```</p>

<h3>Enabling Eloquent</h3>

<p>If you need to use Eloquent in your app, you can enable it by removing the comment on the following lines:</p>

<p><code>php
&lt;?php
$app-&gt;withFacades();
$app-&gt;withEloquent();
?&gt;
</code></p>

<h3>Dot Env</h3>

<p>Lumen uses a <code>.env</code> file to set the environment configuration for the project. This way you can have a different <code>.env</code> file on your local machine and on your server. And then you can set git to ignore this file so that it doesn&rsquo;t get pushed along to the server when you deploy your changes. Here&rsquo;s how the <code>.env</code> file looks by default:</p>

<p>```
APP_ENV=local
APP_DEBUG=false
APP_KEY=SomeRandomKey!!!</p>

<p>APP_LOCALE=en
APP_FALLBACK_LOCALE=en</p>

<p>DB_CONNECTION=mysql
DB_HOST=localhost
DB_DATABASE=homestead
DB_USERNAME=homestead
DB_PASSWORD=secret</p>

<p>CACHE_DRIVER=memcached
SESSION_DRIVER=memcached
QUEUE_DRIVER=database
```</p>

<p>As you can see from the file above, you can set the name of the environment by setting the value for <code>APP_ENV</code>. The next one right after that is the <code>APP_DEBUG</code> configuration which is set to <code>false</code> by default. If you&rsquo;re developing you need to set this to <code>true</code> so you have an idea what&rsquo;s wrong when testing your app. Next is <code>APP_KEY</code> which is basically used as a salt for sessions. You can use a random string generator for this. <code>APP_LOCALE</code> and <code>APP_FALLBACK_LOCALE</code> are used for setting the language of your app. This is set to english by default. Next are the database configuration. Anything which starts with <code>DB_</code> is the database configuration. By default its expecting to connect to a <code>mysql</code> database. <code>DB_HOST</code> is the host in which the database is running. <code>DB_DATABASE</code> is the name of the database you want to connect to. <code>DB_USERNAME</code> is the username of the user you want to use for logging in. <code>DB_PASSWORD</code> is the password of the user. After the database configuration are the cache, session and queue driver configuration. The cache and session driver are using memcached by default so you&rsquo;ll have to install memcached if you&rsquo;re using caching and session functionalities. If memcached is not present in the system then it will just fallback to the default one which is the filesystem.</p>

<p>Note that before you can use the <code>.env</code> file, you need to uncomment the following line in your <code>bootstrap/app.php</code> file. This way Lumen will load the <code>.env</code> file on the root of your project.</p>

<p><code>
Dotenv::load(__DIR__.'/../');
</code></p>

<h3>Directory Structure</h3>

<p>Here&rsquo;s what the default directory structure looks like in Lumen. The one&rsquo;s with * are files:</p>

<p><code>
app
bootstrap
database
public
resources
storage
tests
vendor
*artisan
*server.php
*composer.json
</code></p>

<p>The <code>app</code> directory is where you will usually work with. This is where the routes, controllers and middlewares are stored.</p>

<p>The <code>bootstrap</code> directory only contains one file by default, the <code>app.php</code> file. As you have seen earlier, its where you can configure and add new functionality to Lumen.</p>

<p>The <code>database</code> directory is where the database migrations and seeders are stored. You use migrations to easily jump from previous database version to another. Its like version control for your database. Seeds on the other hand are used to populate the database with dummy data so that you can easily test your app without having to enter the information through the app itself.</p>

<p>The <code>public</code> directory is where your public assets are stored. Things like css, javascript and images are stored in this directory.</p>

<p>The <code>resources</code> directory is where you store the views that you use for your app.</p>

<p>The <code>storage</code> directory is where logs, sessions and cache files are stored.</p>

<p>The <code>tests</code> directory is where you put your test files.</p>

<p>The <code>vendor</code> directory is where the dependencies of your app is stored. This is where composer installs the packages that you specified in your <code>composer.json</code> file.</p>

<p>The <code>artisan</code> file is the file that is used for command line tasks for your project. We have used it earlier when we served the project. The artisan file can also be used to create migrations, seeds and other tasks that you usually perform through the command line.</p>

<p>The <code>server.php</code> file is used for serving the files without the use of a web server like Apache.</p>

<h3>Routes</h3>

<p>Routes are stored in the <code>app/Http/routes.php</code> file. Here&rsquo;s how you would declare a route in Lumen:</p>

<p>```php
&lt;?php
$app->get(&lsquo;/&rsquo;, functionn(){</p>

<pre><code>return 'Hello World!';
</code></pre>

<p>});
?>
```</p>

<p>If you want to use a controller method to handle the response for a specific route then you can do something like this:</p>

<p><code>php
&lt;?php
$app-&gt;get('/', 'App\Http\Controllers\HomeController@index');
?&gt;
</code></p>

<p>Then you would need to create a <code>HomeController</code> controller and then declare an <code>index</code> method. This will then be used to return a response.</p>

<h3>Controllers</h3>

<p>Controllers are stored in the <code>app/Http/Controllers</code> directory. Needless to say, the convention is one file per controller. Otherwise it would be really confusing. Here&rsquo;s the basic structure of a controller:</p>

<p>```php
&lt;?php
&lt;?php namespace App\Http\Controllers;</p>

<p>use Illuminate\Http\Request;
use Laravel\Lumen\Routing\Controller as BaseController;</p>

<p>class HomeController extends BaseController{</p>

<p>}
?>
```</p>

<p>Note that we need to use <code>Illuminate\Http\Request</code> to be able to access the request parameters for each request. We also need to use <code>Laravel\Lumen\Routing\Controller</code>. This allows us to extend the functionality of the base controller class.</p>

<h3>Views</h3>

<p>Lumen still comes with blade templating, all you have to do is create your views under the <code>resources/views</code> directory and then use <code>.blade.php</code> as the file extension. Though unlike Laravel you return views this way:</p>

<p>```php
&lt;?php
public function index(){</p>

<pre><code>return view('index');    
</code></pre>

<p>}
?>
```</p>

<p>In the example above were returning the <code>index</code> view that is stored in the root of the <code>resources/views</code> directory. If we want to return some data, then we can pass it by supplying the array or object that we want to pass:</p>

<p>```php
&lt;?php
$array = array(</p>

<pre><code>'name' =&gt; 'Ash Ketchum',
'pokemon' =&gt; 'Pikachu'
</code></pre>

<p>);</p>

<p>return view(&lsquo;index&rsquo;, $array);<br/>
?>
```</p>

<p>It can then be rendered in the view like so:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;test&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>Hi my name is , my Pokemon is 
</code></pre>

<p></body>
</html>
```</p>

<h3>Database</h3>

<p>When working with a database you first need to edit the database configuration values in your <code>.env</code> file.</p>

<h4>Migrations</h4>

<p>Once that&rsquo;s done you can try if your app can connect to your database by creating a database migration. You can do that by executing the following command in the root directory of your project:</p>

<p><code>
php artisan migrate:install
</code></p>

<p>The command above creates the migration table in your database. The migration table is used by Lumen to keep track of which database migrations are currently applied to your database. If that worked without problem and you see that a <code>migrations</code> table has been created in your database then you&rsquo;re good to go.</p>

<p>Next you can create a new table by using the <code>make:migration</code> command. This takes up the action that you wish to do. In this case we want to create a new table so we use <code>--create</code> and then supply the name of the table as the value. The second argument will be the name that will be assigned to the migration class.</p>

<p><code>
php artisan make:migration --create=users create_users_table
</code></p>

<p>The command above will create a file which looks like the following in the <code>database/migrations</code> directory:</p>

<p>```php
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class CreateUsersTable extends Migration {</p>

<pre><code>/**
 * Run the migrations.
 *
 * @return void
 */
public function up()
{
    Schema::create('users', function(Blueprint $table)
    {
        $table-&gt;increments('id');
        $table-&gt;timestamps();
    });
}

/**
 * Reverse the migrations.
 *
 * @return void
 */
public function down()
{
    Schema::drop('users');
}
</code></pre>

<p>}
?>
```</p>

<p>The only thing that we need to edit here are the method calls inside the <code>up</code> method:</p>

<p>```php
&lt;?php
Schema::create(&lsquo;users&rsquo;, function(Blueprint $table)
{</p>

<pre><code>$table-&gt;increments('id');
$table-&gt;string('name');
$table-&gt;integer('age');
</code></pre>

<p>});
?>
```</p>

<p>That is where we specify the fields that we need to add to the <code>users</code> table.</p>

<p>Once you&rsquo;re happy with the file, save it and then run:</p>

<p><code>
php artisan migrate
</code></p>

<p>This will create the table in your database and add a new row to the migrations table.</p>

<h4>Seeds</h4>

<p>You can create a new database seeder file inside the <code>database/seeds</code> directory. Here&rsquo;s the usual structure of a seeder:</p>

<p>```php
&lt;?php</p>

<p>use Illuminate\Database\Seeder;</p>

<p>class UserTableSeeder extends Seeder<br/>
{</p>

<pre><code>public function run()
{

    //seeding code       

}
</code></pre>

<p>}
?>
```</p>

<p>Inside the <code>run</code> method is the actual seeding code. We can use your usual Laravel flavored database queries inside of it:</p>

<p>```php
&lt;?php
DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Ash Ketchum',
    'age' =&gt; 10
)
</code></pre>

<p>);</p>

<p> DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Brock',
    'age' =&gt; 15
)
</code></pre>

<p>);</p>

<p>DB::table(&lsquo;users&rsquo;)&ndash;>insert(</p>

<pre><code>array(
    'name' =&gt; 'Misty',
    'age' =&gt; 12
)
</code></pre>

<p>);
?>
```</p>

<p>Once that&rsquo;s done, save the file and open up the <code>DatabaseSeeder.php</code> file. This is where you specify which seeders you want to execute whenever you execute the <code>php artisan db:seed</code> command. In this case we want to add the <code>UserTableSeeder</code>:</p>

<p><code>
$this-&gt;call('UserTableSeeder');
</code></p>

<p>Before we execute the <code>php artisan db:seed</code> command we will first need to reload the autoloaded files by executing the <code>composer dump-autoload</code> command. We need to do this every time we add a new seeder so that Lumen will take care of loading the seeder.</p>

<h4>Getting Data</h4>

<p>From your routes file you can now try fetching the users that we&rsquo;ve added:</p>

<p>```php
&lt;?php
$app->get(&lsquo;/db-testing&rsquo;, function(){</p>

<pre><code>$users = DB::table('users')-&gt;get();
return $users;
</code></pre>

<p>});
?>
```</p>

<p>With Lumen you can use the <a href="http://laravel.com/docs/5.0/queries">query builder</a>, <a href="http://laravel.com/docs/database#running-queries">basic queries</a> and even <a href="http://laravel.com/docs/eloquent">Eloquent</a>. So if you already know how to work with those then you&rsquo;re good to go.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial I&rsquo;ve walked you through Lumen and how you can install, configure and work with the different functionalities that it can offer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Nearby Places Search App with Google Places API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/05/06/building-a-nearby-places-search-app-with-google-places-api/"/>
    <updated>2015-05-06T07:52:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/05/06/building-a-nearby-places-search-app-with-google-places-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to build an app that would allow users to search for a specific place and then find nearby places based on a specific category. Such as restaurants, churches, and schools. We will implement the app with Google Maps, Google Places and PHP.</p>

<h3>Getting API Credentials</h3>

<p>First you need to get API Credentials from your Google Console and then enable the Google Maps and Google Places API. If you don&rsquo;t know how to do that, feel free to ask Google. I believe this topic has already been written before. Here are the APIs that you need to enable:</p>

<ul>
<li>Google Maps JavaScript API</li>
<li>Google Places API Web Service</li>
</ul>


<h3>Building the App</h3>

<p>Now were ready to build the app. First lets work on the back-end side of things.</p>

<h4>Getting Results from the Places API</h4>

<p>To make our life easier, were going to use a library for making the request to the Google Places API. Add the following in your <code>composer.json</code> file:</p>

<p>```
{</p>

<pre><code>"require": {
    "joshtronic/php-googleplaces": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>Once you&rsquo;re done, execute <code>composer install</code> on your terminal to install the library. Now we can use the library like so:</p>

<p>```php
&lt;?php</p>

<p>require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$google_places = new joshtronic\GooglePlaces(&lsquo;YOUR_GOOGLE_API_KEY&rsquo;);</p>

<p>$lat = $<em>POST[&lsquo;lat&rsquo;]
$lng = $</em>POST[&lsquo;lng&rsquo;];
$place_types = $_POST[&lsquo;place_types&rsquo;];</p>

<p>$google_places->location = array($lat, $lng);
$google_places->radius = 8046; //hard-coded radius
$google_places->types = $place_types;
$nearby_places = $google_places->nearbySearch();</p>

<p>?>
```</p>

<p>Breaking it down. First we include the autoload file so we can access the library from our file:</p>

<p><code>php
&lt;?php
require 'vendor/autoload.php';
?&gt;
</code></p>

<p>Next, we created a new instance of the <code>GooglePlaces</code> class. You need supply the API Key that you got earlier from your Google Console:</p>

<p><code>php
&lt;?php
$google_places = new joshtronic\GooglePlaces('YOUR_GOOGLE_API_KEY');
?&gt;
</code></p>

<p>Next, we get the data that we will be supplying later on in the client-side and assign them to their own variables:</p>

<p><code>php
&lt;?php
$lat = $_POST['lat']
$lng = $_POST['lng'];
$place_types = $_POST['place_types'];
?&gt;
</code></p>

<p>Lastly, we make the actual request to the Google Places API. This library works a little bit different from your usual one. In the sense that we pass in the parameters needed by the actual search method using the object that we got from declaring a new instance of the <code>GooglePlaces</code> class. The first thing that we need to pass is the <code>location</code>, this takes up an array containing the coordinates (latitude and longitude) of the place that we are using as a reference point. This is basically the place where we are at, the place where we want to find nearby places on. Next you need to supply the <code>radius</code>. This is how many meters from your reference point you want your search to be limited. In this case we supplied a hard-coded value of 8046 meters, which is about 8 kilometers. If you want the user to have more control over this value, you can try adding a slider that the user can use to change the radius. And the last one is the <code>types</code>, this is an array of the types of places you want to see in the results. An example of this is restaurants (yeah I&rsquo;m hungry so I mentioned this twice now), parks, shopping center, etc. Once you&rsquo;ve supplied those, you can now call the <code>nearbySearch</code> method. This will make the request to the API and return the data that we need. We just have to turn it into a JSON string so it can be parsed and read later on from the client-side.</p>

<p>```php
&lt;?php
$google_places->location = array($lat, $lng);
$google_places->radius = 8046; //hard-coded radius
$google_places->types = $place_types;
$nearby_places = $google_places->nearbySearch();</p>

<p>echo json_encode($nearby_places);
?>
```</p>

<h4>Creating the Map</h4>

<p>Next we move on to the client-side. Create a new <code>index.html</code> file and put the following code:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>gmap</title>
  <link rel="stylesheet" href="style.css">
  <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
  <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&sensor=false&libraries=places"></script>
</head>
<body>
  <div id="map-container"></p>

<pre><code>&lt;input type="text" id="search"&gt;
&lt;div id="map-canvas"&gt;&lt;/div&gt;
</code></pre>

<p>  </div></p>

<p>  <div id="place-types"></p>

<pre><code>&lt;ul&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="bar"&gt; bar
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="bus_station"&gt; bus station
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="hospital"&gt; hospital
  &lt;/li&gt; 
  &lt;li&gt;
    &lt;input type="checkbox" data-type="health"&gt; health
  &lt;/li&gt; 
  &lt;li&gt;
    &lt;input type="checkbox" data-type="police"&gt; police
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="post_office"&gt; post office
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="store"&gt; store
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="library"&gt; library
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="fire_station"&gt; fire station
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="gas_station"&gt; gas station
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="convenience_store"&gt; convenience store
  &lt;/li&gt;
  &lt;li&gt;
    &lt;input type="checkbox" data-type="school"&gt; school
  &lt;/li&gt;
&lt;/ul&gt;
&lt;button id="find-places"&gt;Find Places&lt;/button&gt;
</code></pre>

<p>  </div></p>

<p>  <script src="map.js"></script>
</body>
</html>
```</p>

<p>Breaking it down. We include the stylesheet in the page:</p>

<p><code>html
&lt;link rel="stylesheet" href="style.css"&gt;
</code></p>

<p>Then we include jQuery and the Google Maps JavaScript library. Be sure to update the code so it uses your Google API Key:</p>

<p>```html</p>

<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>


<p>  <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&sensor=false&libraries=places"></script>
```</p>

<p>Next is the map container where we have <code>map-canvas</code> that will serve as the element where the map will be created. And the search box where the user will search for the place that will be used as a reference point:</p>

<p>```html</p>

<div id="map-container">  
    <input type="text" id="search">
    <div id="map-canvas"></div>
  </div>


<p>```</p>

<p>And then the type of places that we can find. Note that this isn&rsquo;t everything we can find in Google Places API. I just picked some of the places that I think are essential. For a more complete list you can check <a href="https://developers.google.com/places/supported_types">this page</a>. Here we added the <code>data-type</code> attribute which represents the place type. And then after the list we have the &lsquo;Find Places&rsquo; button which basically just triggers the search:</p>

<p>```html</p>

<div id="place-types">
  <ul>
    <li>
      <input type="checkbox" data-type="bar"> bar
    </li>
    <li>
      <input type="checkbox" data-type="bus_station"> bus station
    </li>
    <li>
      <input type="checkbox" data-type="hospital"> hospital
    </li> 
    <li>
      <input type="checkbox" data-type="health"> health
    </li> 
    <li>
      <input type="checkbox" data-type="police"> police
    </li>
    <li>
      <input type="checkbox" data-type="post_office"> post office
    </li>
    <li>
      <input type="checkbox" data-type="store"> store
    </li>
    <li>
      <input type="checkbox" data-type="library"> library
    </li>
    <li>
      <input type="checkbox" data-type="fire_station"> fire station
    </li>
    <li>
      <input type="checkbox" data-type="gas_station"> gas station
    </li>
    <li>
      <input type="checkbox" data-type="convenience_store"> convenience store
    </li>
    <li>
      <input type="checkbox" data-type="school"> school
    </li>
  </ul>
  <button id="find-places">Find Places</button>
</div>


<p>```</p>

<p>And then lastly we include the <code>map.js</code> file which will make this all work:</p>

<p>```html</p>

<script src="map.js"></script>


<p>```</p>

<p>Next create the <code>style.css</code> file and put the following code:</p>

<p>```css</p>

<h1>map-container {</h1>

<p>  float: left;
}</p>

<h1>map-canvas {</h1>

<p>  height: 500px;
  width: 1000px;
}</p>

<h1>place-types {</h1>

<pre><code>float: left;
</code></pre>

<p>}</p>

<h1>place-types ul li {</h1>

<pre><code>list-style: none;
</code></pre>

<p>}
```</p>

<p>Finally we move on to the <code>map.js</code> file. First declare the default coordinate of the place that the map will display:</p>

<p><code>javascript
var lat = 18.35827827454; //default latitude
var lng = 121.63744354248; //default longitude
var home_coordinates = new google.maps.LatLng(lat, lng); //set default coordinates
</code></p>

<p>Next, assign it to the map:</p>

<p><code>javascript
var map_options = {
  center: new google.maps.LatLng(lat, lng), //set map center
  zoom: 17, //set zoom level to 17
  mapTypeId: google.maps.MapTypeId.ROADMAP //set map type to road map
};
</code></p>

<p>Next we set the search box as an auto-complete element. This will allow the user to see suggestions of matching locations as he types in the search box. We also need to bind it to the map so the auto-complete bounds are driven by the current viewport of the map.</p>

<p><code>javascript
var input = document.getElementById('search'); //get element to use as input for autocomplete
var autocomplete = new google.maps.places.Autocomplete(input); //set it as the input for autocomplete
autocomplete.bindTo('bounds', map); //bind auto-complete object to the map
</code></p>

<p>Next we listen for the <code>place_changed</code> event that is triggered from the search box. If this event happens then we get the place information using the <code>getPlace</code> method available on the auto-complete object. This allows us to check if the place being searched is within the current map viewport. If it is then we just call the <code>fitBounds</code> method on the map object and pass in the <code>geometry.viewport</code> attribute from the <code>place</code> object. This sets the map center to the coordinates of the location. If its not within the current viewport then we call the <code>setCenter</code> method in the map object and pass in the <code>geometry.location</code> attribute in the <code>place</code> object. We also call the <code>setZoom</code> method in the map to ensure we still got the same zoom level. Lastly we set the position of the <code>home_marker</code> to the <code>geometry.location</code> in the <code>place</code> object.</p>

<p>```javascript
//executed when a place is selected from the search field
google.maps.event.addListener(autocomplete, &lsquo;place_changed&rsquo;, function(){</p>

<pre><code>//get information about the selected place in the autocomplete text field
var place = autocomplete.getPlace();

if (place.geometry.viewport){ //for places within the default view port (continents, countries)
  map.fitBounds(place.geometry.viewport); //set map center to the coordinates of the location
} else { //for places that are not on the default view port (cities, streets)
  map.setCenter(place.geometry.location);  //set map center to the coordinates of the location
  map.setZoom(17); //set a custom zoom level of 17
}

home_marker.setMap(map); //set the map to be used by the  marker
home_marker.setPosition(place.geometry.location); //plot marker into the coordinates of the location
</code></pre>

<p>});
```</p>

<p>Next we declare an array that will store the markers for the places that will be searched. Don&rsquo;t confuse this with the place used as the reference point, the <code>home_marker</code> is used for this. The places I&rsquo;m referring to are the place types such as grocery, church, etc. For convenience I&rsquo;ll be referring to those markers as place type markers.</p>

<p><code>javascript
var markers_array = [];
</code></p>

<p>Next create the method that would remove the place type markers from the map. We would need to call this every time the user clicks on the &lsquo;Find Places&rsquo; button so that the previous search results will be removed from the map.</p>

<p>```javascript
function removeMarkers(){
  for(i = 0; i &lt; markers_array.length; i++){</p>

<pre><code>markers_array[i].setMap(null);
</code></pre>

<p>  }
}
```</p>

<p>Finally we have the method that listens for the click event on the &lsquo;Find Places&rsquo; button. The first thing it does is to get the coordinates of the <code>home_marker</code>. This represents the coordinates of the reference point. After that, we declare an empty array, this is where we will store the place types selected by the user. We do that by looping through all the place types selected by the user and then we push the value for their <code>data-type</code> attribute in the array. Next we call the <code>removeMarkers</code> method to remove the place types markers that are currently plotted on the map. Next we make a <code>POST</code> request to the server and then passing in the coordinates of the reference point and the place types array. Once we get a response, we call the <code>JSON.parse</code> method so we can extract the results from the response. From there we loop through all the results and get the coordinates for each and then we plot the marker into the map. After that we assign an infowindow to each of the markers to that when its clicked it shows the name of the place.</p>

<p>```javascript
$(&lsquo;#find-places&rsquo;).click(function(){</p>

<p>  var lat = home_marker.getPosition().lat();
  var lng = home_marker.getPosition().lng();</p>

<p>  var place_types = [];</p>

<p>  //loop through all the place types that has been checked and push it to the place_types array
  $(&lsquo;#place-types input:checked&rsquo;).each(function(){</p>

<pre><code>var type = $(this).data('type');
place_types.push(type);
</code></pre>

<p>  });</p>

<p>  removeMarkers(); //remove the current place type markers from the map</p>

<p>  //make a request to the server for the matching places
  $.post(</p>

<pre><code>'places.php',
{
  'lat': lat,
  'lng': lng,
  'place_types': place_types
},
function(response){

  var response_data = JSON.parse(response);

  if(response_data.results){
    var results = response_data.results;
    var result_count = results.length;

    for(var x = 0; x &lt; result_count; x++){

      //get coordinates of the place
      var lat = results[x]['geometry']['location']['lat'];
      var lng = results[x]['geometry']['location']['lng'];

      //create a new infowindow
      var infowindow = new google.maps.InfoWindow();

      //plot the marker into the map
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(lat, lng),
        map: map,
        icon: results[x]['icon']
      });

      markers_array.push(marker);

      //assign an infowindow to the marker so that when its clicked it shows the name of the place
      google.maps.event.addListener(marker, 'click', (function(marker, x){
        return function(){
          infowindow.setContent("&lt;div class='no-scroll'&gt;&lt;strong&gt;" + results[x]['name'] + "&lt;/strong&gt;&lt;br&gt;" + results[x]['vicinity'] + "&lt;/div&gt;");
          infowindow.open(map, marker);
        }
      })(marker, x));


    }
  }

}
</code></pre>

<p>  );</p>

<p>});
```</p>

<p>Here&rsquo;s a screenshot of the final output:</p>

<p><img src="/images/posts/google_places/google-places.png" alt="google places" /></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to work with the Google Place API in PHP. We have also create a simple app that would allow users to search specific types of places that is near the location used as a reference point. If you want to learn more, be sure to check out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/places/webservice/intro">Google Places API</a></li>
<li><a href="https://developers.google.com/places/supported_types">Place Types</a></li>
<li><a href="https://developers.google.com/maps/documentation/javascript/examples/places-searchbox">Places Search box</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with the Yahoo Finance API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/04/05/getting-started-with-the-yahoo-finance-api/"/>
    <updated>2015-04-05T13:24:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/04/05/getting-started-with-the-yahoo-finance-api</id>
    <content type="html"><![CDATA[<p>The Yahoo Finance API provides a way for developers to get the latest information about the stock market. How the different stocks are doing. What&rsquo;s the current buying price for a single stock. How much is the difference of the current market value to that of yesterday&rsquo;s, etc.</p>

<p>First thing that you need to do is to install the Guzzle library for PHP. This allows us to easily make http requests to the server. You can do that by adding the following on your <code>composer.json</code> file:</p>

<p>```
 {
   &ldquo;require&rdquo;: {</p>

<pre><code>  "guzzlehttp/guzzle": "~5.0"
</code></pre>

<p>   }
}
```</p>

<p>Then execute <code>composer install</code> from your terminal.</p>

<p>Next create a <code>test.php</code> file and put the following code:</p>

<p><code>php
&lt;?php
require 'vendor/autoload.php';
$client = new GuzzleHttp\Client();
?&gt;
</code></p>

<p>This allows us to use guzzle from our file.</p>

<p>Before we move on here are the specific data that you can get from the API:</p>

<p><strong>Pricing</strong></p>

<ul>
<li><code>a</code> &ndash; ask</li>
<li><code>b</code> &ndash; bid</li>
<li><code>b2</code> &ndash; ask (realtime)</li>
<li><code>b3</code> &ndash; bid (realtime)</li>
<li><code>p</code> &ndash; previous close</li>
<li><code>o</code> &ndash; open</li>
</ul>


<p><strong>Dividends</strong></p>

<ul>
<li><code>y</code> &ndash; dividend yield</li>
<li><code>d</code> &ndash; dividend per share</li>
<li><code>r1</code> &ndash; dividend pay date</li>
<li><code>q</code> &ndash; ex-dividend date</li>
</ul>


<p><strong>Date</strong></p>

<ul>
<li><code>c1</code> &ndash; change</li>
<li><code>c</code> &ndash; change &amp; percentage change</li>
<li><code>c6</code> &ndash; change (realtime)</li>
<li><code>k2</code> &ndash; change percent</li>
<li><code>p2</code> &ndash; change in percent</li>
<li><code>d1</code> &ndash; last trade date</li>
<li><code>d2</code> &ndash; trade date</li>
<li><code>t1</code> &ndash; last trade time</li>
</ul>


<p><strong>Averages</strong></p>

<ul>
<li><code>c8</code> &ndash; after hours change</li>
<li><code>c3</code> &ndash; commission</li>
<li><code>g</code> &ndash; day&rsquo;s low</li>
<li><code>h</code> &ndash; day&rsquo;s high</li>
<li><code>k1</code> &ndash; last trade (realtime) with time</li>
<li><code>l</code> &ndash; last trade (with time)</li>
<li><code>l1</code> &ndash; last trade (price only)</li>
<li><code>t8</code> &ndash; 1 yr target price</li>
<li><code>m5</code> &ndash; change from 200 day moving average</li>
<li><code>m6</code> &ndash; percent change from 200 day moving average</li>
<li><code>m7</code> &ndash; change from 50 day moving average</li>
<li><code>m8</code> &ndash; percent change from 50 day moving average</li>
<li><code>m3</code> &ndash; 50 day moving average</li>
<li><code>m4</code> &ndash; 200 day moving average</li>
</ul>


<p><strong>Misc</strong></p>

<ul>
<li><code>w1</code> &ndash; day&rsquo;s value change</li>
<li><code>w4</code> &ndash; day&rsquo;s value change (realtime)</li>
<li><code>p1</code> &ndash; price paid</li>
<li><code>m</code> &ndash; day&rsquo;s range</li>
<li><code>m2</code> &ndash; day&rsquo;s range (realtime)</li>
<li><code>g1</code> &ndash; holding gain percent</li>
<li><code>g3</code> &ndash; annualized gain</li>
<li><code>g4</code> &ndash; holdings gain</li>
<li><code>g5</code> &ndash; holdings gain percent (realtime)</li>
<li><code>g6</code> &ndash; holdings gain (realtime)</li>
<li><code>t7</code> &ndash; ticker trend</li>
<li><code>t6</code> &ndash; trade links</li>
<li><code>i5</code> &ndash; order book (realtime)</li>
<li><code>l2</code> &ndash; high limit</li>
<li><code>l3</code> &ndash; low limit</li>
<li><code>v1</code> &ndash; holdings value</li>
<li><code>v7</code> &ndash; holdings value (realtime)</li>
<li><code>s6</code> &ndash; revenue</li>
</ul>


<p><strong>52 Week Pricing</strong></p>

<ul>
<li><code>k</code> &ndash; 52 week high</li>
<li><code>j</code> &ndash; 52 week low</li>
<li><code>j5</code> &ndash; change from 52 week low</li>
<li><code>k4</code> &ndash; change from 52 week high</li>
<li><code>j6</code> &ndash; percent change from 52 week low</li>
<li><code>k5</code> &ndash; percent change from 52 week high</li>
<li><code>w</code> &ndash; 52 week range</li>
</ul>


<p><strong>Symbol Info</strong></p>

<ul>
<li><code>v</code> &ndash; more info</li>
<li><code>j1</code> &ndash; market capitalization</li>
<li><code>j3</code> &ndash; market cap (realtime)</li>
<li><code>f6</code> &ndash; float shares</li>
<li><code>n</code> &ndash; name</li>
<li><code>n4</code> &ndash; notes</li>
<li><code>s</code> &ndash; symbol</li>
<li><code>s1</code> &ndash; shares owned</li>
<li><code>x</code> &ndash; stock exchange</li>
<li><code>j2</code> &ndash; shares outstanding</li>
</ul>


<p><strong>Volume</strong></p>

<ul>
<li><code>v</code> &ndash; volume</li>
<li><code>a5</code> &ndash; ask size</li>
<li><code>b6</code> &ndash; bid size</li>
<li><code>k3</code> &ndash; last trade size</li>
<li><code>a2</code> &ndash; average daily volume</li>
</ul>


<p><strong>Ratios</strong></p>

<ul>
<li><code>e</code> &ndash; earnings per share</li>
<li><code>e7</code> &ndash; eps estimate current year</li>
<li><code>e8</code> &ndash; eps estimate next year</li>
<li><code>e9</code> &ndash; eps estimate next quarter</li>
<li><code>b4</code> &ndash; book value</li>
<li><code>j4</code> &ndash; EBITDA</li>
<li><code>p5</code> &ndash; price / sales</li>
<li><code>p6</code> &ndash; price / book</li>
<li><code>r</code> &ndash; P/E ratio</li>
<li><code>r2</code> &ndash; P/E ratio (realtime)</li>
<li><code>r5</code> &ndash; PEG ratio</li>
<li><code>r6</code> &ndash; price / eps estimate current year</li>
<li><code>r7</code> &ndash; price /eps estimate next year</li>
<li><code>s7</code> &ndash; short ratio</li>
</ul>


<p>Wew! Ok so that&rsquo;s a lot. I&rsquo;ll let you catch your breath for a second. Ready?</p>

<p>Ok so now were ready to make a request to the API. You can either do that from here:</p>

<p><code>
http://download.finance.yahoo.com/d/quotes.csv?s={SYMBOLS}&amp;f={DATA THAT WE WANT}
</code></p>

<p>Or here:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s={SYMBOLS}&amp;f={DATA THAT WE WANT}
</code></p>

<p>Doesn&rsquo;t really matter which. Both returns the same thing. Here&rsquo;s an example which you can just copy and paste into your browser&rsquo;s address bar:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s=GOOGL&amp;f=abo
</code></p>

<p>Breaking it down. We make a request to this URL:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv
</code></p>

<p>And then we pass in some query parameters: <code>s</code> and <code>f</code>. <code>s</code> represents the symbol or symbols that you want to query. And <code>f</code> represents the data that you want. That&rsquo;s the big list that we just went through earlier. So if you want the API to return the ask, bid and open. We just need to pass in:</p>

<p><code>
f=abo
</code></p>

<p>In the example that we have. Were requesting this information for the <code>GOOGL</code> symbol. Which is basically Google. When this is requested in the browser, it downloads a <code>quotes.csv</code> file which contain something similar to the following:</p>

<p><code>
580.36,575.90,576.35
</code></p>

<p>Its a comma-separated list of all the values you requested. So 580.36 is the ask price, 575.90 is the bidding price, and 576.35 is the open price.</p>

<p>If you want to query more than one symbol, you just separate each symbol with a comma. So for example you want to request the stock information about Google, Apple, Microsoft and Facebook:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s=GOOGL,AAPL,MSFT,FB&amp;f=abo
</code></p>

<p>Now let&rsquo;s proceed with actually making this all work with PHP. First we need to create a table that will store all the information that we need. In this case, we only need the symbol, ask, bid and open values:</p>

<p>```sql
CREATE TABLE symbols (</p>

<pre><code>id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
symbol VARCHAR(30) NOT NULL,
ask DOUBLE,
bid DOUBLE,
open DOUBLE
</code></pre>

<p>)
```</p>

<p>Next create an <code>indexer.php</code> file. What this file does is to query the yahoo finance api and then save the results to a csv file. Note that we can only query up to 200 symbols per request. So we&rsquo;ll have to work based on that on our code.</p>

<p>The first thing that the code below does is to query the number of symbols currently in the database. And then we calculate how many times we need to loop in order to update all the symbols. We also need to declare the file path of the csv file in which will save all the results from the API. And initialize it by setting its value to an empty string. Then we declare the format <code>sabo</code>. Which means symbol, ask, bid and open. Next we create a for loop that will keep on executing until the value of <code>$x</code> reaches the total loop times that we got from dividing the total number of symbols by the API limit. Inside the loop we calculate the offset value by multiplying the current value of <code>$x</code> by the API limit. After that, we select the symbols that we need based on that. Then we loop through the results, specifically the symbol and then put them in an array. After looping through all the results, we convert the array into a comma separated list. This allows us to use this value for querying the API. Once we get the result back, we just save it to the csv file using <code>file_put_contents</code>.</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;
$db = new Mysqli(HOST, USER, PASS, DB);
$client = new GuzzleHttp\Client();</p>

<p>$symbols_count_result = $db->query(&ldquo;SELECT COUNT(id) FROM symbols&rdquo;);
$symbol_row = $symbols_count_result->fetch_row();
$symbol_count = $symbol_row[0];</p>

<p>$api_limit = 200;</p>

<p>$loop_times = $symbol_count / $api_limit;
$loop_times = floor($loop_times) + 1;</p>

<p>$file = &lsquo;uploads/csv/stocks.csv&rsquo;;
file_put_contents($file, &lsquo;&rsquo;);</p>

<p>$format = &lsquo;sabo&rsquo;;</p>

<p>for($x = 0; $x &lt; $loop_times; $x++){</p>

<pre><code>$from = $x * $api_limit;
$symbols_result = $db-&gt;query("SELECT * FROM symbols LIMIT '$api_limit' OFFSET '$from'");

if($symbols_result-&gt;num_rows &gt; 0){

    $symbols = array();
    while($row = $symbols_result-&gt;fetch_object()){
        symbols[] = $row-&gt;symbol;
    } 

    $symbols_str = implode(',', $symbols);
    $stocks = $client-&gt;get("http://download.finance.yahoo.com/d/quotes.csv?s={$symbols_str}&amp;f={$format}");

    file_put_contents($file, $stocks-&gt;getBody(), FILE_APPEND);
}
</code></pre>

<p>}      <br/>
?>
```</p>

<p>That&rsquo;s it! The Yahoo Finance API is a really nice way of getting financial information about specific companies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Stripe API]]></title>
    <link href="http://anchetawern.github.io/blog/2015/03/22/getting-started-with-stripe-api/"/>
    <updated>2015-03-22T11:08:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/03/22/getting-started-with-stripe-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through the Stripe&rsquo;s API. Let&rsquo;s start by defining what Stripe is. From the Stripe website itself:</p>

<p><blockquote><p>Stripe is a developer-friendly way to accept payments online and in mobile apps.<br/>We process billions of dollars a year for thousands of companies of all sizes.</p></blockquote></p>

<p>Now we know that Stripe is a payment processor, similar to Paypal.</p>

<p>With Stripe, you can accept payments in three ways:</p>

<ul>
<li>Embedded Form</li>
<li>Custom Form</li>
<li>Mobile App Integration</li>
</ul>


<p>In this tutorial I&rsquo;ll only be walking you through the first two: embedded form and custom form.</p>

<h3>Embedded Form</h3>

<p>If you do not want to bother with creating your own checkout forms, an embedded form is the way to go. An embedded form is basically Stripe&rsquo;s checkout widget. All you have to do is include their script on your website, specifically inside a form element. And the front-end side is already handled for you.</p>

<p>```html
<form action="/checkout.php" method="POST">
  &lt;script</p>

<pre><code>src="https://checkout.stripe.com/checkout.js" class="stripe-button"
data-key="pk_test_xxxxxxxxxxxxxxxxxxx"
data-amount="1000"
data-name="Web Development"
data-description="Develop a website"
data-image="http://mywebsite.com/img/logo.png"&gt;
</code></pre>

<p>  </script>
</form>
```</p>

<p>Breaking it down. For the script to work, you need to supply a value to the following attributes:</p>

<ul>
<li><code>src</code> &ndash; Stripe&rsquo;s checkout script. This should be <code>https://checkout.stripe.com/checkout.js</code></li>
<li><code>data-key</code> &ndash; your stripe publishable key. You can find it by clicking on your username, then select &lsquo;account settings&rsquo;, then click on the &lsquo;api keys&rsquo; tab. From there you can use either your test publishable key or your live publishable key. The test key is used for testing. This allows you to supply a fake credit card number and pay for a fake product or service. After successful payment, you can see your fake client from the <a href="https://dashboard.stripe.com/customers">customers</a> page on your Stripe dashboard. Don&rsquo;t forget to switch to <a href="https://dashboard.stripe.com/test/customers">test</a>.</li>
<li><code>data-amount</code> &ndash; the amount you want to charge in cents. Just multiply what you want to charge by 100. So for example you want to charge $10, you need to supply 1000 instead.</li>
<li><code>data-name</code> &ndash; the name of your product or service.</li>
<li><code>data-description</code> &ndash; the description of your product or service.</li>
<li><code>data-image</code> &ndash; your logo. This should be an absolute url.</li>
</ul>


<p>Next we need to install Stripe&rsquo;s library via <a href="https://getcomposer.org/">composer</a>. Add the following code on your <code>composer.json</code> file:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"stripe/stripe-php": "2.*"
</code></pre>

<p>  }
}
```</p>

<p>Once that&rsquo;s done, execute <code>composer install</code> from your terminal. This will fetch the library from the repository.</p>

<p>Next create the <code>checkout.php</code> file and add the following code:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $<em>POST[&lsquo;stripeToken&rsquo;];
$email = $</em>POST[&lsquo;stripeEmail&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, first we included the <code>vendor/autoload.php</code> file so that we can use the Stripe library on our script. Next we initialize the library by setting the Stripe secret key. Next we get the data supplied by Stripe for us from the front-end. The <code>stripeToken</code> is the unique token generated by Stripe, this represents the transaction that the client made on the front-end. That is, paying $10 for our service. Next is the <code>stripeEmail</code>, this is basically just the email supplied by the client. Next we wrap the stripe charge call in a try catch statement. This allows us to capture any error returned by the API and show it to the client. Calling the stripe charge method requires 4 arguments:</p>

<ul>
<li><code>amount</code> &ndash; the amount that you want to charge in cents.</li>
<li><code>currency</code> &ndash; the currency code representing the currency that we want to use.</li>
<li><code>source</code> &ndash; the token that stripe generated on the front-end.</li>
<li><code>description</code> &ndash; a text that we want to assign to the charge. This is usually the clients email. But you can add more details such as the name of the service if you&rsquo;re offering more than one product or service.</li>
</ul>


<p>If the API call is successful, this method returns a whole bunch of data. Such as the amount paid, and the description. In most cases you&rsquo;ll basically only want the id of the transaction. You can get this by accessing the <code>id</code> property:</p>

<p><code>
$charge_id = $charge-&gt;id;
</code></p>

<p>You can then save this on your database as a reference. But of course you can always see this on <a href="https://dashboard.stripe.com/test/payments">your payments page</a>.</p>

<h3>Custom Forms</h3>

<p>If you need to ask additional information from your clients. Or you just want to use your own form. You can use custom forms. This allows you to write your own markup, supply your own fields and style them the way you want it with css. Here&rsquo;s an example of how a custom checkout form might look like:</p>

<p>```html
<form action="checkout.php" method="POST" id="payment-form">
  <div class="errors"></div></p>

<p>  <div></p>

<pre><code>&lt;label for="email"&gt;Email&lt;/label&gt;
&lt;input type="email" id="email" name="email"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="name"&gt;Name&lt;/label&gt;
&lt;input type="text" id="name" name="name"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="card-number"&gt;Card Number&lt;/label&gt;
&lt;input type="text" size="20" data-stripe="number" id="card-number" name="card-number"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="cvc"&gt;Security Code&lt;/label&gt;
&lt;input type="text" size="4" data-stripe="cvc" id="cvc" name="cvc"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
&lt;input type="text" data-stripe="exp-month" name="exp-month"&gt;
&lt;span&gt; / &lt;/span&gt;
&lt;input type="text" data-stripe="exp-year" name="exp-year"/&gt;
</code></pre>

<p>  </div></p>

<p>  <button type="submit">Pay</button>
</form>
```</p>

<p>This form works with the Stripe checkout script by adding the <code>data-stripe</code> attribute to the following fields. Just supply the value on the right-hand side as the value for the <code>data-stripe</code> attribute depending on the field:</p>

<ul>
<li>card number &ndash; <code>card-number</code></li>
<li>security code or cvc &ndash; <code>cvc</code></li>
<li>card expiration month &ndash; <code>exp-month</code></li>
<li>card expiration year &ndash; <code>exp-year</code></li>
</ul>


<p>Next we need to include the stripe checkout script:</p>

<p>```html</p>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>


<p>```</p>

<p>And then set the publishable key. This allows stripe to identify which stripe account the request came from:</p>

<p>```html</p>

<script>
Stripe.setPublishableKey('pk_test_xxxxxxxxxxxxxxxxxxx');
</script>


<p>```</p>

<p>Next we need to define the method that will process the response that we get from Stripe when the client submits the payment form. This takes up 2 parameters: status and response. The status is the <a href="https://stripe.com/docs/api#errors">status code</a>. The response contains the actual Stripe response. This is an object containing information about the transaction. One of those is the <code>id</code> which is basically the token that we need to pass in to the back-end. All we have to do is to append it to the payment form so it gets submitted with the rest of the fields. If there is an error with the request, an error property becomes available in the response object. This contains the error message, we just show it to the user by supplying it as a value to the <code>errors</code> div. After that, we enable the submit button so the client can fix the errors and submit the form again:</p>

<p>```javascript
function processStripeResponse(status, response){
  var form = $(&lsquo;#payment-form&rsquo;);</p>

<p>  if(response.error){</p>

<pre><code>form.find('.errors').text(response.error.message);
form.find('button').prop('disabled', false);
</code></pre>

<p>  }else{</p>

<pre><code>var token = response.id;
form.append($('&lt;input type="hidden" name="stripeToken" /&gt;').val(token));
form.get(0).submit();
</code></pre>

<p>  }
};
```</p>

<p>Next we define the event handler for when the payment form is submitted. This calls the <code>createToken</code> method which requires the payment form and the response handler as its arguments. Don&rsquo;t forget to return <code>false</code> so the form doesn&rsquo;t get submitted. The response handler will be the one which will trigger the submit if the response doesn&rsquo;t have any errors:</p>

<p>```javascript
$(function(){
  $(&lsquo;#payment-form&rsquo;).submit(function(event) {</p>

<pre><code>var form = $(this);
form.find('button').prop('disabled', true);

Stripe.card.createToken(form, processStripeResponse);

return false;
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>On the back-end we can just use the previous code and use the custom fields that we added. Note that the <code>stripeToken</code> field stays the same. We don&rsquo;t need to pass the card number, security code and expiration date:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $_POST[&lsquo;stripeToken&rsquo;];</p>

<p>$email = $<em>POST[&lsquo;email&rsquo;];
$name = $</em>POST[&lsquo;name&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to interact with the Stripe API in order to easily process payments.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://stripe.com/docs">Stripe Docs</a></li>
<li><a href="https://stripe.com/docs/api?lang=php">Stripe API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RabbitMQ in PHP]]></title>
    <link href="http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php/"/>
    <updated>2014-11-16T15:11:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/11/16/getting-started-with-rabbitmq-in-php</id>
    <content type="html"><![CDATA[<p><blockquote><p>This article was originally published at Binpress:<br/><a href="http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164">http://www.binpress.com/tutorial/getting-started-with-rabbitmq-in-php/164</a></p></blockquote></p>

<p>In this tutorial I&rsquo;m going to walk you through how you can use RabbitMQ in PHP. But first what is RabbitMQ? RabbitMQ is a message broker software. It acts as a middleman between a producer and a consumer. Producer being the data that we want to pass, and consumer being the entity that we want to pass it to. RabbitMQ uses a queue, you can think of it as a mailbox where you drop your letters. RabbitMQ then takes the letters and delivers it to its destination.</p>

<h3>Installing RabbitMQ</h3>

<p>In Ubuntu and other debian based operating system you can install RabbitMQ by executing the following commands from your terminal:</p>

<p><code>
echo "deb http://www.rabbitmq.com/debian/ testing main"  | sudo tee  /etc/apt/sources.list.d/rabbitmq.list &gt; /dev/null
sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
sudo apt-key add rabbitmq-signing-key-public.asc
sudo apt-get update
sudo apt-get install rabbitmq-server -y
sudo service rabbitmq-server start
sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart
</code></p>

<p>What the first command does is to append the rabbitmq source to the software sources list. Next we download the rabbitmq signing key using <code>wget</code>. Then add the key to Ubuntu. Next we call <code>apt-get update</code> to update the software sources list. Next we install the RabbitMQ server, start it then enable RabbitMQ management plugin. This provides an HTTP-based API management for monitoring your RabbitMQ server. Finally we restart the RabbitMQ server so that changes will take effect.
The default username and password is <code>guest</code>. And the default port in which it runs is <code>5672</code>.</p>

<p>If you&rsquo;re on another operating system, you can find how to install RabbitMQ for your specific operating system here: <a href="http://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ</a>.</p>

<h3>Working with RabbitMQ</h3>

<p>Once you&rsquo;re done installing RabbitMQ, we can now install the AMQP library for PHP. This implements the AMQP (Advanced Messaging Queue Protocol) protocol. As the name suggests it is a protocol used for messaging.
Start by creating a new directory, this is where we will put all the files for testing RabbitMQ. Next create a composer.json file and add the following:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>  "videlalvaro/php-amqplib": "2.2.*"
</code></pre>

<p>  }
}
```</p>

<p>Next, open up your terminal and <code>cd</code> into the directory you created earlier then execute <code>composer install</code> to install the AMQP library.</p>

<p>Before we move on, lets also install <a href="http://swiftmailer.org/">Swiftmailer</a>. You can do that by executing the following command from your terminal. This also adds an entry to Swiftmailer to your composer.json:</p>

<p><code>
composer require swiftmailer/swiftmailer @stable
</code></p>

<p>We will be using Swiftmailer for the sample app that were going to create. What we will do is create an app that will send emails for our users. Normally emails takes a few seconds before it is sent, adding an attachment to the email also adds to that time. In the real world we don&rsquo;t really want our users to wait. What we want to do is make them believe that we have already sent the email for them by outputting to the screen that their message has been sent.
This is where RabbitMQ comes in. We will use it as some sort of a mailbox in which multiple users can just drop their messages in. RabbitMQ will then take care of sending the messages in the background.</p>

<h4>Sending Messages</h4>

<p>First lets create the form to be used for sending emails. This will accept the name and email address of the sender, the email address of the receiver and then the subject and message. Name the file <code>form.php</code>:</p>

<p>```html
&lt;?php
if(!empty($_GET[&lsquo;sent&rsquo;])){
?></p>

<div>
    Your message was sent!
</div>


<p>&lt;?php
}
?>
<form action="mailer.php" method="POST"></p>

<pre><code>&lt;div&gt;
    &lt;label for="from"&gt;From&lt;/label&gt;
    &lt;input type="text" name="from" id="from"&gt;       
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="from_email"&gt;From Email&lt;/label&gt;
    &lt;input type="text" name="from_email" id="from_email"&gt;       
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="to_email"&gt;To Email&lt;/label&gt;
    &lt;input type="text" name="to_email" id="to_email"&gt;           
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="subject"&gt;Subject&lt;/label&gt;
    &lt;input type="text" name="subject" id="subject"&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;label for="message"&gt;Message&lt;/label&gt;
    &lt;textarea name="message" id="message" cols="30" rows="10"&gt;&lt;/textarea&gt;   
&lt;/div&gt;
&lt;div&gt;
    &lt;button type="submit"&gt;Send&lt;/button&gt;
&lt;/div&gt;
</code></pre>

<p></form>
```</p>

<p>Next, create the file which will push the message into the queue. Name the file <code>sender.php</code>.
Require the <code>autoload.php</code> file so that our dependencies will be automatically loaded by PHP. Then use the <code>AMQPConnection</code> and <code>AMQPMessage</code> from the AMQP library. <code>AMQPConnection</code> allows us to create a new connection to the RabbitMQ server and <code>AMQPMessage</code> allows us to create messages that we can push to the queue.</p>

<p>```php
&lt;?php
require_once <strong>DIR</strong> . &lsquo;/vendor/autoload.php&rsquo;;
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;</p>

<p>$connection = new AMQPConnection(&lsquo;localhost&rsquo;, 5672, &lsquo;guest&rsquo;, &lsquo;guest&rsquo;);
$channel = $connection->channel();</p>

<p>$channel->queue_declare(&lsquo;email_queue&rsquo;, false, false, false, false);</p>

<p>$data = json_encode($_POST);</p>

<p>$msg = new AMQPMessage($data, array(&lsquo;delivery_mode&rsquo; => 2));
$channel->basic_publish($msg, &lsquo;&rsquo;, &lsquo;email_queue&rsquo;);</p>

<p>header(&lsquo;Location: form.php?sent=true&rsquo;);
?>
```</p>

<p>Breaking it down, first we create a new connection by creating a new instance of the <code>AMQPConnection</code> class. This requires the following arguments:</p>

<ul>
<li><strong>host</strong> &ndash; the host in which the RabbitMQ server is running. In this case we&rsquo;ve installed RabbitMQ on the same computer we are running the script in. So it should be <code>localhost</code>. Note that in the real world we install RabbitMQ on a another server, different from the one were using to serve our websites. So instead of <code>localhost</code> we use the public ip address of that server.</li>
<li><strong>port</strong> &ndash; the port in which the RabbitMQ server is running.</li>
<li><strong>user</strong> &ndash; the username to use for logging in to the server. By default the username is set to <code>guest</code>.</li>
<li><strong>password</strong> &ndash; the password of the user. By default the password is set to <code>guest</code>.</li>
</ul>


<p>Next we create a channel. We can do that by calling the <code>channel()</code> method from the connection that we have just declared.</p>

<p><code>
&lt;?php
$channel = $connection-&gt;channel();
?&gt;
</code></p>

<p>Next we declare the queue to be used by calling the  <code>queue_declare</code> method.</p>

<p><code>
&lt;?php
$channel-&gt;queue_declare('email_queue', false, false, false, false);
?&gt;
</code></p>

<p>The <code>queue_declare</code> method takes up the following arguments:</p>

<ul>
<li><strong>queue name</strong> &ndash; a name that you want to use for the queue, you can supply anything for this.</li>
<li><strong>passive</strong> &ndash; a boolean value for specifying whether to check for an existing exchange.</li>
<li><strong>durable</strong> &ndash; a boolean value for specifying whether the RabbitMQ holds on to a queue when the server crashes.</li>
<li><strong>exclusive</strong> &ndash; a boolean value for specifying whether the queue is used by only one connection.</li>
<li><strong>auto-delete</strong> &ndash; a boolean value for specifying whether the queue is deleted when the last subscriber unsubscribes.</li>
</ul>


<p>Next we convert the POST data that we receive from the form to a JSON string. We can only pass strings as a message so we&rsquo;ll have to convert this later on into an array on the receiver&rsquo;s end.</p>

<p><code>
&lt;?php
$data = json_encode($_POST);
?&gt;
</code></p>

<p>Next we create a new message. This accepts 2 arguments: the data and an array of options. For the array of options we specify the <code>delivery_mode</code> to 2 which means that the message is persistent. This means that it isn&rsquo;t lost when the server crashes or an error occurs.</p>

<p><code>
&lt;?php
$msg = new AMQPMessage($data, array('delivery_mode' =&gt; 2));
?&gt;
</code></p>

<p>Next we publish the message by calling the <code>basic_publish()</code> method on the channel. This accepts 3 arguments: the message, the exchange and the name of the queue. If you&rsquo;re wondering why we set the value of exchange to an empty string, that&rsquo;s because we don&rsquo;t really need it. The exchange is commonly used for pub-sub patterns. What were using here is just basic publish.</p>

<p><code>
&lt;?php
$channel-&gt;basic_publish($msg, '', 'email_queue');
?&gt;
</code></p>

<p>Finally we just redirect the user to the form.</p>

<p><code>
&lt;?php
header('Location: form.php?sent=true');
?&gt;
</code></p>

<h4>Receiving Messages</h4>

<p>Now were ready to write the code that will receive the messages sent by users. Name the file <code>receiver.php</code>. Here&rsquo;s the full contents of the file:</p>

<p>```
&lt;?php
require_once <strong>DIR</strong> . &lsquo;/vendor/autoload.php&rsquo;;
use PhpAmqpLib\Connection\AMQPConnection;</p>

<p>$connection = new AMQPConnection(&lsquo;localhost&rsquo;, 5672, &lsquo;guest&rsquo;, &lsquo;guest&rsquo;);
$channel = $connection->channel();</p>

<p>$channel->queue_declare(&lsquo;email_queue&rsquo;, false, false, false, false);</p>

<p>echo &lsquo; * Waiting for messages. To exit press CTRL+C&rsquo;, &ldquo;\n&rdquo;;</p>

<p>$callback = function($msg){</p>

<pre><code>echo " * Message received", "\n";
$data = json_decode($msg-&gt;body, true);

$from = $data['from'];
$from_email = $data['from_email'];
$to_email = $data['to_email'];
$subject = $data['subject'];
$message = $data['message'];

$transporter = Swift_SmtpTransport::newInstance('smtp.gmail.com', 465, 'ssl')
  -&gt;setUsername('YOUR_GMAIL_EMAIL')
  -&gt;setPassword('YOUR_GMAIL_PASSWORD');

$mailer = Swift_Mailer::newInstance($transporter);  

$message = Swift_Message::newInstance($transporter)
    -&gt;setSubject($subject)
    -&gt;setFrom(array($from_email =&gt; $from))
    -&gt;setTo(array($to_email))
    -&gt;setBody($message);

$mailer-&gt;send($message);

echo " * Message was sent", "\n";
$msg-&gt;delivery_info['channel']-&gt;basic_ack($msg-&gt;delivery_info['delivery_tag']);
</code></pre>

<p>};</p>

<p>$channel->basic_qos(null, 1, null);
$channel->basic_consume(&lsquo;email_queue&rsquo;, &lsquo;&rsquo;, false, false, false, false, $callback);</p>

<p>while(count($channel->callbacks)) {</p>

<pre><code>$channel-&gt;wait();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, the first 5 lines of code are basically the same as the one we have on the <code>sender.php</code> file. Then we just output a message saying how we can stop the file from running. We need to run this file from the terminal so to stop it we just hit <code>CTRL + C</code>.</p>

<p>Next we declare a named function. This will be used for processing the message that we passed from the sender. The first thing it does is output that the message was received. Then we use <code>json_decode()</code> to convert the JSON string back to an array.</p>

<p>```
&lt;?php
$callback = function($msg){</p>

<pre><code>echo " * Message received", "\n";
$data = json_decode($msg-&gt;body, true);
</code></pre>

<p>};
?>
```</p>

<p>Next we extract the data and assign them to each of their own variables:</p>

<p><code>
&lt;?php
$from = $data['from'];
$from_email = $data['from_email'];
$to_email = $data['to_email'];
$subject = $data['subject'];
$message = $data['message'];
?&gt;
</code></p>

<p>Next we declare a new transporter to be used by Swiftmailer. This allows us to use a gmail account for sending emails. Declaring a new instance accepts 3 arguments: the host, port and the encryption. Then we set the username and password.</p>

<p>```
&lt;?php
$transporter = Swift_SmtpTransport::newInstance(&lsquo;smtp.gmail.com&rsquo;, 465, &lsquo;ssl&rsquo;)</p>

<pre><code>  -&gt;setUsername('YOUR_GMAIL_EMAIL')
  -&gt;setPassword('YOUR_GMAIL_PASSWORD');
</code></pre>

<p>?>
```</p>

<p>Next we declare a new mailer instance, and supplying the transporter as an argument.</p>

<p><code>
&lt;?php
$mailer = Swift_Mailer::newInstance($transporter);  
?&gt;
</code></p>

<p>Next create a new message, this also takes up the transporter as its argument. We then set the subject, from field, to field, and body of the message.</p>

<p>```
&lt;?php
$message = Swift_Message::newInstance($transporter)</p>

<pre><code>    -&gt;setSubject($subject)
    -&gt;setFrom(array($from_email =&gt; $from))
    -&gt;setTo(array($to_email))
    -&gt;setBody($message);
</code></pre>

<p>?>
```</p>

<p>Finally we send the message and output that the message was sent. The last line basically tells RabbitMQ that the sending of the message has indeed been successful.</p>

<p>```
&lt;?php
$mailer->send($message);
echo &ldquo; * Message was sent&rdquo;, &ldquo;\n&rdquo;;</p>

<p>$msg->delivery_info[&lsquo;channel&rsquo;]&ndash;>basic_ack($msg->delivery_info[&lsquo;delivery_tag&rsquo;]);
?>
```</p>

<h4>Running the program</h4>

<p>You can now run the receiver by going to your terminal and executing the following command:</p>

<p><code>
php receiver.php
</code></p>

<p>Once its running, go to your browser and access the <code>sender.php</code> file. Enter the details of your message and click on send. You&rsquo;re instantly greeted by a &lsquo;Your message was sent!&rsquo; text but if you immediately check your email account its not there yet. If its not there then the queue is still processing it. Check the output displayed on the terminal window where you executed the receiver. You should see a &lsquo;Message was sent&rsquo; output if the email was already sent.</p>

<h3>Conclusion</h3>

<p>RabbitMQ is a nice way for implementing messaging applications such as the one we created in this tutorial. We have barely scratch the surface with this tutorial. I recommend you check out the <a href="http://www.rabbitmq.com/getstarted.html">getting started guides</a> and the <a href="http://www.rabbitmq.com/documentation.html">documentation</a> to learn more.</p>
]]></content>
  </entry>
  
</feed>
