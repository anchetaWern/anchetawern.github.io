<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-11-03T14:36:22+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gettting Started with Coinbase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/"/>
    <updated>2013-11-03T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started developing applications which communicates with the Coinbase API. But first what is Coinbase?</p>

<p><blockquote><p>Coinbase is a service that allows you to use bitcoins as a means of payment for goods and services.<br/>Its like Paypal but for bitcoins.</p></blockquote></p>

<p>First thing that you need to do is to register an account with Coinbase.</p>

<p><img src="/images/posts/coinbase_api/coinbase-register.png" alt="register account" /></p>

<p>Then go to your email and verify the account.</p>

<p>Accept the license.</p>

<p><img src="/images/posts/coinbase_api/coinbase-license.png" alt="accept license" /></p>

<p>Next, click on account settings and then click on the integrations tab:</p>

<p><img src="/images/posts/coinbase_api/coinbase-api.png" alt="integrations" /></p>

<p>Next, click on show my API key. You would need to enter your password to verify that you are indeed the account owner. Initially the API key is disabled so you need to enable it as well.</p>

<p><img src="/images/posts/coinbase_api/enable-apikey.png" alt="enable api key" /></p>

<p>After that, simply copy the API key that&rsquo;s displayed.</p>

<p><img src="/images/posts/coinbase_api/copy-apikey.png" alt="copy api key" /></p>

<p>The API key will be used for authenticating requests to the Coinbase API.</p>

<h3>Authentication</h3>

<p>There are 2 ways in which a request to the API can be authenticated:</p>

<ol>
<li>API key</li>
<li>OAuth2</li>
</ol>


<h4>Authentication using API Key</h4>

<p>Authenticating a request via the API Key is the easier way of making requests to the API. All you have to do is to append the api key on each request. The cool thing is you can directly execute a request to the API directly from the browser for methods that can be called via <code>GET</code>.</p>

<p>For example when you want to get the account balance, you simply do something like:</p>

<p><code>
https://coinbase.com/api/v1/account/balance?api_key=xyz
</code></p>

<p>There&rsquo;s a bunch of other methods which you can call directly from the browser. They&rsquo;re all listed <a href="https://coinbase.com/api/doc/1.0.html">here</a>. Do note that you can only call a method directly from the browser when its request method is <code>GET</code>. <code>POST</code> methods cannot be called directly from the browser, you need to use <code>curl</code> or <code>file_get_contents()</code> to be able to make the request.</p>

<p>Here&rsquo;s an example of using <code>curl</code> to generate  a payment button, remember to pass the API Key along with the parameters required by the specific API method:</p>

<p>```php
&lt;?php</p>

<pre><code>$request = '{
    "api_key" : "xyz", 
    "button": {
        "name": "test",
        "price_string": "1.23",
        "price_currency_iso": "USD"
    }
}';

$post_fields = json_decode($request, true); //convert json string to an object
$post_fields = http_build_query($post_fields); //urlencode for arrays

$curl = curl_init();
curl_setopt($curl, CURLOPT_POST, true); //tell curl that were posting some data along with the request 
curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields); //the data that we want to post
curl_setopt($curl, CURLOPT_URL, 'https://coinbase.com/api/v1/buttons'); //the request url

curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); //return the transfer, by default its being echoed out
$response = curl_exec($curl); //execute the request
</code></pre>

<p>?>
```</p>

<p>The method that we have used above is the <code>buttons</code> method. It only requires 3 arguments:</p>

<ul>
<li><p><strong>button[name]</strong> &ndash; the name of the item or service for which you are collecting bitcoins.</p></li>
<li><p><strong>button[price_string]</strong> &ndash; the total price of the item or service.</p></li>
<li><p><strong>button[price_currency_iso]</strong> &ndash; the currency of the price used in the <code>button[price_string]</code> argument. Examples are <code>USD</code>, <code>PHP</code>, <code>SGD</code>, <code>CAD</code>, or <code>BTC</code> for the bitcoin currency. It would be easier if <code>BTC</code> isn&rsquo;t used so you won&rsquo;t have to convert. Simply use your local currency and the API will automatically convert it to <code>BTC</code> depending on the current exchange rate.</p></li>
</ul>


<p>The response would be formatted in JSON:</p>

<p>```json
{</p>

<pre><code>"success": true,
"button": {
    "code": "93865b9cae83706ae59220c013bc0afd",
    "type": "buy_now",
    "style": "buy_now_large",
    "text": "Pay With Bitcoin",
    "name": "test",
    "description": "Sample description",
    "custom": "Order123",
    "price": {
        "cents": 123,
        "currency_iso": "USD"
    }
}
</code></pre>

<p>}
```</p>

<p>To generate the payment button, simply create a div with a class of <code>coinbase-button</code> then give it a data attribute <code>data-code</code> using the button code as its value. After that create a new script element and use the <code>button.js</code> from coinbase:</p>

<p>```html</p>

<div class="coinbase-button" data-code="<?php echo $response->button->code; ?>"></div>


<script src="https://coinbase.com/assets/button.js"></script>


<p>```</p>

<p>The response returned above can also be used for generating payment pages.
All you have to do is append the button code to the coinbase checkout url:</p>

<p><code>html
&lt;?php
$response = json_decode($response); //convert json string to an object
?&gt;
&lt;a href="https://coinbase.com/checkouts/&lt;?php echo $response-&gt;button-&gt;code; ?&gt;"&gt;Checkout&lt;/a&gt;
</code></p>

<h4>Authentication using OAuth2</h4>

<p>Authentication using OAuth2 is a bit difficult. Thankfully there are good people out there who creates libraries that makes our lives easier. One of those libraries is the <a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a> library.</p>

<p>To use it, simply download the zip file from the Github repository or clone it on your machine. Once the download is done, you can just include it on your working script:</p>

<p><code>php
&lt;?php
require 'libs/coinbase/Coinbase.php';
?&gt;
</code></p>

<p>After that, you can go ahead and call the methods available from the library. In the example below were calling the <code>getOrders()</code> method which simply returns all the orders received by the merchant who owns the API Key that is used in the code. This means that every merchant who plans to integrate Coinbase in their application has to create their own Coinbase app in order to receive an API Key. The API Key will then serve as their identification for each request that is made to the API. Yes this is a bit of a drag for the merchants but that&rsquo;s just how it works so there&rsquo;s no choice but to stick with it.</p>

<p><code>
&lt;?php
$api_key = 'xyz';
$coinbase = new Coinbase($api_key);
$orders = $coinbase-&gt;getOrders();
?&gt;
</code></p>

<p>The response returned from the code above is not the same as the response that you directly get from the API.
The library already converts it to an object so there&rsquo;s no need to. Here&rsquo;s an example of looping through the orders:</p>

<p>```
&lt;?php
if($orders->total_count > 0){</p>

<pre><code>foreach($orders-&gt;orders as $row){

    echo $row-&gt;order-&gt;created_at; 
    echo $row-&gt;order-&gt;button-&gt;description; 
    echo $row-&gt;order-&gt;status; 
    echo $row-&gt;order-&gt;total_native-&gt;cents; 
    echo $row-&gt;order-&gt;button-&gt;name; 

}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to perform requests to the Coinbase API. Requests can be performed directly from the browser or via Curl. You have also learned how to generate payment buttons via the API.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://coinbase.com/api/doc/1.0.html">API Documentation</a></li>
<li><a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to perform cross-domain AJAX requests]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests/"/>
    <updated>2013-10-24T18:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how you can perform cross-domain AJAX requests.
There&rsquo;s really no bullet-proof method of doing this. It might work, it might not since AJAX requests should only be performed within the same domain due to security concerns.</p>

<p>Note that I&rsquo;m not going to show how to perform an AJAX request to any domain from any domain. What I&rsquo;m going to show you is how to perform an AJAX request to a different domain which you have control over the code.</p>

<p>For example you want to get some data via AJAX from <code>xyz.com</code>. You are making the request from <code>abc.com</code> so it wouldn&rsquo;t work if you do something like:</p>

<p>```javascript
$.get(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;}, function(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>});
```</p>

<p>If you have control over the code that returns the response that you need, all you need to do is to convert the data that you&rsquo;re returning to JSON string and then wrap it up with a function call. Here&rsquo;s an example:</p>

<p><code>php
&lt;?php
$data = array('fname' =&gt; 'haru', 'lname' =&gt; 'tora');
echo "parse_results(" . json_encode($data) . ")";
?&gt;
</code></p>

<p>When calling the method from <code>abc.com</code> all you have to do is to use the <code>$.getJSON()</code> method and declare the same function that you used on <code>xyz.com</code>. In this case the name of the function is <code>parse_results()</code>:</p>

<p>```javascript
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.getJSON(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;};
```</p>

<p>You can also use the more robust <code>$.ajax()</code> method if you want:</p>

<p>```
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.ajax({</p>

<pre><code>url : 'http://xyz.com/get_data',
type : 'GET',
dataType: 'jsonp',
data : {
    'data' : 'abc'
}
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Delicious API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api/"/>
    <updated>2013-10-20T13:17:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get the links that you have bookmarked using Delicious using the Delicious API.</p>

<p>The Delicious API unlike other Web API&rsquo;s that&rsquo;s using either OAuth, OAuth2 or their custom Authentication method is using <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Basic Access Authentication</a>. This means that performing API calls requires the username and the password of the user whose bookmarks you want to have access to.
This means that there&rsquo;s no confidentiality with this Authentication method. Without you knowing, the application that&rsquo;s going to do the talking with the Delicious API can just save your username and password in a database and the developers can have access to the links that you&rsquo;ve bookmarked in your account whether public or private. So as a user its recommended that you only bookmark links that doesn&rsquo;t contain any confidential or classified information.</p>

<h3>Delicious Class</h3>

<p>First let&rsquo;s go ahead and create the class that we will be using to access the Delicious API. Let&rsquo;s name it <code>class.delicious.php</code>. Then declare the 4 private variables that we will be using throughout the class:</p>

<p>```php
&lt;?php
class delicious{</p>

<pre><code>private $curl;
private $curl_options; //options that will be used for curl
private $username; //delicious username
private $password; //delicious password
</code></pre>

<p>?>
```</p>

<p>The constructor will accept 2 arguments, the delicious username and password. We&rsquo;ll also initialize <code>curl</code> so we don&rsquo;t have to initialize it on every method call.</p>

<p>```
&lt;?php
public function __construct($username, $password){</p>

<pre><code>$this-&gt;username = $username;
$this-&gt;password = $password;
$this-&gt;curl = curl_init();
</code></pre>

<p>}
?>
```</p>

<p>Next, create the <code>set_options()</code> method. This method will simply set the curl options.</p>

<p>```
&lt;?php
public function set_options(){</p>

<pre><code>$this-&gt;curl_options = array(
    CURLOPT_RETURNTRANSFER =&gt; 1, //return the response from the delicious API.
    CURLOPT_SSL_VERIFYPEER =&gt; false, //disable verification of the peer's certificate 
    CURLOPT_USERPWD =&gt; $this-&gt;username . ':' . $this-&gt;password //set the username and password to be used for authentication
);
</code></pre>

<p>}
?>
```</p>

<p>Next is the <code>execute()</code> method. This method is called from every method calls that are responsible for calling a specific method from the API. What it does is to assign the curl options to the curl object, executes it and then returns the response.</p>

<p>```
&lt;?php
public function execute(){</p>

<pre><code>curl_setopt_array($this-&gt;curl, $this-&gt;curl_options);

$response = curl_exec($this-&gt;curl);
if(!$response){
    //terminate the execution of the script if there's no response
    die('Error: "' . curl_error($this-&gt;curl) . '" - Code: ' . curl_errno($this-&gt;curl));
}
curl_close($this-&gt;curl); //close the connection              
return $response;
</code></pre>

<p>}
?>
```</p>

<h4>Getting all Bookmarks</h4>

<p>We can now create the methods for actually getting the bookmarks. The first method that we will create is the <code>get_all()</code> method. As the name suggests, the <code>get_all()</code> method simply gets everything that you have ever bookmarked on your delicious account. This might take some time to execute depending on the number of links that you have bookmarked.</p>

<p>```
&lt;?php
public function get_all(){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
$response = $this-&gt;execute();
$xml = simplexml_load_string($response); //converts the string response into an xml object      
return $xml;
</code></pre>

<p>}
?>
```</p>

<p>Before we proceed with the next method, I&rsquo;d like you to take a few minutes to observe what were doing here.
Because the pattern that we&rsquo;ve used here will be used on other methods that we will be creating later.</p>

<p>As you can see, were calling the <code>set_options()</code> method to set the arguments that will be needed for the request.</p>

<p><code>
&lt;?php
$this-&gt;set_options();
?&gt;
</code></p>

<p>Next, we set the main URL that were requesting from. In this cae were requesting the <code>https://api.del.icio.us/v1/posts/all</code> url. At the time of writing of this article, the main request url is <code>https://api.del.icio.us</code> The version of the API is <code>v1</code> and the method is <code>posts/all</code>. You can see the full list of API methods that you can call <a href="https://github.com/avos/delicious-api/blob/master/APIs.md">here</a>.</p>

<p><code>
&lt;?php
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
?&gt;
</code></p>

<p>Next, we execute the request. The <code>execute()</code> method returns the response from the API. The response is basically in string format so we have to process it further to really get into the details that we want.</p>

<p><code>
&lt;?php
$response = $this-&gt;execute();
?&gt;
</code></p>

<p>In order to do that we call the <code>simplexml_load_string()</code> method. It&rsquo;s a built-in PHP method which you can call to convert a string response into an XML object. You can read more about it <a href="http://php.net/manual/en/function.simplexml-load-string.php">here</a>.</p>

<p><code>
&lt;?php
$xml = simplexml_load_string($response);
?&gt;
</code></p>

<p>After converting the response to an XML object, we simply return it.</p>

<p><code>
&lt;?php
return $xml;
?&gt;
</code></p>

<h4>Getting Bookmarks by Tag</h4>

<p>We can also get bookmarks by tag name. All we have to do is to specify the <code>tag</code> argument to the <code>posts/all</code> method and supply a url encoded value as the query.</p>

<p>```
&lt;?php
public function get_by_tag($tag){</p>

<pre><code>$this-&gt;set_options();
$request_url = 'https://api.del.icio.us/v1/posts/all?tag=' . urlencode($tag);
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Bookmarks by Offset</h4>

<p>We can also get by a certain limit and offset. All we have to do is supply a value for the <code>start</code> argument (offset), and the <code>results</code> argument (limit).</p>

<p>```
&lt;?php
public function get_by_offset($start, $limit){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/all?start=' . $start;
$request_url .= '&amp;results=' . $limit;
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();        
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Recently Bookmarked Links</h4>

<p>Recently bookmarked links can also be fetched from the API. The method to be used is the <code>posts/recent</code> method.
You can also supply an optional <code>tag</code> or <code>count</code> argument.</p>

<p>`&ldquo;
&lt;?php
public function get_recent($tag = &rdquo;, $count = 1){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/recent?';
if(!empty($tag)){ //limit results by tag
    $request_url .= 'tag=' . urlencode($tag);
}

if(!empty($count)){ //limit results by bookmark count
    $request_url .= '&amp;count=' . $count;
}
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        

return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Bookmarking Links</h4>

<p>Bookmarking new links can also be done from the API. The method to be used is the <code>posts/add</code> method.
The <code>url</code> argument is required and you can also set an optional <code>description</code> or <code>tags</code>. If there are more than one tags you can separate them using a comma (E.g php, web-development)</p>

<p>`&ldquo;
&lt;?php
public function add($url, $description = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/add?';
$request_url .= 'url=' . urlencode($url);
$request_url .= '&amp;description=' . urlencode($description);
$request_url .= '&amp;tags=' . urlencode($tags);

$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<h4>Deleting Bookmarks</h4>

<p>You can also delete links that were previously bookmarked. The request method is <code>posts/delete</code>.
You have to pass in the <code>url</code> of the link that you wish to delete.</p>

<p>```
&lt;?php
public function delete($url){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/delete?url=' . $url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<p>There are a bunch of other methods which you can use so be sure to check out the Delicious API documentation.</p>

<h3>Using the Class</h3>

<p>```
&lt;?php
&lt;?php
require_once(&lsquo;class.delicious.php&rsquo;);</p>

<p>$username = &lsquo;XYZ&rsquo;;
$password = &lsquo;secret&rsquo;;</p>

<p>$deli = new Delicious($username, $password);</p>

<p>$links = $deli->get_by_tag(&lsquo;php&rsquo;);</p>

<p>foreach($links->post as $row){
?></p>

<pre><code>&lt;li&gt;&lt;?php echo $row['href']; ?&gt;&lt;/li&gt;
</code></pre>

<p>&lt;?php <br/>
}
?>
```</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/avos/delicious-api/blob/master/APIs.md">Delicious API</a></li>
<li><a href="https://github.com/anchetaWern/delicious-php">Delicious-PHP</a> &ndash; a little PHP class that I created for interacting with the Delicious API</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<p>```php
&lt;?php
class Flickr{</p>

<pre><code>private $flickr_key;
private $flickr_secret;
private $format = 'json';

public function __construct($flickr_key, $flickr_secret) {

    $this-&gt;flickr_key = $flickr_key;
    $this-&gt;flickr_secret = $flickr_secret;
}
</code></pre>

<p>?>
```</p>

<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<p>`&ldquo;
&lt;?php
public function searchPhotos($query = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$urlencoded_tags = array(); 

if(!empty($tags)){  
    $tags_r = explode(',', $tags);
    foreach($tags_r as $tag){
        $urlencoded_tags[] = urlencode($tag);
    }
}   

//construct the url
$url  = 'http://api.flickr.com/services/rest/?';
$url .= 'method=flickr.photos.search';
$url .= '&amp;text=' . urlencode($query);
$url .= '&amp;tags=' . implode(',', $urlencoded_tags); //convert the array of url encoded tags back to a string
$url .= '&amp;sort=relevance';
$url .= '&amp;safe_search=1';
$url .= '&amp;content_type=4';
$url .= '&amp;api_key=' . $this-&gt;flickr_key;
$url .= '&amp;format=' . $this-&gt;format;
$url .= '&amp;per_page=10';

//get the results
$result = file_get_contents($url);

//remove the unneccessary strings that wraps the result returned from the API
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);

$photos = array();
$data = json_decode($json, true);

//check if the status didn't fail
if($data['stat'] != 'fail'){
    //return only the data for the photos as that's the only thing that we need
    $photos = $data['photos']['photo'];
    return $photos;
}else{
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<p><code>
&lt;?php
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);
?&gt;
</code></p>

<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<p>```
&lt;?php
$photos = array();
$data = json_decode($json, true);</p>

<p>//check if the status didn&rsquo;t fail
if($data[&lsquo;stat&rsquo;] != &lsquo;fail&rsquo;){</p>

<pre><code>//return only the data for the photos as that's the only thing that we need
$photos = $data['photos']['photo'];
return $photos;
</code></pre>

<p>}else{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<p><code>
&lt;?php
$src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
?&gt;
</code></p>

<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<p>```
&lt;?php
require_once(&lsquo;class.flickr.php&rsquo;);</p>

<p>$flickr = new Flickr($api_key, $api_secret);</p>

<p>$results = $flickr->searchPhotos($query, $tags);
if(!empty($results)){</p>

<pre><code>foreach($results as $photo){

    $src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
</code></pre>

<p>?></p>

<pre><code>&lt;img src="&lt;?php echo $src; ?&gt;" alt="&lt;?php echo $photo['title']; ?&gt;"&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Web Scraping in PHP]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php/"/>
    <updated>2013-08-07T17:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to get a specific data from another website but there&rsquo;s no API available for it?
That&rsquo;s where Web Scraping comes in, if the data is not made available by the website we can just scrape it from the website itself.</p>

<!--More-->


<p>But before we dive in let us first define what web scraping is. According to <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia</a>:</p>

<p><blockquote><p>Web scraping (web harvesting or web data extraction) is a computer software technique of extracting information from websites. Usually, such software programs simulate human exploration of the World Wide Web by either implementing low-level Hypertext Transfer Protocol (HTTP), or embedding a fully-fledged web browser, such as Internet Explorer or Mozilla Firefox.</p></blockquote></p>

<p>So yes, web scraping lets us extract information from websites.
But the thing is there are some legal issues regarding web scraping.
Some consider it as an act of trespassing to the website where you are scraping the data from.
That&rsquo;s why it is wise to read the terms of service of the specific website that you want to scrape because you might be doing something illegal without knowing it.
You can read more about it in this <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia page</a>.</p>

<h2>Web Scraping Techniques</h2>

<p>There are many techniques in web scraping as mentioned in the Wikipedia page earlier.
But I will only discuss the following:</p>

<ul>
<li>Document Parsing</li>
<li>Regular Expressions</li>
</ul>


<h3>Document Parsing</h3>

<p>Document parsing is the process of converting HTML into DOM (Document Object Model) in which we can traverse through.
Here&rsquo;s an example on how we can scrape data from a public website:</p>

<p>```php
&lt;?php
$html = file_get_contents(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;); //get the html returned from the following url</p>

<p>$pokemon_doc = new DOMDocument();</p>

<p>libxml_use_internal_errors(TRUE); //disable libxml errors</p>

<p>if(!empty($html)){ //if any html is actually returned</p>

<pre><code>$pokemon_doc-&gt;loadHTML($html);
libxml_clear_errors(); //remove errors for yucky html

$pokemon_xpath = new DOMXPath($pokemon_doc);

//get all the h2's with an id
$pokemon_row = $pokemon_xpath-&gt;query('//h2[@id]');

if($pokemon_row-&gt;length &gt; 0){
    foreach($pokemon_row as $row){
        echo $row-&gt;nodeValue . "&lt;br/&gt;";
    }
}
</code></pre>

<p>}
?>
```</p>

<p>What we did with the code above was to get the html returned from the url of the website that we want to scrape.
In this case the website is <a href="http://pokemondb.net">pokemondb.net</a>.</p>

<p><code>
&lt;?php
$html = file_get_contents('http://pokemondb.net/evolution');
?&gt;
</code></p>

<p>Then we declare a new DOM Document, this is used for converting the html string returned from <code>file_get_contents</code> into an actual Document Object Model which we can traverse through:</p>

<p><code>
&lt;?php
$pokemon_doc = new DOMDocument();
?&gt;
</code></p>

<p>Then we disable libxml errors so that they won&rsquo;t be outputted on the screen, instead they will be buffered and stored:</p>

<p><code>
&lt;?php
libxml_use_internal_errors(TRUE); //disable libxml errors
?&gt;
</code></p>

<p>Next we check if there&rsquo;s an actual html that has been returned:</p>

<p><code>
&lt;?php
if(!empty($html)){ //if any html is actually returned
}
?&gt;
</code></p>

<p>Next we use the <code>loadHTML()</code> function from the new instance of <code>DOMDocument</code> that we created earlier to load the html that was returned. Simply use the html that was returned as the argument:</p>

<p><code>
&lt;?php
$pokemon_doc-&gt;loadHTML($html);
?&gt;
</code></p>

<p>Then we clear the errors if any. Most of the time yucky html causes these errors. Examples of yucky html are inline styling (style attributes embedded in elements), invalid attributes and invalid elements. Elements and attributes are considered invalid if they are not part of the HTML specification for the doctype used in the specific page.</p>

<p><code>
&lt;?php
libxml_clear_errors(); //remove errors for yucky html
?&gt;
</code></p>

<p>Next we declare a new instance of <code>DOMXpath</code>. This allows us to do some queries with the DOM Document that we created.
This requires an instance of the DOM Document as its argument.</p>

<p><code>
&lt;?php
$pokemon_xpath = new DOMXPath($pokemon_doc);
?&gt;
</code></p>

<p>Finally, we simply write the query for the specific elements that we want to get. If you have used <a href="http://jquery.com/">jQuery</a> before then this process is similar to what you do when you select elements from the DOM.
What were selecting here is all the h2 tags which has an id, we make the location of the h2 unspecific by using double slashes <code>//</code> right before the element that we want to select. The value of the id also doesn&rsquo;t matter as long as there&rsquo;s an id then it will get selected. The <code>nodeValue</code> attribute contains the text inside the h2 that was selected.</p>

<p>```
&lt;?php
//get all the h2&rsquo;s with an id
$pokemon_row = $pokemon_xpath->query(&lsquo;//h2[@id]&rsquo;);</p>

<p>if($pokemon_row->length > 0){</p>

<pre><code>foreach($pokemon_row as $row){
    echo $row-&gt;nodeValue . "&lt;br/&gt;";
}
</code></pre>

<p>}
?>
```</p>

<p>This results to the following text printed out in the screen:</p>

<p><code>
Generation 1 - Red, Blue, Yellow
Generation 2 - Gold, Silver, Crystal
Generation 3 - Ruby, Sapphire, Emerald
Generation 4 - Diamond, Pearl, Platinum
Generation 5 - Black, White, Black 2, White 2
</code></p>

<p>Let&rsquo;s do one more example with the document parsing before we move on to regular expressions.
This time were going to get a list of all pokemons along with their specific type (E.g Fire, Grass, Water).</p>

<p>First let&rsquo;s examine what we have on pokemondb.net/evolution so that we know what particular element to query.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/check.png" alt="checking" /></p>

<p>As you can see from the screenshot, the information that we want to get is contained within a span element with a class of <code>infocard-tall</code>. Yes, the space there is included. When using XPath to query spaces are included if they are present, otherwise it wouldn&rsquo;t work.</p>

<p>Converting what we know into actual query, we come up with this:</p>

<p><code>
//span[@class="infocard-tall "]
</code></p>

<p>This selects all the span elements which has a class of <code>infocard-tall</code>. It doesn&rsquo;t matter where in the document the span is because we used the double forward slash before the actual element.</p>

<p>Once were inside the span we have to get to the actual elements which directly contains the data that we want. And that is the name and the type of the pokemon. As you can see from the screenshot below the name of the pokemon is directly contained within an <code>anchor</code> element with a class of <code>ent-name</code>. And the types are stored within a <code>small</code> element with a class of <code>aside</code>.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/info-card.png" alt="info card" /></p>

<p>We can then use that knowledge to come up with the following code:</p>

<p>```
&lt;?php
$pokemon_list = array();</p>

<p>$pokemon_and_type = $pokemon_xpath->query(&lsquo;//span[@class=&ldquo;infocard-tall &rdquo;]&rsquo;);</p>

<p>if($pokemon_and_type->length > 0){</p>

<pre><code>//loop through all the pokemons
foreach($pokemon_and_type as $pat){

    //get the name of the pokemon
    $name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;

    $pkmn_types = array(); //reset $pkmn_types for each pokemon
    $types = $pokemon_xpath-&gt;query('small[@class="aside"]/a', $pat);

    //loop through all the types and store them in the $pkmn_types array
    foreach($types as $type){
        $pkmn_types[] = $type-&gt;nodeValue; //the pokemon type
    }

    //store the data in the $pokemon_list array
    $pokemon_list[] = array('name' =&gt; $name, 'types' =&gt; $pkmn_types);

}
</code></pre>

<p>}</p>

<p>//output what we have
echo &ldquo;<pre>&rdquo;;
print_r($pokemon_list);
echo &ldquo;</pre>&rdquo;;
?>
```</p>

<p>There&rsquo;s nothing new with the code that we have above except for using query inside the <code>foreach</code> loop.
We use this particular line of code to get the name of the pokemon, you might notice that we specified a second argument when we used the <code>query</code> method. The second argument is the current row, we use it to specify the scope of the query. This means that were limiting the scope of the query to that of the current row.</p>

<p><code>
&lt;?php
$name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;
?&gt;
</code></p>

<p>The results would be something like this:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [name] =&gt; Bulbasaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[1] =&gt; Array
    (
        [name] =&gt; Ivysaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[2] =&gt; Array
    (
        [name] =&gt; Venusaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
</code></pre>

<p>```</p>

<h3>Regular Expressions</h3>

<p>Aside from document parsing we can also use regular expressions to scrape the data that we want from a specific webpage.
Regular expressions are useful if we only want to scrape actual content and not HTML elements because its difficult if not impossible to match all the possibilities of how an HTML element might have been written.
Consider the following example:</p>

<p><code>
&lt;link rel="stylesheet" href="style.css"&gt;
&lt;link href="style.css" rel="stylesheet"&gt;
&lt;link href="style.css" rel="stylesheet" /&gt;
&lt;link href="style.css" rel="stylesheet"/&gt;
&lt;link rel="stylesheet" href="style.css" type="text/css"&gt;
&lt;link type="text/css" rel="stylesheet" href="style.css"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet" /&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"/&gt;
</code></p>

<p>The code above is basically the same thing written in a bunch of ways. It would be difficult to scrape all the external stylesheets in a page using regular expressions as we would need to target every possible way that it can be written. So instead of using regular expressions we use document parsing to get all the external stylesheets. This is just one of the many cases in which regular expressions can&rsquo;t be used in scraping.</p>

<p>The main advantage of using regular expressions is its speed. The whole process of converting an HTML document into DOM and then traversing the DOM takes time especially if there are lots of elements which matches the query that you specify.
This is not the case with regular expressions as you&rsquo;re only working with strings and patterns with it, no conversion and traversing takes place so its very fast.</p>

<p>Ok enough with the explanations, here&rsquo;s an example on how to use regular expressions in scraping.
Here we are specifically looking for URL&rsquo;s which begins with <code>https://safelinking.net/</code> and followed by any instances of letters from A to Z and its lowercase version or any instances of numbers. Remember that we need to escape forward slashes and periods using a backslash. We then use the <code>preg_match_all()</code> function to get all the matches of the specific pattern that were looking for. The <code>preg_match_all()</code> function takes the pattern as its first argument, then the actual string where we want to find the pattern as its second argument, then the third argument would be the variable that will store the actual matches.</p>

<p>```
&lt;?php
$pokemon_episodes_html = file_get_contents(&lsquo;<a href="http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html">http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html</a>&rsquo;);
$pattern = &lsquo;/<a href="https://safelinking.net/d/">https://safelinking.net/d/</a>[A-Za-z0-9]*/&rsquo;;
preg_match_all($pattern, $pokemon_episodes_html, $matches);
?></p>

<pre>
    <?php print_r($matches); ?>
</pre>


<p>```</p>

<p>The code above will output the following:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [0] =&gt; https://safelinking.net/d/81b681a76a
        [1] =&gt; https://safelinking.net/d/04138fdd24
        [2] =&gt; https://safelinking.net/d/7378613026
</code></pre>

<p>```</p>

<h2>Web Scraping Tools</h2>

<p>You can also use some web scraping tools to make your life easier. Here are some of the PHP libraries that you can use for scraping.</p>

<h3>Simple HTML Dom</h3>

<p>To make web scraping easier you can use libraries such as <a href="http://simplehtmldom.sourceforge.net/">simple html DOM</a>.
Here&rsquo;s an example of getting the names of the pokemon using simple html DOM:</p>

<p>```
&lt;?php
require_once &lsquo;libs/simple_html_dom.php&rsquo;;
$html = file_get_html(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;);</p>

<p>foreach($html->find(&lsquo;a[class=ent-name]&rsquo;) as $element){</p>

<pre><code>echo $element-&gt;innertext . '&lt;br&gt;'; //outputs bulbasaur, ivysaur, etc...
</code></pre>

<p>}
?>
```</p>

<p>The syntax is more simple so the code that you have to write is lesser plus there are also some convenience functions and attributes which you can use. An example is the plaintext attribute which extracts all the text from a web page:</p>

<p><code>
&lt;?php
echo file_get_html('http://pokemondb.net/evolution')-&gt;plaintext;
?&gt;
</code></p>

<h3>Ganon</h3>

<p>You can also use <a href="https://code.google.com/p/ganon/">ganon</a> for web scraping which packs features such as support for html5, jQuery like syntax, manipulation of elements and their attributes.</p>

<p>Here&rsquo;s an example on how to use ganon to get all the images that are in a table element:</p>

<p>```
&lt;?php
require_once &lsquo;libs/ganon.php&rsquo;;
$html = file_get_dom($url);
if(!empty($html)){</p>

<pre><code>$elements = $html('table img');

foreach($elements as $element){
    echo $element-&gt;src . "&lt;br/&gt;"; //output the image source
}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial! You have learned the basics of web scraping in PHP.
You can take your adventures to the next level by scraping non-public parts of websites or scraping content that is dynamically generated.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://blog.hartleybrody.com/web-scraping/">I don&rsquo;t need no stinking API: Web Scraping for fun and profit</a></li>
<li><a href="http://blog.webspecies.co.uk/2011-07-27/web-scrapping-is-actually-pretty-easy.html">Web scraping is actually pretty easy</a></li>
<li><a href="https://news.ycombinator.com/item?id=4893922">Web scraping or API</a></li>
<li><a href="http://curl.haxx.se/">Curl</a></li>
<li><a href="http://simplehtmldom.sourceforge.net/">Simple HTML Dom</a></li>
<li><a href="https://code.google.com/p/ganon/">Ganon</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
