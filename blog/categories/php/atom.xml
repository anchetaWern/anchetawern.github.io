<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2014-01-19T14:33:01+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Paypal API]]></title>
    <link href="http://anchetaWern.github.io/blog/2014/01/08/getting-started-with-paypal-api/"/>
    <updated>2014-01-08T18:15:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2014/01/08/getting-started-with-paypal-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can get started with using the Paypal API. I&rsquo;ll walk you through the steps needed in order to get you started with using the Paypal API in your projects.</p>

<h3>Concepts to Remember</h3>

<p>Here are some of the concepts that you have to remember when working with the Paypal API in any of your projects:</p>

<ul>
<li><p><strong>Sandbox</strong> &ndash; this is used for testing requests to the Paypal API. Sandbox Paypal accounts can be assigned with funds of up to 5000 USD and then you can use it for testing.</p></li>
<li><p><strong>Live</strong> &ndash; the live Paypal website. You can switch your API calls to use the live endpoints upon deploying your project.</p></li>
<li><p><strong>API Request</strong> &ndash; you can use either NVP (Name-Value Pair) or SOAP when making request to the API. We will use name-value pairs in this tutorial.</p></li>
<li><p><strong>API Credentials</strong> &ndash; the credentials that you will use in order to make API calls.</p></li>
<li><p><strong>API</strong> &ndash; short for Application Programming Interface. Paypal is composed of different APIs such as the adaptive accounts, adaptive payments, invoicing, merchant APIs and permissions. In this tutorial I&rsquo;m going to discuss about the merchant API.</p></li>
<li><p><strong>Service Endpoint</strong> &ndash; this simply refers to the URL of the server that will handle a specific request. Note that the endpoints used for testing (sandbox) and production (live) are different. So you have to update the endpoints after you&rsquo;re done with the testing.</p></li>
<li><p><strong>Call Payload</strong> &ndash; the minimum data required by paypal that you have to submit as part of the request to the API.</p></li>
<li><p><strong>Request and Response Formats</strong> &ndash; the format in which your API request and the response that&rsquo;s going to be returned after a successful call.</p></li>
<li><p><strong>HTTP Headers</strong> &ndash; the HTTP request header information that you have to specify in each API call.</p></li>
</ul>


<h3>Create a Paypal Account</h3>

<p>First you have to create either a Paypal Personal Account or a Paypal Business Account on the Paypal website.
After creating an account go to <a href="https://developer.paypal.com/">developer.paypal.com</a> and login using the account that you created.</p>

<h3>Create a Sandbox Account</h3>

<p>Once you&rsquo;re logged in to the paypal developer website, click on the applications tab then go to sandbox accounts. In this page you will see the default paypal account that you can use for testing. The default account contains information that you can use to authenticate your API calls. In most cases you would only need to take note of the username, password and the signature in order to authenticate API calls.</p>

<p><img src="/images/posts/getting_started_with_paypal/default-test-account.png" alt="default account" /></p>

<p>The default test account is a business account so if you need to test on a personal account you may need to create a new test account which you can do on the same page by clicking on the <code>Create Account</code> button.</p>

<p><img src="/images/posts/getting_started_with_paypal/paypal-create-testacc.png" alt="create test account" /></p>

<p>The default test account along with any test account that you create can be used to login in the <a href="https://www.sandbox.paypal.com">sandbox paypal website</a>. This is great as you can use this like a real paypal account to view your transactions, make payments, etc.</p>

<h3>Getting Live API Credentials</h3>

<p>Note that the API credentials that comes along with the default test account can&rsquo;t be used to make API calls with the live version of the API. For that you would need to login to <a href="http://paypal.com">paypal</a> then go to <strong>My Account</strong> &ndash;> <strong>Profile</strong> &ndash;> <strong>My Selling Tools</strong> then click on the <strong>update</strong> link beside the <strong>API Access</strong> section. After that click on the <strong>Request API Credentials</strong> link. Finally, select <strong>Request API signature</strong> and click <strong>Agree and Submit</strong>. This will generate the API Username, Password and Signature that you can use in your live API calls.</p>

<h3>Paypal Class</h3>

<p>Now were ready to build the class that we will be using later on to make requests to the Paypal API.
First create a new class and call it <code>Paypal</code>. Then declare the following class variables:</p>

<ul>
<li><strong>request method</strong> &ndash; the request method to use. This can be either CURL or file_get_contents.</li>
<li><strong>errors</strong> &ndash; stores the current errors that occured while making the requests.</li>
<li><strong>credentials</strong> &ndash; stores the API credentials.</li>
<li><strong>endpoint</strong> &ndash; the URL of the service end point to use.</li>
<li><strong>version</strong> &ndash; the version of the API. Currently its 74.0</li>
</ul>


<p>```php
&lt;?php
class Paypal{</p>

<p>  public $request_method;</p>

<p>  public $_errors = array();</p>

<p>  protected $<em>credentials;
  protected $</em>endPoint = &lsquo;<a href="https://api-3t.sandbox.paypal.com/nvp">https://api-3t.sandbox.paypal.com/nvp</a>&rsquo;;
  protected $_version = &lsquo;74.0&rsquo;;</p>

<p>}
?>
```</p>

<p>Next declare the constructor. This will take 3 required arguments and two optional arguments:</p>

<ul>
<li><p><strong>user</strong> &ndash; the API username that you got from paypal. Note that this should correspond with the endpoint that you use. If the endpoint is a sandbox endpoint then use the sandbox credentials otherwise use the live credentials.</p></li>
<li><p><strong>pass</strong> &ndash; the API password</p></li>
<li><strong>signature</strong> &ndash; the API signature</li>
<li><strong>paypal server</strong> &ndash; this can either be set to sandbox or live. This is set to sandbox by default so its using the sandbox endpoint. Setting this to live will set the endpoint to the live endpoint.</li>
<li><strong>request method</strong> &ndash; the request method to use, this can be either file_get_contents or curl. Its recommended to use curl since its more secure. The file_get_contents method is only there in case the server where you are deploying has no support for CURL.</li>
</ul>


<p>What the constructor does is to initialize the values for the class variables based on the arguments supplied when an object for the class is declared.</p>

<p>```
&lt;?php
  public function __construct($user, $pass, $signature, $paypal_server = &lsquo;sandbox&rsquo;, $request_method = &lsquo;file_get_contents&rsquo;){</p>

<pre><code>$this-&gt;_credentials = array(
    'USER' =&gt; $user,
    'PWD' =&gt; $pass,
    'SIGNATURE' =&gt; $signature,
);

$this-&gt;request_method = $request_method;
if($paypal_server == 'live'){
  $this-&gt;_endPoint = 'https://api-3t.paypal.com/nvp';
}
</code></pre>

<p>  }
?>
```</p>

<p>Next create the request method. This will be the primary method that we will call from this class once we make the request to the API. This accepts two arguments:</p>

<ul>
<li><strong>method</strong> &ndash; the API method to use.</li>
<li><strong>params</strong> &ndash; the parameters required by the method that we specified.</li>
</ul>


<p>What this method does is to build the name-value pair that will be used for the request. It also builds the required HTTP header based on the credentials supplied through the constructor earlier. Once its done building all the information required by a specific API method it makes the request depending on the request method.</p>

<p>```
&lt;?php
  public function request($method, $params = array()){</p>

<pre><code>$this-&gt;_errors = array();
if(empty($method)){ 
  $this-&gt;_errors = array('There is no API Method');
  return false;
}

$requestParams = array(
   'METHOD' =&gt; $method,
   'VERSION' =&gt; $this-&gt;_version
) + $this-&gt;_credentials;


$request = http_build_query($requestParams + $params); //build a query string based on the array of request parameters

if($this-&gt;request_method == 'curl'){

    //build the HTTP header required by Paypal
    $http_header = array(
        'X-PAYPAL-SECURITY-USERID' =&gt; $this-&gt;_credentials['USER'],
        'X-PAYPAL-SECURITY-PASSWORD' =&gt; $this-&gt;_credentials['PWD'],
        'X-PAYPAL-SECURITY-SIGNATURE' =&gt; $this-&gt;_credentials['SIGNATURE'],
        'X-PAYPAL-REQUEST-DATA-FORMAT' =&gt; 'JSON',
        'X-PAYPAL-RESPONSE-DATA-FORMAT' =&gt; 'JSON'
    );

    //set options for CURL
    $curlOptions = array (
        CURLOPT_HTTPHEADER =&gt; $http_header,
        CURLOPT_URL =&gt; $this-&gt;_endPoint,
        CURLOPT_VERBOSE =&gt; 1,
        CURLOPT_SSL_VERIFYPEER =&gt; true, 
        CURLOPT_SSL_VERIFYHOST =&gt; 2,
        CURLOPT_CAINFO =&gt; dirname(__FILE__) . '/cert/cacert.pem', //CA cert file
        CURLOPT_RETURNTRANSFER =&gt; 1,
        CURLOPT_POST =&gt; 1,
        CURLOPT_POSTFIELDS =&gt; $request
    );

    $ch = curl_init();
    curl_setopt_array($ch, $curlOptions);

    $response = curl_exec($ch); //make the request

    if(curl_errno($ch)){
        $this-&gt;_errors = curl_error($ch);
        curl_close($ch);
        return false;
    }else{
        curl_close($ch);
        $responseArray = array();
        parse_str($response, $responseArray); //convert the response string to an array
        return $responseArray;
    }

}else if($this-&gt;request_method == 'file_get_contents'){

    //build the HTTP header required by Paypal
    $context_options = array(
        "http" =&gt; array(
          "method" =&gt; "POST",
          "header"  =&gt; "Content-type: application/x-www-form-urlencoded\r\n" .
                "X-PAYPAL-SECURITY-USERID: " . $this-&gt;_credentials['USER'] . "\r\n" .
                "X-PAYPAL-SECURITY-PASSWORD: " . $this-&gt;_credentials['PWD'] . "\r\n" .
                "X-PAYPAL-SECURITY-SIGNATURE: " . $this-&gt;_credentials['SIGNATURE'] . "\r\n" .
                "X-PAYPAL-REQUEST-DATA-FORMAT: JSON\r\n" .
                "X-PAYPAL-RESPONSE-DATA-FORMAT: JSON\r\n",
          "content" =&gt; $request
        )
    );

    $context = stream_context_create($context_options); //create context for file_get_contents
    $response = file_get_contents($this-&gt;_endPoint, false, $context); //make the request

    $responseArray = array();
    parse_str($response, $responseArray); //convert the response string to an array
    return $responseArray;

}
</code></pre>

<p>  }
}
?>
```</p>

<h3>API Methods</h3>

<p>Before we dive into actually making an API request its important that we first understand the API methods that we will actually use. In this tutorial were only going to use 3 methods: SetExpressCheckout, GetExpressCheckoutDetails, and DoExpressCheckoutPayment. Were going to use these methods to create an application that accepts payments using Paypal.</p>

<h4>SetExpressCheckout</h4>

<p>The <code>SetExpressCheckout</code> method allows you to initiate an express checkout transaction. This is the easiest way to implement a payment operation in your application. What this does is to generate a unique token that can be appended into the paypal URL which is used for making payments. The URL to be used for sandbox and live are different so you have to make sure that the URL that you&rsquo;re using corresponds to the current API endpoint that you&rsquo;re using:</p>

<ul>
<li><strong>sandbox</strong> &ndash; <a href="https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN">https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN</a></li>
<li><strong>live</strong> &ndash; <a href="https://www.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN">https://www.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN</a></li>
</ul>


<p>The <code>SetExpressCheckout</code> method requires the following parameters:</p>

<ul>
<li><p><strong>METHOD</strong> &ndash; must be set to <code>SetExpressCheckout</code></p></li>
<li><p><strong>RETURNURL</strong> &ndash; this is the URL where the buyer will be redirected after a successful payment</p></li>
<li><strong>CANCELURL</strong> &ndash; this is the URL where the buyer will be redirected if he doesn&rsquo;t accept to make the payment</li>
<li><strong>NOSHIPPING</strong> &ndash; you can use this to specify if shipping information is enabled or not. If the customer is paying for a specific service that doesn&rsquo;t require shipping then you can simply set the value to <code>1</code></li>
<li><p><strong>ALLOWNOTE</strong> &ndash; you can use this to specify if notes are allowed. You can set this to <code>0</code> if you don&rsquo;t want buyers to send a note along with the payment information. Otherwise set it to <code>1</code></p></li>
<li><p><strong>PAYMENTREQUEST_0_AMT</strong> &ndash; the total cost of the product or service. If you have more than one item then the value for this parameter should be the total of those items. Note that any value that you supply for any parameter that requires an amount should be expressed in 2 decimal places. So if the item is worth 25 dollars then it should be written as <code>25.00</code>.</p></li>
<li><strong>PAYMENTREQUEST_0_SHIPPINGAMT</strong> &ndash; the shipping cost. If the <code>NOSHIPPING</code> is set to <code>1</code> then there&rsquo;s no need to supply a value for this parameter</li>
<li><p><strong>PAYMENTREQUEST_0_ITEMAMT</strong> &ndash; the cost of the product or service. Note that if you have more than one product you can simply set this to <code>PAYMENTREQUEST_1_ITEMAMT</code>, <code>PAYMENTREQUEST_2_ITEMAMT</code> and so on. Just be sure to get the total of the values that you supplied to those parameters</p></li>
<li><p><strong>PAYMENTREQUEST_0_CURRENCYCODE</strong> &ndash; the currency in which the <code>PAYMENTREQUEST_0_AMT</code> and <code>PAYMENTREQUEST_0_ITEMAMT</code> is expressed. Here&rsquo;s a <a href="https://developer.paypal.com/docs/classic/api/currency_codes/">list of currency codes</a> that you can use. If you don&rsquo;t specify a value for this parameter the default value of <code>USD</code> will be used.</p></li>
<li><p><strong>L_PAYMENTREQUEST_0_NAME0</strong> &ndash; the name of the product or service</p></li>
<li><strong>L_PAYMENTREQUEST_0_DESC0</strong> &ndash; the description of the product or service</li>
<li><strong>L_PAYMENTREQUEST_0_AMT0</strong> &ndash; the cost of the product or service</li>
<li><strong>L_PAYMENTREQUEST_0_QTY0</strong> &ndash; the quantity of the product or service</li>
</ul>


<p>After a successfull request it returns the following response:</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that can be appended to the URL of the paypal website where the payment can be made.</li>
</ul>


<h4>GetExpressCheckoutDetails</h4>

<p>The <code>GetExpressCheckoutDetails</code> method is used for getting additional information regarding a specific express checkout transaction. This is called after a payment has successfully been made through the paypal website. This happens when paypal successfully redirects to the <code>RETURNURL</code> that we specified in the <code>SetExpressCheckout</code> method.</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that paypal has appended to the return URL. You can get the token by using <code>$_GET['token']</code>.</li>
</ul>


<p>After a successful request paypal returns a bunch of information regarding the payment. This includes information about the transaction itself and some payer information. Check out the <a href="https://developer.paypal.com/docs/classic/api/merchant/GetExpressCheckoutDetails_API_Operation_NVP/">official documentation</a> if you want to see a full list of the response objects returned from calling the <code>GetExpressCheckoutDetails</code> method.</p>

<h4>DoExpressCheckoutPayment</h4>

<p>The <code>DoExpressCheckoutPayment</code> method is used for completing the express checkout transaction. You might think that once the payment has been made its already completed but actually its not. The transaction isn&rsquo;t actually completed unless the payment is confirmed on both sides (paypal and your website).</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that paypal has appended to the return URL. Yes this is the same as the token that you used for the <code>GetExpressCheckoutDetails</code> method.</li>
<li><strong>PAYMENTREQUEST_n_PAYMENTACTION</strong> &ndash; specifies how you want to obtain the payment. There are 3 possible values for this: <code>Authorization</code>, <code>Order</code>, and <code>Sale</code>. In most cases the value used here is <code>Sale</code>.</li>
<li><strong>PAYERID</strong> &ndash; the unique ID of the buyer. This information is also appended in the return URL, you can get it by using <code>$_GET['PayerID']</code></li>
<li><strong>PAYMENTREQUEST_0_AMT</strong> &ndash; this should be the same as the value you supplied in the <code>PAYMENTREQUEST_0_AMT</code> parameter on the <code>SetExpressCheckout</code> method.</li>
<li><strong>PAYMENTREQUEST_0_CURRENCYCODE</strong> &ndash; this should be the same as the value you supplied in the <code>PAYMENTREQUEST_0_CURRENCYCODE</code> parameter on the <code>SetExpressCheckout</code> method.</li>
</ul>


<p>After a successful request the express checkout transaction is now completed.</p>

<h3>Making API Requests</h3>

<p>Now were ready to actually make requests to the API. First include the file where the Paypal class is located. Then create a new object for the Paypal class:</p>

<p>```
&lt;?php
require &lsquo;Paypal.php&rsquo;;</p>

<p>//get credentials from DB
$credentials = $db->get(&ldquo;tbl_credentials&rdquo;, &ldquo;paypal&rdquo;);
extract($credentials);</p>

<p>$paypal = new Paypal($user, $pass, $signature, $paypal_server);</p>

<p>if(empty($<em>GET[&lsquo;TOKEN&rsquo;]) &amp;&amp; empty($</em>GET[&lsquo;PayerID&rsquo;])){</p>

<pre><code>$request_params = array(
   'RETURNURL' =&gt; $success_url,
   'CANCELURL' =&gt; $cancel_url,
   'NOSHIPPING' =&gt; '1',
   'ALLOWNOTE' =&gt; '1'
);  

$order_params = array(
   'PAYMENTREQUEST_0_AMT' =&gt; $amount,
   'PAYMENTREQUEST_0_ITEMAMT' =&gt; $amount,
   'PAYMENTREQUEST_0_CURRENCYCODE' =&gt; $currency
);

$item = array(
   'L_PAYMENTREQUEST_0_NAME0' =&gt; 'Oldies Anime Collection',
   'L_PAYMENTREQUEST_0_DESC0' =&gt; 'old anime',
   'L_PAYMENTREQUEST_0_AMT0' =&gt; $amount,
   'L_PAYMENTREQUEST_0_QTY0' =&gt; '1'
);  

//initiate express checkout transaction
$response = $paypal-&gt;request('SetExpressCheckout', $request_params + $order_params + $item);

if(is_array($response) &amp;&amp; $response['ACK'] == 'Success'){
    $token = $response['TOKEN'];
    //redirect to paypal where the buyer will make his payment
    header('Location: https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=' . $token);
}
</code></pre>

<p>}else{</p>

<pre><code>//after a successful redirect, complete the express checkout transaction
$request_params = array(
    'TOKEN' =&gt; $_GET['token'],
    'PAYMENTACTION' =&gt; 'Sale',
    'PAYERID' =&gt; $_GET['PayerID'],
    'PAYMENTREQUEST_0_AMT' =&gt; $amount, 
    'PAYMENTREQUEST_0_CURRENCYCODE' =&gt; $currency
);

$response = $paypal-&gt;request('DoExpressCheckoutPayment', $request_params);

if(is_array($response) &amp;&amp; $response['ACK'] == 'Success'){
    //commit the transaction in your database
}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>In this tutorial you&rsquo;ve learned the basics of making API requests to the Paypal API. We have specifically used the Merchant API. But there are other Paypal APIs which we can use for different use cases.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developer.paypal.com/docs/classic/api/gs_PayPalAPIs/">Paypal Classic API Getting Started Guide</a></li>
<li><a href="https://developer.paypal.com/docs/classic/api/">Paypal Classic API Reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Security Best Practices]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/12/15/php-security-best-practices/"/>
    <updated>2013-12-15T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/12/15/php-security-best-practices</id>
    <content type="html"><![CDATA[<p>In this post were going to have a look at some of the best practices in PHP when it comes to security.</p>

<p><blockquote><p>Disclaimer: I am not a security expert. This guide is purely based on the practices that I&rsquo;m currently following that I believe to be secure. I&rsquo;ve done a lot of research before putting any of the information here. But if you find something that you consider to be insecure please do share in the comments.</p></blockquote></p>

<h3>Always Update</h3>

<p>If possible always use the latest stable release of PHP because it contains some security updates and bug fixes. This will make applications written on top of it more secure.</p>

<h3>Secure Configuration</h3>

<ul>
<li>Disable exposure of which PHP version your server is using. You can do it by searching for <code>expose_php</code> in your <code>php.ini</code> file and set it to <code>Off</code>:</li>
</ul>


<p><code>
expose_php = Off
</code></p>

<p>This will disable the inclusion of the PHP version in the response headers under the <code>X-Powered-By</code> attribute.
Here&rsquo;s an example of a site which has set <code>expose_php</code> to <code>On</code>. As you can see the value <code>X-Powered-By</code> attribute is <code>PHP/5.4.17</code> so we pretty much know which PHP version the server is running. An attacker can use this information to exploit the security vulnerabilities of this specific PHP version.</p>

<p><img src="/images/posts/php_security_best_practices/response_headers.png" alt="response headers" /></p>

<ul>
<li><p>Make sure that you don&rsquo;t have any files in your server that calls the <code>phpinfo()</code> function. If you want to make use of it, make sure the filename can&rsquo;t easily be guessed like <code>phpinfo.php</code> and don&rsquo;t store it on the root of your web accessible directory. Don&rsquo;t forget to delete it once you&rsquo;re done.</p></li>
<li><p>Log errors instead of displaying them. Errors, notices and warnings in your web application can provide valuable information to attackers such as filenames and the name of fields that you used on your tables. Make sure you set the following in your <code>php.ini</code> file:</p></li>
</ul>


<p><code>
display_startup_errors = Off #disable displaying of startup errors
display_errors = Off #disable displaying of errors
html_errors = Off #disable formatting of errors in HTML
error_reporting = E_ALL &amp; ~E_DEPRECATED &amp; ~E_STRICT #report all errors, warnings and notices including coding standards
log_errors = On #log errors to a file
</code></p>

<ul>
<li>Disable file uploads when not needed.</li>
</ul>


<p><code>
file_uploads = Off
</code></p>

<p>If your web application has a file upload feature then you need to make sure that you know some of the best practices in securing file uploads. Here&rsquo;s a good article from Sitepoint on <a href="http://www.sitepoint.com/file-uploads-with-php/">how to create a secure file upload in PHP</a>. You can also make use of a library that&rsquo;s specifically created for handling file uploads such as the <a href="https://packagist.org/packages/codeguy/upload">Upload library from Josh Lockhart(Codeguy)</a>.</p>

<ul>
<li>Disable remote file execution. If you don&rsquo;t need to use functions such as <code>fopen</code>, <code>fsockopen</code> or <code>file_get_contents</code> then you can just set <code>allow_url_fopen</code> to <code>Off</code>. <code>Curl</code> can provide with similar functionality so most of the time you won&rsquo;t really need it.</li>
</ul>


<p><code>
allow_url_fopen = Off #disables processing of urls
allow_url_include = Off #disable including of urls to files (e.g include 'http://iamanevilfile.php')
</code></p>

<ul>
<li>Limit the maximum size of POST data to a value that you think is enough for your web application needs. This is to prevent attackers from flooding your web application by POSTing huge amounts of data. Note that this can be expressed in kilo (K), mega (M) or giga (G).</li>
</ul>


<p><code>
post_max_size = 10M
</code></p>

<p>Do note that the value that you set for <code>post_max_size</code> should be larger than the <code>upload_max_filesize</code> since uploaded files are also submitted via POST.</p>

<p><code>
upload_max_filesize = 5M
</code></p>

<p><code>memory_limit</code> should also be larger than the <code>post_max_size</code>.</p>

<p><code>
memory_limit = 25M
</code></p>

<ul>
<li>Limit maximum input time. This will limit the amount of time for PHP to parse input data from either <code>$_POST</code> or <code>$_GET</code>.
Note that the value is expressed in seconds.`</li>
</ul>


<p><code>
max_input_time = 5
</code></p>

<ul>
<li>Limit maximum execution time to a reasonable value. This will automatically terminate a running PHP script once the maximum execution time is over. The default value of 30 seconds seems reasonable enough so in most cases you won&rsquo;t really need to change it.</li>
</ul>


<p><code>
max_execution_time = 30
</code></p>

<ul>
<li><p>Limit the use of shell functions such as <code>exec</code>, <code>passthru</code>, <code>shell_exec</code>, <code>proc_open</code>, and <code>popen</code>. If there&rsquo;s no other option for implementing something and you absolutely need to use it make sure that users of your web application will not be able to execute any system commands. If you need user input for executing system commands then make sure that you&rsquo;re validating the data correctly.</p></li>
<li><p>Only allow execution of PHP files on a specific directory. Preferably this should be the web accessible root directory.</p></li>
</ul>


<p><code>
open_basedir = /var/www/public_html
</code></p>

<ul>
<li>Set temporary upload directory to a path outside of the <code>open_base_dir</code>. This prevents files in the temporary upload directory from being executed.</li>
</ul>


<p><code>
upload_tmp_dir = /var/www/uploads/tmp
</code></p>

<ul>
<li>Make sure that your web accessible directory is set to <code>read-only</code>.</li>
</ul>


<p><code>
sudo chmod -R 0444 /var/www/public_html
</code></p>

<h3>Use CURL</h3>

<p>Always use the CURL extension when making requests to other servers especially if you&rsquo;re working with sensitive data.
This is because CURL by default makes requests securely over SSL/TLS (Secure Socket Layer/Transport Security Layer).
Here&rsquo;s an example on how to perform requests using CURL:</p>

<p><code>php
&lt;?php
$url = 'https://bitpay.com/api/invoice';
$req = curl_init($url);
curl_setopt($req, CURLOPT_RETURNTRANSFER, TRUE);
$response = curl_exec($req);
?&gt;
</code></p>

<p>Also make sure to set the following options when you&rsquo;re working with sensitive data:</p>

<ul>
<li><strong>CURLOPT_SSL_VERIFYPEER</strong> &ndash; should be set to <code>TRUE</code> always. This will tell CURL to check if the remote certificate of the server where you&rsquo;re performing a request is valid.</li>
<li><strong>CURLOPT_SSL_VERIFYHOST</strong> &ndash; should be set to <code>TRUE</code> always. This tells CURL to check that the Certificate was issued to the entity that you&rsquo;re requesting to.</li>
</ul>


<h3>Input Validation and Filtering</h3>

<p>Input validation is the first layer of defense when it comes to securing your PHP applications. User input should never be trusted thus we need to filter and validate. But first lets differentiate filtering from validation:</p>

<ul>
<li><p><strong>Filtering</strong> &ndash; also called sanitization. This is used for ensuring that the data is properly formatted before we try to validate. An example of filtering is removing whitespaces from a string or removing any invalid characters from an email address.</p></li>
<li><p><strong>Validation</strong> &ndash; the process of making sure that the data is what you expect it to be. For example if the web form asks for the age then you expect the age to be a number so the code must validate that what is inputted in the age field is indeed a number. And not just any number. If you expect the users who will fill out the form to be between ages 20 &ndash; 40 then you must also validate that the age that was inputted falls within that range. There are lots of things to consider when validating user input, as programmers its our duty to ensure that we&rsquo;ve covered most of the scenarios.</p></li>
</ul>


<h4>Filtering</h4>

<p>PHP comes with filtering functions that you can use to sanitize data before saving into the database.</p>

<ul>
<li><strong>addslashes</strong> &ndash; adds a backslash before a single quote (<code>'</code>), double quote (<code>"</code>), and NULL byte (<code>\</code>).</li>
<li><strong>filter_var</strong> &ndash; sanitizes strings based on the filters listed <a href="http://www.php.net/manual/en/filter.filters.sanitize.php">here</a></li>
<li><strong>htmlspecialchars</strong> &ndash; converts HTML strings into their corresponding entity.</li>
<li><strong>htmlentities</strong> &ndash; the same as <code>htmlspecialchars</code> the only difference is that <code>htmlentities</code> try to encode all characters which have HTML character entity equivalents. What this means is that you will have a much longer resulting string if the string that you&rsquo;re trying to use contains not only HTML but also characters which has an HTML entity equivalents.</li>
<li><strong>preg_replace</strong> &ndash; replaces all the string that matches the pattern that you specify.</li>
<li><strong>strip_tags</strong> &ndash; strips all HTML and PHP tags from the original string.</li>
<li><strong>trim</strong> &ndash; used for trimming leading and trailing whitespaces from the original string.</li>
</ul>


<p>What function you use depends on your specific needs. If you need to save a string into the database and you expect that there will be a single quote or double quote on that string then you should call <code>addslashes</code> before saving into the database. This ensures that you won&rsquo;t get any unexpected character errors when inserting the string.</p>

<h4>Validation</h4>

<p>PHP also comes with validation functions one of those is the <code>filter_var</code>. You can use it to validate different types of data:</p>

<ul>
<li><strong>FILTER_VALIDATE_BOOLEAN</strong> &ndash; used for validating if the value is either <code>true</code> or <code>false</code></li>
<li><strong>FILTER_VALIDATE_EMAIL</strong> &ndash; used for validating if the value is a valid email</li>
<li><strong>FILTER_VALIDATE_REGEXP</strong> &ndash; used for validating if the value matches a specific expression</li>
<li><strong>FILTER_VALIDATE_URL</strong> &ndash; used for validating if the value matches the accepted pattern of a URL</li>
<li><strong>FILTER_VALIDATE_INT</strong> &ndash; used for validating if the value is an integer</li>
<li><strong>FILTER_VALIDATE_FLOAT</strong> &ndash; used for validating if the value is a float or a decimal number</li>
<li><strong>FILTER_VALIDATE_IP</strong> &ndash; used for validating if the value is a valid IPv4 or IPv6 IP address</li>
</ul>


<p>Here&rsquo;s how to use the <code>filter_var</code> function to validate user input:</p>

<p>```php
&lt;?php
$email = filter_var($<em>POST[&lsquo;email&rsquo;], FILTER_VALIDATE_EMAIL);
$age = filter_var($</em>POST[&lsquo;age&rsquo;], FILTER_VALIDATE_INT);</p>

<p>if($email &amp;&amp; $age &amp;&amp; ($age >= 14 &amp;&amp; $age &lt;= 30)){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>Note that the <code>filter_var</code> function returns the original value that you specified as the first argument if the value is valid and returns <code>false</code> if its not valid.</p>

<p>There are also a bunch of PHP functions that checks for a specific data type and returns <code>true</code> if the value meets</p>

<ul>
<li><strong>is_array</strong> &ndash; checks if a variable contains an array.</li>
<li><strong>is_bool</strong> &ndash; checks if a variable contains a boolean value.</li>
<li><strong>is_double</strong> &ndash; checks if a variable contains a double.</li>
<li><strong>is_float</strong> &ndash; checks if a variable contains a floating point number.</li>
<li><strong>is_integer|is_long|is_int</strong> &ndash; checks if value is a valid integer. Note that this doesn&rsquo;t check for the data type since all user input is always in string so either the value <code>'1'</code> or simply <code>1</code> will pass.</li>
<li><strong>is_null</strong> &ndash; checks if a variable is <code>NULL</code></li>
<li><strong>is_numeric</strong> &ndash; checks if a value is a valid number, the main difference of this function with <code>is_int</code> is that it also checks for the data type so string numbers such as <code>'1'</code>, <code>'23'</code>, or <code>'14'</code> will return <code>false</code>.</li>
<li><strong>is_object</strong> &ndash; checks if a variable contains an object.</li>
<li><strong>is_resource</strong> &ndash; checks if a variable contains a resource.</li>
<li><strong>is_scalar</strong> &ndash; checks if a variable contains a scalar value.</li>
<li><strong>is_string</strong> &ndash; checks if a variable contains string.</li>
</ul>


<p>And there are also those that checks for the presence of a specific value:</p>

<ul>
<li><strong>isset</strong> &ndash; checks if a specific variable has been set or declared. Note that this disregards the actual value so if the variable in question doesn&rsquo;t have a value assigned to it (aka <code>undefined</code>) then it will still return <code>true</code>.</li>
<li><strong>empty</strong> &ndash; checks if a specific variable has a truthy value. Here&rsquo;s a good reference on this subject: <a href="http://www.php.net/manual/en/types.comparisons.php">type comparisons</a></li>
</ul>


<h4>Input Filtering and Validation Libraries</h4>

<p>Here are some libraries that you can use for input validation and filtering:</p>

<ul>
<li><a href="http://documentup.com/Respect/Validation/">Respect\Validation</a></li>
<li><a href="https://github.com/ircmaxell/filterus">Filterus</a></li>
<li><a href="https://github.com/vlucas/valitron">Valitron</a></li>
<li><a href="http://htmlpurifier.org/">HTML Purifier</a></li>
</ul>


<h3>Working with Databases</h3>

<h4>Limit User Privileges</h4>

<p>When working with databases its a good practice to not use the root user as the user of the database. Sometimes out of laziness we tend to use the default database user in MySQL when connecting to the database like this:</p>

<p><code>php
&lt;?php
$db = new Mysqli("localhost", "root", "", "my_db");
?&gt;
</code></p>

<p>This is not a good practice since the root user has the privilege to perform almost all the operations that you can perform in all of the database that&rsquo;s currently residing in the MySQL server. Selecting data, inserting new data, updating, deleting, truncating tables, dropping tables, dropping a whole database. All of these can be performed by the root user so a successful SQL injection attack can pretty much give an attacker the privilege to do all of these operations.</p>

<p>Limiting the user privileges is really simple. In the screenshot below I&rsquo;m using a tool called phpmyadmin to create a user that has only read privileges:</p>

<p><img src="/images/posts/php_security_best_practices/mysql-privileges.png" alt="mysql read privileges" /></p>

<p>While you&rsquo;re there you can also set resource limit to the user. Setting a reasonable resource limit reduces the possibility of malicious users flooding your database with lots of queries. Just be sure to do your research first before setting resource limits to a specific database user, you don&rsquo;t want the limit to run out on genuine users of your application:</p>

<p><img src="/images/posts/php_security_best_practices/resource-limits.png" alt="limit" /></p>

<p>Limiting user privileges effectively reduces the risk of a successful SQL injection attack. It means that even if an attacker manages to execute a query like the following:</p>

<p><code>
DROP TABLE tbl_users
</code></p>

<p>It won&rsquo;t be allowed by the database if the database user that was used doesn&rsquo;t have a privilege to drop a table.
But what if an attacker successfully gains access to a database user that has all the privileges to make a successful attack? For example a System Administrator user account has been hacked and now the attacker can simply use SQL injection to do all sorts of evil stuff with the database. That&rsquo;s where the use of PDO and prepared statements comes in.</p>

<h4>Use PDO Or MySQLi</h4>

<p>Use the PDO or MySqli extension when building applications that connect to the MySQL database. The original PHP MySQL API is already deprecated and therefore no longer recommended. Using PDO or MySqli will give you the benefit of using parametrized queries which effectively reduces the risk of SQL injection attacks if used correctly. Here&rsquo;s an example on how to perform database queries using PDO:</p>

<p>```php
&lt;?php
$user_id = $_GET[&lsquo;id&rsquo;];
if(is_int($user_id)){ //check if id is an integer</p>

<pre><code>try{
    $conn = new PDO("mysql:host=localhost;dbname=my_db", $_SERVER['db_user'], $_SERVER['db_password']);
    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); //tell PDO to throw exceptions  

    $sql = $conn-&gt;prepare("SELECT username, role FROM tbl_users WHERE user_id = :user_id");
    $sql-&gt;bindParam(':user_id', $user_id, PDO::PARAM_INT); //safely substitute the placeholder(:user_id) to the real value ($_GET['id'])
    $sql-&gt;execute(); //execute the query

    $user = $sql-&gt;fetch();
    echo $user['username'];

}catch(PDOException $e){
    log_exception($e-&gt;getMessage()); //log the exception, don't echo 
}
</code></pre>

<p>}
?>
```</p>

<p>How does PDO make things more secure you ask? Its more secure in the sense that it sends the query and data (user input) separately to MySQL. So what happens is that the SQL string that you supplied as the argument for the <code>prepare</code> method is parsed and then later on using <code>bindParam</code> the placeholder is safely substituted to the user input. Finally the query is executed. In simple terms MySQL considers every user input as a string with no meaning when PDO is used so SQL injection is effectively prevented.</p>

<p>If you want to learn more about PDO be sure to check out the <a href="http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers">PDO tutorial for MySQL Developers</a></p>

<h4>Storing Passwords</h4>

<p>One more thing to consider when working with databases is how to safely store passwords. You probably already know that its a bad practice to simply store passwords in plain text. Because this means that when attackers were successfully able to dump the contents of a user table then they will basically have access to all of the users information which includes things such as credit card numbers, favorite TV show or the name of your first crush.</p>

<p>And it might already be old news to you but these functions for hashing passwords isn&rsquo;t that safe as attackers can use brute force attack or rainbow tables in order to determine a password:</p>

<ul>
<li><strong>md5</strong></li>
<li><strong>sha1</strong></li>
</ul>


<p>You can use the following functions instead:</p>

<ul>
<li><strong>hash_pbkdf2</strong></li>
<li><strong>crypt</strong></li>
<li><strong>password_hash</strong></li>
</ul>


<p>Note that some of the hashing functions like <code>hash_pbkdf2</code> and <code>password_hash</code> are only available on PHP 5.5. <code>crypt</code> is available on PHP 4 and 5.</p>

<p>Here are some examples on how to use each of the above hashing methods:</p>

<p>```php
&lt;?php
$password = &lsquo;mySupeRandomPassword&rsquo;; //note: don&rsquo;t use a password like this</p>

<p>//using hash_pbkdf2
$salt = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM); //generate a random salt
$iterations = &lsquo;1525&rsquo;;
$hash = hash_pbkdf2(&ldquo;sha256&rdquo;, $password, $salt, $iterations, 30); //hashing algorithm, raw password, random salt, iterations, hash length</p>

<p>//using crypt
$salt = mcrypt_create_iv(20, MCRYPT_DEV_URANDOM); //generate a random salt
$hash = crypt($password, $salt); //raw password, random salt</p>

<p>//using password_hash
$hash = password_hash($password, PASSWORD_DEFAULT); //PASSWORD_DEFAULT uses the Bcrypt alogrithm, you can also use PASSWORD_BCRYPT if you want to use the CRYPT_BLOWFISH algorithm for hashing the password
?>
```</p>

<p>You can implement the <code>hash_pbkdf2</code> method by storing both the hash and the salt in a single field (prepend the salt to the hash).</p>

<p>```php
&lt;?php
//verifying using hash_pbkdf2
$password = $_POST[&lsquo;password&rsquo;];</p>

<p>/<em>
get hash and salt from database
</em>/</p>

<p>$hash = hash_pbkdf2(&ldquo;sha256&rdquo;, $password, $salt_from_db, $iterations, 30);
if($hash_from_db == $hash){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>Some people say that you should store your salt strings to a database separate from the database where you store your hashes. Maybe this is true if you don&rsquo;t use random salts for each of the passwords. An attacker would still have difficulty in cracking a password even if he has access to both salt and hash as long as the salt is random for each user.</p>

<p>For <code>crypt</code> and <code>password_hash</code> there&rsquo;s no need to store the random salts separately since you can verify if the password is valid without specifying the salt that was used:</p>

<p>```php
&lt;?php
//verifying using crypt
$password = $_POST[&lsquo;password&rsquo;];</p>

<p>/<em>
get hash from database
</em>/</p>

<p>if(crypt($password, $hash) == $hash){ //check if password is valid</p>

<pre><code>//do something
</code></pre>

<p>}</p>

<p>//verifying using password hash
if(password_verify($password, $hash)){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>Note that you can also use the <code>password_verify</code> method for verifying hashes that are created by using the <code>crypt</code> method <code>password_hash</code> and <code>crypt</code> methods as they both use the <a href="http://en.wikipedia.org/wiki/Crypt_(C">C Crypt Scheme</a>).</p>

<p>You can also use password hashing libraries like <a href="https://github.com/hautelook/phpass/">PHPAss</a> or <a href="https://github.com/ircmaxell/password_compat">Password-Compat</a> if you want. The main benefit of using libraries is that they&rsquo;re often compatible with lower PHP versions but are still secure. Here&rsquo;s an example on how to use each of those:</p>

<p>```php
&lt;?php
//using password-compat
require &lsquo;vendor/ircmaxell/password-compat/lib/password.php&rsquo;;
$hash = password_hash($password, PASSWORD_BCRYPT);</p>

<p>//verifying
if(password_verify($password, $hash)){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>```php
&lt;?php
//using PHPAss
$cost = 8; //algorithmic cost that should be used, you can play around this value but this is mostly dependent on your servers hardware
$portable_hash = false; //do not store salts along with hash
$phpass = new PasswordHash($cost, $portable_hash);</p>

<p>$hash = $phpass->HashPassword($password);</p>

<p>//verifying
if($phpass->CheckPassword($password, $hash)){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>Note that the password-compat library uses the same syntax as the password hashing method <code>password_hash</code> in PHP 5.5. But this library works for PHP 5.3.7 and above. So this library is intended for providing forward compatibility to PHP versions lower than 5.5. This means that there&rsquo;s no real need to use this library if you&rsquo;re already using PHP 5.5.</p>

<p>Other things to remember when storing passwords:</p>

<ul>
<li>Do not email or log passwords if your users forgot their password just email them a link that will allow them to update their password.</li>
<li>Do not store passwords in plain text (yeah I know I said this already)</li>
<li>Use random password salts</li>
<li>Do not limit the length of passwords that can be entered by your users</li>
<li>Encourage your users to use long, secure and random passwords by implementing password strength meters on the front-end of your application. Passwords doesn&rsquo;t really need to be memorable as users can pretty much use password managers like <a href="http://keepass.info/">keepas</a> to store their passwords.</li>
</ul>


<h3>Working with Uploaded Files</h3>

<p>When working with uploaded files do not use the <code>$_FILE</code> super global in determining the type of the file as the can be easily spoofed by simply changing the file extension:</p>

<p>```php
&lt;?php
if($_FILES[&ldquo;file&rdquo;][&ldquo;type&rdquo;] == &lsquo;jpg&rsquo;){</p>

<pre><code>//do something with the file
</code></pre>

<p>}
?>
```</p>

<p>Use the <code>finfo</code> class to determine the actual mime type of a file instead. This is slower than simply checking the file type from the <code>$_FILE</code> super global but it does the job of determinining the real file type:</p>

<p><code>php
&lt;?php
$file_info = new finfo(FILEINFO_MIME_TYPE);
$file_contents = file_get_contents($_FILES['iamnotanevilfile']['tmp_name']);
$mime_type = $file_info-&gt;buffer($file_contents);
//this will return any valid mime type listed here: http://en.wikipedia.org/wiki/Internet_media_type
?&gt;
</code></p>

<p>Better yet use a library that&rsquo;s especially created for this type of task like the <a href="https://github.com/codeguy/Upload">upload library</a> by Josh Lockhart. Here&rsquo;s how you can use it to verify that the file that was uploaded is an image file that&rsquo;s not greater than 2 MB in size.</p>

<p>```html
<form method="POST" enctype="multipart/form-data"></p>

<pre><code>&lt;input type="file" name="some_file" value=""/&gt;
&lt;input type="submit" value="Upload File"/&gt;
</code></pre>

<p></form>
```</p>

<p>```php
&lt;?php
$upload_path = new \Upload\Storage\FileSystem(&lsquo;/upload_path&rsquo;);
$file = new \Upload\File(&lsquo;some_file&rsquo;, $upload_path);</p>

<p>$image_types = array(&lsquo;image/gif&rsquo;, &lsquo;image/png&rsquo;, &lsquo;image/jpeg&rsquo;, &lsquo;image/bmp&rsquo;);</p>

<p>$file->addValidations(array(</p>

<pre><code>new \Upload\Validation\Mimetype($image_types), //can also supply a string
new \Upload\Validation\Size('2M') //size should be 2 MB or less, you can also use B, K, G as the size unit
</code></pre>

<p>));</p>

<p>//try to upload the file
try{</p>

<pre><code>$file-&gt;upload(); //the file is uploaded if it successfully pass through the validation
</code></pre>

<p>}catch(\Exception $e){</p>

<pre><code>$errors = $file-&gt;getErrors(); //the file upload failed
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>In this article you&rsquo;ve learned some of the basic ways you can add security to your PHP projects. We&rsquo;ve barely scratch the surface with this guide. There&rsquo;s a lot more you can do to improve the security of the applications that you&rsquo;re writing. Be sure to check out the resources below if you want to learn more about securing PHP applications.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet">OWASP PHP Security Cheat Sheet</a></li>
<li><a href="http://phpsecurity.readthedocs.org/">Survive the Deep End: PHP Security</a></li>
<li><a href="http://www.php.net/manual/en/security.php">PHP.Net Security Manual</a></li>
<li><a href="http://phpsec.org/">PHP Security Guide</a></li>
<li><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html">PHP Security Best Practices for Sys Admins</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Bitpay API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/12/01/getting-started-with-bitpay-api/"/>
    <updated>2013-12-01T11:49:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/12/01/getting-started-with-bitpay-api</id>
    <content type="html"><![CDATA[<p>Bitcoin is really trending these days with its value now over <a href="http://www.extremetech.com/extreme/171762-bitcoin-hits-1000-but-how-far-can-it-go">$1000 per coin</a>. I think its timely to explore some of the services which uses Bitcoin as a form of payment. Last time I also showed you how to <a href="http://anchetawern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/">get started with the Coinbase API</a> which is also another service which allows you to use Bitcoins as a means of payment for goods and services. This time we will be exploring Bitpay. But first lets determine what&rsquo;s the difference between the Coinbase and Bitpay. Here&rsquo;s a really good answer to <a href="http://bitcoin.stackexchange.com/questions/7544/what-are-the-differences-and-similarities-among-paymium-bitpay-coinbase-etc">this question</a>:</p>

<p><blockquote><p>BitPay is a payment processor for E-Commerce as well as for bricks and mortar / point-of-sale. This allows a business to accept bitcoins for payment and the proceeds are delivered to the merchant as directed. This could be 100% fiat (e.g., all bitcoin sales get converted to USDs immediately, or a mix, .. like 30% USD, 70% BTCs, etc.) The currently can send payments to merchants in U.S., Mexico, Canada and several nations in Europe.</p></blockquote></p>

<p><blockquote><p>Coinbase is an EWallet provider and provides a service for buying and selling bitcoins. They do not operate a market, but instead use the exchange rate from the leading exchange (Mt. Gox) for customer buying and selling. They charge just 1% to buy or sell, but they have low limits (i.e., buy a max of $100 USD per-day) for new customers still in the 30-day probationary period.</p></blockquote></p>

<p>So what service you use basically depends on what you need.</p>

<h3>Signing Up</h3>

<p>First you need to <a href="https://bitpay.com/start">sign up at Bitpay</a> in order to get an API key which you can use for interacting with their API. Bitpay is really strict when it comes to the registration so you really have to provide real information about your business so that you can actually confirm it when they need some confirmation.</p>

<h3>Connecting to Bitpay API</h3>

<p>The Bitpay API only requires basic HTTP authentication so the process of connecting to the API is really simple.
All you have to do is to call the <code>base64_encode()</code> method on the API key that you acquire from Bitpay and then pass it as one of the HTTP header fields. Under the <code>Authorization</code> field use <code>Basic</code> followed by the base 64 encoded string representation of the API key. Here&rsquo;s how to do it using <code>file_get_contents()</code>:</p>

<p>```php
&lt;?php
$user = base64_encode($api_key);</p>

<p>$context_options = array(</p>

<pre><code>"http" =&gt; array(
    "method" =&gt; $method,
    "header"  =&gt; "Content-type: application/json\r\n" . 
        "Content-Length: $length\r\n" .
        "Authorization: Basic $user\r\n"
)
</code></pre>

<p>);</p>

<p>$context = stream_context_create($context_options);</p>

<p>//the $url here is the API resource that you&rsquo;re trying to request from
$response = file_get_contents($url, false, $context);
$response = json_decode($response, true);
?>
```</p>

<h3>Creating an Invoice</h3>

<p>You can create an Invoice via by using the following resource in the Bitpay API:</p>

<p><code>
https://bitpay.com/api/invoice
</code></p>

<p>Then passing in all the fields required by the resource:</p>

<ul>
<li><strong>price</strong> &ndash; the price of the service or good.</li>
<li><strong>currency</strong> &ndash; any valid currency short name (USD, GBP, EUR, JPY). Here&rsquo;s a <a href="http://www.casi.org.uk/info/1051list/annexd.html">full list of valid currency short names</a>. This will be automatically converted to the corresponding value in Bitcoins (BTC) depending on the <a href="https://bitpay.com/bitcoin-exchange-rates">current Bitcoin exchange rates</a>.</li>
</ul>


<p>You can also pass in some optional fields:</p>

<ul>
<li><strong>posData</strong> &ndash; this is normally used for passing in some additional information regarding the service or good that a customer is trying to purchase</li>
<li><p><strong>notificationURL</strong> &ndash; the URL that will be pinged by Bitpay everytime the transaction status changes. Note that a change from <code>new</code> to <code>expired</code> doesn&rsquo;t count as a transaction status change. Bitpay will only ping the URL when the transaction status changes from <code>new</code> to <code>paid</code>, <code>confirmed</code>, or<code>complete</code>.</p></li>
<li><p><strong>transactionSpeed</strong> &ndash; this can be set to <code>high</code>, <code>medium</code> or <code>low</code>. High means that the invoice is considered to be confirmed after a payment has been received. Medium means it will be considered confirmed after 10 minutes. And low means it will be considered confirmed after an hour.</p></li>
<li><p><strong>fullNotifications</strong> &ndash; this can be set to <code>true</code> or <code>false</code>. If you want Bitpay to notify via email or via the notification url that you have set every time the transaction status changes then use <code>true</code>. If you only want Bitpay to notify once the transaction status becomes confirmed then set to <code>false</code>.</p></li>
<li><p><strong>notificationEmail</strong> &ndash; the email address that Bitpay will notify on every transaction status change.</p></li>
<li><strong>redirectURL</strong> &ndash; the URL in which Bitpay will display in the receipt after a payment has been made.</li>
</ul>


<p>And here are some fields which you can use to supply information regarding the product or the customer:</p>

<ul>
<li><strong>orderID</strong></li>
<li><strong>itemDesc</strong></li>
<li><strong>itemCode</strong></li>
<li><strong>physical</strong></li>
<li><strong>buyerName</strong></li>
<li><strong>buyerAddress1</strong></li>
<li><strong>buyerAddress2</strong></li>
<li><strong>buyerCity</strong></li>
<li><strong>buyerState</strong></li>
<li><strong>buyerZip</strong></li>
<li><strong>buyerCountry</strong></li>
<li><strong>buyerEmail</strong></li>
<li><strong>buyerPhone</strong></li>
</ul>


<h3>Invoice Status</h3>

<p>The invoice status is the status of the invoice at any given time. Here are some of the invoice states:</p>

<ul>
<li><strong>new</strong> &ndash; Initially the invoice status is <code>new</code>. This means that someone can still initiate a payment to the Bitcoin address that is associated with the invoice.</li>
<li><strong>paid</strong> &ndash; when an invoice becomes fully paid its status changes to <code>paid</code></li>
<li><strong>confirmed</strong> &ndash; an invoice is considered confirmed depending on the transaction speed that was set on the creation of invoice. If the transaction speed is set to low then it will be confirmed after an hour or 6 blocks in the Bitcoin network, if the transaction speed is set to medium then it will be confirmed after 1 block (10 minutes) in the Bitcoin network, if its set to high then it will be confirmed right after full payment has been made.</li>
<li><strong>complete</strong> &ndash; this means that Bitpay has credited the merchant&rsquo;s account for the invoice.</li>
<li><strong>expired</strong> &ndash; this means that no payment has been received after the 15 minute limit alloted by Bitpay.</li>
<li><strong>invalid</strong> &ndash; this means that the invoice has been paid but has not been confirmed after an hour.</li>
</ul>


<p>Now were ready to actually make a request to the Bitpay API. You can start by downloading the official <a href="https://github.com/bitpay/php-client">PHP client</a> provided by Bitpay for interacting with the Bitpay API. There&rsquo;s also a <a href="https://github.com/bitpay/ruby-client">Ruby</a> and <a href="https://github.com/bitpay/nodejs-client">Node.js</a> client if you&rsquo;re developing for those.</p>

<p>Once you&rsquo;ve downloaded it on your working directory open up the <code>bp_options.php</code> file and supply a value for the <code>apiKey</code>, <code>currency</code> or any of the optional fields that you would like to supply.</p>

<p>Create a new PHP file which we will be using to call the methods from <code>bp_lib.php</code>. To create an invoice call the <code>bpCreateInvoice()</code> method. It needs 4 arguments. The first one is the order ID which we will just supply <code>null</code> since we really don&rsquo;t have a system for generating order IDs. The second is the amount or the cost of the product or service.
The third is the optional post data in which we can provide additional information for the product or service in key-value pairs. The fourth is the additional options which is primarily used for supplying information regarding the product or the customer.</p>

<p>```
&lt;?php
require &lsquo;bp_lib.php&rsquo;;</p>

<p>$amount = 10;
$post_data = array(</p>

<pre><code>'name' =&gt; 'excalibur',
'level' =&gt; '999'
</code></pre>

<p>);
$addl_options = array(</p>

<pre><code>'itemDesc' =&gt; 'Anime Figurine'
</code></pre>

<p>);</p>

<p>$response = bpCreateInvoice(null, $amount, $post_data, $addl_options);                <br/>
if(!empty($response)){</p>

<pre><code>//do something
</code></pre>

<p>}
?>
```</p>

<p>Bitpay returns a response similar to the following:</p>

<p>```
Array
(</p>

<pre><code>[id] =&gt; xxx
[url] =&gt; https://bitpay.com/invoice?id=xxx
[posData] =&gt; {"posData":{"name":"excalibur","level":999},"hash":"xxxx-xx"}
[status] =&gt; new
[btcPrice] =&gt; 0.0009
[price] =&gt; 1
[currency] =&gt; USD
[invoiceTime] =&gt; 1385885490958
[expirationTime] =&gt; 1385886390958
[currentTime] =&gt; 1385885491133
</code></pre>

<p>)
```</p>

<ul>
<li><strong>id</strong> &ndash; the unique id of the invoice</li>
<li><strong>url</strong> &ndash; the URL in which the invoice can be viewed</li>
<li><strong>posData</strong> &ndash; the additional data that we provided earlier</li>
<li><strong>status</strong> &ndash; the invoice status</li>
<li><strong>btcPrice</strong> &ndash; the corresponding amount in Bitcoins of the amount supplied earlier</li>
<li><strong>price</strong> &ndash; the amount that was supplied earlier when the invoice was created</li>
<li><strong>currency</strong> &ndash; the currency of the price</li>
<li><strong>invoiceTime</strong> &ndash; the time the invoice was created since January 1, 1970 midnight. This is in a UNIX timestamp format.</li>
<li><strong>expirationTime</strong> &ndash; the time in which the invoice will expire. When the invoice expires payments can no longer be accepted.</li>
<li><strong>currentTime</strong> &ndash; the current time in the Bitpay server. This is primarily used for determining the time remaining before the invoice expires.</li>
</ul>


<p>Accessing the invoice URL will give you a page similar to the following:</p>

<p><img src="/images/posts/getting_started_with_bitpay/bitpay-donation.png" alt="invoice url" /></p>

<p>Customers can then use a Bitcoin client such as <a href="http://bitcoin.org/en/download">Bitcoin Qt</a>, <a href="http://electrum.org/">Electrum</a>, <a href="https://multibit.org/">Multibit</a>, or <a href="https://bitcoinarmory.com/">Armory</a> to pay you the merchant.</p>

<h3>Getting Invoice Status</h3>

<p>You can also get the status of an invoice by calling the <code>bpGetInvoice()</code> method and supplying the invoice ID as the argument:</p>

<p><code>php
&lt;?php
$invoice = bpGetInvoice('85AHEqCRaT2aZ3xAMpK8fQ');
?&gt;
</code></p>

<p>The method will return something like this:</p>

<p>```
Array
(</p>

<pre><code>[id] =&gt; xxx
[url] =&gt; https://bitpay.com/invoice?id=xxx
[posData] =&gt; Array
    (
        [name] =&gt; excalibur
        [age] =&gt; 27
    )

[status] =&gt; new
[btcPrice] =&gt; 0.0009
[price] =&gt; 1
[currency] =&gt; USD
[invoiceTime] =&gt; 1385885490958
[expirationTime] =&gt; 1385886390958
[currentTime] =&gt; 1385886420720
</code></pre>

<p>)
```</p>

<p>Its basically the same as the response that we get when creating an invoice.</p>

<h3>Bitpay Class</h3>

<p>Before I end this tutorial here&rsquo;s the modified version of the Bitpay client provided by Bitpay that works with servers without CURL support:</p>

<p>```php
&lt;?php
class Bitpay{</p>

<pre><code>private $options;

public function __construct($options){
    $this-&gt;options = $options;
}

public function bpLog($contents){
    $file = dirname(__FILE__).'/bplog.txt';
    file_put_contents($file, date('m-d H:i:s').": ", FILE_APPEND);

    if (is_array($contents))
        $contents = var_export($contents, true);    
    else if (is_object($contents))
        $contents = json_encode($contents);

    file_put_contents($file, $contents."\n", FILE_APPEND);          
}

public function bpfilegetcontents($url, $apiKey, $post = false) {
    global $bpOptions;  

    $length = 0;
    $method = "GET";
    if($post){  
        $length = strlen($post);
        $method = "POST";
    }

    $uname = base64_encode($apiKey);

    $context_options = array(
        "http" =&gt; array(
            "method" =&gt; $method,
            "header"  =&gt; "Content-type: application/json\r\n" . 
                "Content-Length: $length\r\n" .
                "Authorization: Basic $uname\r\n"
        )
    );      

    if($method == 'POST'){
        $context_options["http"]["content"] = $post;
    }

    $context = stream_context_create($context_options);
    $response = file_get_contents($url, false, $context);
    $response = json_decode($response, true);

    return $response;
}

public function bpCreateInvoice($orderId, $price, $posData, $options = array()) {   

    $options = array_merge($this-&gt;options, $options);

    $pos = array('posData' =&gt; $posData);
    if ($this-&gt;options['verifyPos'])
        $pos['hash'] = $this-&gt;bpHash(serialize($posData), $options['apiKey']);
    $options['posData'] = json_encode($pos);

    $options['orderID'] = $orderId;
    $options['price'] = $price;

    $postOptions = array('orderID', 'itemDesc', 'itemCode', 'notificationEmail', 'notificationURL', 'redirectURL', 
        'posData', 'price', 'currency', 'physical', 'fullNotifications', 'transactionSpeed', 'buyerName', 
        'buyerAddress1', 'buyerAddress2', 'buyerCity', 'buyerState', 'buyerZip', 'buyerEmail', 'buyerPhone');
    foreach($postOptions as $o)
        if (array_key_exists($o, $options))
            $post[$o] = $options[$o];
    $post = json_encode($post);

    $response = $this-&gt;bpfilegetcontents('https://bitpay.com/api/invoice/', $options['apiKey'], $post);

    return $response;
}


public function bpVerifyNotification($apiKey = false) {

    if (!$apiKey)
        $apiKey = $this-&gt;options['apiKey'];     

    $post = file_get_contents("php://input");
    if (!$post)
        return 'No post data';

    $json = json_decode($post, true);

    if (is_string($json))
        return $json;

    if (!array_key_exists('posData', $json)) 
        return 'no posData';

    $posData = json_decode($json['posData'], true);
    if($this-&gt;options['verifyPos'] and $posData['hash'] != $this-&gt;bpHash(serialize($posData['posData']), $apiKey))
        return 'authentication failed (bad hash)';
    $json['posData'] = $posData['posData'];

    return $json;
}

public function bpGetInvoice($invoiceId, $apiKey = false) {

    if (!$apiKey)
        $apiKey = $this-&gt;options['apiKey'];     

    $response = $this-&gt;bpfilegetcontents('https://bitpay.com/api/invoice/'.$invoiceId, $apiKey);
    if (is_string($response))
        return $response; 
    $response['posData'] = json_decode($response['posData'], true);
    $response['posData'] = $response['posData']['posData'];

    return $response;   
}

public function bpHash($data, $key) {
    $hmac = base64_encode(hash_hmac('sha256', $data, $key, TRUE));
    return strtr($hmac, array('+' =&gt; '-', '/' =&gt; '_', '=' =&gt; ''));
}
</code></pre>

<p>}
?>
```</p>

<h2>Resources</h2>

<ul>
<li><a href="https://bitpay.com/downloads/bitpayApi.pdf">Bitpay API Documentation</a></li>
<li><a href="https://github.com/bitpay/php-client">Bitpay PHP Client</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Shopify App Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development/"/>
    <updated>2013-11-09T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to start developing apps for Shopify.
But first of all what is Shopify?</p>

<p><blockquote><p>Shopify is an online e-commerce platform, you can use Shopify to create online stores to sell goods and services.<br/>The only difference between Shopify and other e-commerce solutions like Wordpress or Joomla is that you don&rsquo;t have to install anything yourself. Every store is hosted by Shopify. But you can use a custom domain if you want.</p></blockquote></p>

<p>As were going to create a Shopify App its also important that we understand what a Shopify app is:</p>

<p><blockquote><p>Shopify apps are used for adding extra features and capabilities to Shopify.</p></blockquote></p>

<p>If you&rsquo;ve ever used a Content Management System like Wordpress or Drupal you might have noticed that the plugin or modules are uploaded into the site were Wordpress or Drupal is running.</p>

<p>But in Shopify you don&rsquo;t need to upload anything. Shopify apps are basically hosted on a different server. So the creators of the App takes care of all the resources needed by the app to run.</p>

<h3>Register as a Shopify Partner</h3>

<p>The first thing that you need to do is to register a Shopify Partner Account.
This will allow you to create Apps for Shopify.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/shopify_partner_registration.png" alt="register as a shopify partner" /></p>

<p>After you have filled up and successfully submitted the form go ahead and verify your email address.</p>

<h3>Create an App</h3>

<p>Once you&rsquo;re done verifying you can now login to your Shopify partners account.</p>

<p>Once you&rsquo;re logged in click on the <code>Apps</code> tab. This is where the apps that you have created using your account will be listed.</p>

<p>Click on the <code>create app</code> button to create a new app.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/shopify_apps.png" alt="your apps" /></p>

<p>The form for creating a new app asks for some information regarding the app that you want to create. But the only one&rsquo;s which are required is the <code>Name of app</code> and the <code>Application Callback URL</code>. As this is only a getting started tutorial were just going to fill up what&rsquo;s required. The <code>app name</code> is simply a human readable name for the app. Make sure that it directly describes what the app does so you can easily make sense of what it does by just reading its name. The <code>Application Callback URL</code> is the URL where the merchant will be redirected after he installs your app.
As we are only getting started we can actually put in the url in your local development server. So something like: <code>http://localhost/shopify_testing/shopify_app.php</code></p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/create_app.png" alt="create app" /></p>

<p>Once the app is created the API Key and Shared Secret will be generated by Shopify. You can use this later on to authenticate requests to the Shopify API.</p>

<h3>Create a Dev Shop</h3>

<p>Now that you&rsquo;re done creating an App we can now create a Dev Shop. A Dev Shop as the name suggests is a Shopify Shop used for testing the apps that you develop. Unlike real Shopify Shops a Dev Shop has no time restrictions and all the functionality available to a normal Shop is also available. The only difference is that a Dev Shop cannot accept payments. Although Shopify has provided a <a href="http://docs.shopify.com/manual/your-store/orders/test-orders">bogus payment gateway</a> so developers can still test out the actual checkout process even when using a Dev Shop.</p>

<p>To create a Dev Shop, just click on the <code>Dev Shops</code> tab then click on the <code>create new dev shop</code> button.
Then fill up the form for creating a new Dev Shop. Everything is required:</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/create_devshop.png" alt="create dev shop" /></p>

<p>Once you&rsquo;re done just click on the <code>create dev shop</code> button to finish creating the dev shop.
After that you can now access your dev shop by accessing a url similar to the following:</p>

<p><code>
https://shop-name.myshopify.com/admin
</code></p>

<h3>Dev Shop Settings</h3>

<p>As were going to do some API calls using the app later on. Its useful to set some of the General Settings on your dev shop. I suggest supplying information for the following fields:</p>

<ul>
<li>Store name</li>
<li>Homepage title</li>
<li>Account email</li>
<li>Customer email</li>
<li>Phone</li>
<li>Street</li>
<li>City</li>
<li>Postal/Zip Code</li>
<li>Country</li>
<li>Currency</li>
</ul>


<p>You can also setup the checkout settings. Like I said earlier, a dev shop can only accept payments via the Bogus Gateway.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/bogus_gateway.png" alt="Bogus Gateway" /></p>

<p>When testing payment via bogus gateway the credit card number will always be <code>1</code> and the card security code is <code>111</code>.</p>

<h3>Installing the Dependencies</h3>

<p>Now were ready to develop the app. To make things easier we will be using a library that will interact with the Shopify API.</p>

<p>First create a <code>composer.json</code> file and put the following contents:</p>

<p>```
{</p>

<pre><code>"minimum-stability": "dev",
"require": {
    "sandeepshetty/shopify_api": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>If you haven&rsquo;t already installed Composer, go ahead and install it by executing the following command from the terminal:</p>

<p><code>
curl -s http://getcomposer.org/installer | php
</code></p>

<p>Once Composer is installed execute the following command in the same directory where the <code>composer.json</code> file is. This will install all the Shopify API library along with all of its dependencies:</p>

<p><code>
php composer.phar install
</code></p>

<p>Once everything is installed by Composer you will see the following directories under the <code>vendor</code> directory:</p>

<p><code>
-composer
-sandeepshetty
-autoload.php
</code></p>

<h3>Database</h3>

<p>Were going to use the database for storing the general app data and store specific data.</p>

<h4>App Settings</h4>

<p><code>sql
CREATE TABLE IF NOT EXISTS `tbl_appsettings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `api_key` varchar(300) DEFAULT NULL,
  `redirect_url` varchar(300) DEFAULT NULL,
  `permissions` text,
  `shared_secret` varchar(300) NOT NULL,
  PRIMARY KEY (`id`)
)
</code></p>

<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>api key</strong> &ndash; the API key that you got earlier when you created an app</li>
<li><strong>redirect_url</strong> &ndash; the url where the merchant will be redirected after installing your app. This is also the url where the merchant will be redirected when he accesses your app from his store.</li>
<li><strong>permissions</strong> &ndash; an array of permissions allowed in your app. These are specific data that your app has access to when a merchant installs your app into his Shop. Some examples are read orders and read products.</li>
<li><strong>shared_secret</strong> &ndash; your apps shared secret. This identifies you as the app owner so only you as the app creator should have access to it.</li>
</ul>


<h4>Store Settings</h4>

<p><code>
CREATE TABLE IF NOT EXISTS `tbl_usersettings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `access_token` text NOT NULL,
  `store_name` varchar(300) NOT NULL,
  PRIMARY KEY (`id`)
)
</code></p>

<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>access_token</strong> &ndash; the permanent access token associated with the store to be used when authenticating API requests. This is saved into the database so that there will be no need to generate the access token everytime the merchant uses the application.</li>
<li><strong>store_name</strong> &ndash; the name of the store under the myshopify domain. For example: mystore.myshopify.com</li>
</ul>


<h3>Getting App Permissions</h3>

<p>Now were ready to actually develop the app. Start by creating the file that you used earlier for the callback URL. In this case were simply going to call it <code>shopify_app.php</code>.
Include the library that we downloaded earlier using Composer.</p>

<p><code>php
&lt;?php
require 'vendor/autoload.php';
use sandeepshetty\shopify_api;
?&gt;
</code></p>

<p>Next check if the shop name is passed in the URL. When the app is accessed from the shop it will always have the shop name passed as an argument along with the callback URL that you specified in the app settings. We then use this shop name to query the database if the shop already exists.</p>

<p>If the shop already exists then we verify if the request is a valid request from Shopify. We can do that by calling the <code>is_valid_request()</code> method from the Shopify API library so were sure that not just anyone can access the app by directly inputting the URL and the required arguments.</p>

<p>If the request is valid we simply save the <code>shopify signature</code> and <code>shop name</code> to the session so it can be accessed on each subsequent request to the app. This will be used to determine if a user is currently logged in to the app.</p>

<p>This means that there&rsquo;s no need to have a separate login feature for the app. As long as the merchant has properly gone through the process of accessing the app. That is by first</p>

<p>If the shop doesn&rsquo;t exist in the database yet we simply get the specific permissions stored in the database, convert it to an array then supply it as an argument along with the shop name and api key to the <code>permission_url()</code> method. The <code>permission_url()</code> method generates the URL to the page which asks the merchant to give the app the permission to get specific data from the merchant&rsquo;s store.</p>

<p>```
&lt;?php
session_start(); //start a session</p>

<p>$db = new Mysqli(&ldquo;localhost&rdquo;, &ldquo;root&rdquo;, &ldquo;&rdquo;, &ldquo;shopify_app&rdquo;);</p>

<p>if($db->connect_errno){</p>

<pre><code>die('Connect Error: ' . $db-&gt;connect_errno);
</code></pre>

<p>}</p>

<p>$select_settings = $db->query(&ldquo;SELECT * FROM tbl_appsettings WHERE id = 1&rdquo;);
$app_settings = $select_settings->fetch_object();</p>

<p>if(!empty($_GET[&lsquo;shop&rsquo;])){ //check if the shop name is passed in the URL</p>

<pre><code>$shop = $_GET['shop']; //shop-name.myshopify.com

$select_store = $db-&gt;query("SELECT store_name FROM tbl_usersettings WHERE store_name = '$shop'"); //check if the store exists

if($select_store-&gt;num_rows &gt; 0){

    if(shopify_api\is_valid_request($_GET, $app_settings-&gt;shared_secret)){  //check if its a valid request from Shopify     
        $_SESSION['shopify_signature'] = $_GET['signature'];
        $_SESSION['shop'] = $shop; 
        header('Location: http://localhost/shopify_testing/admin.php'); //redirect to the admin page
    }

}else{      

    //convert the permissions to an array
    $permissions = json_decode($app_settings-&gt;permissions, true);

    //get the permission url
    $permission_url = shopify_api\permission_url(
        $_GET['shop'], $app_settings-&gt;api_key, $permissions
    );
    $permission_url .= '&amp;redirect_uri=' . $app_settings-&gt;redirect_url;

    header('Location: ' . $permission_url); //redirect to the permission url
}
</code></pre>

<p>}
?>
```</p>

<p>Once the merchant has granted the permission for your app to access specific data he will be redirected to the URL you specify as the value for the <code>redirect_uri</code> argument passed in the permission URL.</p>

<p>As you can see were getting the redirect URL from the database. This redirect URL shouldn&rsquo;t necessarily be the same as the URL that you used for the callback URL in your app settings.
This redirect URL has the responsibility of saving the shop&rsquo;s details into the database. This is because the merchant will only be redirected to this URL the first time he installs your app.</p>

<p>You will know that the merchant has already been redirected to this page when both a code and the shop name is passed as an argument to the URL. A permanent access token can then be generated by passing in the name of the shop, api key, shared secret and the temporary code generated by shopify to the <code>oauth_access_token()</code> method.</p>

<p>Then we save the shop details to the database and to the current session. Finally we redirect to the admin page.</p>

<p>```
&lt;?php
if(!empty($<em>GET[&lsquo;shop&rsquo;]) &amp;&amp; !empty($</em>GET[&lsquo;code&rsquo;])){</p>

<pre><code>$shop = $_GET['shop']; //shop name

//get permanent access token
$access_token = shopify_api\oauth_access_token(
    $_GET['shop'], $app_settings-&gt;api_key, $app_settings-&gt;shared_secret, $_GET['code']
);

//save the shop details to the database
$db-&gt;query("
    INSERT INTO tbl_usersettings 
    SET access_token = '$access_token',
    store_name = '$shop'
");

//save the signature and shop name to the current session
$_SESSION['shopify_signature'] = $_GET['signature'];
$_SESSION['shop'] = $shop;

header('Location: http://localhost/shopify_testing/shopify_app.php/admin.php');
</code></pre>

<p>}
?>
```</p>

<p>Now that we&rsquo;ve gone through the process of getting permissions for the app and written the code for it. It&rsquo;s time for you to actually install the app to the dev shop that you created earlier.
Apps are normally installed from the Shopify app store but we haven&rsquo;t submitted our app to the Shopify app store yet. So what we&rsquo;ll do is to go ahead and access the install URL for the app:</p>

<p><code>
http://shop-name.myshopify.com/admin/api/auth?api_key=xyz
</code></p>

<p>Be sure to replace <code>shop-name</code> with the actual name of the dev shop that you created earlier. And the value for the <code>api_key</code> to be the actual api key for your app.</p>

<p>That specific URL is where the merchants will be ultimately redirected to once they install your app from the Shopify app store so we don&rsquo;t really need to submit our app to the app store yet. And Shopify won&rsquo;t really approve the app unless its well done. It has to go through some sort of review process to make sure that its safe for shop owners(merchants) to install it.</p>

<h3>Making API Requests</h3>

<p>Now that were done with the authentication part we can now make requests to the API.
Go ahead and create the <code>admin.php</code> file. That is where we make requests to the API to get some data about the shop were it is installed. But wait, we don&rsquo;t have any data to fetch from the shop yet. For starters go ahead and create some products on the dev shop that you created earlier. Come back here after you&rsquo;ve done that.</p>

<h4>Products</h4>

<p>Cool! Now you&rsquo;ve added some products to your shop. We can now fetch some of those products by talking to the API.
First you have to call the <code>client</code> method from the Shopify API library passing along the shop name, access token, api key and the shared secret. All of this data is already present in the database as long as the merchant has gone through the install process.</p>

<p>```
&lt;?php
$shopify = shopify_api\client(</p>

<pre><code>$shop, $shop_data-&gt;access_token, $app_settings-&gt;api_key, $app_settings-&gt;shared_secret
</code></pre>

<p>);
?>
```</p>

<p>Once you&rsquo;re done with that you can now use the <code>$shopify</code> variable to call methods from the API.
Here were getting a list of products that are published in the shop:</p>

<p><code>
&lt;?php
$products = $shopify('GET', '/admin/products.json', array('published_status' =&gt; 'published'));
?&gt;
</code></p>

<p>The first argument that we specify above is the request method. It can either be <code>GET</code> or <code>POST</code> depending on what&rsquo;s included in the documentation. Some methods require <code>GET</code> as the request method and some require <code>POST</code>. But the common pattern is that when you&rsquo;re modifying or creating something the request method to use is <code>POST</code>, but when only retrieving specific data you use <code>GET</code>.</p>

<p>The second argument is the resource that you&rsquo;re trying to access. In this case were accessing <code>products.json</code> which refers to the products in the shop.</p>

<p>The third argument is an array of arguments that you want to pass. There&rsquo;s a bunch of arguments that you can pass with the <code>products</code> resource. In the above example we used the <code>published_status</code> and supplied <code>published</code> as its value. This is like saying to the API that we only want to get the products which are published. In shopify products can either be draft or published. Published means that its already viewable by customers in your shop. It means that the merchant is already displaying the product for sale.
There&rsquo;s also the <code>product_type</code> argument this allows you to limit the products returned for a specific product type only. For example you only want to return perishable goods.</p>

<p>Here&rsquo;s a sample response:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [body_html] =&gt; Crested shirt
        [created_at] =&gt; 2013-10-13T23:09:53-04:00
        [handle] =&gt; crested-shirt
        [id] =&gt; 164668989
        [product_type] =&gt; t-shirts
        [published_at] =&gt; 2013-10-13T23:09:13-04:00
        [published_scope] =&gt; global
        [template_suffix] =&gt; 
        [title] =&gt; Crested shirt
        [updated_at] =&gt; 2013-10-14T01:31:44-04:00
        [vendor] =&gt; zentopia
        [tags] =&gt; 
        [variants] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [barcode] =&gt; 
                        [compare_at_price] =&gt; 
                        [created_at] =&gt; 2013-10-13T23:09:53-04:00
                        [fulfillment_service] =&gt; manual
                        [grams] =&gt; 234
                        [id] =&gt; 378254785
                        [inventory_management] =&gt; 
                        [inventory_policy] =&gt; deny
                        [option1] =&gt; Default Title
                        [option2] =&gt; 
                        [option3] =&gt; 
                        [position] =&gt; 1
                        [price] =&gt; 322.00
                        [product_id] =&gt; 164668989
                        [requires_shipping] =&gt; 1
                        [sku] =&gt; 
                        [taxable] =&gt; 1
                        [title] =&gt; Default Title
                        [updated_at] =&gt; 2013-10-13T23:09:53-04:00
                        [inventory_quantity] =&gt; 0
                    )

            )

        [options] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [id] =&gt; 197676733
                        [name] =&gt; Title
                        [position] =&gt; 1
                        [product_id] =&gt; 164668989
                    )

            )

        [images] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [created_at] =&gt; 2013-10-14T01:31:39-04:00
                        [id] =&gt; 330590691
                        [position] =&gt; 1
                        [product_id] =&gt; 164668989
                        [updated_at] =&gt; 2013-10-14T01:31:39-04:00
                        [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305
                    )

            )

        [image] =&gt; Array
            (
                [created_at] =&gt; 2013-10-14T01:31:39-04:00
                [id] =&gt; 330590691
                [position] =&gt; 1
                [product_id] =&gt; 164668989
                [updated_at] =&gt; 2013-10-14T01:31:39-04:00
                [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305
            )

    )
</code></pre>

<p>)
```</p>

<p>Note that you can also specify the fields that you want to return by using the <code>fields</code> as an argument and supply a comma-separated list of the fields that you want to return. Something like:</p>

<p>```
&lt;?php
$arguments = array(</p>

<pre><code>'published_status' =&gt; 'published',
'fields' =&gt; 'body_html,created_at,handle,id,title,image'
</code></pre>

<p>);</p>

<p>$products = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/products.json&rsquo;, $arguments);
?>
```</p>

<p>The documentation for the products is available <a href="http://docs.shopify.com/api/product#index">here</a>.
Go through it so you know what other methods you can call that involves the products in the shop.</p>

<h4>Orders</h4>

<p>You can also access information about <a href="http://docs.shopify.com/api/order">orders</a> using the API.</p>

<p>To get a list of orders:</p>

<p>```
&lt;?php
$arguments = array(</p>

<pre><code>'limit' =&gt; '10', //default: 50
'page' =&gt; '1', //default: 1
'status' =&gt; 'open', 
</code></pre>

<p>);
$orders = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/orders.json&rsquo;, $arguments);
?>
```</p>

<p>Here&rsquo;s a sample response:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [buyer_accepts_marketing] =&gt; 1
        [cancel_reason] =&gt; 
        [cancelled_at] =&gt; 
        [cart_token] =&gt; ba56ddbaab418b79566316fe5e99e4e3
        [checkout_token] =&gt; 2b4ef76523c1bb6fc6e6825a97a4c992
        [closed_at] =&gt; 
        [confirmed] =&gt; 1
        [created_at] =&gt; 2013-10-17T00:13:59-04:00
        [currency] =&gt; PHP
        [email] =&gt; vbcanc@gmail.com
        [financial_status] =&gt; authorized
        [fulfillment_status] =&gt; 
        [gateway] =&gt; bogus
        [id] =&gt; 188680051
        [landing_site] =&gt; /
        [location_id] =&gt; 
        [name] =&gt; #1001
        [note] =&gt; 
        [number] =&gt; 1
        [reference] =&gt; 
        [referring_site] =&gt; 
        [source] =&gt; browser
        [subtotal_price] =&gt; 322.00
        [taxes_included] =&gt; 
        [test] =&gt; 1
        [token] =&gt; 35330c6d0bb04c0198ab94b04317e1af
        [total_discounts] =&gt; 0.00
        [total_line_items_price] =&gt; 322.00
        [total_price] =&gt; 342.00
        [total_price_usd] =&gt; 7.93
        [total_tax] =&gt; 0.00
        [total_weight] =&gt; 234
        [updated_at] =&gt; 2013-10-17T00:13:59-04:00
        [user_id] =&gt; 
        [browser_ip] =&gt; 180.191.38.211
        [landing_site_ref] =&gt; 
        [order_number] =&gt; 1001
        [discount_codes] =&gt; Array
            (
            )

        [note_attributes] =&gt; Array
            (
            )

        [processing_method] =&gt; direct
        [checkout_id] =&gt; 140790649
        [source_name] =&gt; web
        [line_items] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [fulfillment_service] =&gt; manual
                        [fulfillment_status] =&gt; 
                        [grams] =&gt; 234
                        [id] =&gt; 328820335
                        [price] =&gt; 322.00
                        [product_id] =&gt; 164668989
                        [quantity] =&gt; 1
                        [requires_shipping] =&gt; 1
                        [sku] =&gt; 
                        [title] =&gt; Crested shirt
                        [variant_id] =&gt; 378254785
                        [variant_title] =&gt; 
                        [vendor] =&gt; zentopia
                        [name] =&gt; Crested shirt
                        [variant_inventory_management] =&gt; 
                        [properties] =&gt; Array
                            (
                            )

                        [product_exists] =&gt; 1
                    )

            )

        [shipping_lines] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [code] =&gt; International Shipping
                        [price] =&gt; 20.00
                        [source] =&gt; shopify
                        [title] =&gt; International Shipping
                    )

            )

        [tax_lines] =&gt; Array
            (
            )

        [payment_details] =&gt; Array
            (
                [avs_result_code] =&gt; 
                [credit_card_bin] =&gt; 1
                [cvv_result_code] =&gt; 
                [credit_card_number] =&gt; XXXX-XXXX-XXXX-1
                [credit_card_company] =&gt; Bogus
            )

        [billing_address] =&gt; Array
            (
                [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                [address2] =&gt; 
                [city] =&gt; Coulsdon
                [company] =&gt; doble
                [country] =&gt; United Kingdom
                [first_name] =&gt; sfs
                [last_name] =&gt; rew
                [latitude] =&gt; 51.314819
                [longitude] =&gt; -0.12435
                [phone] =&gt; 3252325
                [province] =&gt; Surrey
                [zip] =&gt; CR5 2NG
                [name] =&gt; sfs rew
                [country_code] =&gt; GB
                [province_code] =&gt; 
            )

        [shipping_address] =&gt; Array
            (
                [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                [address2] =&gt; 
                [city] =&gt; Coulsdon
                [company] =&gt; doble
                [country] =&gt; United Kingdom
                [first_name] =&gt; sfs
                [last_name] =&gt; rew
                [latitude] =&gt; 51.314819
                [longitude] =&gt; -0.12435
                [phone] =&gt; 3252325
                [province] =&gt; Surrey
                [zip] =&gt; CR5 2NG
                [name] =&gt; sfs rew
                [country_code] =&gt; GB
                [province_code] =&gt; 
            )

        [fulfillments] =&gt; Array
            (
            )

        [client_details] =&gt; Array
            (
                [accept_language] =&gt; en-US,en;q=0.8
                [browser_ip] =&gt; xxx.xxx.xx.xxx
                [session_hash] =&gt; 4bb858f172df6367b05ab424f9c6bd0f778e711e9046c5a13833cc91bc33a237
                [user_agent] =&gt; Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.71 Chrome/28.0.1500.71 Safari/537.36
            )

        [customer] =&gt; Array
            (
                [accepts_marketing] =&gt; 1
                [created_at] =&gt; 2013-10-15T21:26:24-04:00
                [email] =&gt; vbcanc@gmail.com
                [first_name] =&gt; wef
                [id] =&gt; 148878735
                [last_name] =&gt; rew
                [last_order_id] =&gt; 
                [multipass_identifier] =&gt; 
                [note] =&gt; 
                [orders_count] =&gt; 0
                [state] =&gt; disabled
                [total_spent] =&gt; 0.00
                [updated_at] =&gt; 2013-10-17T00:14:01-04:00
                [verified_email] =&gt; 1
                [tags] =&gt; 
                [last_order_name] =&gt; 
                [image_url] =&gt; //gravatar.com/avatar/aba221e4cb888289b95b7864d754c4ce?default=http%3A%2F%2Fcdn.shopify.com%2Fs%2Fimages%2Fadmin%2Fcustomers%2Fcustomers_avatar_england_londonbridge.png
                [default_address] =&gt; Array
                    (
                        [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                        [address2] =&gt; 
                        [city] =&gt; Coulsdon
                        [company] =&gt; doble
                        [country] =&gt; United Kingdom
                        [first_name] =&gt; sfs
                        [id] =&gt; 193735639
                        [last_name] =&gt; rew
                        [phone] =&gt; 3252325
                        [province] =&gt; Surrey
                        [zip] =&gt; CR5 2NG
                        [name] =&gt; sfs rew
                        [province_code] =&gt; 
                        [country_code] =&gt; GB
                        [country_name] =&gt; United Kingdom
                        [default] =&gt; 1
                    )

            )

    )
</code></pre>

<p>)
```</p>

<p>As you can see from the above response all information about a specific order is returned. The line items, payment details, billing address and customer information are all included in the default response.
Information about the device (IP address, browser) were the order was made is also captured by Shopify.</p>

<h4>Webhooks</h4>

<p>The Shopify API also supports webhooks. In case you don&rsquo;t know what a webhook is here&rsquo;s a good definition from <a href="http://en.wikipedia.org/wiki/Webhook">Wikipedia</a>:</p>

<p><blockquote><p>A Webhook, in web development, is a method of augmenting or altering the behavior of a web page, or web application, with custom callbacks. These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application.</p></blockquote></p>

<p>In simple terms a webhook is used to perform specific actions when a certain event happens. In Shopify there are a number of events which you can hook into to perform specific action:</p>

<p>Webhooks can be set from the dev shop or from the app. To set a webhook from the dev shop go to the admin page of your shop, click on the settings tab then click on notifications tab. Scroll down until you find the webhooks section. To create a new webhook just click on the <code>create a webhook</code> button. Then select the event in which you want to add a webhook then enter the complete URL of the page where you want to submit the data when the specific event happens.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/webhook.png" alt="Webhook" /></p>

<p>To add a webhook via the API simply make a <code>POST</code> request to the <code>webhooks</code> resource and passing in the <code>topic</code> and <code>address</code>. The <code>topic</code> is the actual event and the <code>address</code> is the URL which you want to submit the data returned from the specific event when it happens. Do note that we can&rsquo;t use the local server URL for this. It must be a URL that&rsquo;s actually accessible from the internet. In the example below were submitting the data to the address specified when a cart is created or updated.</p>

<p>```
&lt;?php
//when cart is created
$arguments = array(</p>

<pre><code>'topic' =&gt; 'cart/creation',
'address' =&gt; 'http://somewhere.com/update_inventory.php'
</code></pre>

<p>);</p>

<p>$webhooks = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/webhooks.json&rsquo;, $arguments);</p>

<p>//when cart is updated
$arguments = array(</p>

<pre><code>'topic' =&gt; 'cart/update',
'address' =&gt; 'http://somewhere.com/update_inventory.php'
</code></pre>

<p>);</p>

<p>$webhooks = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/webhooks.json&rsquo;, $arguments);
?>
```</p>

<p>Remember that every event where you can hook upon in the admin interface you can also create a hook on it using the API. You can read more about webhooks <a href="http://docs.shopify.com/api/tutorials/using-webhooks">here</a>.</p>

<p>If you want to check what specific data is being passed to the URL that you specify for a specific webhook you can use a service like <a href="http://requestb.in/">request bin</a></p>

<p>Heres a sample request for when a cart is created. You can use the properties under the <code>data</code> property as a basis for the data that you&rsquo;re going to access from the address that you specified in your webhook:</p>

<p>```json
{
  &ldquo;url&rdquo;: &ldquo;<a href="http://api.yourapihere.com/">http://api.yourapihere.com/</a>&rdquo;,
  &ldquo;headers&rdquo;: {</p>

<pre><code>"Connection": "close",
"X-Shopify-Topic": "carts/create",
"Host": "api.yourapihere.com",
"Accept-Encoding": "gzip, deflate, compress",
"X-Shopify-Shop-Domain": "test-shop.myshopify.com",
"User-Agent": "Ruby",
"Content-Type": "application/json",
"Content-Length": "281",
"Accept": "*/*"
</code></pre>

<p>  },
  &ldquo;args&rdquo;: {},
  &ldquo;data&rdquo;: &ldquo;{\"id\&rdquo;:\&ldquo;carts:eeafa272cebfd4b22385bc4b645e762c\&rdquo;,\&ldquo;token\&rdquo;:\&ldquo;eeafa272cebfd4b22385bc4b645e762c\&rdquo;,\&ldquo;line_items\&rdquo;:[{\&ldquo;id\&rdquo;:null,\&ldquo;title\&rdquo;:\&ldquo;Example T-Shirt\&rdquo;,\&ldquo;price\&rdquo;:\&ldquo;19.99\&rdquo;,\&ldquo;line_price\&rdquo;:\&ldquo;59.97\&rdquo;,\&ldquo;quantity\&rdquo;:3,\&ldquo;sku\&rdquo;:\&ldquo;example-shirt-s\&rdquo;,\&ldquo;grams\&rdquo;:200,\&ldquo;vendor\&rdquo;:\&ldquo;Acme\&rdquo;,\&ldquo;properties\&rdquo;:null,\&ldquo;variant_id\&rdquo;:null}]}&ldquo;,
  "origin&rdquo;: &ldquo;54.236.226.56&rdquo;,
  &ldquo;form&rdquo;: {},
  &ldquo;files&rdquo;: {},
  &ldquo;json&rdquo;: {</p>

<pre><code>"id": "carts:eeafa272cebfd4b22385bc4b645e762c",
"line_items": [
  {
    "id": null,
    "sku": "example-shirt-s",
    "variant_id": null,
    "quantity": 3,
    "vendor": "Acme",
    "grams": 200,
    "title": "Example T-Shirt",
    "properties": null,
    "price": "19.99",
    "line_price": "59.97"
  }
],
"token": "eeafa272cebfd4b22385bc4b645e762c"
</code></pre>

<p>  }
}
```</p>

<p>The data that is passed to the address that you specified is an <a href="http://php.net/manual/en/wrappers.php.php">input stream</a>. It&rsquo;s not passed using the common <code>GET</code> or <code>POST</code> request method. You can use the <code>fopen()</code> method in PHP and pass in the <code>php://input</code> stream. Then pass in <code>rb</code> as the mode. <code>rb</code> means read-only in binary mode.
Then we just loop through the input stream until we reach the end of the file. Inside the loop we also use the <code>fread()</code> method to read from the resource created when we called <code>fopen()</code> earlier. We also pass the maximum number of bytes to read which is 4096 (approximately 4Mb). Finally we close the resource and convert the webhook content to an array using the <code>json_decode()</code> method.</p>

<p>`&ldquo;php
&lt;?php
$webhook_content = &rdquo;;
$webhook = fopen(&lsquo;php://input&rsquo; , &lsquo;rb&rsquo;);
while(!feof($webhook)){ //loop through the input stream while the end of file is not reached</p>

<pre><code>$webhook_content .= fread($webhook, 4096); //append the content on the current iteration
</code></pre>

<p>}
fclose($webhook); //close the resource</p>

<p>$data = json_decode($webhook_content, true); //convert the json to array</p>

<p>//do whatever you want with the data
?>
```</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it! You&rsquo;ve learned how to create a Shopify app. Creating a shopify app involves creating a Shopify partners account, a dev shop and an app. You&rsquo;ve also learned that Shopify apps aren&rsquo;t directly integrated into a shop, instead it is hosted somewhere else. Shopify apps are a nice way to extend the functionality that is already available to Shopify.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://docs.shopify.com/api/the-basics/getting-started">The basics of Building a Shopify App</a></li>
<li><a href="http://www.shopify.com/technology/3671962-developing-shopify-apps-part-1-the-setup#axzz2itCLJCrk">Developing Shopify Apps</a></li>
<li><a href="https://github.com/sandeepshetty/shopify_api">Sandeepshetty/shopify_api</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gettting Started with Coinbase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/"/>
    <updated>2013-11-03T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started developing applications which communicates with the Coinbase API. But first what is Coinbase?</p>

<p><blockquote><p>Coinbase is a service that allows you to use bitcoins as a means of payment for goods and services.<br/>Its like Paypal but for bitcoins.</p></blockquote></p>

<p>First thing that you need to do is to register an account with Coinbase.</p>

<p><img src="/images/posts/coinbase_api/coinbase-register.png" alt="register account" /></p>

<p>Then go to your email and verify the account.</p>

<p>Accept the license.</p>

<p><img src="/images/posts/coinbase_api/coinbase-license.png" alt="accept license" /></p>

<p>Next, click on account settings and then click on the integrations tab:</p>

<p><img src="/images/posts/coinbase_api/coinbase-api.png" alt="integrations" /></p>

<p>Next, click on show my API key. You would need to enter your password to verify that you are indeed the account owner. Initially the API key is disabled so you need to enable it as well.</p>

<p><img src="/images/posts/coinbase_api/enable-apikey.png" alt="enable api key" /></p>

<p>After that, simply copy the API key that&rsquo;s displayed.</p>

<p><img src="/images/posts/coinbase_api/copy-apikey.png" alt="copy api key" /></p>

<p>The API key will be used for authenticating requests to the Coinbase API.</p>

<h3>Authentication</h3>

<p>There are 2 ways in which a request to the API can be authenticated:</p>

<ol>
<li>API key</li>
<li>OAuth2</li>
</ol>


<h4>Authentication using API Key</h4>

<p>Authenticating a request via the API Key is the easier way of making requests to the API. All you have to do is to append the api key on each request. The cool thing is you can directly execute a request to the API directly from the browser for methods that can be called via <code>GET</code>.</p>

<p>For example when you want to get the account balance, you simply do something like:</p>

<p><code>
https://coinbase.com/api/v1/account/balance?api_key=xyz
</code></p>

<p>There&rsquo;s a bunch of other methods which you can call directly from the browser. They&rsquo;re all listed <a href="https://coinbase.com/api/doc/1.0.html">here</a>. Do note that you can only call a method directly from the browser when its request method is <code>GET</code>. <code>POST</code> methods cannot be called directly from the browser, you need to use <code>curl</code> or <code>file_get_contents()</code> to be able to make the request.</p>

<p>Here&rsquo;s an example of using <code>curl</code> to generate  a payment button, remember to pass the API Key along with the parameters required by the specific API method:</p>

<p>```php
&lt;?php</p>

<pre><code>$request = '{
    "api_key" : "xyz", 
    "button": {
        "name": "test",
        "price_string": "1.23",
        "price_currency_iso": "USD"
    }
}';

$post_fields = json_decode($request, true); //convert json string to an object
$post_fields = http_build_query($post_fields); //urlencode for arrays

$curl = curl_init();
curl_setopt($curl, CURLOPT_POST, true); //tell curl that were posting some data along with the request 
curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields); //the data that we want to post
curl_setopt($curl, CURLOPT_URL, 'https://coinbase.com/api/v1/buttons'); //the request url

curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); //return the transfer, by default its being echoed out
$response = curl_exec($curl); //execute the request
</code></pre>

<p>?>
```</p>

<p>The method that we have used above is the <code>buttons</code> method. It only requires 3 arguments:</p>

<ul>
<li><p><strong>button[name]</strong> &ndash; the name of the item or service for which you are collecting bitcoins.</p></li>
<li><p><strong>button[price_string]</strong> &ndash; the total price of the item or service.</p></li>
<li><p><strong>button[price_currency_iso]</strong> &ndash; the currency of the price used in the <code>button[price_string]</code> argument. Examples are <code>USD</code>, <code>PHP</code>, <code>SGD</code>, <code>CAD</code>, or <code>BTC</code> for the bitcoin currency. It would be easier if <code>BTC</code> isn&rsquo;t used so you won&rsquo;t have to convert. Simply use your local currency and the API will automatically convert it to <code>BTC</code> depending on the current exchange rate.</p></li>
</ul>


<p>The response would be formatted in JSON:</p>

<p>```json
{</p>

<pre><code>"success": true,
"button": {
    "code": "93865b9cae83706ae59220c013bc0afd",
    "type": "buy_now",
    "style": "buy_now_large",
    "text": "Pay With Bitcoin",
    "name": "test",
    "description": "Sample description",
    "custom": "Order123",
    "price": {
        "cents": 123,
        "currency_iso": "USD"
    }
}
</code></pre>

<p>}
```</p>

<p>To generate the payment button, simply create a div with a class of <code>coinbase-button</code> then give it a data attribute <code>data-code</code> using the button code as its value. After that create a new script element and use the <code>button.js</code> from coinbase:</p>

<p>```html</p>

<div class="coinbase-button" data-code="<?php echo $response->button->code; ?>"></div>


<script src="https://coinbase.com/assets/button.js"></script>


<p>```</p>

<p>The response returned above can also be used for generating payment pages.
All you have to do is append the button code to the coinbase checkout url:</p>

<p><code>html
&lt;?php
$response = json_decode($response); //convert json string to an object
?&gt;
&lt;a href="https://coinbase.com/checkouts/&lt;?php echo $response-&gt;button-&gt;code; ?&gt;"&gt;Checkout&lt;/a&gt;
</code></p>

<h4>Authentication using OAuth2</h4>

<p>Authentication using OAuth2 is a bit difficult. Thankfully there are good people out there who creates libraries that makes our lives easier. One of those libraries is the <a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a> library.</p>

<p>To use it, simply download the zip file from the Github repository or clone it on your machine. Once the download is done, you can just include it on your working script:</p>

<p><code>php
&lt;?php
require 'libs/coinbase/Coinbase.php';
?&gt;
</code></p>

<p>After that, you can go ahead and call the methods available from the library. In the example below were calling the <code>getOrders()</code> method which simply returns all the orders received by the merchant who owns the API Key that is used in the code. This means that every merchant who plans to integrate Coinbase in their application has to create their own Coinbase app in order to receive an API Key. The API Key will then serve as their identification for each request that is made to the API. Yes this is a bit of a drag for the merchants but that&rsquo;s just how it works so there&rsquo;s no choice but to stick with it.</p>

<p><code>
&lt;?php
$api_key = 'xyz';
$coinbase = new Coinbase($api_key);
$orders = $coinbase-&gt;getOrders();
?&gt;
</code></p>

<p>The response returned from the code above is not the same as the response that you directly get from the API.
The library already converts it to an object so there&rsquo;s no need to. Here&rsquo;s an example of looping through the orders:</p>

<p>```
&lt;?php
if($orders->total_count > 0){</p>

<pre><code>foreach($orders-&gt;orders as $row){

    echo $row-&gt;order-&gt;created_at; 
    echo $row-&gt;order-&gt;button-&gt;description; 
    echo $row-&gt;order-&gt;status; 
    echo $row-&gt;order-&gt;total_native-&gt;cents; 
    echo $row-&gt;order-&gt;button-&gt;name; 

}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to perform requests to the Coinbase API. Requests can be performed directly from the browser or via Curl. You have also learned how to generate payment buttons via the API.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://coinbase.com/api/doc/1.0.html">API Documentation</a></li>
<li><a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
