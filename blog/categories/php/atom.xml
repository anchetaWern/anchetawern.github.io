<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-11-26T21:38:43+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Shopify App Development]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development/"/>
    <updated>2013-11-09T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/09/getting-started-with-shopify-app-development</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to start developing apps for Shopify.
But first of all what is Shopify?</p>

<p><blockquote><p>Shopify is an online e-commerce platform, you can use Shopify to create online stores to sell goods and services.<br/>The only difference between Shopify and other e-commerce solutions like Wordpress or Joomla is that you don&rsquo;t have to install anything yourself. Every store is hosted by Shopify. But you can use a custom domain if you want.</p></blockquote></p>

<p>As were going to create a Shopify App its also important that we understand what a Shopify app is:</p>

<p><blockquote><p>Shopify apps are used for adding extra features and capabilities to Shopify.</p></blockquote></p>

<p>If you&rsquo;ve ever used a Content Management System like Wordpress or Drupal you might have noticed that the plugin or modules are uploaded into the site were Wordpress or Drupal is running.</p>

<p>But in Shopify you don&rsquo;t need to upload anything. Shopify apps are basically hosted on a different server. So the creators of the App takes care of all the resources needed by the app to run.</p>

<h3>Register as a Shopify Partner</h3>

<p>The first thing that you need to do is to register a Shopify Partner Account.
This will allow you to create Apps for Shopify.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/shopify_partner_registration.png" alt="register as a shopify partner" /></p>

<p>After you have filled up and successfully submitted the form go ahead and verify your email address.</p>

<h3>Create an App</h3>

<p>Once you&rsquo;re done verifying you can now login to your Shopify partners account.</p>

<p>Once you&rsquo;re logged in click on the <code>Apps</code> tab. This is where the apps that you have created using your account will be listed.</p>

<p>Click on the <code>create app</code> button to create a new app.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/shopify_apps.png" alt="your apps" /></p>

<p>The form for creating a new app asks for some information regarding the app that you want to create. But the only one&rsquo;s which are required is the <code>Name of app</code> and the <code>Application Callback URL</code>. As this is only a getting started tutorial were just going to fill up what&rsquo;s required. The <code>app name</code> is simply a human readable name for the app. Make sure that it directly describes what the app does so you can easily make sense of what it does by just reading its name. The <code>Application Callback URL</code> is the URL where the merchant will be redirected after he installs your app.
As we are only getting started we can actually put in the url in your local development server. So something like: <code>http://localhost/shopify_testing/shopify_app.php</code></p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/create_app.png" alt="create app" /></p>

<p>Once the app is created the API Key and Shared Secret will be generated by Shopify. You can use this later on to authenticate requests to the Shopify API.</p>

<h3>Create a Dev Shop</h3>

<p>Now that you&rsquo;re done creating an App we can now create a Dev Shop. A Dev Shop as the name suggests is a Shopify Shop used for testing the apps that you develop. Unlike real Shopify Shops a Dev Shop has no time restrictions and all the functionality available to a normal Shop is also available. The only difference is that a Dev Shop cannot accept payments. Although Shopify has provided a <a href="http://docs.shopify.com/manual/your-store/orders/test-orders">bogus payment gateway</a> so developers can still test out the actual checkout process even when using a Dev Shop.</p>

<p>To create a Dev Shop, just click on the <code>Dev Shops</code> tab then click on the <code>create new dev shop</code> button.
Then fill up the form for creating a new Dev Shop. Everything is required:</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/create_devshop.png" alt="create dev shop" /></p>

<p>Once you&rsquo;re done just click on the <code>create dev shop</code> button to finish creating the dev shop.
After that you can now access your dev shop by accessing a url similar to the following:</p>

<p><code>
https://shop-name.myshopify.com/admin
</code></p>

<h3>Dev Shop Settings</h3>

<p>As were going to do some API calls using the app later on. Its useful to set some of the General Settings on your dev shop. I suggest supplying information for the following fields:</p>

<ul>
<li>Store name</li>
<li>Homepage title</li>
<li>Account email</li>
<li>Customer email</li>
<li>Phone</li>
<li>Street</li>
<li>City</li>
<li>Postal/Zip Code</li>
<li>Country</li>
<li>Currency</li>
</ul>


<p>You can also setup the checkout settings. Like I said earlier, a dev shop can only accept payments via the Bogus Gateway.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/bogus_gateway.png" alt="Bogus Gateway" /></p>

<p>When testing payment via bogus gateway the credit card number will always be <code>1</code> and the card security code is <code>111</code>.</p>

<h3>Installing the Dependencies</h3>

<p>Now were ready to develop the app. To make things easier we will be using a library that will interact with the Shopify API.</p>

<p>First create a <code>composer.json</code> file and put the following contents:</p>

<p>```
{</p>

<pre><code>"minimum-stability": "dev",
"require": {
    "sandeepshetty/shopify_api": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>If you haven&rsquo;t already installed Composer, go ahead and install it by executing the following command from the terminal:</p>

<p><code>
curl -s http://getcomposer.org/installer | php
</code></p>

<p>Once Composer is installed execute the following command in the same directory where the <code>composer.json</code> file is. This will install all the Shopify API library along with all of its dependencies:</p>

<p><code>
php composer.phar install
</code></p>

<p>Once everything is installed by Composer you will see the following directories under the <code>vendor</code> directory:</p>

<p><code>
-composer
-sandeepshetty
-autoload.php
</code></p>

<h3>Database</h3>

<p>Were going to use the database for storing the general app data and store specific data.</p>

<h4>App Settings</h4>

<p><code>sql
CREATE TABLE IF NOT EXISTS `tbl_appsettings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `api_key` varchar(300) DEFAULT NULL,
  `redirect_url` varchar(300) DEFAULT NULL,
  `permissions` text,
  `shared_secret` varchar(300) NOT NULL,
  PRIMARY KEY (`id`)
)
</code></p>

<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>api key</strong> &ndash; the API key that you got earlier when you created an app</li>
<li><strong>redirect_url</strong> &ndash; the url where the merchant will be redirected after installing your app. This is also the url where the merchant will be redirected when he accesses your app from his store.</li>
<li><strong>permissions</strong> &ndash; an array of permissions allowed in your app. These are specific data that your app has access to when a merchant installs your app into his Shop. Some examples are read orders and read products.</li>
<li><strong>shared_secret</strong> &ndash; your apps shared secret. This identifies you as the app owner so only you as the app creator should have access to it.</li>
</ul>


<h4>Store Settings</h4>

<p><code>
CREATE TABLE IF NOT EXISTS `tbl_usersettings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `access_token` text NOT NULL,
  `store_name` varchar(300) NOT NULL,
  PRIMARY KEY (`id`)
)
</code></p>

<ul>
<li><strong>id</strong> &ndash; auto-increment primary key</li>
<li><strong>access_token</strong> &ndash; the permanent access token associated with the store to be used when authenticating API requests. This is saved into the database so that there will be no need to generate the access token everytime the merchant uses the application.</li>
<li><strong>store_name</strong> &ndash; the name of the store under the myshopify domain. For example: mystore.myshopify.com</li>
</ul>


<h3>Getting App Permissions</h3>

<p>Now were ready to actually develop the app. Start by creating the file that you used earlier for the callback URL. In this case were simply going to call it <code>shopify_app.php</code>.
Include the library that we downloaded earlier using Composer.</p>

<p><code>php
&lt;?php
require 'vendor/autoload.php';
use sandeepshetty\shopify_api;
?&gt;
</code></p>

<p>Next check if the shop name is passed in the URL. When the app is accessed from the shop it will always have the shop name passed as an argument along with the callback URL that you specified in the app settings. We then use this shop name to query the database if the shop already exists.</p>

<p>If the shop already exists then we verify if the request is a valid request from Shopify. We can do that by calling the <code>is_valid_request()</code> method from the Shopify API library so were sure that not just anyone can access the app by directly inputting the URL and the required arguments.</p>

<p>If the request is valid we simply save the <code>shopify signature</code> and <code>shop name</code> to the session so it can be accessed on each subsequent request to the app. This will be used to determine if a user is currently logged in to the app.</p>

<p>This means that there&rsquo;s no need to have a separate login feature for the app. As long as the merchant has properly gone through the process of accessing the app. That is by first</p>

<p>If the shop doesn&rsquo;t exist in the database yet we simply get the specific permissions stored in the database, convert it to an array then supply it as an argument along with the shop name and api key to the <code>permission_url()</code> method. The <code>permission_url()</code> method generates the URL to the page which asks the merchant to give the app the permission to get specific data from the merchant&rsquo;s store.</p>

<p>```
&lt;?php
session_start(); //start a session</p>

<p>$db = new Mysqli(&ldquo;localhost&rdquo;, &ldquo;root&rdquo;, &ldquo;&rdquo;, &ldquo;shopify_app&rdquo;);</p>

<p>if($db->connect_errno){</p>

<pre><code>die('Connect Error: ' . $db-&gt;connect_errno);
</code></pre>

<p>}</p>

<p>$select_settings = $db->query(&ldquo;SELECT * FROM tbl_appsettings WHERE id = 1&rdquo;);
$app_settings = $select_settings->fetch_object();</p>

<p>if(!empty($_GET[&lsquo;shop&rsquo;])){ //check if the shop name is passed in the URL</p>

<pre><code>$shop = $_GET['shop']; //shop-name.myshopify.com

$select_store = $db-&gt;query("SELECT store_name FROM tbl_usersettings WHERE store_name = '$shop'"); //check if the store exists

if($select_store-&gt;num_rows &gt; 0){

    if(shopify_api\is_valid_request($_GET, $app_settings-&gt;shared_secret)){  //check if its a valid request from Shopify     
        $_SESSION['shopify_signature'] = $_GET['signature'];
        $_SESSION['shop'] = $shop; 
        header('Location: http://localhost/shopify_testing/admin.php'); //redirect to the admin page
    }

}else{      

    //convert the permissions to an array
    $permissions = json_decode($app_settings-&gt;permissions, true);

    //get the permission url
    $permission_url = shopify_api\permission_url(
        $_GET['shop'], $app_settings-&gt;api_key, $permissions
    );
    $permission_url .= '&amp;redirect_uri=' . $app_settings-&gt;redirect_url;

    header('Location: ' . $permission_url); //redirect to the permission url
}
</code></pre>

<p>}
?>
```</p>

<p>Once the merchant has granted the permission for your app to access specific data he will be redirected to the URL you specify as the value for the <code>redirect_uri</code> argument passed in the permission URL.</p>

<p>As you can see were getting the redirect URL from the database. This redirect URL shouldn&rsquo;t necessarily be the same as the URL that you used for the callback URL in your app settings.
This redirect URL has the responsibility of saving the shop&rsquo;s details into the database. This is because the merchant will only be redirected to this URL the first time he installs your app.</p>

<p>You will know that the merchant has already been redirected to this page when both a code and the shop name is passed as an argument to the URL. A permanent access token can then be generated by passing in the name of the shop, api key, shared secret and the temporary code generated by shopify to the <code>oauth_access_token()</code> method.</p>

<p>Then we save the shop details to the database and to the current session. Finally we redirect to the admin page.</p>

<p>```
&lt;?php
if(!empty($<em>GET[&lsquo;shop&rsquo;]) &amp;&amp; !empty($</em>GET[&lsquo;code&rsquo;])){</p>

<pre><code>$shop = $_GET['shop']; //shop name

//get permanent access token
$access_token = shopify_api\oauth_access_token(
    $_GET['shop'], $app_settings-&gt;api_key, $app_settings-&gt;shared_secret, $_GET['code']
);

//save the shop details to the database
$db-&gt;query("
    INSERT INTO tbl_usersettings 
    SET access_token = '$access_token',
    store_name = '$shop'
");

//save the signature and shop name to the current session
$_SESSION['shopify_signature'] = $_GET['signature'];
$_SESSION['shop'] = $shop;

header('Location: http://localhost/shopify_testing/shopify_app.php/admin.php');
</code></pre>

<p>}
?>
```</p>

<p>Now that we&rsquo;ve gone through the process of getting permissions for the app and written the code for it. It&rsquo;s time for you to actually install the app to the dev shop that you created earlier.
Apps are normally installed from the Shopify app store but we haven&rsquo;t submitted our app to the Shopify app store yet. So what we&rsquo;ll do is to go ahead and access the install URL for the app:</p>

<p><code>
http://shop-name.myshopify.com/admin/api/auth?api_key=xyz
</code></p>

<p>Be sure to replace <code>shop-name</code> with the actual name of the dev shop that you created earlier. And the value for the <code>api_key</code> to be the actual api key for your app.</p>

<p>That specific URL is where the merchants will be ultimately redirected to once they install your app from the Shopify app store so we don&rsquo;t really need to submit our app to the app store yet. And Shopify won&rsquo;t really approve the app unless its well done. It has to go through some sort of review process to make sure that its safe for shop owners(merchants) to install it.</p>

<h3>Making API Requests</h3>

<p>Now that were done with the authentication part we can now make requests to the API.
Go ahead and create the <code>admin.php</code> file. That is where we make requests to the API to get some data about the shop were it is installed. But wait, we don&rsquo;t have any data to fetch from the shop yet. For starters go ahead and create some products on the dev shop that you created earlier. Come back here after you&rsquo;ve done that.</p>

<h4>Products</h4>

<p>Cool! Now you&rsquo;ve added some products to your shop. We can now fetch some of those products by talking to the API.
First you have to call the <code>client</code> method from the Shopify API library passing along the shop name, access token, api key and the shared secret. All of this data is already present in the database as long as the merchant has gone through the install process.</p>

<p>```
&lt;?php
$shopify = shopify_api\client(</p>

<pre><code>$shop, $shop_data-&gt;access_token, $app_settings-&gt;api_key, $app_settings-&gt;shared_secret
</code></pre>

<p>);
?>
```</p>

<p>Once you&rsquo;re done with that you can now use the <code>$shopify</code> variable to call methods from the API.
Here were getting a list of products that are published in the shop:</p>

<p><code>
&lt;?php
$products = $shopify('GET', '/admin/products.json', array('published_status' =&gt; 'published'));
?&gt;
</code></p>

<p>The first argument that we specify above is the request method. It can either be <code>GET</code> or <code>POST</code> depending on what&rsquo;s included in the documentation. Some methods require <code>GET</code> as the request method and some require <code>POST</code>. But the common pattern is that when you&rsquo;re modifying or creating something the request method to use is <code>POST</code>, but when only retrieving specific data you use <code>GET</code>.</p>

<p>The second argument is the resource that you&rsquo;re trying to access. In this case were accessing <code>products.json</code> which refers to the products in the shop.</p>

<p>The third argument is an array of arguments that you want to pass. There&rsquo;s a bunch of arguments that you can pass with the <code>products</code> resource. In the above example we used the <code>published_status</code> and supplied <code>published</code> as its value. This is like saying to the API that we only want to get the products which are published. In shopify products can either be draft or published. Published means that its already viewable by customers in your shop. It means that the merchant is already displaying the product for sale.
There&rsquo;s also the <code>product_type</code> argument this allows you to limit the products returned for a specific product type only. For example you only want to return perishable goods.</p>

<p>Here&rsquo;s a sample response:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [body_html] =&gt; Crested shirt
        [created_at] =&gt; 2013-10-13T23:09:53-04:00
        [handle] =&gt; crested-shirt
        [id] =&gt; 164668989
        [product_type] =&gt; t-shirts
        [published_at] =&gt; 2013-10-13T23:09:13-04:00
        [published_scope] =&gt; global
        [template_suffix] =&gt; 
        [title] =&gt; Crested shirt
        [updated_at] =&gt; 2013-10-14T01:31:44-04:00
        [vendor] =&gt; zentopia
        [tags] =&gt; 
        [variants] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [barcode] =&gt; 
                        [compare_at_price] =&gt; 
                        [created_at] =&gt; 2013-10-13T23:09:53-04:00
                        [fulfillment_service] =&gt; manual
                        [grams] =&gt; 234
                        [id] =&gt; 378254785
                        [inventory_management] =&gt; 
                        [inventory_policy] =&gt; deny
                        [option1] =&gt; Default Title
                        [option2] =&gt; 
                        [option3] =&gt; 
                        [position] =&gt; 1
                        [price] =&gt; 322.00
                        [product_id] =&gt; 164668989
                        [requires_shipping] =&gt; 1
                        [sku] =&gt; 
                        [taxable] =&gt; 1
                        [title] =&gt; Default Title
                        [updated_at] =&gt; 2013-10-13T23:09:53-04:00
                        [inventory_quantity] =&gt; 0
                    )

            )

        [options] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [id] =&gt; 197676733
                        [name] =&gt; Title
                        [position] =&gt; 1
                        [product_id] =&gt; 164668989
                    )

            )

        [images] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [created_at] =&gt; 2013-10-14T01:31:39-04:00
                        [id] =&gt; 330590691
                        [position] =&gt; 1
                        [product_id] =&gt; 164668989
                        [updated_at] =&gt; 2013-10-14T01:31:39-04:00
                        [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305
                    )

            )

        [image] =&gt; Array
            (
                [created_at] =&gt; 2013-10-14T01:31:39-04:00
                [id] =&gt; 330590691
                [position] =&gt; 1
                [product_id] =&gt; 164668989
                [updated_at] =&gt; 2013-10-14T01:31:39-04:00
                [src] =&gt; http://cdn.shopify.com/s/files/1/0279/0287/products/crest.jpg?305
            )

    )
</code></pre>

<p>)
```</p>

<p>Note that you can also specify the fields that you want to return by using the <code>fields</code> as an argument and supply a comma-separated list of the fields that you want to return. Something like:</p>

<p>```
&lt;?php
$arguments = array(</p>

<pre><code>'published_status' =&gt; 'published',
'fields' =&gt; 'body_html,created_at,handle,id,title,image'
</code></pre>

<p>);</p>

<p>$products = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/products.json&rsquo;, $arguments);
?>
```</p>

<p>The documentation for the products is available <a href="http://docs.shopify.com/api/product#index">here</a>.
Go through it so you know what other methods you can call that involves the products in the shop.</p>

<h4>Orders</h4>

<p>You can also access information about <a href="http://docs.shopify.com/api/order">orders</a> using the API.</p>

<p>To get a list of orders:</p>

<p>```
&lt;?php
$arguments = array(</p>

<pre><code>'limit' =&gt; '10', //default: 50
'page' =&gt; '1', //default: 1
'status' =&gt; 'open', 
</code></pre>

<p>);
$orders = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/orders.json&rsquo;, $arguments);
?>
```</p>

<p>Here&rsquo;s a sample response:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [buyer_accepts_marketing] =&gt; 1
        [cancel_reason] =&gt; 
        [cancelled_at] =&gt; 
        [cart_token] =&gt; ba56ddbaab418b79566316fe5e99e4e3
        [checkout_token] =&gt; 2b4ef76523c1bb6fc6e6825a97a4c992
        [closed_at] =&gt; 
        [confirmed] =&gt; 1
        [created_at] =&gt; 2013-10-17T00:13:59-04:00
        [currency] =&gt; PHP
        [email] =&gt; vbcanc@gmail.com
        [financial_status] =&gt; authorized
        [fulfillment_status] =&gt; 
        [gateway] =&gt; bogus
        [id] =&gt; 188680051
        [landing_site] =&gt; /
        [location_id] =&gt; 
        [name] =&gt; #1001
        [note] =&gt; 
        [number] =&gt; 1
        [reference] =&gt; 
        [referring_site] =&gt; 
        [source] =&gt; browser
        [subtotal_price] =&gt; 322.00
        [taxes_included] =&gt; 
        [test] =&gt; 1
        [token] =&gt; 35330c6d0bb04c0198ab94b04317e1af
        [total_discounts] =&gt; 0.00
        [total_line_items_price] =&gt; 322.00
        [total_price] =&gt; 342.00
        [total_price_usd] =&gt; 7.93
        [total_tax] =&gt; 0.00
        [total_weight] =&gt; 234
        [updated_at] =&gt; 2013-10-17T00:13:59-04:00
        [user_id] =&gt; 
        [browser_ip] =&gt; 180.191.38.211
        [landing_site_ref] =&gt; 
        [order_number] =&gt; 1001
        [discount_codes] =&gt; Array
            (
            )

        [note_attributes] =&gt; Array
            (
            )

        [processing_method] =&gt; direct
        [checkout_id] =&gt; 140790649
        [source_name] =&gt; web
        [line_items] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [fulfillment_service] =&gt; manual
                        [fulfillment_status] =&gt; 
                        [grams] =&gt; 234
                        [id] =&gt; 328820335
                        [price] =&gt; 322.00
                        [product_id] =&gt; 164668989
                        [quantity] =&gt; 1
                        [requires_shipping] =&gt; 1
                        [sku] =&gt; 
                        [title] =&gt; Crested shirt
                        [variant_id] =&gt; 378254785
                        [variant_title] =&gt; 
                        [vendor] =&gt; zentopia
                        [name] =&gt; Crested shirt
                        [variant_inventory_management] =&gt; 
                        [properties] =&gt; Array
                            (
                            )

                        [product_exists] =&gt; 1
                    )

            )

        [shipping_lines] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [code] =&gt; International Shipping
                        [price] =&gt; 20.00
                        [source] =&gt; shopify
                        [title] =&gt; International Shipping
                    )

            )

        [tax_lines] =&gt; Array
            (
            )

        [payment_details] =&gt; Array
            (
                [avs_result_code] =&gt; 
                [credit_card_bin] =&gt; 1
                [cvv_result_code] =&gt; 
                [credit_card_number] =&gt; XXXX-XXXX-XXXX-1
                [credit_card_company] =&gt; Bogus
            )

        [billing_address] =&gt; Array
            (
                [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                [address2] =&gt; 
                [city] =&gt; Coulsdon
                [company] =&gt; doble
                [country] =&gt; United Kingdom
                [first_name] =&gt; sfs
                [last_name] =&gt; rew
                [latitude] =&gt; 51.314819
                [longitude] =&gt; -0.12435
                [phone] =&gt; 3252325
                [province] =&gt; Surrey
                [zip] =&gt; CR5 2NG
                [name] =&gt; sfs rew
                [country_code] =&gt; GB
                [province_code] =&gt; 
            )

        [shipping_address] =&gt; Array
            (
                [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                [address2] =&gt; 
                [city] =&gt; Coulsdon
                [company] =&gt; doble
                [country] =&gt; United Kingdom
                [first_name] =&gt; sfs
                [last_name] =&gt; rew
                [latitude] =&gt; 51.314819
                [longitude] =&gt; -0.12435
                [phone] =&gt; 3252325
                [province] =&gt; Surrey
                [zip] =&gt; CR5 2NG
                [name] =&gt; sfs rew
                [country_code] =&gt; GB
                [province_code] =&gt; 
            )

        [fulfillments] =&gt; Array
            (
            )

        [client_details] =&gt; Array
            (
                [accept_language] =&gt; en-US,en;q=0.8
                [browser_ip] =&gt; xxx.xxx.xx.xxx
                [session_hash] =&gt; 4bb858f172df6367b05ab424f9c6bd0f778e711e9046c5a13833cc91bc33a237
                [user_agent] =&gt; Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.71 Chrome/28.0.1500.71 Safari/537.36
            )

        [customer] =&gt; Array
            (
                [accepts_marketing] =&gt; 1
                [created_at] =&gt; 2013-10-15T21:26:24-04:00
                [email] =&gt; vbcanc@gmail.com
                [first_name] =&gt; wef
                [id] =&gt; 148878735
                [last_name] =&gt; rew
                [last_order_id] =&gt; 
                [multipass_identifier] =&gt; 
                [note] =&gt; 
                [orders_count] =&gt; 0
                [state] =&gt; disabled
                [total_spent] =&gt; 0.00
                [updated_at] =&gt; 2013-10-17T00:14:01-04:00
                [verified_email] =&gt; 1
                [tags] =&gt; 
                [last_order_name] =&gt; 
                [image_url] =&gt; //gravatar.com/avatar/aba221e4cb888289b95b7864d754c4ce?default=http%3A%2F%2Fcdn.shopify.com%2Fs%2Fimages%2Fadmin%2Fcustomers%2Fcustomers_avatar_england_londonbridge.png
                [default_address] =&gt; Array
                    (
                        [address1] =&gt; 86-92 &amp; 103 Brighton Road Coulsdon Surrey
                        [address2] =&gt; 
                        [city] =&gt; Coulsdon
                        [company] =&gt; doble
                        [country] =&gt; United Kingdom
                        [first_name] =&gt; sfs
                        [id] =&gt; 193735639
                        [last_name] =&gt; rew
                        [phone] =&gt; 3252325
                        [province] =&gt; Surrey
                        [zip] =&gt; CR5 2NG
                        [name] =&gt; sfs rew
                        [province_code] =&gt; 
                        [country_code] =&gt; GB
                        [country_name] =&gt; United Kingdom
                        [default] =&gt; 1
                    )

            )

    )
</code></pre>

<p>)
```</p>

<p>As you can see from the above response all information about a specific order is returned. The line items, payment details, billing address and customer information are all included in the default response.
Information about the device (IP address, browser) were the order was made is also captured by Shopify.</p>

<h4>Webhooks</h4>

<p>The Shopify API also supports webhooks. In case you don&rsquo;t know what a webhook is here&rsquo;s a good definition from <a href="http://en.wikipedia.org/wiki/Webhook">Wikipedia</a>:</p>

<p><blockquote><p>A Webhook, in web development, is a method of augmenting or altering the behavior of a web page, or web application, with custom callbacks. These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application.</p></blockquote></p>

<p>In simple terms a webhook is used to perform specific actions when a certain event happens. In Shopify there are a number of events which you can hook into to perform specific action:</p>

<p>Webhooks can be set from the dev shop or from the app. To set a webhook from the dev shop go to the admin page of your shop, click on the settings tab then click on notifications tab. Scroll down until you find the webhooks section. To create a new webhook just click on the <code>create a webhook</code> button. Then select the event in which you want to add a webhook then enter the complete URL of the page where you want to submit the data when the specific event happens.</p>

<p><img src="/images/posts/getting_started_with_shopify_app_development/webhook.png" alt="Webhook" /></p>

<p>To add a webhook via the API simply make a <code>POST</code> request to the <code>webhooks</code> resource and passing in the <code>topic</code> and <code>address</code>. The <code>topic</code> is the actual event and the <code>address</code> is the URL which you want to submit the data returned from the specific event when it happens. Do note that we can&rsquo;t use the local server URL for this. It must be a URL that&rsquo;s actually accessible from the internet. In the example below were submitting the data to the address specified when a cart is created or updated.</p>

<p>```
&lt;?php
//when cart is created
$arguments = array(</p>

<pre><code>'topic' =&gt; 'cart/creation',
'address' =&gt; 'http://somewhere.com/update_inventory.php'
</code></pre>

<p>);</p>

<p>$webhooks = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/webhooks.json&rsquo;, $arguments);</p>

<p>//when cart is updated
$arguments = array(</p>

<pre><code>'topic' =&gt; 'cart/update',
'address' =&gt; 'http://somewhere.com/update_inventory.php'
</code></pre>

<p>);</p>

<p>$webhooks = $shopify(&lsquo;GET&rsquo;, &lsquo;/admin/webhooks.json&rsquo;, $arguments);
?>
```</p>

<p>Remember that every event where you can hook upon in the admin interface you can also create a hook on it using the API. You can read more about webhooks <a href="http://docs.shopify.com/api/tutorials/using-webhooks">here</a>.</p>

<p>If you want to check what specific data is being passed to the URL that you specify for a specific webhook you can use a service like <a href="http://requestb.in/">request bin</a></p>

<p>Heres a sample request for when a cart is created. You can use the properties under the <code>data</code> property as a basis for the data that you&rsquo;re going to access from the address that you specified in your webhook:</p>

<p>```json
{
  &ldquo;url&rdquo;: &ldquo;<a href="http://api.yourapihere.com/">http://api.yourapihere.com/</a>&rdquo;,
  &ldquo;headers&rdquo;: {</p>

<pre><code>"Connection": "close",
"X-Shopify-Topic": "carts/create",
"Host": "api.yourapihere.com",
"Accept-Encoding": "gzip, deflate, compress",
"X-Shopify-Shop-Domain": "test-shop.myshopify.com",
"User-Agent": "Ruby",
"Content-Type": "application/json",
"Content-Length": "281",
"Accept": "*/*"
</code></pre>

<p>  },
  &ldquo;args&rdquo;: {},
  &ldquo;data&rdquo;: &ldquo;{\"id\&rdquo;:\&ldquo;carts:eeafa272cebfd4b22385bc4b645e762c\&rdquo;,\&ldquo;token\&rdquo;:\&ldquo;eeafa272cebfd4b22385bc4b645e762c\&rdquo;,\&ldquo;line_items\&rdquo;:[{\&ldquo;id\&rdquo;:null,\&ldquo;title\&rdquo;:\&ldquo;Example T-Shirt\&rdquo;,\&ldquo;price\&rdquo;:\&ldquo;19.99\&rdquo;,\&ldquo;line_price\&rdquo;:\&ldquo;59.97\&rdquo;,\&ldquo;quantity\&rdquo;:3,\&ldquo;sku\&rdquo;:\&ldquo;example-shirt-s\&rdquo;,\&ldquo;grams\&rdquo;:200,\&ldquo;vendor\&rdquo;:\&ldquo;Acme\&rdquo;,\&ldquo;properties\&rdquo;:null,\&ldquo;variant_id\&rdquo;:null}]}&ldquo;,
  "origin&rdquo;: &ldquo;54.236.226.56&rdquo;,
  &ldquo;form&rdquo;: {},
  &ldquo;files&rdquo;: {},
  &ldquo;json&rdquo;: {</p>

<pre><code>"id": "carts:eeafa272cebfd4b22385bc4b645e762c",
"line_items": [
  {
    "id": null,
    "sku": "example-shirt-s",
    "variant_id": null,
    "quantity": 3,
    "vendor": "Acme",
    "grams": 200,
    "title": "Example T-Shirt",
    "properties": null,
    "price": "19.99",
    "line_price": "59.97"
  }
],
"token": "eeafa272cebfd4b22385bc4b645e762c"
</code></pre>

<p>  }
}
```</p>

<p>The data that is passed to the address that you specified is an <a href="http://php.net/manual/en/wrappers.php.php">input stream</a>. It&rsquo;s not passed using the common <code>GET</code> or <code>POST</code> request method. You can use the <code>fopen()</code> method in PHP and pass in the <code>php://input</code> stream. Then pass in <code>rb</code> as the mode. <code>rb</code> means read-only in binary mode.
Then we just loop through the input stream until we reach the end of the file. Inside the loop we also use the <code>fread()</code> method to read from the resource created when we called <code>fopen()</code> earlier. We also pass the maximum number of bytes to read which is 4096 (approximately 4Mb). Finally we close the resource and convert the webhook content to an array using the <code>json_decode()</code> method.</p>

<p>`&ldquo;php
&lt;?php
$webhook_content = &rdquo;;
$webhook = fopen(&lsquo;php://input&rsquo; , &lsquo;rb&rsquo;);
while(!feof($webhook)){ //loop through the input stream while the end of file is not reached</p>

<pre><code>$webhook_content .= fread($webhook, 4096); //append the content on the current iteration
</code></pre>

<p>}
fclose($webhook); //close the resource</p>

<p>$data = json_decode($webhook_content, true); //convert the json to array</p>

<p>//do whatever you want with the data
?>
```</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it! You&rsquo;ve learned how to create a Shopify app. Creating a shopify app involves creating a Shopify partners account, a dev shop and an app. You&rsquo;ve also learned that Shopify apps aren&rsquo;t directly integrated into a shop, instead it is hosted somewhere else. Shopify apps are a nice way to extend the functionality that is already available to Shopify.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://docs.shopify.com/api/the-basics/getting-started">The basics of Building a Shopify App</a></li>
<li><a href="http://www.shopify.com/technology/3671962-developing-shopify-apps-part-1-the-setup#axzz2itCLJCrk">Developing Shopify Apps</a></li>
<li><a href="https://github.com/sandeepshetty/shopify_api">Sandeepshetty/shopify_api</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gettting Started with Coinbase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/"/>
    <updated>2013-11-03T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started developing applications which communicates with the Coinbase API. But first what is Coinbase?</p>

<p><blockquote><p>Coinbase is a service that allows you to use bitcoins as a means of payment for goods and services.<br/>Its like Paypal but for bitcoins.</p></blockquote></p>

<p>First thing that you need to do is to register an account with Coinbase.</p>

<p><img src="/images/posts/coinbase_api/coinbase-register.png" alt="register account" /></p>

<p>Then go to your email and verify the account.</p>

<p>Accept the license.</p>

<p><img src="/images/posts/coinbase_api/coinbase-license.png" alt="accept license" /></p>

<p>Next, click on account settings and then click on the integrations tab:</p>

<p><img src="/images/posts/coinbase_api/coinbase-api.png" alt="integrations" /></p>

<p>Next, click on show my API key. You would need to enter your password to verify that you are indeed the account owner. Initially the API key is disabled so you need to enable it as well.</p>

<p><img src="/images/posts/coinbase_api/enable-apikey.png" alt="enable api key" /></p>

<p>After that, simply copy the API key that&rsquo;s displayed.</p>

<p><img src="/images/posts/coinbase_api/copy-apikey.png" alt="copy api key" /></p>

<p>The API key will be used for authenticating requests to the Coinbase API.</p>

<h3>Authentication</h3>

<p>There are 2 ways in which a request to the API can be authenticated:</p>

<ol>
<li>API key</li>
<li>OAuth2</li>
</ol>


<h4>Authentication using API Key</h4>

<p>Authenticating a request via the API Key is the easier way of making requests to the API. All you have to do is to append the api key on each request. The cool thing is you can directly execute a request to the API directly from the browser for methods that can be called via <code>GET</code>.</p>

<p>For example when you want to get the account balance, you simply do something like:</p>

<p><code>
https://coinbase.com/api/v1/account/balance?api_key=xyz
</code></p>

<p>There&rsquo;s a bunch of other methods which you can call directly from the browser. They&rsquo;re all listed <a href="https://coinbase.com/api/doc/1.0.html">here</a>. Do note that you can only call a method directly from the browser when its request method is <code>GET</code>. <code>POST</code> methods cannot be called directly from the browser, you need to use <code>curl</code> or <code>file_get_contents()</code> to be able to make the request.</p>

<p>Here&rsquo;s an example of using <code>curl</code> to generate  a payment button, remember to pass the API Key along with the parameters required by the specific API method:</p>

<p>```php
&lt;?php</p>

<pre><code>$request = '{
    "api_key" : "xyz", 
    "button": {
        "name": "test",
        "price_string": "1.23",
        "price_currency_iso": "USD"
    }
}';

$post_fields = json_decode($request, true); //convert json string to an object
$post_fields = http_build_query($post_fields); //urlencode for arrays

$curl = curl_init();
curl_setopt($curl, CURLOPT_POST, true); //tell curl that were posting some data along with the request 
curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields); //the data that we want to post
curl_setopt($curl, CURLOPT_URL, 'https://coinbase.com/api/v1/buttons'); //the request url

curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); //return the transfer, by default its being echoed out
$response = curl_exec($curl); //execute the request
</code></pre>

<p>?>
```</p>

<p>The method that we have used above is the <code>buttons</code> method. It only requires 3 arguments:</p>

<ul>
<li><p><strong>button[name]</strong> &ndash; the name of the item or service for which you are collecting bitcoins.</p></li>
<li><p><strong>button[price_string]</strong> &ndash; the total price of the item or service.</p></li>
<li><p><strong>button[price_currency_iso]</strong> &ndash; the currency of the price used in the <code>button[price_string]</code> argument. Examples are <code>USD</code>, <code>PHP</code>, <code>SGD</code>, <code>CAD</code>, or <code>BTC</code> for the bitcoin currency. It would be easier if <code>BTC</code> isn&rsquo;t used so you won&rsquo;t have to convert. Simply use your local currency and the API will automatically convert it to <code>BTC</code> depending on the current exchange rate.</p></li>
</ul>


<p>The response would be formatted in JSON:</p>

<p>```json
{</p>

<pre><code>"success": true,
"button": {
    "code": "93865b9cae83706ae59220c013bc0afd",
    "type": "buy_now",
    "style": "buy_now_large",
    "text": "Pay With Bitcoin",
    "name": "test",
    "description": "Sample description",
    "custom": "Order123",
    "price": {
        "cents": 123,
        "currency_iso": "USD"
    }
}
</code></pre>

<p>}
```</p>

<p>To generate the payment button, simply create a div with a class of <code>coinbase-button</code> then give it a data attribute <code>data-code</code> using the button code as its value. After that create a new script element and use the <code>button.js</code> from coinbase:</p>

<p>```html</p>

<div class="coinbase-button" data-code="<?php echo $response->button->code; ?>"></div>


<script src="https://coinbase.com/assets/button.js"></script>


<p>```</p>

<p>The response returned above can also be used for generating payment pages.
All you have to do is append the button code to the coinbase checkout url:</p>

<p><code>html
&lt;?php
$response = json_decode($response); //convert json string to an object
?&gt;
&lt;a href="https://coinbase.com/checkouts/&lt;?php echo $response-&gt;button-&gt;code; ?&gt;"&gt;Checkout&lt;/a&gt;
</code></p>

<h4>Authentication using OAuth2</h4>

<p>Authentication using OAuth2 is a bit difficult. Thankfully there are good people out there who creates libraries that makes our lives easier. One of those libraries is the <a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a> library.</p>

<p>To use it, simply download the zip file from the Github repository or clone it on your machine. Once the download is done, you can just include it on your working script:</p>

<p><code>php
&lt;?php
require 'libs/coinbase/Coinbase.php';
?&gt;
</code></p>

<p>After that, you can go ahead and call the methods available from the library. In the example below were calling the <code>getOrders()</code> method which simply returns all the orders received by the merchant who owns the API Key that is used in the code. This means that every merchant who plans to integrate Coinbase in their application has to create their own Coinbase app in order to receive an API Key. The API Key will then serve as their identification for each request that is made to the API. Yes this is a bit of a drag for the merchants but that&rsquo;s just how it works so there&rsquo;s no choice but to stick with it.</p>

<p><code>
&lt;?php
$api_key = 'xyz';
$coinbase = new Coinbase($api_key);
$orders = $coinbase-&gt;getOrders();
?&gt;
</code></p>

<p>The response returned from the code above is not the same as the response that you directly get from the API.
The library already converts it to an object so there&rsquo;s no need to. Here&rsquo;s an example of looping through the orders:</p>

<p>```
&lt;?php
if($orders->total_count > 0){</p>

<pre><code>foreach($orders-&gt;orders as $row){

    echo $row-&gt;order-&gt;created_at; 
    echo $row-&gt;order-&gt;button-&gt;description; 
    echo $row-&gt;order-&gt;status; 
    echo $row-&gt;order-&gt;total_native-&gt;cents; 
    echo $row-&gt;order-&gt;button-&gt;name; 

}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to perform requests to the Coinbase API. Requests can be performed directly from the browser or via Curl. You have also learned how to generate payment buttons via the API.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://coinbase.com/api/doc/1.0.html">API Documentation</a></li>
<li><a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to perform cross-domain AJAX requests]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests/"/>
    <updated>2013-10-24T18:30:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how you can perform cross-domain AJAX requests.
There&rsquo;s really no bullet-proof method of doing this. It might work, it might not since AJAX requests should only be performed within the same domain due to security concerns.</p>

<p>Note that I&rsquo;m not going to show how to perform an AJAX request to any domain from any domain. What I&rsquo;m going to show you is how to perform an AJAX request to a different domain which you have control over the code.</p>

<p>For example you want to get some data via AJAX from <code>xyz.com</code>. You are making the request from <code>abc.com</code> so it wouldn&rsquo;t work if you do something like:</p>

<p>```javascript
$.get(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;}, function(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>});
```</p>

<p>If you have control over the code that returns the response that you need, all you need to do is to convert the data that you&rsquo;re returning to JSON string and then wrap it up with a function call. Here&rsquo;s an example:</p>

<p><code>php
&lt;?php
$data = array('fname' =&gt; 'haru', 'lname' =&gt; 'tora');
echo "parse_results(" . json_encode($data) . ")";
?&gt;
</code></p>

<p>When calling the method from <code>abc.com</code> all you have to do is to use the <code>$.getJSON()</code> method and declare the same function that you used on <code>xyz.com</code>. In this case the name of the function is <code>parse_results()</code>:</p>

<p>```javascript
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.getJSON(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;};
```</p>

<p>You can also use the more robust <code>$.ajax()</code> method if you want:</p>

<p>```
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.ajax({</p>

<pre><code>url : 'http://xyz.com/get_data',
type : 'GET',
dataType: 'jsonp',
data : {
    'data' : 'abc'
}
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Delicious API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api/"/>
    <updated>2013-10-20T13:17:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get the links that you have bookmarked using Delicious using the Delicious API.</p>

<p>The Delicious API unlike other Web API&rsquo;s that&rsquo;s using either OAuth, OAuth2 or their custom Authentication method is using <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Basic Access Authentication</a>. This means that performing API calls requires the username and the password of the user whose bookmarks you want to have access to.
This means that there&rsquo;s no confidentiality with this Authentication method. Without you knowing, the application that&rsquo;s going to do the talking with the Delicious API can just save your username and password in a database and the developers can have access to the links that you&rsquo;ve bookmarked in your account whether public or private. So as a user its recommended that you only bookmark links that doesn&rsquo;t contain any confidential or classified information.</p>

<h3>Delicious Class</h3>

<p>First let&rsquo;s go ahead and create the class that we will be using to access the Delicious API. Let&rsquo;s name it <code>class.delicious.php</code>. Then declare the 4 private variables that we will be using throughout the class:</p>

<p>```php
&lt;?php
class delicious{</p>

<pre><code>private $curl;
private $curl_options; //options that will be used for curl
private $username; //delicious username
private $password; //delicious password
</code></pre>

<p>?>
```</p>

<p>The constructor will accept 2 arguments, the delicious username and password. We&rsquo;ll also initialize <code>curl</code> so we don&rsquo;t have to initialize it on every method call.</p>

<p>```
&lt;?php
public function __construct($username, $password){</p>

<pre><code>$this-&gt;username = $username;
$this-&gt;password = $password;
$this-&gt;curl = curl_init();
</code></pre>

<p>}
?>
```</p>

<p>Next, create the <code>set_options()</code> method. This method will simply set the curl options.</p>

<p>```
&lt;?php
public function set_options(){</p>

<pre><code>$this-&gt;curl_options = array(
    CURLOPT_RETURNTRANSFER =&gt; 1, //return the response from the delicious API.
    CURLOPT_SSL_VERIFYPEER =&gt; false, //disable verification of the peer's certificate 
    CURLOPT_USERPWD =&gt; $this-&gt;username . ':' . $this-&gt;password //set the username and password to be used for authentication
);
</code></pre>

<p>}
?>
```</p>

<p>Next is the <code>execute()</code> method. This method is called from every method calls that are responsible for calling a specific method from the API. What it does is to assign the curl options to the curl object, executes it and then returns the response.</p>

<p>```
&lt;?php
public function execute(){</p>

<pre><code>curl_setopt_array($this-&gt;curl, $this-&gt;curl_options);

$response = curl_exec($this-&gt;curl);
if(!$response){
    //terminate the execution of the script if there's no response
    die('Error: "' . curl_error($this-&gt;curl) . '" - Code: ' . curl_errno($this-&gt;curl));
}
curl_close($this-&gt;curl); //close the connection              
return $response;
</code></pre>

<p>}
?>
```</p>

<h4>Getting all Bookmarks</h4>

<p>We can now create the methods for actually getting the bookmarks. The first method that we will create is the <code>get_all()</code> method. As the name suggests, the <code>get_all()</code> method simply gets everything that you have ever bookmarked on your delicious account. This might take some time to execute depending on the number of links that you have bookmarked.</p>

<p>```
&lt;?php
public function get_all(){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
$response = $this-&gt;execute();
$xml = simplexml_load_string($response); //converts the string response into an xml object      
return $xml;
</code></pre>

<p>}
?>
```</p>

<p>Before we proceed with the next method, I&rsquo;d like you to take a few minutes to observe what were doing here.
Because the pattern that we&rsquo;ve used here will be used on other methods that we will be creating later.</p>

<p>As you can see, were calling the <code>set_options()</code> method to set the arguments that will be needed for the request.</p>

<p><code>
&lt;?php
$this-&gt;set_options();
?&gt;
</code></p>

<p>Next, we set the main URL that were requesting from. In this cae were requesting the <code>https://api.del.icio.us/v1/posts/all</code> url. At the time of writing of this article, the main request url is <code>https://api.del.icio.us</code> The version of the API is <code>v1</code> and the method is <code>posts/all</code>. You can see the full list of API methods that you can call <a href="https://github.com/avos/delicious-api/blob/master/APIs.md">here</a>.</p>

<p><code>
&lt;?php
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
?&gt;
</code></p>

<p>Next, we execute the request. The <code>execute()</code> method returns the response from the API. The response is basically in string format so we have to process it further to really get into the details that we want.</p>

<p><code>
&lt;?php
$response = $this-&gt;execute();
?&gt;
</code></p>

<p>In order to do that we call the <code>simplexml_load_string()</code> method. It&rsquo;s a built-in PHP method which you can call to convert a string response into an XML object. You can read more about it <a href="http://php.net/manual/en/function.simplexml-load-string.php">here</a>.</p>

<p><code>
&lt;?php
$xml = simplexml_load_string($response);
?&gt;
</code></p>

<p>After converting the response to an XML object, we simply return it.</p>

<p><code>
&lt;?php
return $xml;
?&gt;
</code></p>

<h4>Getting Bookmarks by Tag</h4>

<p>We can also get bookmarks by tag name. All we have to do is to specify the <code>tag</code> argument to the <code>posts/all</code> method and supply a url encoded value as the query.</p>

<p>```
&lt;?php
public function get_by_tag($tag){</p>

<pre><code>$this-&gt;set_options();
$request_url = 'https://api.del.icio.us/v1/posts/all?tag=' . urlencode($tag);
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Bookmarks by Offset</h4>

<p>We can also get by a certain limit and offset. All we have to do is supply a value for the <code>start</code> argument (offset), and the <code>results</code> argument (limit).</p>

<p>```
&lt;?php
public function get_by_offset($start, $limit){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/all?start=' . $start;
$request_url .= '&amp;results=' . $limit;
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();        
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Recently Bookmarked Links</h4>

<p>Recently bookmarked links can also be fetched from the API. The method to be used is the <code>posts/recent</code> method.
You can also supply an optional <code>tag</code> or <code>count</code> argument.</p>

<p>`&ldquo;
&lt;?php
public function get_recent($tag = &rdquo;, $count = 1){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/recent?';
if(!empty($tag)){ //limit results by tag
    $request_url .= 'tag=' . urlencode($tag);
}

if(!empty($count)){ //limit results by bookmark count
    $request_url .= '&amp;count=' . $count;
}
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        

return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Bookmarking Links</h4>

<p>Bookmarking new links can also be done from the API. The method to be used is the <code>posts/add</code> method.
The <code>url</code> argument is required and you can also set an optional <code>description</code> or <code>tags</code>. If there are more than one tags you can separate them using a comma (E.g php, web-development)</p>

<p>`&ldquo;
&lt;?php
public function add($url, $description = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/add?';
$request_url .= 'url=' . urlencode($url);
$request_url .= '&amp;description=' . urlencode($description);
$request_url .= '&amp;tags=' . urlencode($tags);

$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<h4>Deleting Bookmarks</h4>

<p>You can also delete links that were previously bookmarked. The request method is <code>posts/delete</code>.
You have to pass in the <code>url</code> of the link that you wish to delete.</p>

<p>```
&lt;?php
public function delete($url){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/delete?url=' . $url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<p>There are a bunch of other methods which you can use so be sure to check out the Delicious API documentation.</p>

<h3>Using the Class</h3>

<p>```
&lt;?php
&lt;?php
require_once(&lsquo;class.delicious.php&rsquo;);</p>

<p>$username = &lsquo;XYZ&rsquo;;
$password = &lsquo;secret&rsquo;;</p>

<p>$deli = new Delicious($username, $password);</p>

<p>$links = $deli->get_by_tag(&lsquo;php&rsquo;);</p>

<p>foreach($links->post as $row){
?></p>

<pre><code>&lt;li&gt;&lt;?php echo $row['href']; ?&gt;&lt;/li&gt;
</code></pre>

<p>&lt;?php <br/>
}
?>
```</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/avos/delicious-api/blob/master/APIs.md">Delicious API</a></li>
<li><a href="https://github.com/anchetaWern/delicious-php">Delicious-PHP</a> &ndash; a little PHP class that I created for interacting with the Delicious API</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<p>```php
&lt;?php
class Flickr{</p>

<pre><code>private $flickr_key;
private $flickr_secret;
private $format = 'json';

public function __construct($flickr_key, $flickr_secret) {

    $this-&gt;flickr_key = $flickr_key;
    $this-&gt;flickr_secret = $flickr_secret;
}
</code></pre>

<p>?>
```</p>

<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<p>`&ldquo;
&lt;?php
public function searchPhotos($query = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$urlencoded_tags = array(); 

if(!empty($tags)){  
    $tags_r = explode(',', $tags);
    foreach($tags_r as $tag){
        $urlencoded_tags[] = urlencode($tag);
    }
}   

//construct the url
$url  = 'http://api.flickr.com/services/rest/?';
$url .= 'method=flickr.photos.search';
$url .= '&amp;text=' . urlencode($query);
$url .= '&amp;tags=' . implode(',', $urlencoded_tags); //convert the array of url encoded tags back to a string
$url .= '&amp;sort=relevance';
$url .= '&amp;safe_search=1';
$url .= '&amp;content_type=4';
$url .= '&amp;api_key=' . $this-&gt;flickr_key;
$url .= '&amp;format=' . $this-&gt;format;
$url .= '&amp;per_page=10';

//get the results
$result = file_get_contents($url);

//remove the unneccessary strings that wraps the result returned from the API
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);

$photos = array();
$data = json_decode($json, true);

//check if the status didn't fail
if($data['stat'] != 'fail'){
    //return only the data for the photos as that's the only thing that we need
    $photos = $data['photos']['photo'];
    return $photos;
}else{
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<p><code>
&lt;?php
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);
?&gt;
</code></p>

<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<p>```
&lt;?php
$photos = array();
$data = json_decode($json, true);</p>

<p>//check if the status didn&rsquo;t fail
if($data[&lsquo;stat&rsquo;] != &lsquo;fail&rsquo;){</p>

<pre><code>//return only the data for the photos as that's the only thing that we need
$photos = $data['photos']['photo'];
return $photos;
</code></pre>

<p>}else{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<p><code>
&lt;?php
$src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
?&gt;
</code></p>

<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<p>```
&lt;?php
require_once(&lsquo;class.flickr.php&rsquo;);</p>

<p>$flickr = new Flickr($api_key, $api_secret);</p>

<p>$results = $flickr->searchPhotos($query, $tags);
if(!empty($results)){</p>

<pre><code>foreach($results as $photo){

    $src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
</code></pre>

<p>?></p>

<pre><code>&lt;img src="&lt;?php echo $src; ?&gt;" alt="&lt;?php echo $photo['title']; ?&gt;"&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
