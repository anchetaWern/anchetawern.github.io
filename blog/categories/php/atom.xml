<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-12-11T15:30:32+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Passwords in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php/"/>
    <updated>2015-12-11T12:35:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/12/11/securing-passwords-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial we&rsquo;re going to take a look at some of the libraries that allows us secure passwords in PHP.</p>

<h3>Password Compat</h3>

<p>The first library that we&rsquo;re going to look at is Password Compat. You can install it through <a href="https://getcomposer.org/">Composer</a> by using the following command.</p>

<p><code>
composer require ircmaxell/password-compat
</code></p>

<p>Once it&rsquo;s done installing, you can the include the vendor autoload file so you can use its functions.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
?&gt;
</code></p>

<p>The <code>password_hash</code> function is used to hash passwords. It accepts the password that you want to hash as its first argument and the algorithm to be used for password hashing as its second. In the example below, <code>PASSWORD_DEFAULT</code> is used. This allows you to use the most secure algorithm that&rsquo;s currently available to PHP. At the time of writing of this article, the most secure algorithm that&rsquo;s available to PHP is bcrypt. So that&rsquo;s the one that&rsquo;s being used when you specify <code>PASSWORD_DEFAULT</code> as the second argument.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$hash = password_hash($password, PASSWORD_DEFAULT);
?&gt;
</code></p>

<p>There&rsquo;s also an optional third argument which allows you to change the CPU <code>cost</code> of hashing the password. By default the <code>cost</code> is 10. So if you have a less powerful server you can change it to something lower. The <code>cost</code> can have a value between 4 and 31.</p>

<p><code>php
&lt;?php
$hash = password_hash($password, PASSWORD_DEFAULT, array('cost' =&gt; 7));
?&gt;
</code></p>

<p>You can then store the hash in your database.</p>

<p>To validate if a password matches the hash stored in the database, use the <code>password_verify</code> method. This accepts the password as the first argument and the hash as the second. So in your application you might have a query to select the user based on its email or username and then you use the hash that was returned for the second argument.</p>

<p>```php
&lt;?php
if(password_verify($password, $hash)){</p>

<pre><code>echo 'valid';   
</code></pre>

<p>}else{</p>

<pre><code>echo 'invalid';
</code></pre>

<p>}
?>
```</p>

<h3>PHPAss</h3>

<p>PHPAss is one of the older password hashing libraries that are available for PHP. Nevertheless it doesn&rsquo;t make it less secure than any of the password securing methods in this article. It uses the blowfish algorithm to hash passwords.</p>

<p>Execute the following to install PHPAss.</p>

<p><code>
composer require hautelook/phpass
</code></p>

<p>After including the vendor autoload file, set your current file to use the <code>PasswordHash</code> class in the <code>Hautelook</code> namespace.</p>

<p><code>php
&lt;?php
use Hautelook\Phpass\PasswordHash;
?&gt;
</code></p>

<p>Create a new password hasher instance. This accepts 2 required arguments. First is the base-2 logarithm of the iteration count used for password stretching. The second a boolean value for setting if the password will use portable hashes. The values that I&rsquo;ve set below are the default one&rsquo;s. Those will do for most use cases.</p>

<p><code>php
&lt;?php
$passwordHasher = new PasswordHash(8, false);
?&gt;
</code></p>

<p>You can then call the <code>HashPassword</code> method to actually hash the password. This hash should then be stored into the database.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$hash = $passwordHasher-&gt;HashPassword($password);
?&gt;
</code></p>

<p>You can check if a password is valid by using the <code>CheckPassword</code> method. This accepts the password as its first argument and the hash that came from the database as the second.</p>

<p>```php
&lt;?php
$passwordMatch = $passwordHasher->CheckPassword($password, $hash);
if($passwordMatch){</p>

<pre><code>echo 'valid';
</code></pre>

<p>}else{</p>

<pre><code>echo 'invalid';
</code></pre>

<p>}
?>
```</p>

<h3>PHP Password Lib</h3>

<p>PHP Password Lib is one of those libraries that isn&rsquo;t really recommended for production use. As mentioned in their <a href="https://github.com/ircmaxell/PHP-PasswordLib">Github page</a> itself, it&rsquo;s currently in beta and should be used at your own risk.</p>

<p>In order to install PHP Password Lib, you first have to add a <code>minimum-stability</code> option and set it to <code>dev</code>. Also set <code>prefer-stable</code> to <code>true</code> so that composer will default to installing the stable versions of the other libraries that you&rsquo;re installing via composer.</p>

<p><code>
"minimum-stability": "dev",
"prefer-stable": true
</code></p>

<p>Can&rsquo;t really find the library in <a href="https://packagist.org">Packagist</a> so you need to add the following to your <code>composer.json</code> file directly.</p>

<p><code>
"PasswordLib/PasswordLib": "*"
</code></p>

<p>Once that&rsquo;s done, execute <code>composer update</code> to update the dependencies.</p>

<p>To use the library, create a new instance of the <code>PasswordLib</code> class and then use it to call the <code>createPasswordHash</code> method to hash a password.</p>

<p><code>php
&lt;?php
$password = 'mypassword';
$lib = new PasswordLib\PasswordLib();
$hash = $lib-&gt;createPasswordHash($password);
?&gt;
</code></p>

<p>Just like the previous libraries it also comes with its own verify function.</p>

<p>```php
&lt;?php
$is_valid = $lib->verifyPasswordHash($password, $hash);
if($is_valid){</p>

<pre><code>echo 'yep';
</code></pre>

<p>}else{</p>

<pre><code>echo 'nope';
</code></pre>

<p>}
?>
```</p>

<p>Aside from the generating and verifying hashes, it also allows you to generate random tokens. A sample use case would be when users request for their password to be reset. That&rsquo;s commonly done by sending an email to the user. That email contains a link with a query parameter on it which has a random string as its value. That string is the token. Which is used for fetching the password reset request that was saved in the database.</p>

<p><code>php
&lt;?php
$token = $lib-&gt;getRandomToken(35);
echo $token; // Mpe/H3oLamOqEV4uxTwu.fuhKpb5p/u4BMu
?&gt;
</code></p>

<h3>zxcvbn-php</h3>

<p>zxcvbn-php is a library for estimating password strength.</p>

<p>You can install it by executing the following command.</p>

<p><code>
composer require bjeavons/zxcvbn-php
</code></p>

<p>To use the library, make use of the <code>ZxcvbnPhp\Zxcvbn</code> namespace.</p>

<p><code>php
&lt;?php
use ZxcvbnPhp\Zxcvbn;
?&gt;
</code></p>

<p>You can then determine the password score by calling the <code>passwordStrength</code> method.</p>

<p><code>php
&lt;?php
$zxcvbn = new Zxcvbn();
$password = 'mypassword';
$strength = $zxcvbn-&gt;passwordStrength($password);
echo $strength['score'];
?&gt;
</code></p>

<p>Based on my testing, it returns 0 if the password is not secure or easy to crack. And return 4 if it is secure. I haven&rsquo;t found any values between those and there&rsquo;s nothing higher than 4 so I assume it can only return a score of either 4 or 0. The result contains other data as well. Things like the entropy, calc_time and crack_time.</p>

<h3>GenPhrase</h3>

<p>Lastly, we&rsquo;re going to take a look at GenPhrase. This library allows us to generate secure passphrases in PHP.</p>

<p>To install GenPhrase, execute the following on your terminal.</p>

<p><code>
composer require genphrase/genphrase
</code></p>

<p>One note about the installation though. It&rsquo;s also mentioned in their <a href="https://github.com/timoh6/GenPhrase">official Github project page</a>. It mentioned that GenPhrase should be obtained only via secure connection using Github. This is because Composer is susceptible to man-in-the-middle attacks. If you&rsquo;re just testing, it&rsquo;s fine to install this library via composer. But if you&rsquo;re following this tutorial to implement this library on a production server then think again. You&rsquo;ve been warned.</p>

<p>To use GenPhrase, create a new instance of the <code>Password</code> class under the <code>GenPhrase</code> namespace. Then call the <code>generate</code> method to generate the random passphrase.</p>

<p><code>php
&lt;?php
$gen = new GenPhrase\Password();
echo $gen-&gt;generate(); // Slum treble Boost rack
?&gt;
</code></p>

<p>You can also pass the <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory">entropy</a>) as an argument. By default the value is 50. But you can have a value between 26 and 120.</p>

<p><code>php
&lt;?php
echo $gen-&gt;generate(60); // soviet!Retain8skinny&amp;spoil
?&gt;
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to secure passwords in PHP using the <a href="https://github.com/ircmaxell/password_compat">Password Compat</a>, <a href="https://github.com/hautelook/phpass">phpass</a>, <a href="https://github.com/ircmaxell/PHP-PasswordLib">PHP Password Lib</a>, <a href="https://github.com/bjeavons/zxcvbn-php">zxcvbn</a> and <a href="https://github.com/timoh6/GenPhrase">GenPhrase</a> libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get the Logo of Any Company]]></title>
    <link href="http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company/"/>
    <updated>2015-11-28T12:17:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/11/28/how-to-get-the-logo-of-any-company</id>
    <content type="html"><![CDATA[<p>In one of my previous projects called <a href="/projects/stockswitch/">StockSwitch</a>, I had the need to fetch and utilize the logo of companies that are included in the NYSE, NASDAQ, and AMEX. In this article, I&rsquo;ll be showing you how you can get the logo for any company so that you can use it in your projects.</p>

<p>The best way to get the logo of any company is via Clearbit&rsquo;s logo API. All you have to do is replace the value of <code>{DOMAIN-NAME}</code> with the domain name used by the company that you want.</p>

<p><code>
https://logo.clearbit.com/{DOMAIN-NAME}
</code></p>

<p>For example, you want to utilize Google&rsquo;s logo in your project. Simply create a new image tag and link to <code>logo.clearbit.com</code> followed by the domain name.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com"&gt;
</code></p>

<p>You can also pass in the following optional parameters.</p>

<ul>
<li>size &ndash; the size in pixels of the logo. The highest value I found to be valid is 800px. And the lowest is 5px.</li>
<li>format &ndash; you can pass either <code>png</code> or <code>jpg</code>.</li>
<li>greyscale &ndash; pass in a value of <code>true</code> if you want the logo to be in greyscale.</li>
</ul>


<p>For example, you want the image to be in 50px and the format is png.</p>

<p><code>html
&lt;img src="https://logo.clearbit.com/google.com?size=50&amp;format=png"&gt;
</code></p>

<p>You can also save it on your own server so you don&rsquo;t use Clearbit&rsquo;s resources every time the company logos are requested. Here&rsquo;s a sample code on how you might do it in php.</p>

<p>```php
&lt;?php
$companies = array(</p>

<pre><code>'facebook.com',
'google.com',
'oracle.com',
'amazon.com',
'ebay.com',
'uber.com',
'twitter.com',
'github.com'
</code></pre>

<p>);</p>

<p>foreach($companies as $company){</p>

<pre><code>$url = "https://logo.clearbit.com/{$company}?size=150&amp;format=png";
$contents = file_get_contents($url);
file_put_contents('logos/' . $company . '.png' , $contents);
</code></pre>

<p>}
?>
```</p>

<p>The code above gets the contents returned from the clearbit logo URL and then saves it to the <code>logos</code> directory in the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Dates and Times in PHP with Carbon]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon/"/>
    <updated>2015-10-31T17:32:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/31/working-with-dates-and-times-in-php-with-carbon</id>
    <content type="html"><![CDATA[<p>When writing PHP applications there&rsquo;s often a need for working with dates and times. In this tutorial, I&rsquo;ll be walking you through Carbon, a simple PHP API extension for the DateTime class. It basically makes working with dates and times a lot more easier. I&rsquo;ve personally used this library on my <a href="https://github.com/anchetaWern/ahead">Ahead</a> project, a Laravel app for scheduling posts to social media sites like Facebook, Twitter and LinkedIn.</p>

<h3>Installation</h3>

<p>To install Carbon, you need to use <a href="https://getcomposer.org/">Composer</a>.</p>

<p><code>
composer require nesbot/carbon
</code></p>

<h3>Usage</h3>

<p>Include the vendor autoload in your file and then use the <code>Carbon</code> class in the <code>Carbon</code> namespace.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Carbon\Carbon;
?>
```</p>

<h4>Getting the Current Date and Time</h4>

<p>You can get the current date and time using the <code>now</code> method. If you do not specify an argument, it uses the default timezone from your PHP config.</p>

<p><code>php
&lt;?php
echo Carbon::now(); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>If you want to use a different timezone, you can pass a <a href="http://php.net/manual/en/timezones.php">valid timezone</a> as the argument.</p>

<p><code>php
&lt;?php
echo Carbon::now('Asia/Manila'); //2015-07-26 20:21:20
?&gt;
</code></p>

<p>Aside from the <code>now</code> method, there&rsquo;s also <code>today</code>, which returns the start of today&rsquo;s date, <code>yesterday</code>, which returns the start of the date yesterday, and <code>tomorrow</code>, which returns the start of the date tomorrow.</p>

<p><code>php
&lt;?php
echo Carbon::today()-&gt;toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::yesterday()-&gt;toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::tomorrow()-&gt;toDateTimeString(); //2015-07-27 00:00:00
?&gt;
</code></p>

<h4>Converting to String</h4>

<p>By default, methods in Carbon returns a datetime object. Though its an object, you can directly output it using <code>echo</code> because of the <code>__toString</code> magic method. But if you want to convert it to a string, you can use the <code>toDateString</code> or <code>toDateTimeString</code> methods.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;toDateString(); //2015-07-26
echo Carbon::now()-&gt;toDateTimeString(); //2015-07-26 20:22:50
?&gt;
</code></p>

<h4>Parsing Dates</h4>

<p>You can also parse dates in all sorts of formats using the <code>parse</code> method.</p>

<p>```php
&lt;?php
echo Carbon::parse(&lsquo;2015/03/30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:00:00
echo Carbon::parse(&lsquo;2015-03-30 00:10:25&rsquo;)&ndash;>toDateTimeString(); //2015-03-30 00:10:25</p>

<p>echo Carbon::parse(&lsquo;today&rsquo;)&ndash;>toDateTimeString(); //2015-07-26 00:00:00
echo Carbon::parse(&lsquo;yesterday&rsquo;)&ndash;>toDateTimeString(); //2015-07-25 00:00:00
echo Carbon::parse(&lsquo;tomorrow&rsquo;)&ndash;>toDateTimeString(); //2015-07-27 00:00:00
echo Carbon::parse(&lsquo;2 days ago&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 20:49:53
echo Carbon::parse(&lsquo;+3 days&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 20:49:53
echo Carbon::parse(&lsquo;+2 weeks&rsquo;)&ndash;>toDateTimeString(); //2015-08-09 20:49:53
echo Carbon::parse(&lsquo;+4 months&rsquo;)&ndash;>toDateTimeString(); //2015-11-26 20:49:53
echo Carbon::parse(&lsquo;-1 year&rsquo;)&ndash;>toDateTimeString(); //2014-07-26 20:49:53
echo Carbon::parse(&lsquo;next wednesday&rsquo;)&ndash;>toDateTimeString(); //2015-07-29 00:00:00
echo Carbon::parse(&lsquo;last friday&rsquo;)&ndash;>toDateTimeString(); //2015-07-24 00:00:00
?>
```</p>

<h4>Constructing Dates</h4>

<p>You can also construct dates by using individual parts such as the year month and day.</p>

<p>```php
&lt;?php
$year = &lsquo;2015&rsquo;;
$month = &lsquo;04&rsquo;;
$day = &lsquo;12&rsquo;;</p>

<p>echo Carbon::createFromDate($year, $month, $day); //2015-04-12 20:55:59</p>

<p>$hour = &lsquo;02&rsquo;;
$minute = &lsquo;15&rsquo;:
$second = &lsquo;30&rsquo;;</p>

<p>echo Carbon::create($year, $month, $day, $hour, $minute, $second); //2015-04-12 02:15:30
?>
```</p>

<p>Optionally, you can pass in any valid timezone as the last argument for the <code>create</code> and <code>createFromDate</code> methods.</p>

<h4>Manipulating Dates</h4>

<p>Manipulating dates can be done by using <code>add</code> (to add) or <code>sub</code> (to subtract) followed by the unit of time you want to add or subtract. For example, you want to add a specific number of days to the specific date, you use the <code>addDays</code> method. There&rsquo;s also the <code>modify</code> method which allows you to pass in the modification that you want. It takes the format of <code>+</code> or <code>-</code> followed by the unit value and the unit. So if you want to add a year to the current date, you use <code>+1 year</code>. Check out the examples below to have an idea what else you can do.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;addDays(25); //2015-08-20 21:10:00
echo Carbon::now()-&gt;addWeeks(3); //2015-08-16 21:10:00
echo Carbon::now()-&gt;addHours(25); //2015-07-27 22:10:00
echo Carbon::now()-&gt;subHours(2); //2015-07-26 19:10:00
echo Carbon::now()-&gt;addHours(2)-&gt;addMinutes(12); //2015-07-26 23:22:00
echo Carbon::now()-&gt;modify('+15 days'); //2015-08-10 21:10:00
echo Carbon::now()-&gt;modify('-2 days'); //2015-07-24 21:10:00
?&gt;
</code></p>

<p>Commonly in PHP apps are international. This means that you need to work with different timezones. Here&rsquo;s how to convert from one timezone to another.</p>

<p><code>php
&lt;?php
echo Carbon::now()-&gt;setTimezone('America/Los_Angeles'); //2015-07-26 06:23:48
?&gt;
</code></p>

<h4>Comparing Dates</h4>

<p>You can use the following methods to compare dates in Carbon.</p>

<ul>
<li><code>min</code> &ndash; returns the smaller date.</li>
<li><code>max</code> &ndash; returns the larger date.</li>
<li><code>eq</code> &ndash; check if two dates are the same.</li>
<li><code>gt</code> &ndash; check if the first date is greater than the second date.</li>
<li><code>lt</code> &ndash; check if the first date is less than the second date.</li>
<li><code>gte</code> &ndash; check if the first date is greater than or equal to the second date.</li>
<li><code>lte</code> &ndash; check if the first date is lesser than or equal to the second date.</li>
</ul>


<p>Other helpful methods include <code>isWeekDay</code>, <code>isWeekend</code>, <code>isYesterday</code>, <code>isFuture</code> and <code>isPast</code>.</p>

<h4>Laravel Integration</h4>

<p>If you&rsquo;re on Laravel, you can just add an alias for the Carbon library in the <code>aliases</code> in the <code>app/config/app.php</code>.</p>

<p><code>
'Carbon' =&gt; 'Carbon\Carbon'
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Carbon library in PHP. Carbon is a really nice and easy way to work with dates in PHP. Be sure to check out the <a href="http://carbon.nesbot.com/docs/">official docs</a> to learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PDO in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php/"/>
    <updated>2015-10-10T20:20:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/10/using-pdo-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through how to use the PDO extension in PHP to connect to a MySQL database.</p>

<h3>Connecting to the Database</h3>

<p>The PDO extension is installed by default on modern versions of PHP so you don&rsquo;t have to worry about not having it on the machine. You should be upgrading to a recent version any way to take advantage of the security patches and other updates.</p>

<p>To connect to the database, you have to supply a data source name (DSN) as the first argument when creating a new instance of the PDO class. And then pass in the username and password of the user you want to login to the database as the second and third argument. You need to wrap the code in a <code>try..catch</code> block because it will return an error if there&rsquo;s a problem connecting to the database. Next, set the error mode to return an exception if there&rsquo;s an error executing a specific database query. And finally, set the emulation of prepared statements to <code>false</code>. This allows you to use the native parametrized query feature of the database instead of emulating it in the PHP side.</p>

<p>```php
&lt;?php
$dsn = &lsquo;mysql:dbname=DATABASE-NAME;host=DB-HOST&rsquo;;
$username = &lsquo;DATABASE-USER&rsquo;;
$password = &lsquo;USER-PASSWORD&rsquo;;
try {</p>

<pre><code>$db = new PDO($dsn, $username, $password);
$db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
</code></pre>

<p>} catch (PDOException $e){</p>

<pre><code>echo 'could not connect to the database';
</code></pre>

<p>}
?>
```</p>

<h3>Inserting Data</h3>

<p>Open up phpmyadmin or any database management tool that you&rsquo;re using and create a new database. Then execute the following query to create a <code>users</code> table. We will be using this table for executing queries in the database. If you&rsquo;re following along, don&rsquo;t forget to update the data source name to match the name of the database.</p>

<p><code>sql
CREATE TABLE IF NOT EXISTS `users` (
`id` int(11) NOT NULL,
  `name` varchar(300) NOT NULL,
  `age` int(11) NOT NULL,
  `email` varchar(300) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
</code></p>

<p>Once that&rsquo;s created, you can now try inserting a new user row in the <code>users</code> table. Just pass in the typical INSERT query as an argument to the <code>query</code> method using the new PDO instance that you created earlier.</p>

<p>```php
&lt;?php
$name = &lsquo;yoh asakura&rsquo;;
$age = 10;
$email = &lsquo;<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#x79;&#x6f;&#x68;&#x2d;&#97;&#115;&#x61;&#107;&#117;&#114;&#97;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#x6f;&#104;&#x2d;&#97;&#x73;&#x61;&#107;&#117;&#x72;&#x61;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>&rsquo;;</p>

<p>$db->query(&ldquo;INSERT INTO users SET name = &lsquo;$name&rsquo;, age = &lsquo;$age&rsquo;, email = &lsquo;$email&rsquo;&rdquo;);
?>
```</p>

<h3>Updating Data</h3>

<p>If you want to update a specific user, you still use the <code>query</code> method. The only difference is the query that you are passing in. This time you have to pass in an <code>UPDATE</code> query to set the new values and then use the <code>WHERE</code> clause to specify which specific row you want to update. In this case it&rsquo;s the first row in the <code>users</code> table.</p>

<p>```php
&lt;?php
$id = 1;
$name = &lsquo;ren tao&rsquo;;
$age = 10;
$email = &lsquo;<a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x72;&#101;&#110;&#x2d;&#x74;&#97;&#111;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x72;&#x65;&#x6e;&#x2d;&#116;&#x61;&#x6f;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>&rsquo;;</p>

<p>$db->query(&ldquo;UPDATE users SET name = &lsquo;$name&rsquo;, age = &lsquo;$age&rsquo;, email = &lsquo;$email&rsquo; WHERE id = &lsquo;$id&rsquo;&rdquo;);
?>
```</p>

<h3>Deleting Data</h3>

<p>If you want to delete a specific row, use the <code>DELETE</code> query and a <code>WHERE</code> clause to specify which rows you want to delete.</p>

<p><code>php
&lt;?php
$id = 1;
$db-&gt;query("DELETE  FROM users WHERE id = '$id'");
?&gt;
</code></p>

<h3>Selecting Data</h3>

<p>Selecting data still uses the same <code>query</code> method. Only this time you have to pass in a <code>SELECT</code> query. Then you can loop through the results and access the column that you want to output just like you would when accessing an item in an associative array.</p>

<p>```php
&lt;?php
$results = $db->query(&ldquo;SELECT name FROM users&rdquo;);
foreach($results as $row){</p>

<pre><code>echo $row['name'] . "&lt;br&gt;";
</code></pre>

<p>}
?>
```</p>

<p>If you think objects look better, you can use the <code>setAttribute</code> method to modify the default fetch mode.</p>

<p><code>php
&lt;?php
$db-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
?&gt;
</code></p>

<h3>Prepared Statements</h3>

<p>Prepared statements makes your queries more secure. Why? Because data is treated as data when you use prepared statements. This means that SQL statements such as <code>OR DROP TABLE users</code> wouldn&rsquo;t work if the user inputs an SQL statement instead of the expected data.
This is implemented in PDO by calling the <code>prepare</code> method and then passing in the query that you wish to execute. But instead of supplying the data directly, you replace it with placeholders. In this case the placeholder is <code>:name</code>.
You then call the <code>execute</code> method to actually execute the query. This method accepts an associative array containing the placeholder as the key and the actual value that you want to pass in as its value. Finally, you call the <code>FetchAll</code> method to fetch all the results that was returned.</p>

<p>```php
&lt;?php
$query = $db->prepare(&ldquo;SELECT name FROM users WHERE name LIKE :name&rdquo;);
$query->execute(array(</p>

<pre><code>':name' =&gt; 'Mr.%'
</code></pre>

<p>));</p>

<p>$results = $query->FetchAll();
foreach($results as $row){</p>

<pre><code>echo $row-&gt;name . "&lt;br&gt;";
</code></pre>

<p>}
?>
```</p>

<p>For queries that&rsquo;s only expected to return a single row, you can use the <code>fetch</code> method instead.</p>

<p><code>php
&lt;?php
$query = $db-&gt;prepare('SELECT name FROM users WHERE id = :id');
$query-&gt;execute(array(':id' =&gt; 2));
$user = $query-&gt;fetch();
echo $user-&gt;name;
?&gt;
</code></p>

<h3>Transactions</h3>

<p>Transactions in databases is a sequence of database operations that are treated as a single unit. You can use it to ensure that all the queries that you want to execute are all completed successfully. If one fails, nothing is actually committed to the database.</p>

<p>To test transactions, open up your database management tool of choice and execute the following. This will create the <code>other_details</code> table which stores the other details of a user.</p>

<p><code>sql
CREATE TABLE IF NOT EXISTS `other_details` (
`id` int(11) NOT NULL,
  `school` varchar(300) NOT NULL,
  `city` varchar(300) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
</code></p>

<p>For the example below, I&rsquo;m using a library called <a href="https://github.com/fzaninotto/Faker">Faker</a>. You can use it to generate fake data to be inserted into the database. You can install it through composer by executing the following command in your working directory.</p>

<p><code>
composer require fzaninotto/faker
</code></p>

<p>Once that&rsquo;s done installing, you can include the autoload file so that it&rsquo;s loaded in the current file. You can then create a new instance of it and then use the generator that you want. In the code below I&rsquo;m using the <code>name</code>, <code>numberBetween</code>, <code>email</code>, <code>company</code> and <code>city</code> generators.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$faker = Faker\Factory::create();</p>

<p>$name = $faker->name;
$age = $faker->numberBetween(10, 35);
$email = $faker->email;</p>

<p>$school = $faker->company;
$city = $faker->city;
?>
```</p>

<p>You can then create a new transaction by calling the <code>beginTransaction</code> method. Any queries that are executed after calling this wouldn&rsquo;t actually commit to the database until you call the <code>commit</code> method. In the example below, I&rsquo;m executing a query to insert a new user into the <code>users</code> table as well as the <code>other_details</code> table. If any of those 2 queries fails, it won&rsquo;t be committed to the database.</p>

<p>```php
&lt;?php
$db->beginTransaction();</p>

<p>$query = $db->prepare(&ldquo;INSERT INTO users SET name = :name, age = :age, email = :email&rdquo;);
$query->execute(array(&lsquo;:name&rsquo; => $name, &lsquo;:age&rsquo; => $age, &lsquo;:email&rsquo; => $email));</p>

<p>$query2 = $db->prepare(&ldquo;INSERT INTO other_details SET school = :school, course = :city&rdquo;);
$query2->execute(array(&lsquo;:school&rsquo; => $school, &lsquo;:city&rsquo; => $city));</p>

<p>$db->commit();
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to use the PDO extension in PHP. Note that it&rsquo;s not only the MySQL database that PDO supports. It also supports other databases such as CUBRID, PostgreSQL, SQLite and many others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Introduction to phpsh]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh/"/>
    <updated>2015-10-03T11:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh</id>
    <content type="html"><![CDATA[<p>In this quick-tip I&rsquo;ll introduce you to a tool called <a href="http://www.phpsh.org/">phpsh</a>. This project has been created for quite some time now. It was created at Facebook but is no longer actively being developed. But this shouldn&rsquo;t stop you from using it. It&rsquo;s a really important tool to have especially when you want to quickly test a PHP script. PHPsh is an interactive shell for PHP. It&rsquo;s features include the following:</p>

<ul>
<li>readline history</li>
<li>tab completion</li>
<li>quick access to documentation</li>
</ul>


<p>You can download it directly from <a href="http://github.com/facebook/phpsh/zipball/master">this link</a>.</p>

<p>Once you&rsquo;re done downloading phpsh, extract the zip file and navigate to the extracted folder. Then execute the following commands to install it in your system.</p>

<p><code>
python setup.py build
sudo python setup.py install
</code></p>

<p>Once that&rsquo;s done, you can now open any terminal window and execute <code>phpsh</code> to start using it.</p>

<p>To get documentation regarding a specific function, use the <code>d</code> command followed by the name of the function you want to look up. Here are a few examples.</p>

<p><code>
d echo
d array_push
d array_filter
</code></p>

<p>It will then output the documentation.</p>

<p>```</p>

<h1>echo</h1>

<p>(PHP 4, PHP 5)</p>

<p>echo &mdash; Output one or more strings</p>

<h3>Description</h3>

<p>void echo ( string $arg1 [, string $&hellip; ] )</p>

<p>Outputs all parameters.</p>

<p>echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses.</p>

<p>echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the <a href="#ini.short-open-tag">short_open_tag</a> configuration setting enabled.</p>

<p><code>I have &lt;?=$foo?&gt; foo.</code></p>

<h3>Parameters</h3>

<p>arg1</p>

<p>The parameter to output.</p>

<p>&hellip;</p>

<h3>Return Values</h3>

<p>No value is returned.</p>

<h3></h3>

<p>```</p>

<p>Aside from directly accessing the docs, you can also write and execute any PHP code that you wish to test. Here&rsquo;s a screenshot of me declaring an array and then looping through it.</p>

<p><img src="/images/posts/phpsh/php-sh.png" alt="phpsh" /></p>

<p>You can also connect to a database and perform operations on it.</p>

<p><img src="/images/posts/phpsh/db.png" alt="db" /></p>

<p>That&rsquo;s it for this quick-tip. I hope I&rsquo;ve encouraged you to use phpsh on your projects.</p>
]]></content>
  </entry>
  
</feed>
