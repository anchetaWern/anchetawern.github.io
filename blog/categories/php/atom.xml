<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-09-29T14:12:39+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Web Scraping in PHP]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php/"/>
    <updated>2013-08-07T17:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to get a specific data from another website but there&rsquo;s no API available for it?
That&rsquo;s where Web Scraping comes in, if the data is not made available by the website we can just scrape it from the website itself.</p>

<!--More-->


<p>But before we dive in let us first define what web scraping is. According to <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia</a>:</p>

<p><blockquote><p>Web scraping (web harvesting or web data extraction) is a computer software technique of extracting information from websites. Usually, such software programs simulate human exploration of the World Wide Web by either implementing low-level Hypertext Transfer Protocol (HTTP), or embedding a fully-fledged web browser, such as Internet Explorer or Mozilla Firefox.</p></blockquote></p>

<p>So yes, web scraping lets us extract information from websites.
But the thing is there are some legal issues regarding web scraping.
Some consider it as an act of trespassing to the website where you are scraping the data from.
That&rsquo;s why it is wise to read the terms of service of the specific website that you want to scrape because you might be doing something illegal without knowing it.
You can read more about it in this <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia page</a>.</p>

<h2>Web Scraping Techniques</h2>

<p>There are many techniques in web scraping as mentioned in the Wikipedia page earlier.
But I will only discuss the following:</p>

<ul>
<li>Document Parsing</li>
<li>Regular Expressions</li>
</ul>


<h3>Document Parsing</h3>

<p>Document parsing is the process of converting HTML into DOM (Document Object Model) in which we can traverse through.
Here&rsquo;s an example on how we can scrape data from a public website:</p>

<p>```php
&lt;?php
$html = file_get_contents(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;); //get the html returned from the following url</p>

<p>$pokemon_doc = new DOMDocument();</p>

<p>libxml_use_internal_errors(TRUE); //disable libxml errors</p>

<p>if(!empty($html)){ //if any html is actually returned</p>

<pre><code>$pokemon_doc-&gt;loadHTML($html);
libxml_clear_errors(); //remove errors for yucky html

$pokemon_xpath = new DOMXPath($pokemon_doc);

//get all the h2's with an id
$pokemon_row = $pokemon_xpath-&gt;query('//h2[@id]');

if($pokemon_row-&gt;length &gt; 0){
    foreach($pokemon_row as $row){
        echo $row-&gt;nodeValue . "&lt;br/&gt;";
    }
}
</code></pre>

<p>}
?>
```</p>

<p>What we did with the code above was to get the html returned from the url of the website that we want to scrape.
In this case the website is <a href="http://pokemondb.net">pokemondb.net</a>.</p>

<p><code>
&lt;?php
$html = file_get_contents('http://pokemondb.net/evolution');
?&gt;
</code></p>

<p>Then we declare a new DOM Document, this is used for converting the html string returned from <code>file_get_contents</code> into an actual Document Object Model which we can traverse through:</p>

<p><code>
&lt;?php
$pokemon_doc = new DOMDocument();
?&gt;
</code></p>

<p>Then we disable libxml errors so that they won&rsquo;t be outputted on the screen, instead they will be buffered and stored:</p>

<p><code>
&lt;?php
libxml_use_internal_errors(TRUE); //disable libxml errors
?&gt;
</code></p>

<p>Next we check if there&rsquo;s an actual html that has been returned:</p>

<p><code>
&lt;?php
if(!empty($html)){ //if any html is actually returned
}
?&gt;
</code></p>

<p>Next we use the <code>loadHTML()</code> function from the new instance of <code>DOMDocument</code> that we created earlier to load the html that was returned. Simply use the html that was returned as the argument:</p>

<p><code>
&lt;?php
$pokemon_doc-&gt;loadHTML($html);
?&gt;
</code></p>

<p>Then we clear the errors if any. Most of the time yucky html causes these errors. Examples of yucky html are inline styling (style attributes embedded in elements), invalid attributes and invalid elements. Elements and attributes are considered invalid if they are not part of the HTML specification for the doctype used in the specific page.</p>

<p><code>
&lt;?php
libxml_clear_errors(); //remove errors for yucky html
?&gt;
</code></p>

<p>Next we declare a new instance of <code>DOMXpath</code>. This allows us to do some queries with the DOM Document that we created.
This requires an instance of the DOM Document as its argument.</p>

<p><code>
&lt;?php
$pokemon_xpath = new DOMXPath($pokemon_doc);
?&gt;
</code></p>

<p>Finally, we simply write the query for the specific elements that we want to get. If you have used <a href="http://jquery.com/">jQuery</a> before then this process is similar to what you do when you select elements from the DOM.
What were selecting here is all the h2 tags which has an id, we make the location of the h2 unspecific by using double slashes <code>//</code> right before the element that we want to select. The value of the id also doesn&rsquo;t matter as long as there&rsquo;s an id then it will get selected. The <code>nodeValue</code> attribute contains the text inside the h2 that was selected.</p>

<p>```
&lt;?php
//get all the h2&rsquo;s with an id
$pokemon_row = $pokemon_xpath->query(&lsquo;//h2[@id]&rsquo;);</p>

<p>if($pokemon_row->length > 0){</p>

<pre><code>foreach($pokemon_row as $row){
    echo $row-&gt;nodeValue . "&lt;br/&gt;";
}
</code></pre>

<p>}
?>
```</p>

<p>This results to the following text printed out in the screen:</p>

<p><code>
Generation 1 - Red, Blue, Yellow
Generation 2 - Gold, Silver, Crystal
Generation 3 - Ruby, Sapphire, Emerald
Generation 4 - Diamond, Pearl, Platinum
Generation 5 - Black, White, Black 2, White 2
</code></p>

<p>Let&rsquo;s do one more example with the document parsing before we move on to regular expressions.
This time were going to get a list of all pokemons along with their specific type (E.g Fire, Grass, Water).</p>

<p>First let&rsquo;s examine what we have on pokemondb.net/evolution so that we know what particular element to query.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/check.png" alt="checking" /></p>

<p>As you can see from the screenshot, the information that we want to get is contained within a span element with a class of <code>infocard-tall</code>. Yes, the space there is included. When using XPath to query spaces are included if they are present, otherwise it wouldn&rsquo;t work.</p>

<p>Converting what we know into actual query, we come up with this:</p>

<p><code>
//span[@class="infocard-tall "]
</code></p>

<p>This selects all the span elements which has a class of <code>infocard-tall</code>. It doesn&rsquo;t matter where in the document the span is because we used the double forward slash before the actual element.</p>

<p>Once were inside the span we have to get to the actual elements which directly contains the data that we want. And that is the name and the type of the pokemon. As you can see from the screenshot below the name of the pokemon is directly contained within an <code>anchor</code> element with a class of <code>ent-name</code>. And the types are stored within a <code>small</code> element with a class of <code>aside</code>.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/info-card.png" alt="info card" /></p>

<p>We can then use that knowledge to come up with the following code:</p>

<p>```
&lt;?php
$pokemon_list = array();</p>

<p>$pokemon_and_type = $pokemon_xpath->query(&lsquo;//span[@class=&ldquo;infocard-tall &rdquo;]&rsquo;);</p>

<p>if($pokemon_and_type->length > 0){</p>

<pre><code>//loop through all the pokemons
foreach($pokemon_and_type as $pat){

    //get the name of the pokemon
    $name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;

    $pkmn_types = array(); //reset $pkmn_types for each pokemon
    $types = $pokemon_xpath-&gt;query('small[@class="aside"]/a', $pat);

    //loop through all the types and store them in the $pkmn_types array
    foreach($types as $type){
        $pkmn_types[] = $type-&gt;nodeValue; //the pokemon type
    }

    //store the data in the $pokemon_list array
    $pokemon_list[] = array('name' =&gt; $name, 'types' =&gt; $pkmn_types);

}
</code></pre>

<p>}</p>

<p>//output what we have
echo &ldquo;<pre>&rdquo;;
print_r($pokemon_list);
echo &ldquo;</pre>&rdquo;;
?>
```</p>

<p>There&rsquo;s nothing new with the code that we have above except for using query inside the <code>foreach</code> loop.
We use this particular line of code to get the name of the pokemon, you might notice that we specified a second argument when we used the <code>query</code> method. The second argument is the current row, we use it to specify the scope of the query. This means that were limiting the scope of the query to that of the current row.</p>

<p><code>
&lt;?php
$name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;
?&gt;
</code></p>

<p>The results would be something like this:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [name] =&gt; Bulbasaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[1] =&gt; Array
    (
        [name] =&gt; Ivysaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[2] =&gt; Array
    (
        [name] =&gt; Venusaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
</code></pre>

<p>```</p>

<h3>Regular Expressions</h3>

<p>Aside from document parsing we can also use regular expressions to scrape the data that we want from a specific webpage.
Regular expressions are useful if we only want to scrape actual content and not HTML elements because its difficult if not impossible to match all the possibilities of how an HTML element might have been written.
Consider the following example:</p>

<p><code>
&lt;link rel="stylesheet" href="style.css"&gt;
&lt;link href="style.css" rel="stylesheet"&gt;
&lt;link href="style.css" rel="stylesheet" /&gt;
&lt;link href="style.css" rel="stylesheet"/&gt;
&lt;link rel="stylesheet" href="style.css" type="text/css"&gt;
&lt;link type="text/css" rel="stylesheet" href="style.css"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet" /&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"/&gt;
</code></p>

<p>The code above is basically the same thing written in a bunch of ways. It would be difficult to scrape all the external stylesheets in a page using regular expressions as we would need to target every possible way that it can be written. So instead of using regular expressions we use document parsing to get all the external stylesheets. This is just one of the many cases in which regular expressions can&rsquo;t be used in scraping.</p>

<p>The main advantage of using regular expressions is its speed. The whole process of converting an HTML document into DOM and then traversing the DOM takes time especially if there are lots of elements which matches the query that you specify.
This is not the case with regular expressions as you&rsquo;re only working with strings and patterns with it, no conversion and traversing takes place so its very fast.</p>

<p>Ok enough with the explanations, here&rsquo;s an example on how to use regular expressions in scraping.
Here we are specifically looking for URL&rsquo;s which begins with <code>https://safelinking.net/</code> and followed by any instances of letters from A to Z and its lowercase version or any instances of numbers. Remember that we need to escape forward slashes and periods using a backslash. We then use the <code>preg_match_all()</code> function to get all the matches of the specific pattern that were looking for. The <code>preg_match_all()</code> function takes the pattern as its first argument, then the actual string where we want to find the pattern as its second argument, then the third argument would be the variable that will store the actual matches.</p>

<p>```
&lt;?php
$pokemon_episodes_html = file_get_contents(&lsquo;<a href="http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html">http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html</a>&rsquo;);
$pattern = &lsquo;/<a href="https://safelinking.net/d/">https://safelinking.net/d/</a>[A-Za-z0-9]*/&rsquo;;
preg_match_all($pattern, $pokemon_episodes_html, $matches);
?></p>

<pre>
    <?php print_r($matches); ?>
</pre>


<p>```</p>

<p>The code above will output the following:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [0] =&gt; https://safelinking.net/d/81b681a76a
        [1] =&gt; https://safelinking.net/d/04138fdd24
        [2] =&gt; https://safelinking.net/d/7378613026
</code></pre>

<p>```</p>

<h2>Web Scraping Tools</h2>

<p>You can also use some web scraping tools to make your life easier. Here are some of the PHP libraries that you can use for scraping.</p>

<h3>Simple HTML Dom</h3>

<p>To make web scraping easier you can use libraries such as <a href="http://simplehtmldom.sourceforge.net/">simple html DOM</a>.
Here&rsquo;s an example of getting the names of the pokemon using simple html DOM:</p>

<p>```
&lt;?php
require_once &lsquo;libs/simple_html_dom.php&rsquo;;
$html = file_get_html(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;);</p>

<p>foreach($html->find(&lsquo;a[class=ent-name]&rsquo;) as $element){</p>

<pre><code>echo $element-&gt;innertext . '&lt;br&gt;'; //outputs bulbasaur, ivysaur, etc...
</code></pre>

<p>}
?>
```</p>

<p>The syntax is more simple so the code that you have to write is lesser plus there are also some convenience functions and attributes which you can use. An example is the plaintext attribute which extracts all the text from a web page:</p>

<p><code>
&lt;?php
echo file_get_html('http://pokemondb.net/evolution')-&gt;plaintext;
?&gt;
</code></p>

<h3>Ganon</h3>

<p>You can also use <a href="https://code.google.com/p/ganon/">ganon</a> for web scraping which packs features such as support for html5, jQuery like syntax, manipulation of elements and their attributes.</p>

<p>Here&rsquo;s an example on how to use ganon to get all the images that are in a table element:</p>

<p>```
&lt;?php
require_once &lsquo;libs/ganon.php&rsquo;;
$html = file_get_dom($url);
if(!empty($html)){</p>

<pre><code>$elements = $html('table img');

foreach($elements as $element){
    echo $element-&gt;src . "&lt;br/&gt;"; //output the image source
}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial! You have learned the basics of web scraping in PHP.
You can take your adventures to the next level by scraping non-public parts of websites or scraping content that is dynamically generated.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://blog.hartleybrody.com/web-scraping/">I don&rsquo;t need no stinking API: Web Scraping for fun and profit</a></li>
<li><a href="http://blog.webspecies.co.uk/2011-07-27/web-scrapping-is-actually-pretty-easy.html">Web scraping is actually pretty easy</a></li>
<li><a href="https://news.ycombinator.com/item?id=4893922">Web scraping or API</a></li>
<li><a href="http://curl.haxx.se/">Curl</a></li>
<li><a href="http://simplehtmldom.sourceforge.net/">Simple HTML Dom</a></li>
<li><a href="https://code.google.com/p/ganon/">Ganon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ebay Finding API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api/"/>
    <updated>2013-04-03T08:09:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can access the e-bay finding API to access products that are sold from e-bay.
Product data such as the list price, available quantities, images are available from the e-bay finding API.</p>

<!--More-->


<h3>Getting an API Key</h3>

<p>First thing that you have to do is to get an API Key from e-bay.
This will serve as a unique identification for your application
and a means for e-bay to limit access to their API to only those that have an API key.</p>

<p>To get an API key you must first register with e-bay: <a href="https://developer.ebay.com/join/">developer.ebay.com/join</a></p>

<p>After successfully registering you will receive an email from e-bay. Click on the link to verify your email and you will be redirected to a screen similar to the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_ebay_finding_api/registration_success.jpg" alt="successful registration" /></p>

<p>You can then click on the get your application keys link, you will be redirected to the accounts page where you can click on the Generate production keys button to generate the API key.</p>

<h3>Building a Simple e-bay Class</h3>

<p>Next were going to build the class that were going to use later to access the API.
Create a new PHP file and name it <code>class.ebay.php</code>. Then put the following contents:</p>

<p>```
&lt;?php
class ebay{</p>

<p>}
?>
```</p>

<p>Inside the class declare the following private member variables:</p>

<p><code>php
&lt;?php
private $url = 'http://svcs.ebay.com/services/search/FindingService/v1';
private $app_id; //api key
private $global_id; //e-bay region (eg. EBAY-US)
private $version = '1.0.0'; //version of the API to use
private $format = 'json'; //format of the returned data
?&gt;
</code></p>

<p>The <code>$url</code> is the address in which the API can be accessed.</p>

<p>The <code>$app_id</code> is the API key that you got earlier from registering your application with e-bay.</p>

<p>The <code>$global_id</code> is the e-bay region in which you want to access product data. Think of it as the e-bay store which you access in your browser when you want to buy something online. The e-bay store that you&rsquo;re accessing when you type in <code>ebay.com</code> is the US store which has a global id of <code>EBAY-US</code>. There are also other global ids that you can use, you can access them here: <a href="http://developer.ebay.com/DevZone/finding/CallRef/Enums/GlobalIdList.html">Global ID List</a></p>

<p>The <code>$version</code> is the version of the API that you want to use. At the time of writing of this article the version that is available is <code>1.0.0</code> so were going to use that here.</p>

<p>The <code>$format</code> is the format in which you want the returned data to be encoded. The preffered format is <code>json</code> since we can easily manipulate it using PHP or JavaScript.</p>

<p>Next is the constructor which will take up 3 arguments. The <code>$app_id</code> and <code>$global_id</code>.
The constructor is called once you create an object of this class so you&rsquo;ll have to pass in the 2 arguments when you create an object.</p>

<p>```
&lt;?php
public function __construct($app_id, $global_id){</p>

<pre><code>$this-&gt;app_id = $app_id; 
$this-&gt;global_id = $global_id; 
</code></pre>

<p>}
?><br/>
```</p>

<p>Next, create a new method and call it <code>findItems</code> this will take 2 arguments: the <code>$keyword</code> and the <code>$limit</code>.
The <code>$keyword</code> is your query. For example <code>computer accessories</code>.
The <code>$limit</code> is the number of products which you want to return.</p>

<p>In this method were simply appending the different parameters to the <code>$url</code> that we declared earlier.</p>

<p>The parameters that we have used here are:</p>

<ul>
<li><p>operation-name &ndash; the operation that you want to perform. In the example below were using the <code>findItemsByKeywords</code> operation. The type of operation will determine the other parameters that you will be including in your request.
In the case of <code>findItemsByKeywords</code> the required parameter is the <code>keywords</code>. There are also other operations which you can use you can find them at the <a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">call reference page</a>.</p></li>
<li><p><strong>service-version</strong> &ndash; the version of the API that you would want to use. In our example were using version    <code>1.0.0</code></p></li>
<li><p><strong>keywords</strong> &ndash; the parameter required by the <code>findItemsByKeywords</code> operation in which you supply your url encoded query.</p></li>
<li><p><strong>paginationInput.entriesPerPage</strong> &ndash; the number of entries per page</p></li>
<li><p><strong>security-appname</strong> &ndash; the APP id that you got from registering your application with e-bay</p></li>
<li><p><strong>response-data-format</strong> &ndash; the format in which you want the returned data to be.
The preferred format is json although you can also have XML or SOAP as response data format.</p></li>
</ul>


<p>Once the parameters are all appended together with the request url we can then make a request to the API by using the <code>file_get_contents</code> method and supplying the request url as the argument. And since we specified <code>json</code> as the format earlier were going to use the <code>json_decode</code> method to convert the json string into an array.</p>

<p>`&ldquo;
&lt;?php
public function findItems($keyword = &rdquo;, $limit = 2){</p>

<pre><code>$url    = $this-&gt;url . '?';
$url .= 'operation-name=findItemsByKeywords';
$url .= '&amp;service-version=' . $this-&gt;version;
$url .= '&amp;keywords=' . urlencode($keyword);
$url .= '&amp;paginationInput.entriesPerPage=' . $limit;

$url .= '&amp;security-appname='. $this-&gt;app_id;
$url .= '&amp;response-data-format=' . $this-&gt;format;

return json_decode(file_get_contents($url), true);
</code></pre>

<p>}
?><br/>
```</p>

<p>We can also have a method where we can have more specificity with what we want to find.
We can also specify the sorting type, item type, minimum price and maximum price. Note that we are using a different operation name for this method and that is the <code>findItemsAdvanced</code> operation.</p>

<p>`&ldquo;
&lt;?php
public function findItemsAdvanced($keyword = &rdquo;, $item_sort = &lsquo;BestMatch&rsquo;, $item_type = &lsquo;FixedPricedItem&rsquo;, $min_price = &lsquo;0&rsquo;, $max_price = &lsquo;9999999&rsquo;, $limit = 2){</p>

<pre><code>    $url    = $this-&gt;url . '?';
    $url .= 'operation-name=findItemsAdvanced';
    $url .= '&amp;service-version=' . $this-&gt;version;
    $url .= '&amp;global-id=' . $this-&gt;global_id;
    $url .= '&amp;keywords=' . urlencode($keyword);

    $url .= '&amp;sortOrder=BestMatch';
    $url .= '&amp;itemFilter(0).name=ListingType';
    $url .= '&amp;itemFilter(0).value=FixedPrice';
    $url .= '&amp;itemFilter(1).name=MinPrice';
    $url .= '&amp;itemFilter(1).value=' . $min_price;
    $url .= '&amp;itemFilter(2).name=MaxPrice';
    $url .= '&amp;itemFilter(2).value=' . $max_price;
    $url .= '&amp;paginationInput.entriesPerPage=' . $limit;
    $url .= '&amp;descriptionSearch=false';

    $url .= '&amp;security-appname='. $this-&gt;app_id;
    $url .= '&amp;response-data-format=' . $this-&gt;format;

    return json_decode(file_get_contents($url), true);
}
</code></pre>

<p>?>
```</p>

<p>Lastly, we can also create a method which simply returns an array of the sort orders available via e-bay.
You can find the available values for sort orders in <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsAdvanced.html#Request.sortOrder">this page</a>.</p>

<p>```
&lt;?php
public function sortOrders(){</p>

<pre><code>$sort_orders = array(
    'BestMatch' =&gt; 'Best Match',
    'BidCountFewest' =&gt; 'Bid Count Fewest',
    'BidCountMost' =&gt; 'Bid Count Most',
    'CountryAscending' =&gt; 'Country Ascending',
    'CountryDescending' =&gt; 'Country Descending',
    'CurrentPriceHighest' =&gt; 'Current Highest Price',
    'DistanceNearest' =&gt; 'Nearest Distance',
    'EndTimeSoonest' =&gt; 'End Time Soonest',
    'PricePlusShippingHighest' =&gt; 'Price Plus Shipping Highest',
    'PricePlusShippingLowest' =&gt; 'Price Plus Shipping Lowest',
    'StartTimeNewest' =&gt; 'Start Time Newest'
);

return $sort_orders;
</code></pre>

<p>}
?>
```</p>

<h3>Building a Simple App</h3>

<p>Time to use the class that we just created in building a simple application.
Our simple application will have a search field for inputting products that the user wants to search
and a drop-down box to sort the results.</p>

<p>The only product details that were going to show to the user is the item title, price and the product image.
In the code below were declaring an object of the class that we created earlier specifying the API key
and the e-bay region as the first and second parameter.</p>

<p>Then we call the <code>sortOrders</code> method which simply returns an array of sort orders that are available from the e-bay finding API.</p>

<p>Next, we build the form for searching products.</p>

<p>Finally, we check if the <code>$_POST['search']</code> variable is not empty and use its value together with the sort selected by the user as the argument for the <code>findItemsAdvanced</code> method.
Going back to the class that we created earlier we used <code>findItemsAdvanced</code> as the operation.
The operation determines the first index when accessing the results.
So for the <code>findItemsAdvanced</code> it will have <code>findItemsAdvancedResponse</code> as the first index.</p>

<p>```
&lt;?php
require_once(&lsquo;class.ebay.php&rsquo;);</p>

<p>$ebay = new ebay(&lsquo;YOUR API KEY&rsquo;, &lsquo;EBAY-US&rsquo;);
$sort_orders = $ebay->sortOrders();
?></p>

<p><form action="ebay_finding_test.php" method="post"></p>

<pre><code>&lt;input type="text" name="search" id="search"&gt;
&lt;select name="sort" id="sort"&gt;
&lt;?php
foreach($sort_orders as $key =&gt; $sort_order){
?&gt;
    &lt;option value="&lt;?php echo $key; ?&gt;"&gt;&lt;?php echo $sort_order; ?&gt;&lt;/option&gt;
&lt;?php   
}
?&gt;
&lt;/select&gt;
&lt;input type="submit" value="Search"&gt;
</code></pre>

<p></form></p>

<p>&lt;?php
if(!empty($_POST[&lsquo;search&rsquo;])){</p>

<pre><code>$results = $ebay-&gt;findItemsAdvanced($_POST['search'], $_POST['sort']);
$item_count = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['@count'];

if($item_count &gt; 0){
    $items = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['item'];

    foreach($items as $i){
</code></pre>

<p>?></p>

<pre><code>    &lt;li&gt;
        &lt;div class="item_title"&gt;
            &lt;a href="&lt;?php echo $i['viewItemURL'][0]; ?&gt;"&gt;&lt;?php echo $i['title'][0]; ?&gt;&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="item_img"&gt;
            &lt;img src="&lt;?php echo $i['galleryURL'][0]; ?&gt;" alt="&lt;?php echo $i['title']; ?&gt;"&gt;
        &lt;/div&gt;
        &lt;div class="item_price"&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['@currencyId']; ?&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['__value__']; ?&gt;
        &lt;/div&gt;
    &lt;/li&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>    }
}       
</code></pre>

<p>}
?>
```</p>

<p>Here&rsquo;s the demo for this simple application implemented using JavaScript by using Handlebars for the template and jQuery&rsquo;s <code>$.ajax</code> method to request the data. Be sure to place your own app id that you got from e-bay in order to make this demo work.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/L6Nkj/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it for this tutorial. Using the API is really easy since you don&rsquo;t need to construct signatures to be used in the request like other API&rsquo;s. Be sure to check out the resources below if you want to learn more about the e-bay finding API.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://developer.ebay.com/DevZone/finding/HowTo/">Finding API How To</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html">Making an API Call</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">Call Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/ebay_finding_api.7z">Sample Application Source Code</a></li>
<li><a href="http://tutorialdemos-wern.rhcloud.com/ebay_finding_api/ebay_finding_test.php">Sample Application Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Templating Libraries]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries/"/>
    <updated>2013-03-24T21:49:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through some of the templating libraries
that I&rsquo;m currently using for my projects specifically the following:</p>

<ul>
<li><a href="https://github.com/janl/mustache.js">Mustache</a></li>
<li><a href="https://github.com/wycats/handlebars.js/">Handlebars</a></li>
<li><a href="http://smarty.net/">Smarty</a></li>
</ul>


<p>Mustache is available for a bunch of languages but were going to use the JavaScript version for this tutorial.
Handlebars is only available on JavaScript. And Smarty is for PHP.</p>

<p>You can either use chrome dev tools, JS Fiddle (or any alternatives) or a local file for this tutorial.</p>

<!--More-->


<h3>Mustache</h3>

<p>Let&rsquo;s start by creating the two ingredients that Mustache needs in order
to create an output: a data source and a template.</p>

<h4>Basics</h4>

<p>Mustache mainly accepts JavaScript objects as its data source
and an html string for the template.</p>

<p>
<code>javascript
var name_obj = {'name' : 'Killua Zoldyc'}; //data source
var name_template = "&lt;h1&gt;{{name}}&lt;/h1&gt;"; //template
</code>
</p>

<p>After that, we can call the <code>Mustache.to_html()</code> method
to merge the data source and the template together:</p>

<p><code>
var name_html = Mustache.to_html(name_template, name_obj);
console.log(name_html);
</code></p>

<p>You can just use jQuery or plain JavaScript to append the html contained by <code>name_html</code> variable into the DOM.</p>

<h4>Collections</h4>

<p>Next let&rsquo;s do something less basic.
Let&rsquo;s try to use a group of hunters as our data source:</p>

<p>```javascript
var hunters = {</p>

<pre><code>'hunters' : [
    {'name' : 'Gon', 'nen' : 'Enhancer'},
    {'name' : 'Killua', 'nen' : 'Transmuter'},
    {'name' : 'Kurapika', 'nen' : 'Conjurer'},
    {'name' : 'Leorio', 'nen' : 'Emitter'}
    ]
</code></pre>

<p>};
```</p>

<p>For the template were going to make use of a table to display
both their names and nen ability:</p>

<p>
```html</p>

<script id="hunters" type="text/html">
    <h1>Hunters</h1>
    <table border="1">
        <tr>
            <th>Name</th>
            <th>Nen Ability</th>
        </tr>
        {{#hunters}}
        <tr>
            <td>{{name}}</td>
            <td>{{nen}}</td>
        </tr>
        {{/hunters}}
    </table>
</script>


<p> <br/>
```
</p>

<p>On our previous example we made use of a variable which stores an html string for the template.
But for the example above were using a <code>script</code> tag which has a type of <code>text/html</code> and plain html on its body.</p>

<p>We also used a new pair of tags for looping through the items in the array:</p>

<p>
<code>
{{#hunters}}
  #access the value for each of the properties here
{{/hunters}}
</code>
</p>

<p>The hash <code>#</code> marks the start of the loop and the forward slash <code>/</code> marks its end.
Then within those tags you can access the properties of the object.
In our example the properties are <code>name</code> and <code>nen</code>.</p>

<p>You can then append the html created from calling <code>Mustache.to_html()</code> into a container.
Just make sure you&rsquo;re doing it after the dom has fully loaded and you can do that by calling the
method inside jQuery&rsquo;s <code>document.read</code> event.</p>

<p>```</p>

<div class="container"></div>


<p>```</p>

<p>
```
var hunters_html = Mustache.to_html($(&lsquo;#hunters&rsquo;).html(), hunters);
$(function(){</p>

<pre><code>$('.container').html(hunters_html);
</code></pre>

<p>});
```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aj73t/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Arrays</h4>

<p>In our previous example we used an object as the data source and then accessed its properties inside the loop.
But what if the data source is an array?</p>

<p>For example we have this data source and we want to access the items in the <code>hunter_names</code> array:</p>

<p>```javascript
var hunter_names = {</p>

<pre><code>'hunter_names' : ['Gon', 'Killua', 'Kurapika', 'Leorio']
</code></pre>

<p>};
```</p>

<p>To access each of the items in the <code>hunter_names</code> array all we have to do is to place a dot <code>.</code> inside the template tags. The dot represents the current item in the array:</p>

<p>
```</p>

<script type="text/html" id="hunter_names">
    {{#hunter_names}}
        <li>{{.}}</li>
    {{/hunter_names}}
</script>


<p>```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Tb8pu/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Functions</h4>

<p>You can also make use of functions in Mustache.
For example we have an object which stores the items that we have added to the cart:</p>

<p>```javascript
var subtotal = function(){
   return this.price * this.quantity;
};</p>

<p>var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500, 
            'subtotal' : subtotal
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99,
            'subtotal' : subtotal
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500,
            'subtotal' : subtotal
        }
    ]
};
</code></pre>

<p>```</p>

<p>From the object above you can see that we have the <code>subtotal</code> property which we have assigned
to the <code>subtotal</code> function which returns the product of the <code>price</code> and the <code>quantity</code>.</p>

<p><code>this</code> simply refers to the current context where the function is being called so <code>this.price</code> simply refers to the price of the current item.</p>

<p>We can then define our template.
Note that were accessing the data from the <code>subtotal</code> property just like a normal property.
It seems like Mustache already does some of its sorcery once we call the    <code>Mustache.to_html()</code> method which might include computing the subtotal for each item.</p>

<p>So you don&rsquo;t really have to call the method from the template just like what we normally do when accessing the value returned from a property that was assigned to a function:</p>

<p><code>
cart.cart[0].subtotal();
</code></p>

<p>
```html</p>

<script id="functions" type="text/html">
  <table border="1">
      <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Subtotal</th>    
      </tr>
      {{#cart}}
      <tr>
        <td>{{name}}</td>
        <td>{{price}}</td>
        <td>{{quantity}}</td>
        <td>{{subtotal}}</td>
      </tr>
      {{/cart}}
  </table>
</script>


<p>```
</p>

<p>The common use cases for functions is when checking for the existence or truthiness of a value, computing values, and adding extra markup based on a certain condition.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/mGmPG/2/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Handlebars</h3>

<p>There&rsquo;s not really much difference between Mustache and Handlebars.</p>

<p>They still use the same template tags which looks like a double mustache <code></code>.
But the template tags also look like the Handlebars of a bicycle so maybe that&rsquo;s the reason behind the naming of this templating library.</p>

<p>Handlebars packs more features than Mustache since it has some simple logic tags which you can use like <code>if</code> , <code>with</code> and <code>each</code>. I believe templates should contain less logic as possible since templates are only for presentation.</p>

<p>Just like how we keep logic to a minimum in the views when working with MVC.
Handlebars has also limited the logic tags that we can use.</p>

<p>To emphasize that there isn&rsquo;t really much difference between Mustache and Handlebars I&rsquo;ll use the same object that we used earlier on our Mustache example:</p>

<p>```javascript
var subtotal = function(){
   return this.price * this.quantity;
};</p>

<p> var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500, 
            'subtotal' : subtotal
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99,
            'subtotal' : subtotal
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500,
            'subtotal' : subtotal
        }
    ]
</code></pre>

<p>};<br/>
```</p>

<p>And for the template the only change that we have here is the value of the type attribute of the script tag.
In this case the value is <code>text/x-handlebars-template</code>.</p>

<p>
```html</p>

<script id="functions" type="text/x-handlebars-template">
  <table border="1">
      <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Subtotal</th>    
      </tr>
      {{#cart}}
      <tr>
        <td>{{name}}</td>
        <td>{{price}}</td>
        <td>{{quantity}}</td>
        <td>{{subtotal}}</td>
      </tr>
      {{/cart}}
  </table>
</script>


<p> <br/>
```
</p>

<p>Handlebars isn&rsquo;t really picky when it comes to the value of tye <code>type</code> attribute.
You can actually use <code>text/html</code> as the value or nothing at all.</p>

<p>But its a good practice to always specify the <code>type</code> so that other people will know what that specific <code>script</code> tag is all about. Plus I haven&rsquo;t really tested if the two tags below would really work in all possible scenarios.</p>

<p>```html</p>

<script type="text/html"></script>




<script></script>


<p>```</p>

<p>Finally we can just call <code>Handlebars.compile</code> and supply the html string of our template as an argument to create the template. We can then call the template and supplying the data source <code>cart</code> as the argument then assign it as the html of the container:</p>

<p><code>
var cart_html = Handlebars.compile($('#functions').html());
$('.container').html(cart_html(cart));
</code></p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/H8Bac/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>In the above example we did not explicitly specify that we want to loop through the items in the cart.
In handlebars there&rsquo;s actually an alternative syntax for looping through the items in an array.
And that is by using the <code>each</code> keyword followed by the name of the array.</p>

<p>
<code>html
{{#each cart}}
&lt;tr&gt;
  &lt;td&gt;{{name}}&lt;/td&gt;
  &lt;td&gt;{{price}}&lt;/td&gt;
  &lt;td&gt;{{quantity}}&lt;/td&gt;
  &lt;td&gt;{{subtotal}}&lt;/td&gt;
&lt;/tr&gt;
{{/each}}
</code>
</p>

<h4>With</h4>

<p><code>With</code> is used to change the context on which the properties that are accessed inside of it are called.</p>

<p>First lets define our data source:</p>

<p>```javascript
var hunter = {</p>

<pre><code>'family_occupation' : 'assassin',
'hunter' : {
    'name' : 'killua zoldyc', 
    'ability' : 'transmuter'
}
</code></pre>

<p>};
```</p>

<p>Then our template:</p>

<p>
```html</p>

<script id="hunter" type="text/x-handlebars-template">
    {{#with hunter}}
        <h1>Name: {{name}}</h1>
        <h2>Ability: {{ability}}</h2>
        <h3>Family: {{../family_occupation}}</h3>
    {{/with}}
</script>




<div class="name"></div>


<!--container-->


<p>```
</p>

<p>As you can see from the template above we have change the context to <code>hunter</code> so any properties that are defined inside the <code>hunter</code> object will be accessible as long as they are within the <code>with</code> tags.</p>

<p>But if you want to access properties outside of the current context you can use <code>../</code> just like what we do when stepping back a single directory when linking assets relatively in html.
From our example the <code>family_occupation</code> property is outside the <code>hunter</code> object so we&rsquo;ve used <code>../</code> to step back.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ZprP6/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>If</h4>

<p><code>if</code> is used to check for the <a href="http://james.padolsey.com/javascript/truthy-falsey/">truthiness</a> of a value.
It can be used along with <code>else</code> to output something else in case a value is not present.</p>

<p>In our object below there is no value for the <code>box_weapon</code> of the first member.</p>

<p>```javascript
var family = {</p>

<pre><code>'member' : [
    {
        'name' : 'reborn',
        'box_weapon' : ''
    },
    {
        'name' : 'tsunayoshi sawada',
        'box_weapon' : 'sky lion'
    },
    {
        'name' : 'hibari kyoya',
        'box_weapon' : 'cloud hedgehog'
    },
    {
        'name' : 'gokudera hayato',
        'box_weapon' : 'storm leopard'
    },
    {
        'name' : 'takeshi yamamoto',
        'box_weapon' : 'rain swallow'
    },
    {
        'name' : 'ryohei sasagawa',
        'box_weapon' : 'sun kangaroo'
    },
    {
        'name' : 'lambo',
        'box_weapon' : 'lightning bull'
    },
    {
        'name' : 'rokudo mukuro',
        'box_weapon' : 'mist owl'
    }
]
</code></pre>

<p>};
```</p>

<p>We can then use <code>if</code> and <code>else</code> to check if the value is present or not and output something else if the value is not present:</p>

<p>
```html</p>

<script id="ifs" type="text/x-handlebars-template">
  <h1>vongola</h1>
  <table border="1">
      <tr>
        <th>Family Member</th>
        <th>Box Weapon</th>
      </tr>
      {{#each member}}
      <tr>
        <td>{{name}}</td>
        {{#if box_weapon}}
            <td>{{box_weapon}}</td>
        {{else}}
            <td>No box weapon</td><!--if value is not present-->
        {{/if}}
      </tr>
      {{/each}}
  </table>
</script>




<div class="family"></div>


<!--container-->


<p>```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/J8qXs/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Helpers</h4>

<p>Finally there are <code>helpers</code> which are like functions that you can call inside your Handlebars template.
They can be used to extend the functionality that Handlebars already provides by default.</p>

<p>For our example let&rsquo;s define the data source which is just an array of numbers from 1 to 10:</p>

<p>```javascript
var numbers = {</p>

<pre><code>'numbers' : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>

<p>};
```</p>

<p>Then let&rsquo;s define our handlebars helper. You can define a helper by calling <code>Handlebars.registerHelper</code>.
The first argument is the name of the helper, in this case the name is <code>multiply_by_10</code>.
The second argument is the callback function which contains the logic or the process that you want to perform with the data that you specify. The data that you want the function to use are specified as arguments. In this case we have the <code>num</code> variable. The helper below simply returns the value returned from multiplying the argument <code>num</code> with the number 10.</p>

<p><code>
Handlebars.registerHelper('multiply_by_10', function(num){
  return num * 10;
});
</code></p>

<p>We can then create the template and call the helper that we just created, supplying the current item in the array of numbers. The current item in an array is represented by <code>this</code> in Handlebars.</p>

<p>
```html</p>

<script id="helpers" type="text/x-handlebars-template">
{{#each numbers}}
    <li>{{multiply_by_10 this}}</li>
{{/each}}
</script>




<div class="num_container"></div>


<!--container-->


<p>```
</p>

<p>Let&rsquo;s do another example, this time were going to use the cart object that we used earlier.
But now we&rsquo;ll remove the <code>subtotal</code> property since we will let our helper take care of that.</p>

<p>```javascript
var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500
        }
    ]
</code></pre>

<p>};
```</p>

<p>For this example were going to use two helpers.
One will return the header for the table. And the other one will compute the subtotal.</p>

<p>Here&rsquo;s the helper that returns the header:</p>

<p>`&ldquo;
Handlebars.registerHelper(&lsquo;get_headers&rsquo;, function(obj){
  var table_headers = &rdquo;;</p>

<p>  for(var x in obj){</p>

<pre><code>if(obj.hasOwnProperty(x)){
    table_headers += "&lt;th&gt;" + x + "&lt;/th&gt;";
}
</code></pre>

<p>  }</p>

<p>  return new Handlebars.SafeString(table_headers);
});
```</p>

<p>What were doing in the code above is looping through the properties of the object that we specified
and then wrapping it in <code>th</code> tags. The current property is represented by the value stored in the variable <code>x</code>.
We then append this value to the the <code>table_headers</code> variable.</p>

<p>After looping through all of the properties of the object we then return the string accumulated by the <code>table_headers</code> variable. We have to return a <code>new Handlebars.SafeString(html_string)</code> because Handlebars automatically escapes HTML tags. This is a way of telling Handlebars not to escape the specific HTML that were trying to return from the helper.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/tENVa/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>JSON</h4>

<p>Finally were going to use real world data to supply to our template.
Twitter really makes it easy to retrieve the tweets of a specific user as long as the tweets are set to public
so were going to make use of the data from Twitter as the data source for our templates.</p>

<p>Here&rsquo;s our template:</p>

<p>
```html</p>

<script id="tweets">
    <h1>Wern Ancheta</h1>
    {{#each tweets}}
    <ul>
      <li>{{linkify text}}</li>
    </ul>
    {{/each}}
</script>




<div class="tweets_container"></div>


<!--container-->


<p>```
</p>

<p>Then extend the String prototype by adding a method called <code>replaceArray</code> this method will take two arrays as arguments. All it does is to loop through the <code>find</code> array and replaces the current item in the <code>find</code> array with the current item in the <code>replace</code> array and then assign it back to the original string which is represented by <code>this</code>. After looping through all of the items it just returns the string which now has been replaced with the items in the <code>replace</code> array:</p>

<p>```javascript
function replaceArray = function(find, replace) {
  var replaceString = this;
  var find_length = find.length;</p>

<p>  for (var i = 0; i &lt; find_length; i++) {</p>

<pre><code>replaceString = replaceString.replace(find[i], replace[i]);
</code></pre>

<p>  }
  return replaceString;
};
```</p>

<p>Next, create a helper that would change the url&rsquo;s in a specific tweet to a link that can be clicked:</p>

<p>```
Handlebars.registerHelper(&lsquo;linkify&rsquo;, function(text){</p>

<pre><code>var linkified = [];
var urls = text.match(/(\{(.+?)\}:)?(http:\/\/[\w\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[\w])+)/g);
if(urls){
    var url_count = urls.length;
    for (var i = 0; i &lt; url_count; i++) {
        var url_string = "&lt;a href='" + urls[i] + "'&gt;" + urls[i] + "&lt;/a&gt;";
        linkified.push(url_string);
    }
    return new Handlebars.SafeString(text.replaceArray(urls, linkified));

}else{
    return text;
}
</code></pre>

<p>});
```</p>

<p>In the code above were using regex to extract only the urls from the tweet.
For example we have this tweet:</p>

<p><code>
really nice interactive course on chrome developer tools http://t.co/wHdyEMnWjG
</code></p>

<p>Using the regex that we have above the <code>urls</code> variable will contain a single item:</p>

<p><code>
[http://t.co/wHdyEMnWjG]
</code></p>

<p>We then loop through all of those url&rsquo;s and wrapping it in anchor tags and then push it to the <code>linkified</code> variable.</p>

<p><code>
for (var i = 0; i &lt; url_count; i++) {
  var url_string = "&lt;a href='" + urls[i] + "'&gt;" + urls[i] + "&lt;/a&gt;";
  linkified.push(url_string);
}
</code></p>

<p>Then we call the <code>replaceArray</code> method that we created earlier to replace all the url&rsquo;s in the tweet to a url wrapped in anchor tags. Then we use it as an argument of the <code>Handlebars.SafeString</code> method so that Handlebars would not escape the HTML:</p>

<p><code>
return new Handlebars.SafeString(text.replaceArray(urls, linkified));
</code></p>

<p>In case there&rsquo;s no url in the current tweet we simply return the tweet without doing anything to it:</p>

<p><code>
return text;
</code></p>

<p>Finally we can compile the template for the tweets and then issue an AJAX request to the Twitter API to get the tweets.
The <code>dataType</code> should be <code>jsonp</code> since we can&rsquo;t really make a request to another domain if we don&rsquo;t specify the data type as <code>jsonp</code>. If you want to learn more about it check out this question at stackoverflow: <a href="http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about">What is jsonp all about</a>.</p>

<p>Once the request succeeded we can then replace the HTML of our tweets container with the HTML string returned from merging the template with the data coming from Twitter:</p>

<p>```
var tweets_template = Handlebars.compile($(&lsquo;#tweets&rsquo;).html());</p>

<p>$.ajax({</p>

<pre><code>url: 'https://api.twitter.com/1/statuses/user_timeline.json?screen_name=wern_ancheta&amp;count=5&amp;exclude_replies=true',
dataType: 'jsonp',
success: function(tweets){

    $('.tweets_container').html(tweets_template({'tweets' : tweets}));
}
</code></pre>

<p>});
```</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aZra5/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Smarty</h3>

<p>The last library that were going to play around today is the Smarty templating engine for PHP.
And for that you need to download Smarty over at <a href="http://www.smarty.net">smarty.net</a>.</p>

<p>The main smarty file is the <code>Smarty.class.php</code> stored in the <code>libs</code> directory.
Include it on your working file and then do the housekeeping (make an instance of the smarty class, set the template directory):</p>

<p>```php
&lt;?php
require_once &lsquo;libs/Smarty.class.php&rsquo;;</p>

<p>$smarty = new Smarty;
$smarty->setTemplateDir(&lsquo;smarty_templates&rsquo;); //this is where all your template files are stored
?>
```</p>

<p>Next create a template under the <code>smarty_templates</code> directory.
The file extension for smarty templates is <code>.tpl</code>.</p>

<p>Next, we create our data source:</p>

<p><code>
&lt;?php
$names = array(
  'Yoh Asakura', 'Ichigo Kurosaki',
  'Uzumaki Naruto', 'Edward Elric',
  'Alibaba Saluja', 'BK201', 'Luffy'
);
?&gt;
</code></p>

<p>Then assign a template variable and call it <code>names</code>.
You can use the  <code>assign</code> method to assign template variables.
It takes up 2 arguments which is the name of the variable and then the variable which stores the data.</p>

<p><code>
&lt;?php
$smarty-&gt;assign('names', $names);
?&gt;
</code></p>

<p>Note that the name of the variable doesn&rsquo;t necessarily need to be the same as the name you gave to the variable which stores the data. So you can also have something like:</p>

<p><code>
&lt;?php
$smarty-&gt;assign('anime', $names);
?&gt;
</code></p>

<p>For our template we simply loop through the items in the array.
Here were using <code>foreach</code> to loop through the items.</p>

<p>
```html</p>

<h1>Anime</h1>


<p>{foreach $names as $n}
  <li>{$n}</li>
{/foreach}
```
</p>

<p>For our final example were just going to reuse the cart that we had earlier:</p>

<p>```php
&lt;?php
$cart = array(
  array(</p>

<pre><code>'name' =&gt; 'racket',
'price' =&gt; 200,
'quantity' =&gt; 5
),
</code></pre>

<p>  array(</p>

<pre><code>'name' =&gt; 'table',
'price' =&gt; 500,
'quantity' =&gt; 4
),
</code></pre>

<p>  array(</p>

<pre><code>'name' =&gt; 'bat',
'price' =&gt; 300,
'quantity' =&gt; 7
)
</code></pre>

<p>);
?>
```</p>

<p>And for the template:</p>

<p>
```html</p>

<h2>Cart</h2>


<table border="1">
  <!--Loop through the properties of the first item (name, price, quantity)-->
  <tr>
  {foreach $cart[0] as $h => $p}
    <th>{$h}</th>
  {/foreach}
  </tr>
  {foreach $cart as $i}
  <tr>
    <td>{$i.name}</td>
    <td>{$i.price}</td>
    <td>{$i.quantity}</td>
  </tr>
  {/foreach}
</table>


<p>There are {$cart|count} items in the cart.
```
</p>

<p>Some of the functions that you can use on PHP can also be used inside Smarty templates.
For the code above we have used the <code>count</code> function. To use a function inside a template you simply specify the value that you want to supply as the argument of the function and then followed by a pipe <code>|</code> and then the function name, in this case the function name is <code>count</code> which simply returns how many items are in the array that was specified.</p>

<h2>Conclusion</h2>

<p>There&rsquo;s not really much difference between PHP and Smarty syntax and you can actually do everything in PHP if you like.</p>

<p>But why would we need to use templates instead of just plain PHP?</p>

<p>Because templates has much more cleaner syntax and it encourages code reuse.
Sometimes in our projects we need to make use of the same HTML structure for
the data that were presenting and often times we just repeat ourselves.
Using a template can help make our code DRYer.</p>

<p>Another reason is that by using Smarty and other templating engines we can avoid writing something like this:</p>

<p>```php
&lt;?php
$html_str   = &ldquo;<h1>Heading</h1>&rdquo;;
$html_str  .= &ldquo;<ul>&rdquo;;
foreach($items as $row){
  $html_str  .= &ldquo;<li>&rdquo; . $row[&lsquo;name&rsquo;] . &ldquo;</li>&rdquo;;
}
$html_str  .= &ldquo;</ul>&rdquo;;</p>

<p>echo $html_str;
?>
```</p>

<p>Or something like this:</p>

<p>```
&lt;?php
ob_start();
?></p>

<h1>Heading</h1>


<ul>
<?php
foreach($items as $row){
?> 
  <li><?php echo $row['name']; ?></li>
<?php
}
?>
</ul>


<p>&lt;?php
$html = ob_get_contents();
ob_end_flush();
echo $html;
?>
```</p>

<p>The code above doesn&rsquo;t really look great and we can avoid having to write those kinds of codes by using templates.
This is true for all the templating libraries that we have gone around in this article and others which we haven&rsquo;t tackled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Laravel's Validation Class]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/12/25/extending-laravels-validation-class/"/>
    <updated>2012-12-25T18:29:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/12/25/extending-laravels-validation-class</id>
    <content type="html"><![CDATA[<p>Laravel is built with useful validation rules like required, numeric, unique data from a table in a database, etc.
But there are some situations where the built-in validation rules cannot handle.
That&rsquo;s where extending Laravel&rsquo;s validation class comes in handy.
In this post I&rsquo;ll be showing you how to extend Laravel&rsquo;s validation class.
This will enable you to use custom validation rules specifically created for your needs.</p>

<!--More-->


<h4>Validating Arrays</h4>

<p>One thing I&rsquo;ve noticed while evaluating Laravel is that it doesn&rsquo;t have the methods that deals with an array of data.
For example if you have this form:</p>

<p>```html
<form method="post"></p>

<pre><code>&lt;label for=""&gt;Students&lt;/label&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="submit" value="Save"&gt;
</code></pre>

<p></form>
```</p>

<p>And you want every student name to be required. Using Laravel&rsquo;s built in methods. You do something like this:</p>

<p>```php
&lt;?php
$rules = array(&lsquo;student_name&rsquo; => &lsquo;required&rsquo;);</p>

<p>$validator = Validator::make(Input::all(), $rules);</p>

<p>if($validator->fails()){</p>

<pre><code>//redirect back to form with errors
</code></pre>

<p>}else{</p>

<pre><code>//save form to database
</code></pre>

<p>}
?>
```</p>

<p>But if you might have already noticed. This doesn&rsquo;t work.
Curiosity leads us to inspecting Laravel&rsquo;s validation method for the required rule (<code>laravel/validator.php</code>):</p>

<p>```
&lt;?php
/<em>*
 * Validate that a required attribute exists in the attributes array.
 *
 * @param  string  $attribute
 * @param  mixed   $value
 * @return bool
 </em>/
protected function validate_required($attribute, $value)
{</p>

<pre><code>if (is_null($value))
{
    return false;
}
elseif (is_string($value) and trim($value) === '')
{
    return false;
}
elseif ( ! is_null(Input::file($attribute)) and is_array($value) and $value['tmp_name'] == '')
{
    return false;
}

return true;
</code></pre>

<p>}
?>
```</p>

<p>As you can see from the above method. It doesn&rsquo;t seem that Laravel is automatically dealing with array as inputs for form. Looking closer this block of code seems to be close to what were looking for. But this only deals with file input(stored in <code>$_FILES</code>). So this isn&rsquo;t the method were looking for.</p>

<p>`&ldquo;
&lt;?php
elseif ( ! is_null(Input::file($attribute)) and is_array($value) and $value[&lsquo;tmp_name&rsquo;] == &rdquo;)
{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>Thankfully the creators of Laravel made it incredibly easy to extend its validation class in case a need like this arises. To extend Laravel&rsquo;s validation class we&rsquo;ll need to create a new library at <code>application/libraries</code>.
Let&rsquo;s name it <code>Validator</code>.</p>

<p>```
&lt;?php
class Validator extends Laravel\Validator {</p>

<p>}
?><br/>
```</p>

<p>Then disable the autoloading of the validator class on <code>application/config/application.php</code> file.</p>

<p><code>
'Task'          =&gt; 'Laravel\\CLI\\Tasks\\Task',
'URI'           =&gt; 'Laravel\\URI',
'Validator'     =&gt; 'Laravel\\Validator', //remove this line
'View'          =&gt; 'Laravel\\View',
</code></p>

<p>Then we create a method that will deal with array inputs:</p>

<p>```
&lt;?php
/<em>*
 * checks if an array input has no empty values
</em>/
public function validate_arrayfull($attribute, $value, $parameters){</p>

<pre><code>return in_array('', $value);
</code></pre>

<p>}
?>
```</p>

<p>Naturally laravel&rsquo;s input class would be able to capture any kind of input be it a regular string, file, or array.</p>

<p>Methods for the validation class accepts 3 arguments:</p>

<ol>
<li><strong>Attribute</strong> &ndash; the name given to the input (Eg. name, age)</li>
<li><strong>Value</strong> &ndash; the value of the input (Eg. Yael, 27)</li>
<li><strong>Parameters</strong> &ndash;  additional data passed after defining the rules.
For example the additional data that you pass after defining a <code>unique</code> rule:</li>
</ol>


<p>```
&lt;?php
$rules = array(</p>

<pre><code>'username' =&gt; unique:tbl_users,username
</code></pre>

<p>);
?>
```</p>

<p>The additional data that I&rsquo;m referrring to is the string that comes after the colon (tbl_users,username).
In the case of defining a unique rule for a particular field. The first parameter is the name of the table, the second parameter is the name of the field.</p>

<p>The important thing to note here is that parameters are separated by comma.
And that method names has a prefix of <code>validate_</code>.</p>

<p>Ok back to the <code>arrayfull()</code> method.
Basically what the <code>arrayfull()</code> method does is to check whether an array contains empty values
by using the <code>in_array()</code> method. The <code>in_array()</code> method simply returns <code>true</code> if it has found a specific value in the array and <code>false</code> if it didn&rsquo;t find the value:</p>

<p><code>
return in_array('', $value);
</code></p>

<h4>Validating Dates</h4>

<p>One more thing I&rsquo;ve noticed about Laravel is its date validation rules.
It only has rules for before and after a certain date.
This is good but there should also be a validation rule for simply validating if
the user input is indeed a date. So I&rsquo;ve written a method that does it:</p>

<p>```
&lt;?php
public function validate_date($attribute, $value, $parameters){</p>

<pre><code>$e_str = explode("-", $value);
</code></pre>

<p>  if(count($e_str) === 3){</p>

<pre><code>//expected format for date input is: Y-m-d
$year = $e_str[0];
$month = $e_str[1];
$day = $e_str[2];

return checkdate($month, $day, $year); //expected format for checkdate is: m-d-y
</code></pre>

<p>  }
  return false;
}
?>
```</p>

<p>As you can see were counting the number fragments after invoking the <code>explode()</code> method.
Anything other than 3 is not a valid number of fragments since the expected date format is supposed
to have 3 fragments(Year-Month-Day).
Once it passes this condition we then check if the date is a valid date in the Gregorian calendar
by invoking the <code>checkdate()</code> function which accepts 3 arguments(month, day, year).</p>

<h4>Default Validation Messages</h4>

<p>You can just set the validation messages when creating an instance of the validator class like this:</p>

<p>```
&lt;?php
$rules = array();</p>

<p>$messages = array(</p>

<pre><code>'username' =&gt; 'username is required'
);
</code></pre>

<p>$validator = Validator::make(Input:all(), $rules, $messages);
?><br/>
```</p>

<p>But if you want to set default messages for your
validation rules then you can set it on <code>application/language/en/validation.php</code>.</p>

<p><code>
&lt;?php
"date"              =&gt; "The :attribute is invalid date",
"arrayfull"     =&gt; "The :attribute contains empty values",
"arrayunique"   =&gt; "The :attribute contains duplicate values"
?&gt;
</code></p>

<p>The key will be the name of the validation method.
For example if the name of your validation method is <code>validate_date</code> then the key will be <code>date</code>.
The value will be the error message that you want to show up when there&rsquo;s an error with the validation.
<code>:attribute</code> represents the name of the field.</p>

<h3>Resources</h3>

<p><a href="http://laravel.com/docs">Laravel Documentation</a>
<a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/extending_laravels_validation_class.7z">Sample Application Source Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a User Management System in Laravel]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/12/17/building-a-user-management-system-in-laravel/"/>
    <updated>2012-12-17T14:03:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/12/17/building-a-user-management-system-in-laravel</id>
    <content type="html"><![CDATA[<p>There&rsquo;s no shortage of good resources for learning laravel.
So instead of the usual introductory tutorial were just gonna learn Laravel by building
a project from scratch and that&rsquo;s gonna be a User Management System.</p>

<p>I don&rsquo;t know if my definition of a User Management System is correct
but here&rsquo;s my idea of what&rsquo;s it&rsquo;s capable of doing:</p>

<ul>
<li>Register Roles</li>
<li>Register Users</li>
<li>Update Users</li>
<li>Disable Users</li>
<li>Update Transactions which can be performed by each role</li>
<li>Login Users</li>
<li>Limit Transactions that can be performed by each role</li>
</ul>


<p>Yup! that&rsquo;s a lot so you might want to go ahead and grab some coffee and some snacks
before we start.</p>

<!--More-->


<p>The version of Laravel that were gonna use is Laravel v3.2.1 so if you&rsquo;re reading this and version 4 is already out then you might want to use that version instead. There maybe some parts which won&rsquo;t work because of changes in the syntax
but the Laravel Documentation is always updated so you might want to check it out if some of the code below won&rsquo;t work
as you expected.</p>

<p>If you haven&rsquo;t downloaded Laravel yet now is the time to do so. Just go to <a href="http://laravel.com/">Laravel.com</a> and click the big download button.</p>

<h3>Project Setup</h3>

<p>After extracting the laravel zip file the root of your project should now look like this:</p>

<p><img src="/images/posts/building_user_management_using_laravel/project_structure.jpg" alt="project structure" /></p>

<p>For this project we will be using the following to make our life easier:</p>

<ul>
<li><a href="http://jquery.com">jQuery</a></li>
<li><a href="http://foundation.zurb.com">Foundation</a></li>
<li><a href="http://jqueryui.com">jQuery UI</a></li>
</ul>


<p>Project assets are normally stored in the <code>public</code> directory in laravel.
Go ahead and navigate to that directory and add the following folders if they not already exists.</p>

<ul>
<li><strong>js</strong> &ndash; javascript goodness (jquery)</li>
<li><strong>css</strong> &ndash; stylesheets (main.css)</li>
<li><strong>img</strong> &ndash; system images (logo)</li>
<li><strong>assets</strong> &ndash; image sprites, icons (foundation zurb icons)</li>
<li><strong>libs</strong> &ndash; css frameworks (foundation, jquery ui)</li>
</ul>


<p>Once you have placed all the project assets in their directories.
Go ahead and add a constructor method on the base controller.
The base controller is located at <code>application/controllers/base.php</code> The base controller is extended by every controller
that you create in laravel so its constructor is the perfect place to add code that automatically runs on every
page in your application. In this case were just going to use it to add our project assets.</p>

<p>```php
&lt;?php
public function __construct(){</p>

<pre><code>//styles
Asset::add('main_style', 'css/main.css');
Asset::add('jquery', 'js/jquery.js');
Asset::add('foundation_style', 'libs/foundation/stylesheets/foundation.min.css');
Asset::add('foundation_icons', 'assets/foundation_icons_general/stylesheets/general_foundicons.css');
Asset::add('jqueryui_style', 'libs/jquery-ui/css/smoothness/jquery-ui-1.9.1.custom.min.css');
Asset::add('datatables_style', 'libs/datatables/media/css/jquery.dataTables.css');

//scripts
Asset::add('foundation_script', 'libs/foundation/javascripts/foundation.min.js');
Asset::add('jqueryui_script', 'libs/jquery-ui/js/jquery-ui-1.9.1.custom.min.js');
Asset::add('datatables_script', 'libs/datatables/media/js/jquery.dataTables.js');
Asset::add('mustache_script', 'js/mustache.js');
Asset::add('main_script', 'js/main.js');

parent::__construct();
</code></pre>

<p>}
?><br/>
```</p>

<h3>Laravel Generator</h3>

<p>To make your life easier you might want to use <a href="https://github.com/JeffreyWay/Laravel-Generator">Laravel Generator</a> by Jeffrey Way.
It&rsquo;s use to generate views, models, controllers, assets, tests and migrations easier.</p>

<p>Just grab the <code>generate.php</code> file from the github page I linked to earlier.
Then paste it to the <code>application\tasks</code> folder.</p>

<h3>Configuration</h3>

<p>For every framework there&rsquo;s always something you need to configure and
for that you need to go to <code>application/config</code> directory and
open up the <code>application.php</code> file. Remove the default value for the key or if you want
just type in some 32 characters of random gibberish. The key is used for encryption and cookie stuff. Based on my understanding its like the salt for a password used to make it more difficult for a hacker to crack it.</p>

<p><code>
'key' =&gt; ''
</code></p>

<p>If you don&rsquo;t want to type the key by hand there&rsquo;s the <code>artisan</code> tool to the rescue, just execute the following command
while you&rsquo;re in your projects root directory to generate the random gibberish for you.</p>

<p><code>
php artisan key:generate
</code></p>

<p>Next thing you need to configure is the <code>profiler</code>. Just set it to true.
This will give you an idea how long it took the page to execute, or how many queries
were executed, what queries were executed.</p>

<p><code>
profiler' =&gt; true
</code></p>

<p>Next open up the <code>database.php</code> file. Make sure that the default is set to mysql:</p>

<p><code>
'default' =&gt; 'mysql'
</code></p>

<p>Then enter your database information:</p>

<p>```
&lt;?php
&lsquo;mysql&rsquo; => array(</p>

<pre><code>'driver'   =&gt; 'mysql',
'host'     =&gt; 'localhost',
'database' =&gt; 'rpt',
'username' =&gt; 'root',
'password' =&gt; '',
'charset'  =&gt; 'utf8',
'prefix'   =&gt; '',
</code></pre>

<p>);
?>
```</p>

<p>Next open up the <code>session.php</code> file. Set the driver to file.</p>

<p><code>
'driver' =&gt; 'file'
</code></p>

<p>The driver is the means of storing a session. You can also use cookies, database, memcached, apc or redis.</p>

<p>Set the <code>lifetime</code> of the session to whatever feels right.
Since were building a user management system you want to keep it to a minimum.
This means that the session will automatically be destroyed after 15 minutes of being idle.</p>

<p><code>
'lifetime' =&gt; 15
</code></p>

<p>You may also want to set <code>expire_on_close</code> to <code>true</code> for extra security.
This will automatically expire the session when the user closes the browser window.</p>

<p><code>
'expire_on_close' =&gt; true
</code></p>

<p>Next open up the <code>auth.php</code> file. Were doing this configuration in advance since we haven&rsquo;t created the users table yet.
Go ahead and read up the text in the database section to create the users table then go back to this one.
Otherwise just continue with this and change the field names in the users table later on.</p>

<p>The <code>auth.php</code> file stores the configuration for the default user authentication functionality that is available on laravel.</p>

<p>Change the values for <code>driver</code> , <code>username</code> , <code>password</code> and <code>model</code>.</p>

<p><code>
'driver' =&gt; 'eloquent',
'username' =&gt; 'username',
'password' =&gt; 'hashed_password',
'model' =&gt; 'User',
</code></p>

<p>The driver can either be <code>fluent</code> or <code>eloquent</code> but were using <code>eloquent</code> to have a flexibility in naming the primary key. Since the default name for primary key field is <code>id</code> and if we have something like <code>user_id</code> as a field name
then it won&rsquo;t work. The values for <code>username</code> and <code>password</code> are the field names of your username and password fields in your users table. The model is the name of the model for the <code>users</code> table.</p>

<h3>Database</h3>

<p>It&rsquo;s good practice to use migrations to track the changes in the database.
Database migrations is like a version control for databases.
In order to use database migrations you first have to create the table that will be used
by laravel to track the migrations that are created. To do that execute the following command:</p>

<p><code>
php artisan migrate:install
</code></p>

<p>The command will create a <code>laravel_migrations</code> table in your database.</p>

<p><img src="/images/posts/building_user_management_using_laravel/laravel_migrations.jpg" alt="laravel migrations" /></p>

<p>Once that&rsquo;s done create the migration file that will create the users table.
The syntax for generating migrations would be:</p>

<ul>
<li>what the migration does (Eg. create, update, delete)</li>
<li>what&rsquo;s the name of the table or field (Eg. users, username, roles)</li>
<li>what will be generated (Eg. table, field)</li>
</ul>


<p><strong>Users Table</strong></p>

<p><code>
php artisan migrate:make create_users_table
</code></p>

<p>The command above will generate a file in <code>application/migrations</code> directory
which will have a filename like <code>2012_11_25_004329_create_table_users.php</code>  composed of the timestamp in which the file was generated plus the actual name of the migration. If you open it up it will look something like this:</p>

<p>```
&lt;?php
class Create_Users_Table {</p>

<pre><code>public function up(){
</code></pre>

<p>  }</p>

<pre><code>public function down(){
</code></pre>

<p>  }</p>

<p>}
?>
```</p>

<p>The <code>up()</code> method contains what you want to do to the database when you execute the migration.
It will normally contain an array of fields to be created and some default values to be inserted on the table.</p>

<p>The <code>down()</code> method will contain what you want to do when you rollback the migration.</p>

<p>Open up the migration file for creating the users table and add the following code on the <code>up()</code> method:</p>

<p>```
&lt;?php
Schema::create(&lsquo;create&rsquo;, function($table) {</p>

<pre><code>$table-&gt;increments('id');
$table-&gt;string('firstname', 200);
$table-&gt;string('middlename', 200);
$table-&gt;string('lastname', 200);
$table-&gt;integer('department_id');
$table-&gt;string('role_id');
$table-&gt;string('username', 200);
$table-&gt;text('hashed_password');
$table-&gt;integer('status');
</code></pre>

<p>});
?>
```</p>

<p>You can also insert some default data on the table if you want:</p>

<p>```
&lt;?php
DB::table(&lsquo;users&rsquo;)&ndash;>insert(
  array(</p>

<pre><code>  'firstname' =&gt; 'Hibari',
  'middlename' =&gt; 'Neo',
  'lastname' =&gt; 'Kyoya',
  'department_id' =&gt; 1,
  'role_id' =&gt; 1
  'username' =&gt; 'hkyoya',
  'hashed_password' =&gt; Hash:make('somepassword')
  'status' =&gt; 1
</code></pre>

<p>  )
);
?>
```</p>

<p>By now you should have grok database migrations. Let&rsquo;s move on to the next level by generating migrations using the Laravel generator tool:</p>

<p>```
php artisan generate:migration create_departments_table department:string</p>

<p>php artisan generate:migration create_roles_table department_id:integer role:string</p>

<p>php artisan generate:migration create_transactions_table department_id:integer main_menu:string menu_text:string address:string</p>

<p>php artisan generate:migration create_rolestransactions_table role_id:integer transaction_id:integer status:integer</p>

<p>php artisan generate:migration create_userlogs_table user_id:integer user:string department:string transaction:string dateandtime:timestamp
```</p>

<p>If you open up the files that were generated you will see that there&rsquo;s a method called <code>timestamps()</code>.
This creates two additional fields: created_at and updated_at.
In most cases you don&rsquo;t need those, you can go ahead and remove those for each migration file.</p>

<p><code>
$table-&gt;timestamps();
</code></p>

<p>Next, execute the migration to create the tables in the database:</p>

<p><code>
php artisan migrate
</code></p>

<p>Executing the above command will create the following tables in your database:</p>

<ul>
<li><strong>users</strong> &ndash; stores user login information</li>
<li><strong>departments</strong> &ndash; stores departments, offices or sections</li>
<li><strong>roles</strong> &ndash; stores the roles or user groups for each department. (Eg. collector in the treasury department)</li>
<li><strong>rolestransactions</strong> &ndash; stores the status of the transactions that can be performed by each role</li>
<li><strong>transactions</strong> &ndash; stores all the transactions that can be performed in the application</li>
</ul>


<p>If for some reason you have made a mistake, you can execute <code>php artisan migrate:rollback</code> to
execute the <code>down()</code> method in the migrate file.
Once that&rsquo;s executed you can go ahead and make the necessary changes on the migration file then execute <code>php artisan migrate</code> again to commit the changes to the database.</p>

<p>Once the tables are added into the database let&rsquo;s add the relationships between those tables.
This time we will just use the default functionality for creating migrations in laravel and not the laravel generator.
Based on the documentation of laravel generator I think there&rsquo;s still no way of specifying the relationships for each table.
But we don&rsquo;t know maybe by the time you&rsquo;re reading this Jeffrey Way has already added that functionality so you might want to use it if its already available to save some time.</p>

<p>Execute the following commands to generate migrations for adding relationships for each table:</p>

<p>```
php artisan migrate:make add_foreignkeys_to_users_table</p>

<p>php artisan migrate:makeadd_foreignkeys_to_roles_table</p>

<p>php artisan migrate:makeadd_foreignkeys_to_transactions_table</p>

<p>php artisan migrate:make add_foreignkeys_to_rolestransactions_table
```</p>

<p>Go ahead and open up the files that were generated.
For this one I&rsquo;ll only show you how to do the first one then you&rsquo;ll have to do the rest
since the process is basically the same.</p>

<p>The migration file for adding foreign keys to the users table will look like this
on the first time you open it:</p>

<p>```
&lt;?php
class Add_Foreignkeys_To_Users_Table {</p>

<pre><code>/**
 * Make changes to the database.
 *
 * @return void
 */
public function up()
{

}

/**
 * Revert the changes to the database.
 *
 * @return void
 */
public function down()
{

}
</code></pre>

<p>}
?>
```</p>

<p>Add these code to the <code>up()</code> method. This adds a foreign key and index to the <code>department_id</code> and <code>role_id</code> fields:</p>

<p>```
Schema::table(&lsquo;users&rsquo;, function($table) {</p>

<pre><code>$table-&gt;foreign('department_id')-&gt;references('id')-&gt;on('departments');
$table-&gt;foreign('role_id')-&gt;references('id')-&gt;on('roles');
</code></pre>

<p>});
```</p>

<p>Then on the <code>down()</code> method we just have to drop those indexes that were created:</p>

<p>```
&lt;?php
Schema::table(&lsquo;users&rsquo;, function($table){</p>

<pre><code>$table-&gt;drop_index('users_department_id_foreign');
$table-&gt;drop_index('users_role_id_foreign');
$table-&gt;drop_foreign('users_department_id_foreign');
$table-&gt;drop_foreign('users_role_id_foreign');
</code></pre>

<p>});
?>
```</p>

<p>The naming convention used by laravel (or maybe its the default for mysql) is:</p>

<ul>
<li>table name (Eg. users)</li>
<li>field name (Eg. department_id)</li>
<li>key type (Eg. foreign)</li>
</ul>


<p>To be separated by underscores so if you have a table named <code>users</code> and you want to drop
the foreign key and index on the <code>department_id</code> field then the name of the index would be: <code>users_department_id_foreign</code>.</p>

<p>Finally execute the command to commit the migrations into the database.</p>

<p><code>
php artisan migrate
</code></p>

<h3>Building the Project</h3>

<p>Were finally in the fun part. First let&rsquo;s add the main styling.
Normally this would reside in the <code>public/css</code> directory:</p>

<p>```css
.pointer{</p>

<pre><code>cursor: pointer;
</code></pre>

<p>}</p>

<p>.pointer a{</p>

<pre><code>color: #333;
</code></pre>

<p>}</p>

<p>footer{</p>

<pre><code>margin-top: 20px;
text-align: center;
</code></pre>

<p>}</p>

<p>.transactions li{</p>

<pre><code>list-style: none;
</code></pre>

<p>}</p>

<p>select{</p>

<pre><code>height: 32px;
</code></pre>

<p>}
```</p>

<h4>Main Script</h4>

<p>Then the main script. This normally resides on <code>public/scripts</code> directory:</p>

<p>```javascript
//common script for every page which has text input and datepickers
$(&ldquo;.datepicker&rdquo;).datepicker({ dateFormat: &lsquo;yy-mm-dd&rsquo; });
$(&ldquo;input[type=text]&rdquo;).attr(&ldquo;autocomplete&rdquo;, &ldquo;off&rdquo;);
$(&lsquo;input[type=text]:first&rsquo;).focus();</p>

<p>//common script for create user and update user
$(&ldquo;#department&rdquo;).blur(function(){
  var department = $.trim(this.value);
  $(&ldquo;#role&rdquo;).val(&ldquo;&rdquo;);
  $(&ldquo;#role&rdquo;).attr(&ldquo;list&rdquo;, department);
});
```</p>

<h4>Public Template</h4>

<p>Inside the <code>application/views</code> folder.
Generate the template for the public view using the following command:</p>

<p><code>
php artisan generate:view public
</code></p>

<p>This will generate a file called <code>public.blade.php</code>.
By default the laravel generator automatically uses <code>.blade</code> as a file extension so that you can use whatever syntactic sugar it offers (no ugly php opening and closing tags, sweet!).</p>

<p>This is like the <code>header.php</code> that most of us are familiar with when we first started with PHP
in which we include all the common elements to be used on all pages like system-wide scripts, styling and header.</p>

<p>Note that were using blade in here so instead of the single curly brace pair <code>{}</code>.
You have to use double curly brace pair. There&rsquo;s an issue with maruku that&rsquo;s why I can only
put the single curly brace pair. Remember to replace the single curly brace pair <code>{}</code> with a double curly brace pair whenever you see them in the examples to follow.</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;UMS&lt;/title&gt;
    {Asset::styles()}
&lt;/head&gt;
&lt;body&gt;
        &lt;div class="row"&gt;
    &lt;div class="twelve columns"&gt;
      &lt;nav class="top-bar"&gt;
        &lt;ul&gt;
          &lt;!-- Title Area --&gt;
          &lt;li class="name"&gt;
            &lt;img src="{URL::to_asset('img/umslogo.png')}" alt="ums_logo"&gt;
          &lt;/li&gt;
          &lt;li class="name"&gt;
            &lt;h1&gt;
              &lt;a href="#"&gt;
                UMS
              &lt;/a&gt;
            &lt;/h1&gt;
          &lt;/li&gt;
          &lt;li class="toggle-topbar"&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    &lt;/div&gt;
  &lt;/div&gt;        
    &lt;div class="container"&gt;
        @yield('content')
        &lt;footer&gt;
             &lt;p&gt;&amp;copy; UMS 2012&lt;/p&gt;
        &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;
    {Asset::scripts()}
&lt;/body&gt;
</code></pre>

<p></html>  <br/>
```</p>

<p>Here are some of the methods that we&rsquo;ve used:</p>

<p><code>php
&lt;?php
@yield('content') //yields a particular section defined from a page
{URL::to_asset('img/umslogo.png')} //includes the application logo
{Asset::styles()} //includes the stylesheets that we have added earlier on the base controller
{Asset::scripts()} //includes the scripts that we have added earlier on the base controller
?&gt;
</code></p>

<p>The only thing to remember when you&rsquo;re using these methods is that their root is the public directory of your project.</p>

<h4>Login View</h4>

<p>Next is the login page. The login page will inherit from the public template that we have just created.
The magic keyword for inheriting what&rsquo;s on a specific template is <code>@layout('name_of_the_template')</code>.</p>

<p>Another magic keyword that we have used below is <code>@section</code> which basically lets you define a section that you want to be rendered in the template. That&rsquo;s what the <code>@yield('content')</code> in the template is used for, to render the specific section that you have defined in a specific page.</p>

<p>We also have <code>@render('errors')</code> so this means that we can also render sections inside a section in laravel (How cool is that?).</p>

<p>```html
@layout(&lsquo;public&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="twelve columns">
    <h5>Login</h5>
  </div>
</div>


<div id="login_container" class="row">
  @render('errors')
  <form method="post">
    <div class="row">    
      <div class="two columns">
        <label class="right inline">Username</label>
      </div>
      <div class="ten columns">
        <input type="text" name="username" class="five" />
      </div>

      <div class="two columns">
        <label class="right inline">Password</label>
      </div>
      <div class="ten columns">
        <input type="password" name="password" class="five" />
      </div>
    </div>

    <div class="row">
      <div class="five columns">
        
      </div>
      <div class="seven columns">
        <button class="success medium button" href="#">Login</button>
      </div>
    </div>

  </form>
</div>


<p>@endsection<br/>
```</p>

<h4>Error View</h4>

<p>Create another view using the Laravel generator and name it <code>errors</code>.
This view is what we will be using to display form errors (mostly form validation errors).</p>

<p>This can display both form validation errors and custom form errors that you want your users to see.
Form validation errors that Laravel produces are usually objects so we&rsquo;ll have to loop through those.</p>

<p>```</p>

<div class="row">
  <div class="nine columns">
    @if($errors->messages) //this is pass through: with_errors($validation)
    <div class="alert-box alert">
      @foreach($errors->messages as $e)
        <li> {$e[0]} </li>
      @endforeach
      <a href="" class="close">&times;</a>
    </div>
    @endif
    <?php //<--How I wish I could remove this
    $error = Session::get('error'); //this is pass through: with('key', 'value') on form redirect
    //and this--> ?> 
    @if(!empty($error))
    <div class="alert-box alert">
      <li>{$error}</li>
    </div>
    @endif
  </div>
</div>


<p>```</p>

<h4>Success View</h4>

<p>If we have a separate view for errors then there must also be a view for success right?
Just call it <code>success</code> or whatever. Here it is:</p>

<p>```
&lt;?php
$success_message = Session::get(&lsquo;success_message&rsquo;);
?></p>

<div class="row">
  <div class="nine columns">
    @if(!empty($success_message))
    <div class="alert-box success">
            {$success_message}
      <a href="" class="close">&times;</a>
    </div>
    @endif
  </div>
</div>


<p>```</p>

<p>We&rsquo;ve already setup the <code>session</code> and the <code>auth</code> earlier so were pretty much ready to write the code that will process user login.
Go ahead and create a new controller called <code>login</code> and make it restful.</p>

<p><code>
php artisan generate:controller login restful
</code></p>

<h4>Default Controllers</h4>

<p>I haven&rsquo;t told you about how are Laravel controllers by default so before you wrap your mind
about restful controllers I&rsquo;ll talk a little about default controllers.</p>

<p>By default controllers in Laravel has a prefix of <code>action_</code> which indicates that they are used to render a specific view and pass data into it.</p>

<p>```php
&lt;?php
class Login_Controller extends Base_Controller{</p>

<p>}
?>
```</p>

<p>Laravel controllers normally extend the <code>base controller</code> in which we specified the projects assets earlier. The naming convention would be <code>Name_of_the_controller</code> + <code>_Controller</code>. Where the name of the controller normally starts with a capital letter. The filename should be the same with name of the controller.</p>

<p>Back to the <code>action_</code> thingy. If you want a method to render a specific view then it should be a public method with the prefix of <code>action_</code>.</p>

<p>For example if you want the index or the <code>public/login</code> page to accessible in the browser then you should name it like the following:</p>

<p>```
&lt;?php
class Login_Controller extends Base_Controller{</p>

<pre><code>public function action_index(){
    return View::make('login'); //renders the login.blade.php located in the root of the view folder
}
</code></pre>

<p>}
?>
```</p>

<p>If your method isn&rsquo;t gonna render a view and its just going to perform some computations or database related stuff in your controller then just make it into a private method.</p>

<p>```
&lt;?php
private function compute_stuff(){</p>

<p>}
?>
```</p>

<p>Then you can just access it in your controller like.</p>

<p>```
&lt;?php
public function action_index(){</p>

<pre><code>$this-&gt;compute_stuff();
</code></pre>

<p>}
?>
```</p>

<h4>Restful Controllers</h4>

<p>Going back to restful controllers, laravel generator usually generates something like this if you haven&rsquo;t specified some of the methods.</p>

<p>```
&lt;?php
class Login_Controller extends Base_Controller {</p>

<pre><code>public $restful = true;
</code></pre>

<p>?>
```</p>

<p>To specify some methods, just add the method name right after the name of the controller.
In this case the name of the controller is <code>login</code> and the method name is <code>index</code>.</p>

<p><code>
php artisan generate:controller login index restful
</code></p>

<p>If you have executed the command above then your controller will look like this.</p>

<p>```
&lt;?php
class Login_Controller extends Base_Controller {</p>

<pre><code>public $restful = true;    

public function get_index()
{

} 
</code></pre>

<p>?>    <br/>
```</p>

<p>Restful methods generally has these prefix:</p>

<ul>
<li><strong>get</strong> &ndash; when requesting a specific page (Eg. login/index)</li>
<li><strong>post</strong> &ndash; when submitting data through a form</li>
<li><strong>put</strong> &ndash; when updating data</li>
<li><strong>delete</strong> &ndash; when deleting data</li>
</ul>


<p>Only the first two can materialize (sorry couldn&rsquo;t think of a better word, peace grammar natzis) on a browser. But the idea is that methods which are used to render a specific view will have <code>get_</code> as its prefix.
And methods which processes or validates a form will have <code>post_</code> as its prefix.</p>

<h3>Login Controller</h3>

<p>Ok back with the controller. For the index just like with any other PHP framework that you might have used before, the index method is the default method for a controller.
This means that you don&rsquo;t have to type in <code>login/index</code> to access what the index method has to return.
In this case were just rendering the login view that we created earlier.</p>

<p>```
&lt;?php
public function get_index(){</p>

<pre><code>return View::make('login');
</code></pre>

<p>}
?>
```</p>

<p>Create another method called <code>post_index</code> this will be executed everytime the login form is submitted.</p>

<p>```
&lt;?php
public function post_index(){</p>

<p>}
?>
```</p>

<h4>Getting Inputs</h4>

<p>Inside the method we&rsquo;ll first have to get what the user has inputted in the form.
Laravel allows us to do that using the <code>Input::get('field_name')</code> method
where the <code>field_name</code> is the name of the input field.<br/>
There&rsquo;s also the <code>input::all()</code> method which gets all the data inputted in the form.
It would be nice if we could just use that but we need to hash the password before saving it to the database that&rsquo;s why we need to get those fields separately.</p>

<p><code>
$username = Input::get('username');
$password = Input::get('password');
$user_details = Input::all(); //Input::all() gets all the data inputted in the form
</code></p>

<h4>Form Validation</h4>

<p>Next we have to specify the validation rules for each field.
Laravel still uses the name attribute of the input field for this.</p>

<p>For both fields were using the same rules which is <code>required</code> this is the only rule we need since this is just a login form.</p>

<p><code>
$rules = array('username' =&gt; 'required', 'password' =&gt; 'required');
</code></p>

<p>It would be nice if Laravel allows us to specify common validation rules for each field.
Something like.</p>

<p><code>
$rules = array(Input::all() =&gt; 'required');
</code></p>

<p>But that isn&rsquo;t possible yet, maybe in future versions.</p>

<p>After that just call <code>Validator::make()</code> to create an instance of the validator class.
From there you can just call the <code>fails()</code> or <code>passes()</code> method to check if
the validation failed or suceeded.</p>

<p>If the validation failed all we have to do is to redirect to the login page
passing in the validation instance using the <code>with_errors()</code> method.
This can then be accessed from the error view that we created earlier:</p>

<p>```
&lt;?php
$validation = Validator::make($user_details, $rules);
if($validation->fails()){</p>

<pre><code>return Redirect::to('login')-&gt;with_errors($validation);
</code></pre>

<p>}
?>
```</p>

<p>If the validation suceeded then we will try to login the user.
We can do that by using the <code>attempt()</code> method from the <code>Auth</code> class in Laravel.</p>

<p>```
&lt;?php
if(Auth::attempt($user_details)){ //attempt to login the user</p>

<pre><code>if(Auth::check()){ //check if the user is already logged in
    $user_id = Auth::user()-&gt;user_id;

    //get user data
    $user = DB::table('users')
            -&gt;where('user_id', '=', $user_id)
    -&gt;first(array('department_id', 'role_id', 'status'));

    $status = $user-&gt;status;

    if($status == 1){ //check if user account is enabled
        $department_id = $user-&gt;department_id;
        $role_id = $user-&gt;role_id;

        //save user details into session
        Session::put('department_id', $department_id);
        Session::put('role_id', $role_id);
        Session::put('current_user', $username);
        Session::put('current_user_id', $user_id);

        //the departments available in the system
        $departments = ['it', 'marketing', 'defense'];

        //redirect user to his departments homepage
        return Redirect::to($departments[$department_id - 1] . '/home');

    }else{//if user account is disabled
        return Redirect::to('login')
            -&gt;with('error', 'Disabled users cannot login');
    }
}
</code></pre>

<p>}
?>
```</p>

<h3>User Management</h3>

<p>Now that were done with the login we can now proceed with the main meat of this project: the user management.</p>

<h4>Main Template</h4>

<p>First let&rsquo;s create the main template to be used on all pages.
It&rsquo;s basically the same with the public template that we created earlier
the only difference is the navigation section.</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en"></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;UMS&lt;/title&gt;
    {Asset::styles()}
&lt;/head&gt;
&lt;body&gt;

    &lt;div class="row"&gt;
      &lt;div class="twelve columns"&gt;
        &lt;nav class="top-bar"&gt;
          &lt;ul&gt;
            &lt;!-- Title Area --&gt;
            &lt;li class="name"&gt;
              &lt;img src="{URL::to_asset('img/umslogo.png')}" alt="ums_logo"&gt;
            &lt;/li&gt;
            &lt;li class="name"&gt;
              &lt;h1&gt;
                &lt;a href="#"&gt;
                  UMS
                &lt;/a&gt;
              &lt;/h1&gt;
            &lt;/li&gt;
            &lt;li class="toggle-topbar"&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;

          &lt;section&gt;
            &lt;!-- Left Nav Section --&gt;
            {$navigation}
            &lt;ul class="right"&gt;
              &lt;li class="divider"&gt;&lt;/li&gt;
              &lt;li class="name"&gt;
                &lt;a href=""&gt;{Session::get('current_user')}&lt;/a&gt; 
              &lt;/li&gt;
              &lt;li class="divider"&gt;&lt;/li&gt;
              &lt;li class="name"&gt;
                &lt;a href="{URL::to('logout')}"&gt;Logout&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;

          &lt;/section&gt;
        &lt;/nav&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="container"&gt;
        @yield('content')
        &lt;hr&gt;
        &lt;footer&gt;
            &lt;p&gt;&amp;copy; UMS 2012&lt;/p&gt;
        &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;
    {Asset::scripts()}
    @yield('script')
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>Next, create another view for the registration of new users.
Again there&rsquo;s nothing bizzare about this.
The only thing that we haven&rsquo;t already used is <code>input::old()</code> and <code>@foreach</code>.  The <code>input::old()</code> method is
used to access the value that was inputted by the user before the form
was submitted. This is very useful since we don&rsquo;t have to write the functionality ourselves, Laravel has already this useful functionality built in to it. The most common use case for this is for forms that has validation errors.
Normally you would want to retrieve the values that were originally submitted.</p>

<p>On the other hand <code>@foreach</code> is just like the <code>foreach</code> that were using in plain PHP: to iterate over an array or an object. In this case were merely iterating through all the departments and the roles for each department in the database. There are only 3 departments so the looping for the department can be done without the <code>@foreach</code> but it is such a joy to use <code>@foreach</code> that I didn&rsquo;t really think of it.</p>

<p>Of course all the data that we are iterating through aren&rsquo;t directly available in the view, we will have to pass the data to the view using the controller which will render this view. And that&rsquo;s what were going to do next.</p>

<p>```
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="twelve columns">
    <h5>Create User</h5>
  </div>
</div>


<div class="row">
  @render('errors')
  @render('success')
  <form method="post">
    <div class="row">    
      <div class="two columns">
        <label for="firstname" class="right inline">First Name </label>
      </div>
      <div class="ten columns">
        <input type="text" name="firstname" id="firstname" class="five" value="{Input::old('firstname')}"/>
      </div>

      <div class="two columns">
        <label for="middlename" class="right inline">Middle Name </label>
      </div>
      <div class="ten columns">
        <input type="text" name="middlename" id="middlename" class="five" value="{Input::old('middlename')}"/>
      </div>

      <div class="two columns">
        <label for="lastname" class="right inline">Last Name</label>
      </div>
      <div class="ten columns">
        <input type="text" name="lastname" id="lastname" class="five" value="{Input::old('lastname')}"/>
      </div>

      <div class="two columns">
        <label for="username" class="right inline">Username</label>
      </div>
      <div class="ten columns">
        <input type="text" name="username" id="username" class="five" value="{Input::old('username')}"/>
      </div>

      <div class="two columns">
        <label for="password" class="right inline">Password</label>
      </div>
      <div class="ten columns">
        <input type="password" name="password" id="password" class="five" />
      </div>   

      <div class="two columns">
        <label for="department" class="right inline">Department</label>
      </div>
      <div class="ten columns">
        <input type="text" name="department" id="department" class="five" list="departments" value="{Input::old('department')}"/>
        <datalist id="departments">
          @foreach($departments as $dept)
          <option value="{$dept->department}">{$dept->department}</option>
          @endforeach
        </datalist>
      </div>  

      <div class="two columns">
        <label for="role" class="right inline">Role</label>
      </div>
      <div class="ten columns">
        <input type="text" name="role" id="role" class="five" value="{Input::old('role')}" list=""/>
        <datalist id="it">
          @foreach($it_roles as $a)
            <option value="{$a->role}">{$a->role}</option>
          @endforeach
        </datalist>

        <datalist id="defense">
          @foreach($defense_roles as $b)
            <option value="{$b->role}">{$b->role}</option>
          @endforeach
        </datalist>

        <datalist id="marketing">
          @foreach($marketing_roles as $c)
            <option value="{$c->role}">{$c->role}</option>
          @endforeach       
        </datalist>
      </div>  
    </div>

    <div class="row">
      <div class="four columns">
        
      </div>
      <div class="eight columns">
        <button class="success medium button" href="#">Create User</button>
      </div>
    </div>
  </form>
  
</div>


<p>@endsection
```</p>

<h3>Admin Controller</h3>

<p>As I have said earlier were now going to create the controller that will
contain the code to render and process the form that we&rsquo;ve just created.</p>

<p><code>
php artisan generate:controller admin restful
</code></p>

<h4>Default Data</h4>

<p>Define the default data that will be used throughout the controller.</p>

<p><code>
private $departments;
private $it_roles;
private $marketing_roles;
private $defense_roles;
</code></p>

<h4>Constructor</h4>

<p>On the constructor we first have to call <code>parent::__construct();</code> to make sure we won&rsquo;t be overriding what the base controller has on its constructor.</p>

<p>In the code below were using 1 new animal which is the <code>Cache</code>. The <code>Cache</code> class is basically used
for caching things or saving things temporarily to a location were access is faster.
This is commonly used for caching data from the database so the application won&rsquo;t have to hit the database
everytime a particular page is accessed by a user.</p>

<p>```php
&lt;?php
public function __construct(){</p>

<pre><code>parent::__construct();

if(Cache::has('admin_defaults')){ //check if the cache has already the ```admin_defaults``` item

    $admin_defaults        = Cache::get('admin_defaults');  //get the admin defaults
    $this-&gt;departments     = $admin_defaults['departments'];
    $this-&gt;it_roles        = $admin_defaults['it_roles'];
    $this-&gt;marketing_roles = $admin_defaults['marketing_roles'];
    $this-&gt;defense_roles   = $admin_defaults['defense_roles'];

}else{ //if the cache doesn't have it yet

    $this-&gt;departments     = DB::table('sys_departments')-&gt;get();
    $this-&gt;it_roles        = DB::table('sys_roles')-&gt;where('department_id', '=', 1)-&gt;get('role');
    $this-&gt;marketing_roles = DB::table('sys_roles')-&gt;where('department_id', '=', 2)-&gt;get('role');
    $this-&gt;defense_roles   = DB::table('sys_roles')-&gt;where('department_id', '=', 3)-&gt;get('role');

    //cache the database results so we won't need to fetch them again for 10 minutes at least
    Cache::put(
        'admin_defaults', 
        array(
            'departments'     =&gt; $this-&gt;departments, 
            'it_roles'        =&gt; $this-&gt;it_roles,
            'marketing_roles' =&gt; $this-&gt;marketing_roles, 
            'defense_roles'   =&gt; $this-&gt;defense_roles
        ),
        10
    );
}

$this-&gt;filter('before', 'auth'); //run the auth filter before every request of this controller
</code></pre>

<p>}
?>
```</p>

<h4>Rendering Form for Creating New Users</h4>

<p>Going back to the method which will render the view for creating a new user.
We&rsquo;ll just have to pass in the data that we got earlier from the database.
The data that were passing here is what we have loop through earlier when we created the view for creating a new user.</p>

<p>```
&lt;?php
public function get_new_user(){</p>

<pre><code>return View::make('admin.create_user', 
        array(
            'departments'     =&gt; $this-&gt;departments, 
            'it_roles'        =&gt; $this-&gt;it_roles,
            'marketing_roles' =&gt; $this-&gt;marketing_roles, 
            'defense_roles'   =&gt; $this-&gt;defense_roles
        ));
</code></pre>

<p>}
?>
```</p>

<h4>Saving Users into Database</h4>

<p>Now let&rsquo;s write the code for saving the new user into the database.</p>

<p>```
&lt;?php
public function post_new_user(){</p>

<pre><code>//get user details
$firstname  = Input::get('firstname');
$middlename = Input::get('middlename');
$lastname   = Input::get('lastname');
$department = Input::get('department');
$role       = Input::get('role');
$username   = Input::get('username');
$password   = Input::get('password');

//check if the form is valid
if(!User::is_valid()){

    return Redirect::to('admin/new_user')
        -&gt;with_errors(User::$validation)    //pass in errors
        -&gt;with_input(); //pass in the data inputted by user 

}else{
    $password = Hash::make($password); //hash the password

    //get the department id of the department selected by the user
    $selected_department = Department::where('department', '=', $department)
        -&gt;first('department_id');


    $department_id = $selected_department-&gt;department_id;

    //get the role id of the role selected by user  
    $selected_role = Role::where('role', '=', $role)-&gt;first('role_id'); 

    $role_id = $selected_role-&gt;role_id;

    $user_data = array(
                        'firstname' =&gt; $firstname,
                        'middlename' =&gt; $middlename,
                        'lastname' =&gt; $lastname,
                        'department_id' =&gt; $department_id,
                        'role_id' =&gt; $role_id,
                        'username' =&gt; $username,
                        'hashed_password' =&gt; $password 
                        );

    DB::table('users')-&gt;insert($user_data);
    $user_id = DB::connection('mysql')-&gt;pdo-&gt;lastInsertId();

    $cache_data = Input::all(); //get all user inputs

    //additional data to be included in the cache
    $cache_data['user_id'] = $user_id; 
    $cache_data['status'] = 1;
    add_cache_item('users', $cache_data); //add the new user to the cache

    log_action("create new user"); //log the action into the database

    //redirect to the create user form with the awesome success message
    return Redirect::to('admin/new_user')
        -&gt;with('success_message', 'User Successfully Created');
}
</code></pre>

<p>}
?>
```</p>

<p>Hopefully you&rsquo;ve tried to go over the code because now I&rsquo;ll try to explain some of the code
that the comments failed to explain.</p>

<p>Here&rsquo;s a summary of what the above code does:</p>

<ol>
<li><p>Get the user input</p></li>
<li><p>Validate the form. But here I&rsquo;ve included the rules in the models.
I think this is a good practice, for any form that uses the model the same validation rules will be applied.
Which then results to a more DRYer code.</p></li>
<li><p>If the user input is not valid we redirect it to the form with the errors and the old input.</p></li>
<li><p>If the user input is valid then we get the department id and role id from the database based on what department and role is selected by the user.</p></li>
<li><p>Save the user to the database.</p></li>
<li><p>Get all user inputs and store it to <code>$cache_data</code> this will be added to the
cache using the <code>add_cache_item()</code> method which we will add as a helper function later.</p></li>
<li><p>Call <code>log_action()</code> to save the users action into the database</p></li>
</ol>


<h4>Cache Helper</h4>

<p>As I have said earlier I added a helper that will utilize the <code>Cache</code> class to help me add cache items easier.
It&rsquo;s a very simple function which checks if a cache item exists.
If it exists we store it in a variable <code>$current_data</code> . Then we add the new data to the current data using <code>array_push()</code>.
Finally we put back the new one into the cache.
Helper functions are stored in <code>laravel/helpers.php</code>.</p>

<p>```
&lt;?php
function add_cache_item($key, $data){</p>

<pre><code>if(Cache::has($key)){ //check if item exists in the cache
    $current_data = Cache::get($key); //store it to a variable
    array_push($current_data, (object)$data); //add the data to the variable
    Cache::put($key, $current_data, 10); //replace the data which is currently on the cache with the new one
}
</code></pre>

<p>}
?>
```</p>

<h4>Log Action</h4>

<p>We&rsquo;ve also used another helper function which is <code>log_action()</code> which is simply used to log what
every user is doing into the database.</p>

<p>```
&lt;?php
function log_action($transaction){</p>

<pre><code>$user_id = Session::get('current_user_id');
$user = Session::get('current_user');
$department = URI::segment(1); 

//save the log into the database
DB::table('userlogs')-&gt;insert(
    array(
        'user_id' =&gt; $user_id,
        'user' =&gt; $user, 
        'department' =&gt; $department, 
        'transaction' =&gt; $transaction
        )
    );
</code></pre>

<p>}
?>
```</p>

<h3>Roles</h3>

<p>Just like in every application roles are used to group users.
Some examples of roles are: System Administrator, Supervisor, Clerk, Collector and just
about anyone that will interact with the application.
Just like in the real world every user which has the same role will be able to do just about the same
thing. This makes roles a good way to group users based on what they can and cannot do in an application.</p>

<h4>Creating New Roles</h4>

<p>Create a new view called <code>create_role</code> where we will put the form for creating new roles.
This will have two fields: department and role.
The idea here is that for every department there are 1 or more roles that can be added.</p>

<p>```html
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<pre><code>&lt;div class="row"&gt;
    &lt;div class="twelve columns"&gt;
        &lt;h5&gt;Create Role&lt;/h5&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    @render('errors')
    @render('success')
    &lt;form method="post"&gt;
        &lt;div class="row"&gt;
                &lt;div class="two columns"&gt;
              &lt;label for="department" class="right inline"&gt;Department&lt;/label&gt;
            &lt;/div&gt;
            &lt;div class="ten columns"&gt;
              &lt;input type="text" name="department" id="department" class="five" list="departments"/&gt;
              &lt;datalist id="departments"&gt;
              @foreach($departments as $dept)
                &lt;option value="{$dept-&gt;department}"&gt;{$dept-&gt;department}&lt;/option&gt;
              @endforeach
              &lt;/datalist&gt;
            &lt;/div&gt;

            &lt;div class="two columns"&gt;
              &lt;label for="role" class="right inline"&gt;Role &lt;/label&gt;
            &lt;/div&gt;
            &lt;div class="ten columns"&gt;
              &lt;input type="text" name="role" id="role" class="five" /&gt;
            &lt;/div&gt;
        &lt;/div&gt;

      &lt;div class="row"&gt;
        &lt;div class="four columns"&gt;

        &lt;/div&gt;
        &lt;div class="eight columns"&gt;
          &lt;button class="success medium button" href="#"&gt;Create Role&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/form&gt;

&lt;/div&gt;
</code></pre>

<p>@endsection
```</p>

<p>Then add a new method in the <code>admin</code> controller which will render the view that we have created.
Here were just passing in the departments that are already saved in the database.</p>

<p>```php
&lt;?php
public function get_new_role(){</p>

<pre><code>$departments = DB::table('departments')-&gt;get();
return View::make('admin.create_role')
    -&gt;with('departments', $this-&gt;departments);
</code></pre>

<p>}
?>
```</p>

<p>Just like for every form if there&rsquo;s a <code>get</code> there&rsquo;s also a <code>post</code> as I have said earlier
methods with a prefix of <code>get</code> are used for rendering views while <code>post</code> are used
for processing forms that are submitted.</p>

<p>```
&lt;?php
public function post_new_role(){</p>

<pre><code>//get the data inputted by the user
$department = Input::get('department');
$role = Input::get('role');

if(!Role::is_valid()){ //check if submitted data is valid

    return Redirect::to('admin/new_role')
        -&gt;with_errors(Role::$validation)
        -&gt;with_input();
}else{
    $selected_department = DB::table('sys_departments')
        -&gt;where('department', '=', $department)
        -&gt;first('department_id');

    $department_id = $selected_department-&gt;department_id;

    DB::table('sys_roles')-&gt;insert(
        array(
            'department_id' =&gt; $department_id, 
            'role' =&gt; $role
        ));

    $role_id = DB::connection('mysql')-&gt;pdo-&gt;lastInsertId(); //get the last inserted primary key

    //select all the transactions (things that can be done for the selected department)
    $transactions = DB::table('sys_transactions')
        -&gt;where('department_id', '=', $department_id)
        -&gt;get();

    //loop through the results  
    foreach($transactions as $t){
        $transaction_id = $t-&gt;transaction_id; //get the transaction id

        //save to the rolestransactions table
        DB::table('roletransactions')
            -&gt;insert(array('role_id' =&gt; $role_id, 'transaction_id' =&gt; $transaction_id));
    }

    if(Cache::has('admin_defaults')){ //check if a cache item for admin_defaults already exists 
        $admin_defaults = Cache::get('admin_defaults');

        //add the new role into the cache
        array_push($admin_defaults[$department . '_roles'], (object)array('role' =&gt; $role)); 
        Cache::put('admin_defaults', $admin_defaults, 10);
    }

    log_action("create new role"); //save the action to the database

    //redirect to the create role form with the success message 
    return Redirect::to('admin/new_role')
        -&gt;with('success_message', 'Role Successfully Created');
}
</code></pre>

<p>}
?>
```</p>

<h3>Select Users</h3>

<p>We&rsquo;ll also need to have a feature wherein the administrator can view a list of the users who are using the application.
This will also serve as a link to the user update page where the administrator can
update user details. The administrator can also update the status of the user from this page.
The status can either be <code>enabled</code> or <code>disabled</code> if the user is disabled then he cannot login to the application. Lastly, we&rsquo;ll also include a link to the user activity log so that the administrator can view
all the transactions that the user has performed in the application.</p>

<p>```html
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
    <div class="twelve columns">
        <h5>Users</h5>
    </div>
</div>




<div class="row">
    <table class="twelve dtable">
      <thead>
        <tr>
          <th>Username</th>
          <th>Name</th>
          <th>Department</th>
          <th>Role</th>
          <th>Logs</th>
          <th>Status</th>
          <th>Update</th>
        </tr>
      </thead>
      <tbody>
        @foreach($users as $user)
        <?php
        $icons = ["foundicon-lock", "foundicon-unlock"];
        $actions = [1, 0];
        ?>
        <tr>
            <td>{$user->username}</td>
            <td>{$user->firstname . " " . $user->lastname}</td>
            <td>{$user->department}</td>
            <td>{$user->role}</td>
            <td class="pointer">
                    <i class="icons foundicon-address-book" data-url="{URL::to('admin/logs/' . $user->user_id)}"></i>
            </td>
            <td class="pointer">
                <i class="icons {$icons[$user->status]}" data-action="{$actions[$user->status]}" data-uid="{$user->user_id}"></i>
            </td>
            <td class="pointer">
                <i class="icons foundicon-refresh" data-url="{URL::to('admin/user/' . $user->user_id)}"></i>
            </td>
        </tr>
        @endforeach
      </tbody>
    </table>
</div>


<p>@endsection</p>

<p>@section(&lsquo;script&rsquo;)</p>

<script>
$("td.pointer").live("click", function(){
    //get the data-url value from the <i> tag
    //it feels weird to put data attributes to a table definition so 
    //we have to do some selector-fu to get to the data that we want
    var url = $(this).children().data('url'); 

    if(url){ //just making sure that url is storing a truthy value

        //cheap trick for changing page location
        //I wouldn't actually do it this way
        //if the anchor tag <a> works when its wrapping an <i> tag
        window.location = url; 

    }
});

$("td.pointer").hover(function(){
    //on hover: make the user see that he's actually hovering on something by changing the color
    $(this).children().css("color", "#0CAEE3");
}, function(){
    //on mouse out: change back to the original color
    $(this).children().css("color", "#333");
});

$("td.pointer").click(function(){
    var url = window.location; //get all the information of the current page (Eg. host, hostname, port, etc.)

    //caching the information about the child of the clicked element so we won't have to select it again later 
    var child = $(this).children();  

    var user_id = child.data("uid"); //accessing the value of data-uid attribute using the cache item(child) as the base
    var status = child.data("action"); //accessing the value of data-uid attribute using the cache item(child) as the base

    //update user status using ajax
    $.post(
        url.origin + "/admin/update_userstatus/" + user_id + "/" + status,
        function(response){ //the response is either 1 or 0, if the admin disabled the user the response would be the opposite which is 1. If the admin enabled the user the response would be 0

            var icons = ["foundicon-unlock", "foundicon-lock"]; 
            child.removeClass(); 
            child.addClass("icons " + icons[response]); //change the icon based on the response
            child.data("action", response); //change the data-action attribute based on response
        }
    );
});
</script>


<p>@endsection
```</p>

<p>Back to the <code>admin</code> controller. Create a new method and call it <code>post_update_userstatus</code> it will
accept two arguments: user_id and status.</p>

<p>```php
&lt;?php
public function post_update_userstatus($user_id, $status){</p>

<pre><code>//update user status
DB::table('tbl_users')
    -&gt;where('user_id', '=', $user_id)
    -&gt;update(array('status' =&gt; $status));

log_action("update user status");

//determine the new status 
$new_status = ($status == 1) ? 0 : 1;       //the new status will be equal to 0 if status is 1, it will be equal to 1 if status is 0

echo $new_status;   //echo it out, this is the response that were getting earlier from JavaScript
</code></pre>

<p>}
?>
```</p>

<p>To render the view for viewing the list of users, create another method.</p>

<p>```
&lt;?php
public function get_users(){</p>

<pre><code>if(!Cache::has('users')){ //if the users has not already been cached

    //get the users from the database
    $users = DB::table('users')
    -&gt;join('sys_departments', 'tbl_users.department_id', '=', 'sys_departments.department_id')
    -&gt;join('sys_roles', 'tbl_users.role_id', '=', 'sys_roles.role_id')
    -&gt;get(array('user_id', 'username', 'firstname', 'lastname', 'department', 'role', 'status'));

$users_data = $users;
Cache::put('users', $users_data, 10);  //put the users into the cache for 10 minutes
}else{ //if the users are already in the cache
    $users_data = Cache::get('users'); //just get the users from the cache
}

//render the view for viewing the list of users
return View::make('admin.users')
    -&gt;with('users', $users_data);
</code></pre>

<p>}
?>
```</p>

<h3>Updating a User</h3>

<p>Create another view for updating the user.
This is very similar to the view for creating users.</p>

<p>```html
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="twelve columns">
    <h5>Update User</h5>
  </div>
</div>


<div class="row">
  @render('errors')
  @render('success')
  <form method="post">    
    <div class="row">    
      <div class="two columns">
        <label for="firstname" class="right inline">First Name </label>
      </div>
      <div class="ten columns">
        <input type="text" name="firstname" id="firstname" class="five" value="{$user->firstname}"/>
      </div>

      <div class="two columns">
        <label for="middlename" class="right inline">Middle Name </label>
      </div>
      <div class="ten columns">
        <input type="text" name="middlename" id="middlename" class="five" value="{$user->middlename}"/>
      </div>

      <div class="two columns">
        <label for="lastname" class="right inline">Last Name</label>
      </div>
      <div class="ten columns">
        <input type="text" name="lastname" id="lastname" class="five" value="{$user->lastname}"/>
      </div>

      <div class="two columns">
        <label for="username" class="right inline">Username</label>
      </div>
      <div class="ten columns">
        <input type="text" name="username" id="username" class="five" value="{$user->username}"/>
      </div>

      <div class="two columns">
        <label for="password" class="right inline">Password</label>
      </div>
      <div class="ten columns">
        <input type="password" name="password" id="password" class="five"/>
      </div>   

      <div class="two columns">
        <label for="department" class="right inline">Department</label>
      </div>
      <div class="ten columns">
        <input type="text" name="department" id="department" class="five" value="{$user->department}" list="departments"/>

        <datalist id="departments">
          @foreach($departments as $dept)
          <option value="{$dept->department}">{$dept->department}</option>
          @endforeach
        </datalist>
      </div>  

      <div class="two columns">
        <label for="role" class="right inline">Role</label>
      </div>
      <div class="ten columns">
        <input type="text" name="role" id="role" class="five" value="{$user->role}" list=""/>
        <datalist id="it">
          @foreach($it_roles as $a)
            <option value="{$a->role}">{$a->role}</option>
          @endforeach
        </datalist>

        <datalist id="defense">
          @foreach($defense_roles as $b)
            <option value="{$b->role}">{$b->role}</option>
          @endforeach
        </datalist>

        <datalist id="marketing">
          @foreach($marketing_roles as $c)
            <option value="{$c->role}">{$c->role}</option>
          @endforeach
        </datalist>
      </div>  
    </div>

    <div class="row">
      <div class="four columns">
        
      </div>
      <div class="eight columns">
        <button class="success medium button" href="#">Update User</button>
      </div>
    </div>
  </form>
</div>


<p>@endsection
```</p>

<p>Create another method in the <code>admin</code> controller that will render the user update form.</p>

<p>```php
&lt;?php
public function get_user($user_id){</p>

<pre><code>$user = $this-&gt;_get_userdata($user_id);

return View::make(
    'admin.user', 
    array(
        'user' =&gt; $user,
        'departments' =&gt; $this-&gt;departments,
        'it_roles' =&gt; $this-&gt;it_roles,
        'marketing_roles' =&gt; $this-&gt;marketing_roles,
        'defense_roles' =&gt; $this-&gt;defense_roles
        )
);
</code></pre>

<p>}
?>
```</p>

<p>You will notice that we have used a method called <code>_get_userdata()</code> which takes the users id as
an argument. This method returns the user details based on the id that is specified.
We are joining the <code>departments</code> and <code>roles</code> table as well to get the department and the role to which the user belongs. Then we use the <code>where()</code> method to specify that we only want to get the user
which has a specific id. Then we use the <code>first()</code> method to let Laravel know that we only want to fetch a single record. Because when we just use <code>get()</code> Laravel(fluent) will return an array and we&rsquo;ll have to access
the results later on by doing something like <code>$user_data[0]-&gt;user_id</code> which isn&rsquo;t that bad but we&rsquo;ll have two type more characters.</p>

<p>```
&lt;?php
private function _get_userdata($user_id){</p>

<pre><code>$user_data = DB::table('users')
    -&gt;join('departments', 'users.department_id', '=', 'departments.id')
    -&gt;join('roles', 'users.role_id', '=', 'roles.id')
    -&gt;where('user_id', '=', $user_id)
    -&gt;first(array('user_id', 'username', 'firstname', 'middlename', 'lastname', 'department', 'role', 'status'));
return $user_data;  
</code></pre>

<p>}
?>
```</p>

<p>Then the code for updating the user details.</p>

<p>```
&lt;?php
public function post_user($user_id){</p>

<pre><code>$firstname = Input::get('firstname');
$middlename = Input::get('middlename');
$lastname = Input::get('lastname');
$department = Input::get('department');
$role = Input::get('role');
$username = Input::get('username');
$password = Input::get('password');

//bend the rules for updating user data
User::$rules['username'] = 'required|unique:tbl_users,username,' .$user_id . ',user_id'; //username is still unique but we need to exclude the user that were currently updating by specifying the user id

User::$rules['password'] = ''; //by default password is required now it isn't

if(!User::is_valid()){

    return Redirect::to('admin/user/' . $user_id)
        -&gt;with_errors(User::$validation)
        -&gt;with_input();
}else{
    $selected_department = DB::table('sys_departments')
        -&gt;where('department', '=', $department)
        -&gt;first('department_id');

    $department_id = $selected_department-&gt;department_id;

    $selected_role = DB::table('sys_roles')
        -&gt;where('role', '=', $role)-&gt;first('role_id');

    $role_id = $selected_role-&gt;role_id;


    if(!empty($password)){ //data if password is updated
        $password = Hash::make($password);
        $user_data = array(
            'firstname' =&gt; $firstname,
            'middlename' =&gt; $middlename,
            'lastname' =&gt; $lastname,
            'department_id' =&gt; $department_id,
            'role_id' =&gt; $role_id,
            'username' =&gt; $username,
            'hashed_password' =&gt; $password 
        );
    }else{ //data if password is not update
        $user_data = array(
            'firstname' =&gt; $firstname,
            'middlename' =&gt; $middlename,
            'lastname' =&gt; $lastname,
            'department_id' =&gt; $department_id,
            'role_id' =&gt; $role_id,
            'username' =&gt; $username
        );  
    }

    //update user details
    DB::table('tbl_users')
        -&gt;where('user_id', '=', $user_id)
        -&gt;update($user_data);

    log_action("update user");  

    return Redirect::to('admin/user/' . $user_id)
        -&gt;with('success_message', 'User Successfully Updated'); 
}
</code></pre>

<p>}
?>
```</p>

<h3>User Logs</h3>

<p>Create another view and call it <code>userlogs</code>. Nothing fancy here, this will just list out all the activities/transactions performed by a specific user or all users on the current day.</p>

<p>```html
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="twelve columns">
    <h5>User Logs - {$scope}</h5>
  </div>
</div>


<div class="row">
    <div class="twelve columns">
        <table class="twelve dtable">
          <thead>
            <tr>
              <th>Username</th>
              <th>Department</th>
              <th>Activity</th>
              <th>Timestamp</th>
            </tr>
          </thead>
          <tbody>
            @foreach($userlogs as $logs)
            <tr>
                <td>{$logs->user}</td>
                <td>{$logs->department}</td>
                <td>{$logs->transaction}</td>
                <td>{date("M d, Y @ g:i A", strtotime($logs->dateandtime))}</td>
            </tr>
            @endforeach
          </tbody>
      </table>
    </div>
</div>


<p>@endsection
```</p>

<p>Going back to the <code>admin</code> controller we create another method for rendering the user logs.
Nothing fancy here except for the usage of a raw query which can be done by using the <code>query()</code> method
from the <code>DB</code> class.
If there&rsquo;s a user id supplied then its only going to select the logs for a specific user which has that id.
If there&rsquo;s no user id then its going to select all the transactions performed by every user on that day.</p>

<p>`&ldquo;php
&lt;?php
public function get_logs($user_id = &rdquo;){</p>

<pre><code>$scope = '';
if(!empty($user_id)){
    $userlogs = DB::query("
        SELECT * FROM tbl_userlog 
        WHERE user_id = '$user_id'
        ORDER BY dateandtime DESC
    ");
    if(!empty($userlogs)){
        $scope = $userlogs[0]-&gt;user;
    }
}else{
    $userlogs = DB::query('
        SELECT * FROM tbl_userlog 
        WHERE DATE(dateandtime) = CURRENT_DATE
        ORDER BY dateandtime DESC
    ');
    $scope = 'All Users';
}

return View::make('admin.userlogs', array('userlogs' =&gt; $userlogs, 'scope' =&gt; $scope));
</code></pre>

<p>}
?>
```</p>

<h3>Updating Transaction Status</h3>

<p>Create another view and call it <code>transactions</code> this will be used to update the transactions
that can be performed by each role.</p>

<p>I guess its about time to give a little bit of explanation on what these transactions really are in this project that were creating.</p>

<p>Transactions are the things that the users can do in the application. In this project the navigation is representing the transactions. So disabling a transaction will hide the equivalent menu in the navigation so that the user won&rsquo;t be able to access it. But what we need to do is more than just hiding the menu item. What if the user has already memorized the actual route to access that specific page and he just types it in the address bar?
He will still be able to access the page only this time he didn&rsquo;t have to use the menu.</p>

<p>That&rsquo;s what were going to do later. For now let&rsquo;s put our minds back to the updating of transactions that can be performed by users.</p>

<p>Again there&rsquo;s nothing special about the form below.
The admin will just have to select the role that he wants to update.
After that he&rsquo;ll just click on the <code>view</code> button to load the transactions for that role.
Then he&rsquo;ll just have to deselect the transactions that cannot be performed by the role and select all the transactions that can be performed by the role. Were using <code>ajax</code> to submit the status of the transaction to the server-side that&rsquo;s why we don&rsquo;t have something like a submit button to commit the changes.</p>

<p>```html
@layout(&lsquo;main&rsquo;)</p>

<p>@section(&lsquo;content&rsquo;)</p>

<div class="row">
    <div class="twelve columns">
        <h5>Roles and Transactions</h5>
    </div>
</div>




<div class="row">
    <div class="two columns">
        <label for="role" class="right inline">Role</label>
    </div>
    <div class="nine columns">
        <select name="" id="role" class="seven">
        @foreach($roles as $r)
            <option 
                data-deptid="{$r->department_id}" 
                data-roleid="{$r->role_id}" 
                value="{$r->role}"
                @if($role_id == $r->role_id)
                {"selected"}
                @endif
            >
                {$r->role}
            </option>
        @endforeach
        </select>
        <a href="" id="view_transactions" class="success medium button two">View</a>
    </div>
</div>




<div id="transactions" class="row transactions">
    <div class="twelve columns">
        <ul>
        @foreach($transactions as $t)
            <li> 
                <?php 
                $status = "";
                if($t->status == 1){
                    $status = "checked";
                }
                ?>
                <input type="checkbox" data-id="{$t->roletransaction_id}" {$status}>
                {$t->menu_text} 
            </li>           
        @endforeach 
        </ul>
    </div>
</div>


<p>@endsection</p>

<p>@section(&lsquo;script&rsquo;)</p>

<script>
    $("#role").change(function(){ //if the role is changed
        var url = window.location;
        var selected_role = $("#role").find(":selected"); //its a good practice to cache a selector if you're going to use it more than once

        var department_id = selected_role.data("deptid");
        var role_id = selected_role.data("roleid");

        //change the url of the view button(well not actually a button, its a link) based on the role id
        $("#view_transactions").attr("href", url.origin + "/admin/roles/" + role_id);

    });


    $("input[data-id]").click(function(){
        var roletransaction_id = $(this).data("id");
        var status = $(this).attr("checked") ? 1 : 0; //if the box is check the status is 1 if not then its 0

        var url = window.location; //get all the information about the current url

        //update transaction status via ajax
        $.post(
            url.origin + "/admin/update_transactionstatus/" + roletransaction_id + "/" + status,
            function(response){

            }
        );
    });
</script>


<p>@endsection
```</p>

<p>Then render the transactions view.</p>

<p>```php
&lt;?php
public function get_roles($role_id){</p>

<pre><code>$roles = DB::table('roles')-&gt;get();
$transactions = DB::table('transactions')
    -&gt;join(
        'roletransactions', 
        'transactions.transaction_id', '=', 'roletransactions.transaction_id'
        )
    -&gt;where('id', '=', $role_id)
    -&gt;get(array(
        'roletransaction_id', 'role_id',
        'department_id', 'menu_text', 'status'
        )
    );

return View::make(
    'admin.transactions', 
    array('roles' =&gt; $roles, 'transactions' =&gt; $transactions, 'role_id' =&gt; $role_id)
);
</code></pre>

<p>}
?>
```</p>

<p>Create another method called <code>post_update_transactionstatus</code>. This is the method that
we have specified earlier in the <code>transactions</code> view
where the <code>roletransaction_id</code> and <code>status</code> is submitted.
As you can see were just accessing those submitted values through the parameters which represents the third and fourth segment of the route.</p>

<p>```
&lt;?php
public function post_update_transactionstatus($roletransaction_id, $status){</p>

<pre><code>DB::table('roletransactions')
    -&gt;where('id', '=', $roletransaction_id)
    -&gt;update(array('status' =&gt; $status));

    log_action("update transaction status");
</code></pre>

<p>}
?>
```</p>

<h3>Generating the User Navigation</h3>

<p>Yep! you heard that right, were generating the navigation everytime the user logs in.
Were going to fetch what transactions the user can perform in the application and loop through the results.</p>

<p>This means that for every user, different menu items will be generated.
But of course were not going to have a feature wherein the admin updates the transactions for a particular role and it will automatically update the UI of all the users who are currently logged in to the application.
That would be uber-cool but I don&rsquo;t currently know how to do those real-time applications.</p>

<p>So we&rsquo;ll just stick with old-school for now.
The menu will just change once the user has logged out and logged back in again.
And this is just fine its not like the admin is going to update the transactions that the users can perform every second of the day. We don&rsquo;t need to over-engineer things for the sake of being cool.</p>

<h4>View Composers</h4>

<p>Before anything else I&rsquo;d like to introduce another templating concept in Laravel which is the view composers.
View composers are simply used to nest or attach data or a view into another view.</p>

<p>This is perfect for our purpose since we want the user navigation to be different for each role.</p>

<p>View composers takes 2 parameters.
The first parameter is the view in which you want to attach a specific data.
But of course you can use an array to specify multiple views.</p>

<p>The second parameter is what you want to do to those views.
Here were just attaching data that is fetched from the database.</p>

<p>Go ahead and open up <code>routes.php</code> inside the <code>application</code> directory and add the following code:</p>

<p>```
&lt;?php
View::composer(
//specify the views where the data will be attached
  array(</p>

<pre><code>'admin.home',
'admin.create_role', 'admin.create_user', 
'admin.user', 'admin.users',
'admin.userlogs', 'admin.transactions'
</code></pre>

<p>  ),</p>

<pre><code>function($view){

$role_id = Session::get('role_id'); //load role id of current user from session

if(Session::get('navigation')){
  $nav = Session::get('navigation');

}else{
  $transactions = DB::table('roletransactions')
    -&gt;join(
      'transactions', 
      'roletransactions.transaction_id', '=', 'transactions.id'
      )
    -&gt;where('role_id', '=', $role_id)
    -&gt;where('status', '=', 1)
    -&gt;order_by('position', 'ASC')
    -&gt;get(array(
        'menu_text', 'main_menu', 'address', 'status'
      )
    );

  $nav = array();
  foreach($transactions as $t){

    $nav[$t-&gt;main_menu][$t-&gt;menu_text] = $t-&gt;address; //fill in the array with the results from the database
  }

  //save it into the session to make it accessible later 
  //on pages which needs this information
  Session::put('navigation', $nav); 
}

//attach the data that was fetched from the database into the navigation view
//first parameter is the name that you want to give the view
//second parameter is the actual name of the view. In this case the name is navigation.blade.php
//third is the data that you wish to pass in to the navigation view
    $view-&gt;nest('navigation', 'navigation', array('navigation' =&gt; $nav));
}
</code></pre>

<p>);
?>
```</p>

<h4>Navigation View</h4>

<p>Create a new view just inside the root of the <code>view</code> directory and name it <code>navigation</code> this will serve as the template for the navigation.</p>

<p>If you can still remember from the main template that we created earlier.
We have a variable called <code>navigation</code> and that variable is storing the template below.</p>

<p>It might not click right away but that&rsquo;s how view nesting works.</p>

<p>```html</p>

<ul class="left">
  <li class="divider"></li>
    @foreach($navigation as $key => $nav)
      <li class="has-dropdown">
        <a href="#" class="active">{$key}</a>
        <ul class="dropdown">
          @foreach($nav as $subnav => $link)
          <li>
            <a href="{URL::to($link)}">{$subnav}</a>
          </li>
          @endforeach
        </ul>
      </li>
    @endforeach
</ul>


<p>```</p>

<h4>Check User Access</h4>

<p>Going back to the <code>routes.php</code> file. Create a filter and call it <code>check_roles</code> we will use this filter to check if the current user has the authority/privilege to access the page that he is trying to access.</p>

<p>```php
&lt;?php
Route::filter(&lsquo;check_roles&rsquo;, function()
{</p>

<pre><code>$current_url = URI::current();  //get current url excluding the domain.
$current_page = URI::segment(2); //get current page which is stored in the second uri segment. Just a refresher: //the first uri segment is the controller, the second is the method, 
    //third and up are the parameters that you wish to pass in

$access = 0;
$nav = Session::get('navigation'); //get menu items from session

//excluded pages are the pages we don't want to execute this filter 
//since they should always be accessible for a logged in user
$excluded_pages = array('login', 'it/home', 'defense/home', 'marketing/home');

if(!in_array($current_url, $excluded_pages)){//if current page is not an excluded pages
  foreach($nav as $addresses){
    foreach($addresses as $address){
      if(strpos($address, "/")){
        $full = explode("/", $address);
        $page = $full[1];
        if($current_page == $page){
          $access = 1;
          return; 
        }
      }
    }
  }

  if($access == 0){ //if user doesn't have access to the page that he's trying to access
    $departments = array('it', 'defense', 'marketing'); 
    $department_id = Session::get('department_id'); //get department id of the current user

    //redirect the user to the homepage of that 
    //department along with some error message that he cannot access that page
    return Redirect::to($departments[$department_id - 1].'/home') 
      -&gt;with('error', 'You don\'t have permission to access the following page: ' . $current_url);
  }
}
</code></pre>

<p>});
?>
```</p>

<p>You can just use the filter for every route which meets the pattern that you have specified:
This will ensure that the users can&rsquo;t actually access the page they&rsquo;re trying to access if its not allowed by the administrator.</p>

<p><code>
&lt;?php
Route::filter('pattern: admin/*', 'check_roles');
?&gt;
</code></p>

<h4>Controller Detect</h4>

<p>Instead of specifying the controllers one by one we can just use <code>Controller::detect()</code> which
returns an array of all the controllers that we have created (pretty sweet right?).</p>

<p><code>
&lt;?php
Route::Controller(Controller::detect()); //create a route for every controller so that its accessible
?&gt;
</code></p>

<h4>Logout</h4>

<p>Finally, the logout. Were just going to call two methods then redirect to the login page.</p>

<p><code>
&lt;?php
Route::get('logout', function(){
  Auth::logout(); //logout the current user
  Session::flush(); //delete the session
  return Redirect::to('login'); //redirect to login page
});
?&gt;
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s pretty much it. I hope you&rsquo;ve learned a bunch about Laravel by building this project.
Be sure to check out the resources below if you want to learn more about Laravel.</p>

<h3>Resources</h3>

<p>Here are some resources that you can use if ever you get stuck on building this project or if there&rsquo;s something you don&rsquo;t totally understand.</p>

<ul>
<li><a href="http://daylerees.com/category/laravel-tutorials/">Laravel Tutorials by Dayle Rees</a></li>
<li><a href="http://laravel.io/">Ins and Outs of Laravel</a></li>
<li><a href="http://jasonlewis.me/laravel-tutorials">Laravel Tutorials by Jason Lewis</a></li>
<li><a href="http://laravel.com/docs">Official Laravel Documentation</a></li>
<li><a href="http://forums.laravel.com/">Laravel Forums</a></li>
<li><a href="http://net.tutsplus.com/tag/laravel/">Nettuts &ndash; Laravel</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
