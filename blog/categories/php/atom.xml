<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-10-20T13:54:52+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<p>```php
&lt;?php
class Flickr{</p>

<pre><code>private $flickr_key;
private $flickr_secret;
private $format = 'json';

public function __construct($flickr_key, $flickr_secret) {

    $this-&gt;flickr_key = $flickr_key;
    $this-&gt;flickr_secret = $flickr_secret;
}
</code></pre>

<p>?>
```</p>

<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<p>`&ldquo;
&lt;?php
public function searchPhotos($query = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$urlencoded_tags = array(); 

if(!empty($tags)){  
    $tags_r = explode(',', $tags);
    foreach($tags_r as $tag){
        $urlencoded_tags[] = urlencode($tag);
    }
}   

//construct the url
$url  = 'http://api.flickr.com/services/rest/?';
$url .= 'method=flickr.photos.search';
$url .= '&amp;text=' . urlencode($query);
$url .= '&amp;tags=' . implode(',', $urlencoded_tags); //convert the array of url encoded tags back to a string
$url .= '&amp;sort=relevance';
$url .= '&amp;safe_search=1';
$url .= '&amp;content_type=4';
$url .= '&amp;api_key=' . $this-&gt;flickr_key;
$url .= '&amp;format=' . $this-&gt;format;
$url .= '&amp;per_page=10';

//get the results
$result = file_get_contents($url);

//remove the unneccessary strings that wraps the result returned from the API
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);

$photos = array();
$data = json_decode($json, true);

//check if the status didn't fail
if($data['stat'] != 'fail'){
    //return only the data for the photos as that's the only thing that we need
    $photos = $data['photos']['photo'];
    return $photos;
}else{
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<p><code>
&lt;?php
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);
?&gt;
</code></p>

<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<p>```
&lt;?php
$photos = array();
$data = json_decode($json, true);</p>

<p>//check if the status didn&rsquo;t fail
if($data[&lsquo;stat&rsquo;] != &lsquo;fail&rsquo;){</p>

<pre><code>//return only the data for the photos as that's the only thing that we need
$photos = $data['photos']['photo'];
return $photos;
</code></pre>

<p>}else{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<p><code>
&lt;?php
$src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
?&gt;
</code></p>

<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<p>```
&lt;?php
require_once(&lsquo;class.flickr.php&rsquo;);</p>

<p>$flickr = new Flickr($api_key, $api_secret);</p>

<p>$results = $flickr->searchPhotos($query, $tags);
if(!empty($results)){</p>

<pre><code>foreach($results as $photo){

    $src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
</code></pre>

<p>?></p>

<pre><code>&lt;img src="&lt;?php echo $src; ?&gt;" alt="&lt;?php echo $photo['title']; ?&gt;"&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Web Scraping in PHP]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php/"/>
    <updated>2013-08-07T17:22:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/08/07/getting-started-with-web-scraping-in-php</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to get a specific data from another website but there&rsquo;s no API available for it?
That&rsquo;s where Web Scraping comes in, if the data is not made available by the website we can just scrape it from the website itself.</p>

<!--More-->


<p>But before we dive in let us first define what web scraping is. According to <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia</a>:</p>

<p><blockquote><p>Web scraping (web harvesting or web data extraction) is a computer software technique of extracting information from websites. Usually, such software programs simulate human exploration of the World Wide Web by either implementing low-level Hypertext Transfer Protocol (HTTP), or embedding a fully-fledged web browser, such as Internet Explorer or Mozilla Firefox.</p></blockquote></p>

<p>So yes, web scraping lets us extract information from websites.
But the thing is there are some legal issues regarding web scraping.
Some consider it as an act of trespassing to the website where you are scraping the data from.
That&rsquo;s why it is wise to read the terms of service of the specific website that you want to scrape because you might be doing something illegal without knowing it.
You can read more about it in this <a href="http://en.wikipedia.org/wiki/Web_scraping">Wikipedia page</a>.</p>

<h2>Web Scraping Techniques</h2>

<p>There are many techniques in web scraping as mentioned in the Wikipedia page earlier.
But I will only discuss the following:</p>

<ul>
<li>Document Parsing</li>
<li>Regular Expressions</li>
</ul>


<h3>Document Parsing</h3>

<p>Document parsing is the process of converting HTML into DOM (Document Object Model) in which we can traverse through.
Here&rsquo;s an example on how we can scrape data from a public website:</p>

<p>```php
&lt;?php
$html = file_get_contents(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;); //get the html returned from the following url</p>

<p>$pokemon_doc = new DOMDocument();</p>

<p>libxml_use_internal_errors(TRUE); //disable libxml errors</p>

<p>if(!empty($html)){ //if any html is actually returned</p>

<pre><code>$pokemon_doc-&gt;loadHTML($html);
libxml_clear_errors(); //remove errors for yucky html

$pokemon_xpath = new DOMXPath($pokemon_doc);

//get all the h2's with an id
$pokemon_row = $pokemon_xpath-&gt;query('//h2[@id]');

if($pokemon_row-&gt;length &gt; 0){
    foreach($pokemon_row as $row){
        echo $row-&gt;nodeValue . "&lt;br/&gt;";
    }
}
</code></pre>

<p>}
?>
```</p>

<p>What we did with the code above was to get the html returned from the url of the website that we want to scrape.
In this case the website is <a href="http://pokemondb.net">pokemondb.net</a>.</p>

<p><code>
&lt;?php
$html = file_get_contents('http://pokemondb.net/evolution');
?&gt;
</code></p>

<p>Then we declare a new DOM Document, this is used for converting the html string returned from <code>file_get_contents</code> into an actual Document Object Model which we can traverse through:</p>

<p><code>
&lt;?php
$pokemon_doc = new DOMDocument();
?&gt;
</code></p>

<p>Then we disable libxml errors so that they won&rsquo;t be outputted on the screen, instead they will be buffered and stored:</p>

<p><code>
&lt;?php
libxml_use_internal_errors(TRUE); //disable libxml errors
?&gt;
</code></p>

<p>Next we check if there&rsquo;s an actual html that has been returned:</p>

<p><code>
&lt;?php
if(!empty($html)){ //if any html is actually returned
}
?&gt;
</code></p>

<p>Next we use the <code>loadHTML()</code> function from the new instance of <code>DOMDocument</code> that we created earlier to load the html that was returned. Simply use the html that was returned as the argument:</p>

<p><code>
&lt;?php
$pokemon_doc-&gt;loadHTML($html);
?&gt;
</code></p>

<p>Then we clear the errors if any. Most of the time yucky html causes these errors. Examples of yucky html are inline styling (style attributes embedded in elements), invalid attributes and invalid elements. Elements and attributes are considered invalid if they are not part of the HTML specification for the doctype used in the specific page.</p>

<p><code>
&lt;?php
libxml_clear_errors(); //remove errors for yucky html
?&gt;
</code></p>

<p>Next we declare a new instance of <code>DOMXpath</code>. This allows us to do some queries with the DOM Document that we created.
This requires an instance of the DOM Document as its argument.</p>

<p><code>
&lt;?php
$pokemon_xpath = new DOMXPath($pokemon_doc);
?&gt;
</code></p>

<p>Finally, we simply write the query for the specific elements that we want to get. If you have used <a href="http://jquery.com/">jQuery</a> before then this process is similar to what you do when you select elements from the DOM.
What were selecting here is all the h2 tags which has an id, we make the location of the h2 unspecific by using double slashes <code>//</code> right before the element that we want to select. The value of the id also doesn&rsquo;t matter as long as there&rsquo;s an id then it will get selected. The <code>nodeValue</code> attribute contains the text inside the h2 that was selected.</p>

<p>```
&lt;?php
//get all the h2&rsquo;s with an id
$pokemon_row = $pokemon_xpath->query(&lsquo;//h2[@id]&rsquo;);</p>

<p>if($pokemon_row->length > 0){</p>

<pre><code>foreach($pokemon_row as $row){
    echo $row-&gt;nodeValue . "&lt;br/&gt;";
}
</code></pre>

<p>}
?>
```</p>

<p>This results to the following text printed out in the screen:</p>

<p><code>
Generation 1 - Red, Blue, Yellow
Generation 2 - Gold, Silver, Crystal
Generation 3 - Ruby, Sapphire, Emerald
Generation 4 - Diamond, Pearl, Platinum
Generation 5 - Black, White, Black 2, White 2
</code></p>

<p>Let&rsquo;s do one more example with the document parsing before we move on to regular expressions.
This time were going to get a list of all pokemons along with their specific type (E.g Fire, Grass, Water).</p>

<p>First let&rsquo;s examine what we have on pokemondb.net/evolution so that we know what particular element to query.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/check.png" alt="checking" /></p>

<p>As you can see from the screenshot, the information that we want to get is contained within a span element with a class of <code>infocard-tall</code>. Yes, the space there is included. When using XPath to query spaces are included if they are present, otherwise it wouldn&rsquo;t work.</p>

<p>Converting what we know into actual query, we come up with this:</p>

<p><code>
//span[@class="infocard-tall "]
</code></p>

<p>This selects all the span elements which has a class of <code>infocard-tall</code>. It doesn&rsquo;t matter where in the document the span is because we used the double forward slash before the actual element.</p>

<p>Once were inside the span we have to get to the actual elements which directly contains the data that we want. And that is the name and the type of the pokemon. As you can see from the screenshot below the name of the pokemon is directly contained within an <code>anchor</code> element with a class of <code>ent-name</code>. And the types are stored within a <code>small</code> element with a class of <code>aside</code>.</p>

<p><img src="/images/posts/getting_started_with_web_scraping/info-card.png" alt="info card" /></p>

<p>We can then use that knowledge to come up with the following code:</p>

<p>```
&lt;?php
$pokemon_list = array();</p>

<p>$pokemon_and_type = $pokemon_xpath->query(&lsquo;//span[@class=&ldquo;infocard-tall &rdquo;]&rsquo;);</p>

<p>if($pokemon_and_type->length > 0){</p>

<pre><code>//loop through all the pokemons
foreach($pokemon_and_type as $pat){

    //get the name of the pokemon
    $name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;

    $pkmn_types = array(); //reset $pkmn_types for each pokemon
    $types = $pokemon_xpath-&gt;query('small[@class="aside"]/a', $pat);

    //loop through all the types and store them in the $pkmn_types array
    foreach($types as $type){
        $pkmn_types[] = $type-&gt;nodeValue; //the pokemon type
    }

    //store the data in the $pokemon_list array
    $pokemon_list[] = array('name' =&gt; $name, 'types' =&gt; $pkmn_types);

}
</code></pre>

<p>}</p>

<p>//output what we have
echo &ldquo;<pre>&rdquo;;
print_r($pokemon_list);
echo &ldquo;</pre>&rdquo;;
?>
```</p>

<p>There&rsquo;s nothing new with the code that we have above except for using query inside the <code>foreach</code> loop.
We use this particular line of code to get the name of the pokemon, you might notice that we specified a second argument when we used the <code>query</code> method. The second argument is the current row, we use it to specify the scope of the query. This means that were limiting the scope of the query to that of the current row.</p>

<p><code>
&lt;?php
$name = $pokemon_xpath-&gt;query('a[@class="ent-name"]', $pat)-&gt;item(0)-&gt;nodeValue;
?&gt;
</code></p>

<p>The results would be something like this:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [name] =&gt; Bulbasaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[1] =&gt; Array
    (
        [name] =&gt; Ivysaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
[2] =&gt; Array
    (
        [name] =&gt; Venusaur
        [types] =&gt; Array
            (
                [0] =&gt; Grass
                [1] =&gt; Poison
            )
    )
</code></pre>

<p>```</p>

<h3>Regular Expressions</h3>

<p>Aside from document parsing we can also use regular expressions to scrape the data that we want from a specific webpage.
Regular expressions are useful if we only want to scrape actual content and not HTML elements because its difficult if not impossible to match all the possibilities of how an HTML element might have been written.
Consider the following example:</p>

<p><code>
&lt;link rel="stylesheet" href="style.css"&gt;
&lt;link href="style.css" rel="stylesheet"&gt;
&lt;link href="style.css" rel="stylesheet" /&gt;
&lt;link href="style.css" rel="stylesheet"/&gt;
&lt;link rel="stylesheet" href="style.css" type="text/css"&gt;
&lt;link type="text/css" rel="stylesheet" href="style.css"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet" /&gt;
&lt;link type="text/css" href="style.css" rel="stylesheet"/&gt;
</code></p>

<p>The code above is basically the same thing written in a bunch of ways. It would be difficult to scrape all the external stylesheets in a page using regular expressions as we would need to target every possible way that it can be written. So instead of using regular expressions we use document parsing to get all the external stylesheets. This is just one of the many cases in which regular expressions can&rsquo;t be used in scraping.</p>

<p>The main advantage of using regular expressions is its speed. The whole process of converting an HTML document into DOM and then traversing the DOM takes time especially if there are lots of elements which matches the query that you specify.
This is not the case with regular expressions as you&rsquo;re only working with strings and patterns with it, no conversion and traversing takes place so its very fast.</p>

<p>Ok enough with the explanations, here&rsquo;s an example on how to use regular expressions in scraping.
Here we are specifically looking for URL&rsquo;s which begins with <code>https://safelinking.net/</code> and followed by any instances of letters from A to Z and its lowercase version or any instances of numbers. Remember that we need to escape forward slashes and periods using a backslash. We then use the <code>preg_match_all()</code> function to get all the matches of the specific pattern that were looking for. The <code>preg_match_all()</code> function takes the pattern as its first argument, then the actual string where we want to find the pattern as its second argument, then the third argument would be the variable that will store the actual matches.</p>

<p>```
&lt;?php
$pokemon_episodes_html = file_get_contents(&lsquo;<a href="http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html">http://www.animekens.com/2013/04/pokemon-episode-1-82-season-1-480p60mb.html</a>&rsquo;);
$pattern = &lsquo;/<a href="https://safelinking.net/d/">https://safelinking.net/d/</a>[A-Za-z0-9]*/&rsquo;;
preg_match_all($pattern, $pokemon_episodes_html, $matches);
?></p>

<pre>
    <?php print_r($matches); ?>
</pre>


<p>```</p>

<p>The code above will output the following:</p>

<p>```
Array
(</p>

<pre><code>[0] =&gt; Array
    (
        [0] =&gt; https://safelinking.net/d/81b681a76a
        [1] =&gt; https://safelinking.net/d/04138fdd24
        [2] =&gt; https://safelinking.net/d/7378613026
</code></pre>

<p>```</p>

<h2>Web Scraping Tools</h2>

<p>You can also use some web scraping tools to make your life easier. Here are some of the PHP libraries that you can use for scraping.</p>

<h3>Simple HTML Dom</h3>

<p>To make web scraping easier you can use libraries such as <a href="http://simplehtmldom.sourceforge.net/">simple html DOM</a>.
Here&rsquo;s an example of getting the names of the pokemon using simple html DOM:</p>

<p>```
&lt;?php
require_once &lsquo;libs/simple_html_dom.php&rsquo;;
$html = file_get_html(&lsquo;<a href="http://pokemondb.net/evolution">http://pokemondb.net/evolution</a>&rsquo;);</p>

<p>foreach($html->find(&lsquo;a[class=ent-name]&rsquo;) as $element){</p>

<pre><code>echo $element-&gt;innertext . '&lt;br&gt;'; //outputs bulbasaur, ivysaur, etc...
</code></pre>

<p>}
?>
```</p>

<p>The syntax is more simple so the code that you have to write is lesser plus there are also some convenience functions and attributes which you can use. An example is the plaintext attribute which extracts all the text from a web page:</p>

<p><code>
&lt;?php
echo file_get_html('http://pokemondb.net/evolution')-&gt;plaintext;
?&gt;
</code></p>

<h3>Ganon</h3>

<p>You can also use <a href="https://code.google.com/p/ganon/">ganon</a> for web scraping which packs features such as support for html5, jQuery like syntax, manipulation of elements and their attributes.</p>

<p>Here&rsquo;s an example on how to use ganon to get all the images that are in a table element:</p>

<p>```
&lt;?php
require_once &lsquo;libs/ganon.php&rsquo;;
$html = file_get_dom($url);
if(!empty($html)){</p>

<pre><code>$elements = $html('table img');

foreach($elements as $element){
    echo $element-&gt;src . "&lt;br/&gt;"; //output the image source
}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial! You have learned the basics of web scraping in PHP.
You can take your adventures to the next level by scraping non-public parts of websites or scraping content that is dynamically generated.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://blog.hartleybrody.com/web-scraping/">I don&rsquo;t need no stinking API: Web Scraping for fun and profit</a></li>
<li><a href="http://blog.webspecies.co.uk/2011-07-27/web-scrapping-is-actually-pretty-easy.html">Web scraping is actually pretty easy</a></li>
<li><a href="https://news.ycombinator.com/item?id=4893922">Web scraping or API</a></li>
<li><a href="http://curl.haxx.se/">Curl</a></li>
<li><a href="http://simplehtmldom.sourceforge.net/">Simple HTML Dom</a></li>
<li><a href="https://code.google.com/p/ganon/">Ganon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ebay Finding API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api/"/>
    <updated>2013-04-03T08:09:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can access the e-bay finding API to access products that are sold from e-bay.
Product data such as the list price, available quantities, images are available from the e-bay finding API.</p>

<!--More-->


<h3>Getting an API Key</h3>

<p>First thing that you have to do is to get an API Key from e-bay.
This will serve as a unique identification for your application
and a means for e-bay to limit access to their API to only those that have an API key.</p>

<p>To get an API key you must first register with e-bay: <a href="https://developer.ebay.com/join/">developer.ebay.com/join</a></p>

<p>After successfully registering you will receive an email from e-bay. Click on the link to verify your email and you will be redirected to a screen similar to the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_ebay_finding_api/registration_success.jpg" alt="successful registration" /></p>

<p>You can then click on the get your application keys link, you will be redirected to the accounts page where you can click on the Generate production keys button to generate the API key.</p>

<h3>Building a Simple e-bay Class</h3>

<p>Next were going to build the class that were going to use later to access the API.
Create a new PHP file and name it <code>class.ebay.php</code>. Then put the following contents:</p>

<p>```
&lt;?php
class ebay{</p>

<p>}
?>
```</p>

<p>Inside the class declare the following private member variables:</p>

<p><code>php
&lt;?php
private $url = 'http://svcs.ebay.com/services/search/FindingService/v1';
private $app_id; //api key
private $global_id; //e-bay region (eg. EBAY-US)
private $version = '1.0.0'; //version of the API to use
private $format = 'json'; //format of the returned data
?&gt;
</code></p>

<p>The <code>$url</code> is the address in which the API can be accessed.</p>

<p>The <code>$app_id</code> is the API key that you got earlier from registering your application with e-bay.</p>

<p>The <code>$global_id</code> is the e-bay region in which you want to access product data. Think of it as the e-bay store which you access in your browser when you want to buy something online. The e-bay store that you&rsquo;re accessing when you type in <code>ebay.com</code> is the US store which has a global id of <code>EBAY-US</code>. There are also other global ids that you can use, you can access them here: <a href="http://developer.ebay.com/DevZone/finding/CallRef/Enums/GlobalIdList.html">Global ID List</a></p>

<p>The <code>$version</code> is the version of the API that you want to use. At the time of writing of this article the version that is available is <code>1.0.0</code> so were going to use that here.</p>

<p>The <code>$format</code> is the format in which you want the returned data to be encoded. The preffered format is <code>json</code> since we can easily manipulate it using PHP or JavaScript.</p>

<p>Next is the constructor which will take up 3 arguments. The <code>$app_id</code> and <code>$global_id</code>.
The constructor is called once you create an object of this class so you&rsquo;ll have to pass in the 2 arguments when you create an object.</p>

<p>```
&lt;?php
public function __construct($app_id, $global_id){</p>

<pre><code>$this-&gt;app_id = $app_id; 
$this-&gt;global_id = $global_id; 
</code></pre>

<p>}
?><br/>
```</p>

<p>Next, create a new method and call it <code>findItems</code> this will take 2 arguments: the <code>$keyword</code> and the <code>$limit</code>.
The <code>$keyword</code> is your query. For example <code>computer accessories</code>.
The <code>$limit</code> is the number of products which you want to return.</p>

<p>In this method were simply appending the different parameters to the <code>$url</code> that we declared earlier.</p>

<p>The parameters that we have used here are:</p>

<ul>
<li><p>operation-name &ndash; the operation that you want to perform. In the example below were using the <code>findItemsByKeywords</code> operation. The type of operation will determine the other parameters that you will be including in your request.
In the case of <code>findItemsByKeywords</code> the required parameter is the <code>keywords</code>. There are also other operations which you can use you can find them at the <a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">call reference page</a>.</p></li>
<li><p><strong>service-version</strong> &ndash; the version of the API that you would want to use. In our example were using version    <code>1.0.0</code></p></li>
<li><p><strong>keywords</strong> &ndash; the parameter required by the <code>findItemsByKeywords</code> operation in which you supply your url encoded query.</p></li>
<li><p><strong>paginationInput.entriesPerPage</strong> &ndash; the number of entries per page</p></li>
<li><p><strong>security-appname</strong> &ndash; the APP id that you got from registering your application with e-bay</p></li>
<li><p><strong>response-data-format</strong> &ndash; the format in which you want the returned data to be.
The preferred format is json although you can also have XML or SOAP as response data format.</p></li>
</ul>


<p>Once the parameters are all appended together with the request url we can then make a request to the API by using the <code>file_get_contents</code> method and supplying the request url as the argument. And since we specified <code>json</code> as the format earlier were going to use the <code>json_decode</code> method to convert the json string into an array.</p>

<p>`&ldquo;
&lt;?php
public function findItems($keyword = &rdquo;, $limit = 2){</p>

<pre><code>$url    = $this-&gt;url . '?';
$url .= 'operation-name=findItemsByKeywords';
$url .= '&amp;service-version=' . $this-&gt;version;
$url .= '&amp;keywords=' . urlencode($keyword);
$url .= '&amp;paginationInput.entriesPerPage=' . $limit;

$url .= '&amp;security-appname='. $this-&gt;app_id;
$url .= '&amp;response-data-format=' . $this-&gt;format;

return json_decode(file_get_contents($url), true);
</code></pre>

<p>}
?><br/>
```</p>

<p>We can also have a method where we can have more specificity with what we want to find.
We can also specify the sorting type, item type, minimum price and maximum price. Note that we are using a different operation name for this method and that is the <code>findItemsAdvanced</code> operation.</p>

<p>`&ldquo;
&lt;?php
public function findItemsAdvanced($keyword = &rdquo;, $item_sort = &lsquo;BestMatch&rsquo;, $item_type = &lsquo;FixedPricedItem&rsquo;, $min_price = &lsquo;0&rsquo;, $max_price = &lsquo;9999999&rsquo;, $limit = 2){</p>

<pre><code>    $url    = $this-&gt;url . '?';
    $url .= 'operation-name=findItemsAdvanced';
    $url .= '&amp;service-version=' . $this-&gt;version;
    $url .= '&amp;global-id=' . $this-&gt;global_id;
    $url .= '&amp;keywords=' . urlencode($keyword);

    $url .= '&amp;sortOrder=BestMatch';
    $url .= '&amp;itemFilter(0).name=ListingType';
    $url .= '&amp;itemFilter(0).value=FixedPrice';
    $url .= '&amp;itemFilter(1).name=MinPrice';
    $url .= '&amp;itemFilter(1).value=' . $min_price;
    $url .= '&amp;itemFilter(2).name=MaxPrice';
    $url .= '&amp;itemFilter(2).value=' . $max_price;
    $url .= '&amp;paginationInput.entriesPerPage=' . $limit;
    $url .= '&amp;descriptionSearch=false';

    $url .= '&amp;security-appname='. $this-&gt;app_id;
    $url .= '&amp;response-data-format=' . $this-&gt;format;

    return json_decode(file_get_contents($url), true);
}
</code></pre>

<p>?>
```</p>

<p>Lastly, we can also create a method which simply returns an array of the sort orders available via e-bay.
You can find the available values for sort orders in <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsAdvanced.html#Request.sortOrder">this page</a>.</p>

<p>```
&lt;?php
public function sortOrders(){</p>

<pre><code>$sort_orders = array(
    'BestMatch' =&gt; 'Best Match',
    'BidCountFewest' =&gt; 'Bid Count Fewest',
    'BidCountMost' =&gt; 'Bid Count Most',
    'CountryAscending' =&gt; 'Country Ascending',
    'CountryDescending' =&gt; 'Country Descending',
    'CurrentPriceHighest' =&gt; 'Current Highest Price',
    'DistanceNearest' =&gt; 'Nearest Distance',
    'EndTimeSoonest' =&gt; 'End Time Soonest',
    'PricePlusShippingHighest' =&gt; 'Price Plus Shipping Highest',
    'PricePlusShippingLowest' =&gt; 'Price Plus Shipping Lowest',
    'StartTimeNewest' =&gt; 'Start Time Newest'
);

return $sort_orders;
</code></pre>

<p>}
?>
```</p>

<h3>Building a Simple App</h3>

<p>Time to use the class that we just created in building a simple application.
Our simple application will have a search field for inputting products that the user wants to search
and a drop-down box to sort the results.</p>

<p>The only product details that were going to show to the user is the item title, price and the product image.
In the code below were declaring an object of the class that we created earlier specifying the API key
and the e-bay region as the first and second parameter.</p>

<p>Then we call the <code>sortOrders</code> method which simply returns an array of sort orders that are available from the e-bay finding API.</p>

<p>Next, we build the form for searching products.</p>

<p>Finally, we check if the <code>$_POST['search']</code> variable is not empty and use its value together with the sort selected by the user as the argument for the <code>findItemsAdvanced</code> method.
Going back to the class that we created earlier we used <code>findItemsAdvanced</code> as the operation.
The operation determines the first index when accessing the results.
So for the <code>findItemsAdvanced</code> it will have <code>findItemsAdvancedResponse</code> as the first index.</p>

<p>```
&lt;?php
require_once(&lsquo;class.ebay.php&rsquo;);</p>

<p>$ebay = new ebay(&lsquo;YOUR API KEY&rsquo;, &lsquo;EBAY-US&rsquo;);
$sort_orders = $ebay->sortOrders();
?></p>

<p><form action="ebay_finding_test.php" method="post"></p>

<pre><code>&lt;input type="text" name="search" id="search"&gt;
&lt;select name="sort" id="sort"&gt;
&lt;?php
foreach($sort_orders as $key =&gt; $sort_order){
?&gt;
    &lt;option value="&lt;?php echo $key; ?&gt;"&gt;&lt;?php echo $sort_order; ?&gt;&lt;/option&gt;
&lt;?php   
}
?&gt;
&lt;/select&gt;
&lt;input type="submit" value="Search"&gt;
</code></pre>

<p></form></p>

<p>&lt;?php
if(!empty($_POST[&lsquo;search&rsquo;])){</p>

<pre><code>$results = $ebay-&gt;findItemsAdvanced($_POST['search'], $_POST['sort']);
$item_count = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['@count'];

if($item_count &gt; 0){
    $items = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['item'];

    foreach($items as $i){
</code></pre>

<p>?></p>

<pre><code>    &lt;li&gt;
        &lt;div class="item_title"&gt;
            &lt;a href="&lt;?php echo $i['viewItemURL'][0]; ?&gt;"&gt;&lt;?php echo $i['title'][0]; ?&gt;&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="item_img"&gt;
            &lt;img src="&lt;?php echo $i['galleryURL'][0]; ?&gt;" alt="&lt;?php echo $i['title']; ?&gt;"&gt;
        &lt;/div&gt;
        &lt;div class="item_price"&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['@currencyId']; ?&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['__value__']; ?&gt;
        &lt;/div&gt;
    &lt;/li&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>    }
}       
</code></pre>

<p>}
?>
```</p>

<p>Here&rsquo;s the demo for this simple application implemented using JavaScript by using Handlebars for the template and jQuery&rsquo;s <code>$.ajax</code> method to request the data. Be sure to place your own app id that you got from e-bay in order to make this demo work.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/L6Nkj/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it for this tutorial. Using the API is really easy since you don&rsquo;t need to construct signatures to be used in the request like other API&rsquo;s. Be sure to check out the resources below if you want to learn more about the e-bay finding API.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://developer.ebay.com/DevZone/finding/HowTo/">Finding API How To</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html">Making an API Call</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">Call Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/ebay_finding_api.7z">Sample Application Source Code</a></li>
<li><a href="http://tutorialdemos-wern.rhcloud.com/ebay_finding_api/ebay_finding_test.php">Sample Application Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Templating Libraries]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries/"/>
    <updated>2013-03-24T21:49:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/03/24/playing-with-templating-libraries</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through some of the templating libraries
that I&rsquo;m currently using for my projects specifically the following:</p>

<ul>
<li><a href="https://github.com/janl/mustache.js">Mustache</a></li>
<li><a href="https://github.com/wycats/handlebars.js/">Handlebars</a></li>
<li><a href="http://smarty.net/">Smarty</a></li>
</ul>


<p>Mustache is available for a bunch of languages but were going to use the JavaScript version for this tutorial.
Handlebars is only available on JavaScript. And Smarty is for PHP.</p>

<p>You can either use chrome dev tools, JS Fiddle (or any alternatives) or a local file for this tutorial.</p>

<!--More-->


<h3>Mustache</h3>

<p>Let&rsquo;s start by creating the two ingredients that Mustache needs in order
to create an output: a data source and a template.</p>

<h4>Basics</h4>

<p>Mustache mainly accepts JavaScript objects as its data source
and an html string for the template.</p>

<p>
<code>javascript
var name_obj = {'name' : 'Killua Zoldyc'}; //data source
var name_template = "&lt;h1&gt;{{name}}&lt;/h1&gt;"; //template
</code>
</p>

<p>After that, we can call the <code>Mustache.to_html()</code> method
to merge the data source and the template together:</p>

<p><code>
var name_html = Mustache.to_html(name_template, name_obj);
console.log(name_html);
</code></p>

<p>You can just use jQuery or plain JavaScript to append the html contained by <code>name_html</code> variable into the DOM.</p>

<h4>Collections</h4>

<p>Next let&rsquo;s do something less basic.
Let&rsquo;s try to use a group of hunters as our data source:</p>

<p>```javascript
var hunters = {</p>

<pre><code>'hunters' : [
    {'name' : 'Gon', 'nen' : 'Enhancer'},
    {'name' : 'Killua', 'nen' : 'Transmuter'},
    {'name' : 'Kurapika', 'nen' : 'Conjurer'},
    {'name' : 'Leorio', 'nen' : 'Emitter'}
    ]
</code></pre>

<p>};
```</p>

<p>For the template were going to make use of a table to display
both their names and nen ability:</p>

<p>
```html</p>

<script id="hunters" type="text/html">
    <h1>Hunters</h1>
    <table border="1">
        <tr>
            <th>Name</th>
            <th>Nen Ability</th>
        </tr>
        {{#hunters}}
        <tr>
            <td>{{name}}</td>
            <td>{{nen}}</td>
        </tr>
        {{/hunters}}
    </table>
</script>


<p> <br/>
```
</p>

<p>On our previous example we made use of a variable which stores an html string for the template.
But for the example above were using a <code>script</code> tag which has a type of <code>text/html</code> and plain html on its body.</p>

<p>We also used a new pair of tags for looping through the items in the array:</p>

<p>
<code>
{{#hunters}}
  #access the value for each of the properties here
{{/hunters}}
</code>
</p>

<p>The hash <code>#</code> marks the start of the loop and the forward slash <code>/</code> marks its end.
Then within those tags you can access the properties of the object.
In our example the properties are <code>name</code> and <code>nen</code>.</p>

<p>You can then append the html created from calling <code>Mustache.to_html()</code> into a container.
Just make sure you&rsquo;re doing it after the dom has fully loaded and you can do that by calling the
method inside jQuery&rsquo;s <code>document.read</code> event.</p>

<p>```</p>

<div class="container"></div>


<p>```</p>

<p>
```
var hunters_html = Mustache.to_html($(&lsquo;#hunters&rsquo;).html(), hunters);
$(function(){</p>

<pre><code>$('.container').html(hunters_html);
</code></pre>

<p>});
```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aj73t/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Arrays</h4>

<p>In our previous example we used an object as the data source and then accessed its properties inside the loop.
But what if the data source is an array?</p>

<p>For example we have this data source and we want to access the items in the <code>hunter_names</code> array:</p>

<p>```javascript
var hunter_names = {</p>

<pre><code>'hunter_names' : ['Gon', 'Killua', 'Kurapika', 'Leorio']
</code></pre>

<p>};
```</p>

<p>To access each of the items in the <code>hunter_names</code> array all we have to do is to place a dot <code>.</code> inside the template tags. The dot represents the current item in the array:</p>

<p>
```</p>

<script type="text/html" id="hunter_names">
    {{#hunter_names}}
        <li>{{.}}</li>
    {{/hunter_names}}
</script>


<p>```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Tb8pu/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Functions</h4>

<p>You can also make use of functions in Mustache.
For example we have an object which stores the items that we have added to the cart:</p>

<p>```javascript
var subtotal = function(){
   return this.price * this.quantity;
};</p>

<p>var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500, 
            'subtotal' : subtotal
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99,
            'subtotal' : subtotal
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500,
            'subtotal' : subtotal
        }
    ]
};
</code></pre>

<p>```</p>

<p>From the object above you can see that we have the <code>subtotal</code> property which we have assigned
to the <code>subtotal</code> function which returns the product of the <code>price</code> and the <code>quantity</code>.</p>

<p><code>this</code> simply refers to the current context where the function is being called so <code>this.price</code> simply refers to the price of the current item.</p>

<p>We can then define our template.
Note that were accessing the data from the <code>subtotal</code> property just like a normal property.
It seems like Mustache already does some of its sorcery once we call the    <code>Mustache.to_html()</code> method which might include computing the subtotal for each item.</p>

<p>So you don&rsquo;t really have to call the method from the template just like what we normally do when accessing the value returned from a property that was assigned to a function:</p>

<p><code>
cart.cart[0].subtotal();
</code></p>

<p>
```html</p>

<script id="functions" type="text/html">
  <table border="1">
      <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Subtotal</th>    
      </tr>
      {{#cart}}
      <tr>
        <td>{{name}}</td>
        <td>{{price}}</td>
        <td>{{quantity}}</td>
        <td>{{subtotal}}</td>
      </tr>
      {{/cart}}
  </table>
</script>


<p>```
</p>

<p>The common use cases for functions is when checking for the existence or truthiness of a value, computing values, and adding extra markup based on a certain condition.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/mGmPG/2/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Handlebars</h3>

<p>There&rsquo;s not really much difference between Mustache and Handlebars.</p>

<p>They still use the same template tags which looks like a double mustache <code></code>.
But the template tags also look like the Handlebars of a bicycle so maybe that&rsquo;s the reason behind the naming of this templating library.</p>

<p>Handlebars packs more features than Mustache since it has some simple logic tags which you can use like <code>if</code> , <code>with</code> and <code>each</code>. I believe templates should contain less logic as possible since templates are only for presentation.</p>

<p>Just like how we keep logic to a minimum in the views when working with MVC.
Handlebars has also limited the logic tags that we can use.</p>

<p>To emphasize that there isn&rsquo;t really much difference between Mustache and Handlebars I&rsquo;ll use the same object that we used earlier on our Mustache example:</p>

<p>```javascript
var subtotal = function(){
   return this.price * this.quantity;
};</p>

<p> var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500, 
            'subtotal' : subtotal
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99,
            'subtotal' : subtotal
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500,
            'subtotal' : subtotal
        }
    ]
</code></pre>

<p>};<br/>
```</p>

<p>And for the template the only change that we have here is the value of the type attribute of the script tag.
In this case the value is <code>text/x-handlebars-template</code>.</p>

<p>
```html</p>

<script id="functions" type="text/x-handlebars-template">
  <table border="1">
      <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Subtotal</th>    
      </tr>
      {{#cart}}
      <tr>
        <td>{{name}}</td>
        <td>{{price}}</td>
        <td>{{quantity}}</td>
        <td>{{subtotal}}</td>
      </tr>
      {{/cart}}
  </table>
</script>


<p> <br/>
```
</p>

<p>Handlebars isn&rsquo;t really picky when it comes to the value of tye <code>type</code> attribute.
You can actually use <code>text/html</code> as the value or nothing at all.</p>

<p>But its a good practice to always specify the <code>type</code> so that other people will know what that specific <code>script</code> tag is all about. Plus I haven&rsquo;t really tested if the two tags below would really work in all possible scenarios.</p>

<p>```html</p>

<script type="text/html"></script>




<script></script>


<p>```</p>

<p>Finally we can just call <code>Handlebars.compile</code> and supply the html string of our template as an argument to create the template. We can then call the template and supplying the data source <code>cart</code> as the argument then assign it as the html of the container:</p>

<p><code>
var cart_html = Handlebars.compile($('#functions').html());
$('.container').html(cart_html(cart));
</code></p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/H8Bac/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>In the above example we did not explicitly specify that we want to loop through the items in the cart.
In handlebars there&rsquo;s actually an alternative syntax for looping through the items in an array.
And that is by using the <code>each</code> keyword followed by the name of the array.</p>

<p>
<code>html
{{#each cart}}
&lt;tr&gt;
  &lt;td&gt;{{name}}&lt;/td&gt;
  &lt;td&gt;{{price}}&lt;/td&gt;
  &lt;td&gt;{{quantity}}&lt;/td&gt;
  &lt;td&gt;{{subtotal}}&lt;/td&gt;
&lt;/tr&gt;
{{/each}}
</code>
</p>

<h4>With</h4>

<p><code>With</code> is used to change the context on which the properties that are accessed inside of it are called.</p>

<p>First lets define our data source:</p>

<p>```javascript
var hunter = {</p>

<pre><code>'family_occupation' : 'assassin',
'hunter' : {
    'name' : 'killua zoldyc', 
    'ability' : 'transmuter'
}
</code></pre>

<p>};
```</p>

<p>Then our template:</p>

<p>
```html</p>

<script id="hunter" type="text/x-handlebars-template">
    {{#with hunter}}
        <h1>Name: {{name}}</h1>
        <h2>Ability: {{ability}}</h2>
        <h3>Family: {{../family_occupation}}</h3>
    {{/with}}
</script>




<div class="name"></div>


<!--container-->


<p>```
</p>

<p>As you can see from the template above we have change the context to <code>hunter</code> so any properties that are defined inside the <code>hunter</code> object will be accessible as long as they are within the <code>with</code> tags.</p>

<p>But if you want to access properties outside of the current context you can use <code>../</code> just like what we do when stepping back a single directory when linking assets relatively in html.
From our example the <code>family_occupation</code> property is outside the <code>hunter</code> object so we&rsquo;ve used <code>../</code> to step back.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ZprP6/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>If</h4>

<p><code>if</code> is used to check for the <a href="http://james.padolsey.com/javascript/truthy-falsey/">truthiness</a> of a value.
It can be used along with <code>else</code> to output something else in case a value is not present.</p>

<p>In our object below there is no value for the <code>box_weapon</code> of the first member.</p>

<p>```javascript
var family = {</p>

<pre><code>'member' : [
    {
        'name' : 'reborn',
        'box_weapon' : ''
    },
    {
        'name' : 'tsunayoshi sawada',
        'box_weapon' : 'sky lion'
    },
    {
        'name' : 'hibari kyoya',
        'box_weapon' : 'cloud hedgehog'
    },
    {
        'name' : 'gokudera hayato',
        'box_weapon' : 'storm leopard'
    },
    {
        'name' : 'takeshi yamamoto',
        'box_weapon' : 'rain swallow'
    },
    {
        'name' : 'ryohei sasagawa',
        'box_weapon' : 'sun kangaroo'
    },
    {
        'name' : 'lambo',
        'box_weapon' : 'lightning bull'
    },
    {
        'name' : 'rokudo mukuro',
        'box_weapon' : 'mist owl'
    }
]
</code></pre>

<p>};
```</p>

<p>We can then use <code>if</code> and <code>else</code> to check if the value is present or not and output something else if the value is not present:</p>

<p>
```html</p>

<script id="ifs" type="text/x-handlebars-template">
  <h1>vongola</h1>
  <table border="1">
      <tr>
        <th>Family Member</th>
        <th>Box Weapon</th>
      </tr>
      {{#each member}}
      <tr>
        <td>{{name}}</td>
        {{#if box_weapon}}
            <td>{{box_weapon}}</td>
        {{else}}
            <td>No box weapon</td><!--if value is not present-->
        {{/if}}
      </tr>
      {{/each}}
  </table>
</script>




<div class="family"></div>


<!--container-->


<p>```
</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/J8qXs/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>Helpers</h4>

<p>Finally there are <code>helpers</code> which are like functions that you can call inside your Handlebars template.
They can be used to extend the functionality that Handlebars already provides by default.</p>

<p>For our example let&rsquo;s define the data source which is just an array of numbers from 1 to 10:</p>

<p>```javascript
var numbers = {</p>

<pre><code>'numbers' : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>

<p>};
```</p>

<p>Then let&rsquo;s define our handlebars helper. You can define a helper by calling <code>Handlebars.registerHelper</code>.
The first argument is the name of the helper, in this case the name is <code>multiply_by_10</code>.
The second argument is the callback function which contains the logic or the process that you want to perform with the data that you specify. The data that you want the function to use are specified as arguments. In this case we have the <code>num</code> variable. The helper below simply returns the value returned from multiplying the argument <code>num</code> with the number 10.</p>

<p><code>
Handlebars.registerHelper('multiply_by_10', function(num){
  return num * 10;
});
</code></p>

<p>We can then create the template and call the helper that we just created, supplying the current item in the array of numbers. The current item in an array is represented by <code>this</code> in Handlebars.</p>

<p>
```html</p>

<script id="helpers" type="text/x-handlebars-template">
{{#each numbers}}
    <li>{{multiply_by_10 this}}</li>
{{/each}}
</script>




<div class="num_container"></div>


<!--container-->


<p>```
</p>

<p>Let&rsquo;s do another example, this time were going to use the cart object that we used earlier.
But now we&rsquo;ll remove the <code>subtotal</code> property since we will let our helper take care of that.</p>

<p>```javascript
var cart = {</p>

<pre><code>    'cart' : [
        {
            'name' : 'gundam', 
            'quantity' : 2, 
            'price' : 2500
        },
        {
            'name' : 'racket',
            'quantity' : 1,
            'price' : 99
        },
        {
            'name' : 'flash drive',
            'quantity' : 20,
            'price' : 500
        }
    ]
</code></pre>

<p>};
```</p>

<p>For this example were going to use two helpers.
One will return the header for the table. And the other one will compute the subtotal.</p>

<p>Here&rsquo;s the helper that returns the header:</p>

<p>`&ldquo;
Handlebars.registerHelper(&lsquo;get_headers&rsquo;, function(obj){
  var table_headers = &rdquo;;</p>

<p>  for(var x in obj){</p>

<pre><code>if(obj.hasOwnProperty(x)){
    table_headers += "&lt;th&gt;" + x + "&lt;/th&gt;";
}
</code></pre>

<p>  }</p>

<p>  return new Handlebars.SafeString(table_headers);
});
```</p>

<p>What were doing in the code above is looping through the properties of the object that we specified
and then wrapping it in <code>th</code> tags. The current property is represented by the value stored in the variable <code>x</code>.
We then append this value to the the <code>table_headers</code> variable.</p>

<p>After looping through all of the properties of the object we then return the string accumulated by the <code>table_headers</code> variable. We have to return a <code>new Handlebars.SafeString(html_string)</code> because Handlebars automatically escapes HTML tags. This is a way of telling Handlebars not to escape the specific HTML that were trying to return from the helper.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/tENVa/embedded/js,resources,html,css,result/light/"></iframe></p>

<h4>JSON</h4>

<p>Finally were going to use real world data to supply to our template.
Twitter really makes it easy to retrieve the tweets of a specific user as long as the tweets are set to public
so were going to make use of the data from Twitter as the data source for our templates.</p>

<p>Here&rsquo;s our template:</p>

<p>
```html</p>

<script id="tweets">
    <h1>Wern Ancheta</h1>
    {{#each tweets}}
    <ul>
      <li>{{linkify text}}</li>
    </ul>
    {{/each}}
</script>




<div class="tweets_container"></div>


<!--container-->


<p>```
</p>

<p>Then extend the String prototype by adding a method called <code>replaceArray</code> this method will take two arrays as arguments. All it does is to loop through the <code>find</code> array and replaces the current item in the <code>find</code> array with the current item in the <code>replace</code> array and then assign it back to the original string which is represented by <code>this</code>. After looping through all of the items it just returns the string which now has been replaced with the items in the <code>replace</code> array:</p>

<p>```javascript
function replaceArray = function(find, replace) {
  var replaceString = this;
  var find_length = find.length;</p>

<p>  for (var i = 0; i &lt; find_length; i++) {</p>

<pre><code>replaceString = replaceString.replace(find[i], replace[i]);
</code></pre>

<p>  }
  return replaceString;
};
```</p>

<p>Next, create a helper that would change the url&rsquo;s in a specific tweet to a link that can be clicked:</p>

<p>```
Handlebars.registerHelper(&lsquo;linkify&rsquo;, function(text){</p>

<pre><code>var linkified = [];
var urls = text.match(/(\{(.+?)\}:)?(http:\/\/[\w\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[\w])+)/g);
if(urls){
    var url_count = urls.length;
    for (var i = 0; i &lt; url_count; i++) {
        var url_string = "&lt;a href='" + urls[i] + "'&gt;" + urls[i] + "&lt;/a&gt;";
        linkified.push(url_string);
    }
    return new Handlebars.SafeString(text.replaceArray(urls, linkified));

}else{
    return text;
}
</code></pre>

<p>});
```</p>

<p>In the code above were using regex to extract only the urls from the tweet.
For example we have this tweet:</p>

<p><code>
really nice interactive course on chrome developer tools http://t.co/wHdyEMnWjG
</code></p>

<p>Using the regex that we have above the <code>urls</code> variable will contain a single item:</p>

<p><code>
[http://t.co/wHdyEMnWjG]
</code></p>

<p>We then loop through all of those url&rsquo;s and wrapping it in anchor tags and then push it to the <code>linkified</code> variable.</p>

<p><code>
for (var i = 0; i &lt; url_count; i++) {
  var url_string = "&lt;a href='" + urls[i] + "'&gt;" + urls[i] + "&lt;/a&gt;";
  linkified.push(url_string);
}
</code></p>

<p>Then we call the <code>replaceArray</code> method that we created earlier to replace all the url&rsquo;s in the tweet to a url wrapped in anchor tags. Then we use it as an argument of the <code>Handlebars.SafeString</code> method so that Handlebars would not escape the HTML:</p>

<p><code>
return new Handlebars.SafeString(text.replaceArray(urls, linkified));
</code></p>

<p>In case there&rsquo;s no url in the current tweet we simply return the tweet without doing anything to it:</p>

<p><code>
return text;
</code></p>

<p>Finally we can compile the template for the tweets and then issue an AJAX request to the Twitter API to get the tweets.
The <code>dataType</code> should be <code>jsonp</code> since we can&rsquo;t really make a request to another domain if we don&rsquo;t specify the data type as <code>jsonp</code>. If you want to learn more about it check out this question at stackoverflow: <a href="http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about">What is jsonp all about</a>.</p>

<p>Once the request succeeded we can then replace the HTML of our tweets container with the HTML string returned from merging the template with the data coming from Twitter:</p>

<p>```
var tweets_template = Handlebars.compile($(&lsquo;#tweets&rsquo;).html());</p>

<p>$.ajax({</p>

<pre><code>url: 'https://api.twitter.com/1/statuses/user_timeline.json?screen_name=wern_ancheta&amp;count=5&amp;exclude_replies=true',
dataType: 'jsonp',
success: function(tweets){

    $('.tweets_container').html(tweets_template({'tweets' : tweets}));
}
</code></pre>

<p>});
```</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/aZra5/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Smarty</h3>

<p>The last library that were going to play around today is the Smarty templating engine for PHP.
And for that you need to download Smarty over at <a href="http://www.smarty.net">smarty.net</a>.</p>

<p>The main smarty file is the <code>Smarty.class.php</code> stored in the <code>libs</code> directory.
Include it on your working file and then do the housekeeping (make an instance of the smarty class, set the template directory):</p>

<p>```php
&lt;?php
require_once &lsquo;libs/Smarty.class.php&rsquo;;</p>

<p>$smarty = new Smarty;
$smarty->setTemplateDir(&lsquo;smarty_templates&rsquo;); //this is where all your template files are stored
?>
```</p>

<p>Next create a template under the <code>smarty_templates</code> directory.
The file extension for smarty templates is <code>.tpl</code>.</p>

<p>Next, we create our data source:</p>

<p><code>
&lt;?php
$names = array(
  'Yoh Asakura', 'Ichigo Kurosaki',
  'Uzumaki Naruto', 'Edward Elric',
  'Alibaba Saluja', 'BK201', 'Luffy'
);
?&gt;
</code></p>

<p>Then assign a template variable and call it <code>names</code>.
You can use the  <code>assign</code> method to assign template variables.
It takes up 2 arguments which is the name of the variable and then the variable which stores the data.</p>

<p><code>
&lt;?php
$smarty-&gt;assign('names', $names);
?&gt;
</code></p>

<p>Note that the name of the variable doesn&rsquo;t necessarily need to be the same as the name you gave to the variable which stores the data. So you can also have something like:</p>

<p><code>
&lt;?php
$smarty-&gt;assign('anime', $names);
?&gt;
</code></p>

<p>For our template we simply loop through the items in the array.
Here were using <code>foreach</code> to loop through the items.</p>

<p>
```html</p>

<h1>Anime</h1>


<p>{foreach $names as $n}
  <li>{$n}</li>
{/foreach}
```
</p>

<p>For our final example were just going to reuse the cart that we had earlier:</p>

<p>```php
&lt;?php
$cart = array(
  array(</p>

<pre><code>'name' =&gt; 'racket',
'price' =&gt; 200,
'quantity' =&gt; 5
),
</code></pre>

<p>  array(</p>

<pre><code>'name' =&gt; 'table',
'price' =&gt; 500,
'quantity' =&gt; 4
),
</code></pre>

<p>  array(</p>

<pre><code>'name' =&gt; 'bat',
'price' =&gt; 300,
'quantity' =&gt; 7
)
</code></pre>

<p>);
?>
```</p>

<p>And for the template:</p>

<p>
```html</p>

<h2>Cart</h2>


<table border="1">
  <!--Loop through the properties of the first item (name, price, quantity)-->
  <tr>
  {foreach $cart[0] as $h => $p}
    <th>{$h}</th>
  {/foreach}
  </tr>
  {foreach $cart as $i}
  <tr>
    <td>{$i.name}</td>
    <td>{$i.price}</td>
    <td>{$i.quantity}</td>
  </tr>
  {/foreach}
</table>


<p>There are {$cart|count} items in the cart.
```
</p>

<p>Some of the functions that you can use on PHP can also be used inside Smarty templates.
For the code above we have used the <code>count</code> function. To use a function inside a template you simply specify the value that you want to supply as the argument of the function and then followed by a pipe <code>|</code> and then the function name, in this case the function name is <code>count</code> which simply returns how many items are in the array that was specified.</p>

<h2>Conclusion</h2>

<p>There&rsquo;s not really much difference between PHP and Smarty syntax and you can actually do everything in PHP if you like.</p>

<p>But why would we need to use templates instead of just plain PHP?</p>

<p>Because templates has much more cleaner syntax and it encourages code reuse.
Sometimes in our projects we need to make use of the same HTML structure for
the data that were presenting and often times we just repeat ourselves.
Using a template can help make our code DRYer.</p>

<p>Another reason is that by using Smarty and other templating engines we can avoid writing something like this:</p>

<p>```php
&lt;?php
$html_str   = &ldquo;<h1>Heading</h1>&rdquo;;
$html_str  .= &ldquo;<ul>&rdquo;;
foreach($items as $row){
  $html_str  .= &ldquo;<li>&rdquo; . $row[&lsquo;name&rsquo;] . &ldquo;</li>&rdquo;;
}
$html_str  .= &ldquo;</ul>&rdquo;;</p>

<p>echo $html_str;
?>
```</p>

<p>Or something like this:</p>

<p>```
&lt;?php
ob_start();
?></p>

<h1>Heading</h1>


<ul>
<?php
foreach($items as $row){
?> 
  <li><?php echo $row['name']; ?></li>
<?php
}
?>
</ul>


<p>&lt;?php
$html = ob_get_contents();
ob_end_flush();
echo $html;
?>
```</p>

<p>The code above doesn&rsquo;t really look great and we can avoid having to write those kinds of codes by using templates.
This is true for all the templating libraries that we have gone around in this article and others which we haven&rsquo;t tackled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Laravel's Validation Class]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/12/25/extending-laravels-validation-class/"/>
    <updated>2012-12-25T18:29:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/12/25/extending-laravels-validation-class</id>
    <content type="html"><![CDATA[<p>Laravel is built with useful validation rules like required, numeric, unique data from a table in a database, etc.
But there are some situations where the built-in validation rules cannot handle.
That&rsquo;s where extending Laravel&rsquo;s validation class comes in handy.
In this post I&rsquo;ll be showing you how to extend Laravel&rsquo;s validation class.
This will enable you to use custom validation rules specifically created for your needs.</p>

<!--More-->


<h4>Validating Arrays</h4>

<p>One thing I&rsquo;ve noticed while evaluating Laravel is that it doesn&rsquo;t have the methods that deals with an array of data.
For example if you have this form:</p>

<p>```html
<form method="post"></p>

<pre><code>&lt;label for=""&gt;Students&lt;/label&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="text" name="student_name[]" id="student_name"&gt;
&lt;input type="submit" value="Save"&gt;
</code></pre>

<p></form>
```</p>

<p>And you want every student name to be required. Using Laravel&rsquo;s built in methods. You do something like this:</p>

<p>```php
&lt;?php
$rules = array(&lsquo;student_name&rsquo; => &lsquo;required&rsquo;);</p>

<p>$validator = Validator::make(Input::all(), $rules);</p>

<p>if($validator->fails()){</p>

<pre><code>//redirect back to form with errors
</code></pre>

<p>}else{</p>

<pre><code>//save form to database
</code></pre>

<p>}
?>
```</p>

<p>But if you might have already noticed. This doesn&rsquo;t work.
Curiosity leads us to inspecting Laravel&rsquo;s validation method for the required rule (<code>laravel/validator.php</code>):</p>

<p>```
&lt;?php
/<em>*
 * Validate that a required attribute exists in the attributes array.
 *
 * @param  string  $attribute
 * @param  mixed   $value
 * @return bool
 </em>/
protected function validate_required($attribute, $value)
{</p>

<pre><code>if (is_null($value))
{
    return false;
}
elseif (is_string($value) and trim($value) === '')
{
    return false;
}
elseif ( ! is_null(Input::file($attribute)) and is_array($value) and $value['tmp_name'] == '')
{
    return false;
}

return true;
</code></pre>

<p>}
?>
```</p>

<p>As you can see from the above method. It doesn&rsquo;t seem that Laravel is automatically dealing with array as inputs for form. Looking closer this block of code seems to be close to what were looking for. But this only deals with file input(stored in <code>$_FILES</code>). So this isn&rsquo;t the method were looking for.</p>

<p>`&ldquo;
&lt;?php
elseif ( ! is_null(Input::file($attribute)) and is_array($value) and $value[&lsquo;tmp_name&rsquo;] == &rdquo;)
{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>Thankfully the creators of Laravel made it incredibly easy to extend its validation class in case a need like this arises. To extend Laravel&rsquo;s validation class we&rsquo;ll need to create a new library at <code>application/libraries</code>.
Let&rsquo;s name it <code>Validator</code>.</p>

<p>```
&lt;?php
class Validator extends Laravel\Validator {</p>

<p>}
?><br/>
```</p>

<p>Then disable the autoloading of the validator class on <code>application/config/application.php</code> file.</p>

<p><code>
'Task'          =&gt; 'Laravel\\CLI\\Tasks\\Task',
'URI'           =&gt; 'Laravel\\URI',
'Validator'     =&gt; 'Laravel\\Validator', //remove this line
'View'          =&gt; 'Laravel\\View',
</code></p>

<p>Then we create a method that will deal with array inputs:</p>

<p>```
&lt;?php
/<em>*
 * checks if an array input has no empty values
</em>/
public function validate_arrayfull($attribute, $value, $parameters){</p>

<pre><code>return in_array('', $value);
</code></pre>

<p>}
?>
```</p>

<p>Naturally laravel&rsquo;s input class would be able to capture any kind of input be it a regular string, file, or array.</p>

<p>Methods for the validation class accepts 3 arguments:</p>

<ol>
<li><strong>Attribute</strong> &ndash; the name given to the input (Eg. name, age)</li>
<li><strong>Value</strong> &ndash; the value of the input (Eg. Yael, 27)</li>
<li><strong>Parameters</strong> &ndash;  additional data passed after defining the rules.
For example the additional data that you pass after defining a <code>unique</code> rule:</li>
</ol>


<p>```
&lt;?php
$rules = array(</p>

<pre><code>'username' =&gt; unique:tbl_users,username
</code></pre>

<p>);
?>
```</p>

<p>The additional data that I&rsquo;m referrring to is the string that comes after the colon (tbl_users,username).
In the case of defining a unique rule for a particular field. The first parameter is the name of the table, the second parameter is the name of the field.</p>

<p>The important thing to note here is that parameters are separated by comma.
And that method names has a prefix of <code>validate_</code>.</p>

<p>Ok back to the <code>arrayfull()</code> method.
Basically what the <code>arrayfull()</code> method does is to check whether an array contains empty values
by using the <code>in_array()</code> method. The <code>in_array()</code> method simply returns <code>true</code> if it has found a specific value in the array and <code>false</code> if it didn&rsquo;t find the value:</p>

<p><code>
return in_array('', $value);
</code></p>

<h4>Validating Dates</h4>

<p>One more thing I&rsquo;ve noticed about Laravel is its date validation rules.
It only has rules for before and after a certain date.
This is good but there should also be a validation rule for simply validating if
the user input is indeed a date. So I&rsquo;ve written a method that does it:</p>

<p>```
&lt;?php
public function validate_date($attribute, $value, $parameters){</p>

<pre><code>$e_str = explode("-", $value);
</code></pre>

<p>  if(count($e_str) === 3){</p>

<pre><code>//expected format for date input is: Y-m-d
$year = $e_str[0];
$month = $e_str[1];
$day = $e_str[2];

return checkdate($month, $day, $year); //expected format for checkdate is: m-d-y
</code></pre>

<p>  }
  return false;
}
?>
```</p>

<p>As you can see were counting the number fragments after invoking the <code>explode()</code> method.
Anything other than 3 is not a valid number of fragments since the expected date format is supposed
to have 3 fragments(Year-Month-Day).
Once it passes this condition we then check if the date is a valid date in the Gregorian calendar
by invoking the <code>checkdate()</code> function which accepts 3 arguments(month, day, year).</p>

<h4>Default Validation Messages</h4>

<p>You can just set the validation messages when creating an instance of the validator class like this:</p>

<p>```
&lt;?php
$rules = array();</p>

<p>$messages = array(</p>

<pre><code>'username' =&gt; 'username is required'
);
</code></pre>

<p>$validator = Validator::make(Input:all(), $rules, $messages);
?><br/>
```</p>

<p>But if you want to set default messages for your
validation rules then you can set it on <code>application/language/en/validation.php</code>.</p>

<p><code>
&lt;?php
"date"              =&gt; "The :attribute is invalid date",
"arrayfull"     =&gt; "The :attribute contains empty values",
"arrayunique"   =&gt; "The :attribute contains duplicate values"
?&gt;
</code></p>

<p>The key will be the name of the validation method.
For example if the name of your validation method is <code>validate_date</code> then the key will be <code>date</code>.
The value will be the error message that you want to show up when there&rsquo;s an error with the validation.
<code>:attribute</code> represents the name of the field.</p>

<h3>Resources</h3>

<p><a href="http://laravel.com/docs">Laravel Documentation</a>
<a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/extending_laravels_validation_class.7z">Sample Application Source Code</a></p>
]]></content>
  </entry>
  
</feed>
