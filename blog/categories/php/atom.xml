<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-08-24T19:33:55+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Datatables with Laravel]]></title>
    <link href="http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel/"/>
    <updated>2014-08-10T16:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/08/10/using-datatables-with-laravel</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be walking you through how you can use datatables in Laravel. But first, let me give you a quick intro on what Datatabes is. <a href="http://datatables.net/">Datatables</a> is basically a jQuery plugin that allows you to add advanced interaction controls to your HTML tables. Things like search, pagination, sorting, and ordering. Datatables allows you to add those kinds of functionality into your tables with minimal code.</p>

<p>In this tutorial were going to be using a Laravel package called <a href="https://github.com/Chumper/Datatable">Chumper</a>. Chumper allows us to easily create Datatables which uses the data returned from a model as its data source.</p>

<p>First thing that you need to do is to add the following in your <code>composer.json</code> file:</p>

<p>```
&ldquo;require&rdquo;: {</p>

<pre><code>"chumper/datatable": "2.*",
</code></pre>

<p>}
```</p>

<p>If you got other packages that you need for your project, just add it on the last part of the <code>require</code> item. Once you&rsquo;re done with that, execute <code>composer update</code> from your terminal to install Chumper.</p>

<p>Once composer finishes installing Chumper, add the service provider for Chumper into the <code>providers</code> array in your <code>app.php</code> file inside the <code>app/config</code> directory of your Laravel installation:</p>

<p><code>
'Chumper\Datatable\DatatableServiceProvider',
</code></p>

<p>Still inside the <code>app.php</code> file, also add the following under the aliases array:</p>

<p><code>
'Datatable' =&gt; 'Chumper\Datatable\Facades\DatatableFacade',
</code></p>

<p>Once that&rsquo;s done, you can now create the main configuration file by executing the following from the terminal:</p>

<p><code>
php artisan config:publish chumper/datatable
</code></p>

<p>The main configuration file is stored under <code>app/config/packages/chumper/datatable/config.php</code> so go ahead and edit that if you want to change the default settings provided by Chumper. Things like the class or ID given to the tables generated can be configured from that file. This is particularly useful if you want to use classes or IDs to style the datatables in a specific way. Other than that the default settings can be used for most cases.</p>

<p>Now that we have configured Chumper, we can now add a route that will return the page where the datatable is displayed in your <code>routes.php</code> file. In the example below, we have the a controller called <code>AdminController</code> and were using the data returned by the <code>users</code> method as a response whenever the <code>users</code> route is accessed via the <code>GET</code> method:</p>

<p><code>php
&lt;?php
Route::get('users', 'AdminController@users');
?&gt;
</code></p>

<p>Next we also need to add the route that will return the data into the client side. By default, Chumper uses the server for processing queries made through the datatable. This means that it only gets the actual data that is needed instead of getting all of the records in the database table that you specify. In the code below, were giving a name of <code>api.users</code> to the <code>api/users</code> route so that we can refer to it later in the controller. The <code>uses</code> keyword allows you to specify a controller action to the route. Its basically the same thing as what we did above but that&rsquo;s the way to do it if you&rsquo;re using named routes.</p>

<p><code>
&lt;?php
Route::get('api/users', array('as' =&gt; 'api.users', 'uses' =&gt; 'AdminController@getUsersDataTable'));
?&gt;
</code></p>

<p>Under your controller, here&rsquo;s the method that returns the page where the datatable is displayed:</p>

<p>```
&lt;?php
public function users(){</p>

<pre><code>$table = Datatable::table()
    -&gt;addColumn('Name', 'Last Login', 'View')
    -&gt;setUrl(route('api.users'))
    -&gt;noScript();

$this-&gt;layout-&gt;content = View::make('admin.users', array('table' =&gt; $table));
</code></pre>

<p>}
?>
```</p>

<p>The code above assumes that you&rsquo;re using <a href="http://laravel.com/docs/templates">Laravel layouts</a>. If you don&rsquo;t know how to use layouts in Laravel, be sure to check out the docs. Breaking the code down, the following code allows you create the datatable. You can add columns to it by using the <code>addColumn</code> method. This method takes up the names that you want to give to the header for each field in the table. The <code>setUrl</code> method allows you to set the route that the datatable will use for processing queries made through it. Earlier we created a route and named it <code>api.users</code> so in the <code>setUrl</code> method all we have to do is to use the <code>route</code> method and then supply the name of the route which is responsible for returning the data for processing the queries. Lastly, we call the <code>noScript()</code> method to specify that we don&rsquo;t want to add the JavaScript code in the response that will be returned.</p>

<p>```
&lt;?php
$table = Datatable::table()</p>

<pre><code>-&gt;addColumn('Name', 'Last Login', 'View')
-&gt;setUrl(route('api.users'))
-&gt;noScript();
</code></pre>

<p>?>
```</p>

<p>Next is the method which processes the queries made through the datatable:</p>

<p>```
&lt;?php
public function getUsersDataTable(){</p>

<pre><code>$query = User::select('name', 'active', 'last_login', 'id')-&gt;get();

return Datatable::collection($query)
    -&gt;addColumn('last_login', function($model){
        return date('M j, Y h:i A', strtotime($model-&gt;last_login));
    })
    -&gt;addColumn('id', function($model){
        return '&lt;a href="http://anchetawern.github.io/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
    })
    -&gt;searchColumns('name', 'last_login')
    -&gt;orderColumns('name', 'last_login')
    -&gt;make();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, the code below allows you to specify the fields that you want to use for the response. These are the actual field names in your database table:</p>

<p><code>
&lt;?php
$query = User::select('name', 'last_login', 'id')-&gt;get();
?&gt;
</code></p>

<p>Next, we return the actual data using the <code>collection</code> method in the <code>Datatable</code> class. Well, not actually the <code>Datatable</code> class, since its just the Facade that we used earlier in the <code>app.php</code> file. The <code>collection</code> method requires the result set returned by our query to the users table earlier so we just set that as the argument. After that, we can call the <code>addColumn</code> method to update the presentation of the data returned for that specific field. In the case of the <code>last_login</code> field, its stored in the database as a time stamp which looks like this: <code>2014-07-29 11:37:39</code>. We don&rsquo;t really want to present that to the user like that so we format it using the <code>date</code> method. The first argument is the format that you want. In this case we want something like this: <code>Jul 29, 2014 11:37 AM</code>. Looking at the <a href="http://php.net/manual/en/function.date.php">official docs</a>, we know that we can do that by specifying the following: <code>M j, Y h:i A</code>. The second argument is a unix timestamp. We can convert the raw data that came from the database into a unix timestamp by using the <code>strtotime</code> method, so we do just that. Next is the <code>id</code> field. We don&rsquo;t actually want to display the users id to the user, what we want is to display a link that would lead the user to the page where more details for the user can be viewed. Thus we return an HTML anchor tag which uses the id as one of the component for the actual link.</p>

<p>```
&lt;?php
return Datatable::collection($query)</p>

<pre><code>-&gt;addColumn('last_login', function($model){
    return date('M j, Y h:i A', strtotime($model-&gt;last_login));
})
-&gt;addColumn('id', function($model){
    return '&lt;a href="http://anchetawern.github.io/users/' . $model-&gt;id . '"&gt;view&lt;/a&gt;';
})
</code></pre>

<p>?>
```</p>

<p>Lastly, we can now display the datatable in our view. If you&rsquo;re using <a href="http://getbootstrap.com/">Twitter Bootstrap</a>, it should look similar to this one:</p>

<p>
``` html
@section(&lsquo;content&rsquo;)</p>

<div class="row">
  <div class="col-md-12">
  <h3>Users</h3>
  {{ $table->render() }}
  {{ $table->script() }}
  </div>
</div>


<p>@stop
```
</p>

<p>Yup! as simple as that! All we have to do is to call the <code>render()</code> method to render the actual datatabase. And then we also call the <code>script()</code> method to render the JavaScript file that would do the talking to the server every time the user interacts with the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zillow API]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api/"/>
    <updated>2014-03-20T14:01:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/20/getting-started-with-zillow-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to have a quick look at the Zillow API. But before we move on with actually writing some code lets first define what Zillow is. Taken from the <a href="http://www.zillow.com/corp/About.htm">Zillow about page</a> itself:</p>

<p><blockquote><p>Zillow is a home and real estate marketplace dedicated to helping homeowners, home buyers, sellers, renters, real estate agents, mortgage professionals, landlords and property managers find and share vital information about homes, real estate, mortgages and home improvement.</p></blockquote></p>

<p>To sum it up Zillow is a place where you can find useful information on real estate properties that are up for sale or rent.</p>

<!-- more -->


<h4>Getting a Zillow Web Service ID</h4>

<p>In order to start making requests to the Zillow API you must first register an account with them. Registering with zillow is free, all you have to do is visit the <a href="http://www.zillow.com/">zillow homepage</a> and click on the join link. After that just enter all the information that is being asked. Once registered go to the <a href="http://www.zillow.com/webservice/Registration.htm">API registration page</a> and enter the necessary information:</p>

<p><img src="/images/posts/2014-03-20-getting-started-with-zillow-api/api-signup.png" alt="zillow api registration" /></p>

<p>Just check the specific API that you will need for your project, agree to the terms of use then click on the submit button. Zillow will also ask about a sample URL where you will use the API, if you do not have a specific URL in mind you can just place <code>http://localhost</code> or some other URL which you can use for testing purposes.</p>

<p>Once that&rsquo;s done zillow will email you the API details. All you need here is the value for the Zillow Web Services Identification (ZWSID).</p>

<h4>GetSearchResults API</h4>

<p>Now that we have a zillow web service ID its time to test out some of the API methods that are available. First on the list is the <code>GetSearchResults API</code> which you can use to find real estate information for a specific address. Note that an address must be posted first by an owner or an agent in the <a href="http://www.zillow.com/for-sale-by-owner/">Zillow site</a> before it can be viewed.</p>

<p>The URL for requesting search results is <code>http://www.zillow.com/webservice/GetSearchResults.htm</code>.</p>

<p>It requires 3 url encoded arguments to be passed in:</p>

<ul>
<li><strong>zws-id</strong> &ndash; the zillow web service id</li>
<li><strong>address</strong> &ndash; the address of the property to search (e.g. 3799 S Las Vegas Blvd, Las Vegas, NV 89109, United States)</li>
<li><strong>citystatezip</strong> &ndash; the city + state combination or the zip code of the address that you specified in the <code>address</code> field.</li>
</ul>


<p>A successful request will return an XML file containing all the search results. Here&rsquo;s a JSON string representation of the XML file that will be returned:</p>

<p>```json
{</p>

<pre><code>request: {
    address: '',
    citystatezip: ''
},
message: {
    text: '',
    code: ''
},
response: {
    results: {
        result: [
            {
                zpid: '',
                link: {
                    homedetails: '',
                    graphsanddata: '',
                    comparables: ''
                },
                address: {
                    street: '',
                    zipcode: '',
                    city: '',
                    state: '',
                    latitude: '',
                    longitude: ''
                },
                zestimate: {
                    amount: '',
                    last-updated: '',
                    oneWeekChange: {
                        @attributes: {
                            deprecated: ''
                        }
                    },
                    valueChange: '',
                    valuationRange: {
                        low: '',
                        high: ''
                    },
                    percentile: ''
                },
                localRealEstate: {
                    region: {
                        @attributes: {
                            id: '',
                            type: '',
                            name: ''
                        },
                        links: {
                            overview: '',
                            forSaleByOwner: '',
                            forSale: ''
                        }
                    }
                }
            }
        ]
    }
}
</code></pre>

<p>}
```</p>

<p>And no the results doesn&rsquo;t exactly return empty strings for the values of each of the properties. I just did it that way so you can focus on the actual properties that are returned.</p>

<p>Here&rsquo;s an example PHP code that makes a request to the zillow API using <code>file_get_contents</code>. You can also use <code>curl</code> to have the benefit of error handling but to keep things simple lets stick with <code>file_get_contents</code> for this tutorial:</p>

<p>```php
&lt;?php
$zillow_id = &lsquo;xxx&rsquo;; //the zillow web service ID that you got from your email</p>

<p>$search = $<em>GET[&lsquo;address&rsquo;];
$citystate = $</em>GET[&lsquo;citystate&rsquo;];
$address = urlencode($search);
$citystatezip = urlencode($citystate);</p>

<p>$url = &ldquo;<a href="http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip">http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip</a>&rdquo;;</p>

<p>$result = file_get_contents($url);
$data = simplexml_load_string($result);
?>
```</p>

<p>Once the request is completed you can just access individual properties using the arrow notation. In the example below were accessing the <code>zpid</code> property:</p>

<p><code>
&lt;?php
echo $data-&gt;response-&gt;results-&gt;result[0]-&gt;zpid;
?&gt;
</code></p>

<p>But what happens when we enter an address which doesn&rsquo;t exist in the zillow database? For that you can check the value for the <code>message.code</code>:</p>

<p><code>
&lt;?php
$code = $data-&gt;message-&gt;code;
?&gt;
</code></p>

<p>This contains a 1-3 digit number. <code>0</code> basically means that the request was successful and that there are results that are returned. <code>507</code> or <code>508</code> means that there&rsquo;s no exact match for the inputted address. There are a bunch of other error codes which you can use so check out the messages and codes section in the <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">search results api page</a> for more information.</p>

<p>For more information regarding the search results API check out <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">this page</a></p>

<h4>GetZestimate API</h4>

<p>Another API Method that we can use is the <code>GetZestimate</code>. This returns information regarding the zestimate of a specific property. A Zestimate is Zillow&rsquo;s estimated market value, computed using a proprietary formula. You can use the <code>GetZestimate</code> method by making a request to this URL: <code>http://www.zillow.com/webservice/GetZestimate.htm</code>.</p>

<p>The <code>GetZestimate</code> method only requires 2 arguments: the <code>zws-id</code> and the <code>zpid</code>. Of this 2 arguments the <code>zpid</code> is of interest since we didn&rsquo;t use it in the previous method. The <code>zpid</code> is basically a unique ID assigned by zillow to a specific property.</p>

<p>If you might have noticed earlier the <code>SearchResults</code> method already returns some zestimate data:</p>

<p>```json
zestimate: {</p>

<pre><code>amount: '',
last-updated: '',
oneWeekChange: {
    @attributes: {
        deprecated: ''
    }
},
valueChange: '',
valuationRange: {
    low: '',
    high: ''
},
percentile: ''
</code></pre>

<p>}
```</p>

<p>You can pretty much use this one if you don&rsquo;t need detailed information about a specific zestimate of a property. But if need more detailed information the <code>GetZestimate</code> method is the one that you need to use. Here&rsquo;s the JSON string representation of the result that it returns:</p>

<p>```
{</p>

<pre><code>request: {
    zpid: ''
},
message: {
   text: '',
   code: ''
},
response: {
    zpid: '',
    links: {
        homedetails: '',
        graphsanddata: '',
        mapthishome: '',
        comparables: ''
    },
    address: {
        street: '',
        zipcode: '',
        city: '',
        state: '',
        latitude: '',
        longitude: ''
    },
    zestimate: {
        amount: '',
        last-update: '',
        oneWeekChange: '',
        valueChange: '',
        valuationRange: {
            low: '',
            high: ''
        },
        percentile: ''
    },
    localRealEstate: {
        region: {
            links: {
                overview: '',
                forSaleByOwner: '',
                forSale
            }
        }
    },
    regions: {
        zipcode-id: '',
        city-id: '',
        county-id: '',
        state-id: ''
    }
}
</code></pre>

<p>}
```</p>

<p>The one caveat about the <code>GetZestimate</code> method is that it cannot be used without having information on the <code>zpid</code>. And you can only get the <code>zpid</code> with the <code>GetSearchResults</code> method so the <code>GetZestimate</code> method is always used in tandem with the <code>GetSearchResults</code> method unless you&rsquo;re saving <code>zpid</code>&rsquo;s in your database.</p>

<p>If you want to know more about the <code>GetZestimate</code> method check out the <a href="http://www.zillow.com/howto/api/GetZestimate.htm">documentation</a></p>

<h4>GetChart</h4>

<p>The last method that I&rsquo;m going to talk about in this tutorial is the <code>GetChart</code> method. You can use the <code>GetChart</code> method to get a URL to an image which shows the historical zestimates for a specific property. You can make a request to this method by using this URL: <code>http://www.zillow.com/webservice/GetChart.htm</code></p>

<p>The <code>GetChart</code> method requires the following argument to be passed in:</p>

<ul>
<li><code>zws-id</code></li>
<li><code>zpid</code> &ndash; the unique ID assigned by zillow to the specific property</li>
<li><code>unit-type</code> &ndash; you can either use <code>dollar</code> or <code>percent</code> as the value. This is basically use for specifying whether to display the dollar changed or the percent changed of a specific property</li>
<li><code>height</code> &ndash; the height of the image to return in pixels</li>
<li><code>width</code> &ndash; the width of the image to return in pixels</li>
</ul>


<p>Here&rsquo;s a sample image that this method returns:</p>

<p><img src="/images/posts/2014-03-20-getting-started-with-zillow-api/historical-zestimate.gif" alt="historical zestimate" /></p>

<p>You can pretty much guess the <code>unit-type</code> that was used for this image. Yep that&rsquo;s right its in dollars. So the image above is basically showing that the value for the specific property went up from 96,000 dollars to 104,000 dollars over a period of about one year. You can actually specify this value by passing in the <code>chartDuration</code> argument. Then you can have values like <code>1year</code>, <code>2years</code> or <code>10years</code>. If you don&rsquo;t specify anything it defaults to &lsquo;1year&rsquo;.</p>

<p>For more information regarding the <code>GetChart</code> method check out its <a href="http://www.zillow.com/howto/api/GetChart.htm">documentation</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! Like with any other getting started guide we&rsquo;ve only scratched the surface with this tutorial. There&rsquo;s a lot more that you can do with Zillow API so be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.zillow.com/howto/api/APIOverview.htm">Zillow API Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with SPBAS]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/03/getting-started-with-spbas/"/>
    <updated>2014-02-03T09:55:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/03/getting-started-with-spbas</id>
    <content type="html"><![CDATA[<p>As developers we often need to sell the applications that were creating. Places like the Google Web Store, Codecanyon, Apple Store, Shopify App Store exist for that matter. These repositories are good places to start but it often requires you to upload your work and have it reviewed by other developers so they are ensured that the app that you submitted meets their criteria.</p>

<!-- more -->


<p>This is often a tedious process and sometimes you have to wait for a specific period of time before your app gets approved.
With SPBAS you can skip that process altogether and host your own business automation software on a server of your choice.
In this post I&rsquo;ll be walking you through SPBAS, short for SolidPHP Business Automation Software. With SPBAS you can easily host the apps that you have created and have people who wants to buy your app pay you via the payment method of your choice. Note that I won&rsquo;t be discussing about the specific features of this business automation software as the <a href="https://solidphp.atlassian.net/wiki/display/docs/Home">official documentation</a> already has a plenty of that information available. Rather I&rsquo;d like to focus on the developer&rsquo;s perspective. Things like setting up SPBAS and how to actually get up and running with it. I&rsquo;m not going to go in-depth with the concepts such as licensing and the different options that are available. Instead I&rsquo;m going to stick with only the necessary parts in order to get up and running quickly with SPBAS.</p>

<h3>Getting SPBAS</h3>

<p>Before you can begin installation, you first have to register with SPBAS. To register simply go to the SPBAS site, click on customer area and click on the register tab.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/spbas-registration.png" alt="spbas registration" /></p>

<p>Once you&rsquo;re done with that simply login to the account and click on the order tab. The order page lists all the available products. For this guide were simply going to use the Free version so click on the link under the SPBAS 25 Free version.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/spbas-order.png" alt="spbas order" /></p>

<p>After that, click on the add to cart button to add the specific product into your cart.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/add-to-cart.png" alt="add to cart" /></p>

<p>Then click on the checkout button.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/checkout.png" alt="checkout" /></p>

<p>After that you will be ask to enter your business details. Once you&rsquo;re done entering your business details simply click on the continue to next step button. You will then be redirected to the order summary page just click on the ok button at this point to confirm that your order is correct. If everything went well you will see a screen similar to the following:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/order-complete.png" alt="order complete" /></p>

<p>At that point your product license will have been emailed to you by SPBAS. You can use the product license on your SPBAS installation later on. If you didn&rsquo;t receive your license details you can also access it from the customer area. To access your license details from the customer area, just click on the dashboard link and under the My Packages section click on the licenses link. This will redirect you to the &lsquo;My Packages&rsquo; page which you will see the product that you ordered earlier. Just click on the view details link once you&rsquo;re on that page to view the details for that specific package. Once you&rsquo;re on the package details page just click on the licenses tab to view your license key. Copy your license key and store it somewhere safe, a password manager like keepass or lastpass will do. You will be using the license key later.</p>

<p>Once you&rsquo;re done saving the license key, click on the downloads tab then select the current release. At the time of writing of this post the current SPBAS version is 3.2.0. If they already have anything higher than that by the time you read this simply stick with that version instead. Under the current release directory is the SPBAS zip file, download the zip file and extract it on your machine then copy it to your web directory or upload it to a server somewhere using Filezilla or other FTP clients.</p>

<h3>Installing Ioncube</h3>

<p>SPBAS has been encoded with Ioncube so it requires the ioncube PHP module to be installed on the server before you can make use of it. In case you don&rsquo;t know what encoding is, its used to obfuscate code so that when its source file is opened it cannot be understood by a human. Its a way to protect intellectual property. Because as you already know PHP is an interpreted language so the code that you write is pretty much exposed to anyone who has access to the source files.</p>

<p>You can install ioncube by downloading the ioncube loader from the <a href="http://www.ioncube.com/loaders.php">ioncube website</a>. All you have to do is select the loader that&rsquo;s applicable for your machine. The first step is to determine the Operating System that you&rsquo;re using and the version of PHP installed. You can do that by executing the <code>phpinfo()</code> function:</p>

<p><code>php
&lt;?php
phpinfo();
?&gt;
</code></p>

<p>Access the file from your browser and look at the header:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/phpinfo.png" alt="phpinfo" /></p>

<p>As you can see from the screenshot above I&rsquo;m running PHP version 5.5.7 on Ubuntu Raring Ringtail (13.04). Looking at the loaders available from the ioncube website there&rsquo;s no loader that&rsquo;s specifically for Ubuntu 13.04 so the closest one that I could download is the one for Linux (x86). Under the archives I downloaded the zip file and extracted it on my machine. If you&rsquo;re using Windows then all you have to do is download the one&rsquo;s that are under the Windows installer column and select the one that&rsquo;s applicable to your Operating System and PHP installation.</p>

<p>After extracting (on Ubuntu) or executing the installer file on Windows, copy the directory extracted from the ioncube loader zip file on your web directory and access the <code>loader-wizard.php</code> from your browser. This will give you an idea whether your installation was successful. If it wasn&rsquo;t successful the loader wizard will show all the warnings and will give you an idea on what went wrong so you can fix it.</p>

<p>Here&rsquo;s an example of an error from the loader wizard:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/loader-wizard.png" alt="loader wizard" /></p>

<p>As you can see from the screenshot above it will automatically detect where the correct loader files are located and shows you where it should be installed. Simply follow the instructions and restart apache once you&rsquo;re done:</p>

<p><code>
sudo service apache2 restart
</code></p>

<h4>Common Installation Issues</h4>

<p>Here are some of the common issues when installing ioncube:</p>

<ul>
<li><strong>PHP Fatal error The Loader must appear as the first entry in the php.ini file in Unknown on line 0</strong> &ndash; this means that the ioncube loader must be the first module that should be loaded by PHP. In Ubuntu you can do this by going to the following directory:</li>
</ul>


<p><code>
/etc/php5/apache2/conf.d
</code></p>

<p>And create a new file and name it <code>01-ioncube.ini</code> then put the following contents:</p>

<p><code>
zend_extension = /usr/lib/php5/20121212/ioncube_loader_lin_5.4.so
</code></p>

<p>This ensures that the ioncube loader is first on the queue.
Do note that the path here should be the same as the path that was mentioned in the loader wizard and that the loader file, in this case the loader file is the <code>ioncube_loader_lin_5.4.so</code> file should exist in the location specified. The loader files are stored in the directory that you extracted earlier and its stored along with the <code>loader-wizard.php</code> file. And don&rsquo;t forget to restart apache once you&rsquo;re done making the changes.</p>

<ul>
<li><p><strong>The installed loader is for PHP 5.4 but your server is running PHP 5.5</strong> &ndash; this means that the loader and the PHP version isn&rsquo;t compatible. To solve this problem you have to use the loader that&rsquo;s specific to your PHP version. There&rsquo;s really no problem with this if you&rsquo;re able to access the loader wizard since it already mentions from there which loader version you have to install.</p></li>
<li><p><strong>PHP version used for encoding the files isn&rsquo;t the same as the ioncube loader version</strong> &ndash; unfortunately there&rsquo;s really nothing that you can do with this one. If the PHP software that you&rsquo;re trying to use was encoded with ioncube that has a lower or higher version than that of the ioncube loader that your machine has then it won&rsquo;t work. The basic rule is that the encoder version should be the same as the loader version.</p></li>
</ul>


<h3>Installing SPBAS</h3>

<p>Once you have successfully installed Ioncube you can now install SPBAS. You can do that by extracting the SPBAS zip file that you downloaded earlier into your web directory. The default file name of the extracted directory is <code>rename_upload_me</code> so you have to rename the directory to something like <code>spbas</code> so its easily recognizable. When accessing SPBAS from your browser for the first time you have to access the install path:</p>

<p><code>
http://localhost/spbas/install/
</code></p>

<p>Once you&rsquo;re in the install page simply follow the installation instructions to install SPBAS.</p>

<h3>Configuration</h3>

<p>After installing SPBAS you&rsquo;re now ready for configuration. Configuring SPBAS can be done by logging into your administrator account and accessing specific areas that you want to configure. In this section I&rsquo;ll be walking you through some of the most common configurations to get you up and running with SPBAS.</p>

<h4>Products</h4>

<p>To add products all you have to do is click on the following links in order: settings &ndash;> storefronts &amp; products &ndash;> products &ndash;> add product</p>

<p>Once you&rsquo;re in the add product page simply enter the details for the application that you&rsquo;re trying to sell:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/1-add-new-product.png" alt="add product" /></p>

<h4>Pricing Tier</h4>

<p>After adding a product you have to add a pricing tier. Things such as the minimum quantity, maximum quantity and price can be added here. You can add a price tier by going to: settings &ndash;> storefronts &amp; products &ndash;> products &ndash;> find the product that you want &ndash;> manage &ndash;> product price tier &ndash;> add price tier</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/2-Add-pricing-tier.png" alt="add pricing tier" /></p>

<h4>System Configuration</h4>

<p>After adding the pricing tier for a specific product you may also want to configure the overall system settings. Things such as the date format, time format, default upload path and your SPBAS license key can be added from here. The system configuration page can be accessed by going to: admin &ndash;> system &ndash;> application &ndash;> system configuration</p>

<p>If you still remember that license key that you got from the SPBAS website earlier that&rsquo;s the one that you should supply in the SPBAS license key field. Another important configuration is the media upload path. This is where the product files are going to be uploaded.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/3-setup-upload-path.png" alt="system configuration" /></p>

<h4>Licensing Method</h4>

<p>Next is the optional licensing method. I said optional because not all products requires a license in order to work. If the application that you&rsquo;re trying to sell is a one-time payment only then there&rsquo;s no need to setup a licensing method. But if you&rsquo;re application requires a license in order to work then read on.
The licensing method is the type of licensing that you want to use for the products that you&rsquo;re selling. A licensing method can be added by going to: settings &ndash;> licensing &ndash;> licensing methods &ndash;> add a new method</p>

<p>Note that the SPBAS is the recommended licensing method as its the only licensing method that&rsquo;s actively developed.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/4-add-licensing-method.png" alt="licensing method" /></p>

<p>Once you&rsquo;re done selecting the licensing method and giving it an easily recognizable name you can now add the details for that specific licensing method. Things such as the license prefix, license validation options and max instances of each issued license can be set from this page. Here&rsquo;s an example configuration for a licensing method:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/5-add-details-to-licensing-method.png" alt="licensing method details" /></p>

<p>As I have said earlier I&rsquo;m only going to discuss about the necessary parts in order to easily get up and running with SPBAS. If you want to dive in deeper with the licensing options available and what each of the options mean, you can check the <a href="https://solidphp.atlassian.net/wiki/display/docs/Licensing">documentation on licensing</a>.</p>

<h4>Download Category</h4>

<p>Next is the download category. Download categories is part of the group of settings for setting up downloads for your products.
To add a new download category go to: settings &ndash;> media &ndash;> downloads &ndash;> new category</p>

<p>From there you can create a new download category. Simply click on the add category button once you&rsquo;re done giving the download category a name.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/6-add-download-category.png" alt="add download category" /></p>

<p>Once you&rsquo;re done with that you can now add a specific media or the archive version of the product that you&rsquo;re trying to sell to that download category. You can do that by going to: settings &ndash;> media &ndash;> downloads &ndash;> media</p>

<p>Then simply supply the display name and the actual file name. Note that the file should exist in the media upload path that you supplied earlier in the system configuration page. If this doesn&rsquo;t work, simply use the web upload feature in which you can manually upload the files. After that click on the add media to category button to add the files to a specific download category.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/7-add-media-to-download-category.png" alt="add media to download category" /></p>

<h4>Media Set</h4>

<p>Media sets are categories of downloads that can be assigned to product price tiers as assets. In simple terms they are used to link pricing tiers to the files for a specific product. You can add a media set by going to: settings &ndash;> media &ndash;> media sets &ndash;> add media set</p>

<p>Give the media set a name that can be easily recognized as part of a specific price tier and click on the add new button.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/8-addmedia-set.png" alt="add media set" /></p>

<p>Once you&rsquo;re done with that simply assign the media set to a specific product price tier by checking the checkbox beside the product pricing tier. You can access the following page by clicking on the manage link beside the media set that you created:</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/9-assign-asset-pricing-tier-to-media-set.png" alt="assign asset to media set" /></p>

<p>After that you can now assign a media category to the media set. You can do this by going to: settings &ndash;> media &ndash;> media sets &ndash;> assign media to sets</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/10-assign-media-category-to-media-set.png" alt="assign media category to media set" /></p>

<h4>Assigning License Method as an Asset</h4>

<p>In order to create new license keys you must first assign the licensing method to a product price tier. After you do this customers can order the product, or you as an admin can manually add a package, which will result in a license key asset being issued to the customer account. The customer can then enter the license key into your application to activate it. To assign a licensing method click the Assign as Asset menu link and check the box beside each relevant product price tier.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/11-assign-asset-pricing-tier-to-licensing-method.png" alt="assign asset to licensing method" /></p>

<h4>Assigning Product Order to Form</h4>

<p>Finally you can now assign a specific product to the order form. This will allow customers to see your product listed on the order page of your SPBAS installation. You can do that by going to: settings &ndash;> storefronts &amp; products &ndash;> order forms</p>

<p>Once you are there simply check the checkbox beside the Products to assign your products to your order form.</p>

<p><img src="/images/posts/getting_started_with_business_automation_software/12-assign-product-to-order-form.png" alt="assign product order to form" /></p>

<h3>Licensing Implementation</h3>

<p>You can implement licensing by including the <code>SPBAS.class.php</code> somewhere in your app. And include a code that&rsquo;s similar to the code below:</p>

<p>```php
&lt;?php
include &lsquo;SPBAS.class.php&rsquo;
$license_key = trim($_POST[&lsquo;lickey&rsquo;]); //license key inputted by the user</p>

<p>$spbas = new spbas(); //initialize spbas</p>

<p>if(!empty($license_key)){</p>

<pre><code>$spbas-&gt;license_key = trim($license_key);

$spbas-&gt;api_server = 'http://localhost/spbas/api/index.php'; //the URL in which SPBAS is hosted 
$spbas-&gt;secret_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';  //the secret key from the licensing method

$spbas-&gt;validate(); //check if the license key is valid

$response = array();

if(empty($spbas-&gt;errors)){

    $db-&gt;query("INSERT INTO tbl_settings SET license = '$license_key'"); //save license into the database

    /* 
    some code here to activate the application
    */

    //setup success response
    $response = array(
        'type' =&gt; 'success', 
        'text' =&gt; 'You have successfully Activated the plugin!'
    );  
}else{
    //setup error response
    $response = array(
        'type' =&gt; 'error',
        'text' =&gt; $spbas-&gt;errors
    );
}

echo json_encode($response);
</code></pre>

<p>}
?>
```</p>

<p>You may want to encode this specific part of the code using something like Ioncube so the implementation details are protected. One final thing to note is that the ioncube loader should also be installed on the server where you plan to deploy.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://solidphp.atlassian.net/wiki/display/docs/Home">SPBAS Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Caching in PHP]]></title>
    <link href="http://anchetawern.github.io/blog/2014/01/26/getting-started-with-caching-in-php/"/>
    <updated>2014-01-26T09:56:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/01/26/getting-started-with-caching-in-php</id>
    <content type="html"><![CDATA[<p>In this post were going to explore how to do caching in PHP. But first let&rsquo;s define what caching is. With a quick Google search we get these definitions:</p>

<p><blockquote><p>store away in hiding or for future use.</p></blockquote></p>

<p>Another definition from <a href="http://www.citrix.com/glossary/caching.html">citrix.com</a></p>

<p><blockquote><p>Temporarily storing recently used information. The content, which includes HTML pages, images, files and Web objects, is stored on the local hard drive in order to make it faster for the user to access it, which helps improve the efficiency of the computer and its overall performance</p></blockquote></p>

<p>So we now know that caching is temporarily storing information in order to improve performance.</p>

<!-- more -->


<h3>Caching Techniques</h3>

<p>There are different caching methods that we can use with PHP:</p>

<ul>
<li>Caching content</li>
<li>Memory Cache</li>
<li>Database Cache</li>
</ul>


<h3>Caching Content</h3>

<p>We can cache content in PHP by saving the final output of a specific script into the filesystem then simply serving it like a static file for a specific period of time instead of executing the original script.</p>

<p>Below is an example on how to cache content on the filesystem. First we declare a variable which stores the location of the cache file, current time and the time when the cache file was last modified. Once that&rsquo;s done we simply check whether there is a cache file for the particular script that a visitor is currently accessing. If there is a cache file then we simply include it in the page. If not then we access the database for the content and output the HTML. Then all of the output will be stored in the cache file. <a href="http://www.php.net/ob_start">Output buffering</a> is used to store all of the output in a string format so only the HTML that&rsquo;s outputted in the browser is going to be saved in the cache file. This means that the database access is bypassed when we load the cache file later on when a second visitor visits the site. Its like serving plain HTML, which means that it will load faster than the previous request.</p>

<p>```php
&lt;?php
$file = &lsquo;cache/&rsquo; . basename($_SERVER[&lsquo;SCRIPT_NAME&rsquo;]); //location of cache file
$current_time = time();
$cache_last_modified = filemtime($file); //time when the cache file was last modified</p>

<p>if(file_exists($file) &amp;&amp; ($current_time &lt; strtotime(&lsquo;+1 day&rsquo;, $cache_last_modified))){ //check if cache file exists and hasn&rsquo;t expired yet</p>

<pre><code>include($file); //include cache file
</code></pre>

<p>}else{</p>

<pre><code>ob_start(); //start output buffering
</code></pre>

<p>?></p>

<pre><code>&lt;h1&gt;Hello World!&lt;/h1&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>/*
some code accessing the database
for some data here
*/

/*
probably some complex computations here
*/

$fp = fopen($file, 'w'); //open cache file
fwrite($fp, ob_get_contents()); //create new cache file
fclose($fp); //close cache file
ob_end_flush(); //flush output buffered
</code></pre>

<p>}
?>
```</p>

<h3>Memory Cache</h3>

<p>Another caching technique is caching via memory. This is a lot more faster than caching in the file system.</p>

<h4>Opcode Cache</h4>

<p>Opcode Cache is mostly used for temporarily storing data and not the actual content. The first time I encountered object cache I couldn&rsquo;t understand what&rsquo;s the difference between it and sessions.
I did some reading and found out that by default sessions are stored in the filesystem. And data stored via object cache is stored in memory so its faster compared to session.</p>

<h5>APC</h5>

<p>We can implement object caching by using APC. APC isn&rsquo;t packaged with PHP so you have to install it separately. In Ubuntu you can install it by going to the terminal and executing the following command:</p>

<p><code>
sudo apt-get install php-apc
</code></p>

<p>Once that&rsquo;s done you can simply restart Apache for the changes to reflect.</p>

<p><code>
sudo service apache2 restart
</code></p>

<p>Using APC is simple. There are only 3 methods that you need to remember in order to start using it:</p>

<ul>
<li><strong>apc_add/apc_store</strong> &ndash; store a variable in the cache. The only difference between <code>apc_add</code> and <code>apc_store</code> is that <code>apc_store</code> overwrites the data if it already exists and <code>apc_add</code> does not</li>
<li><strong>apc_fetch</strong> &ndash; fetch a variable from the cache</li>
<li><strong>apc_delete</strong> &ndash; delete a variable from the cache</li>
</ul>


<p>Below is a sample implementation of APC. Here were simply checking if the value returned from fetching the <code>db_results</code> cache is null. If its null then we get the data from the database, store the results in the cache then do something with the results that were retrieved. If the call to <code>apc_fetch</code> returned something then we simply use it instead of travelling back to the database to get the data that we need.</p>

<p>```php
&lt;?php
$results_array = apc_fetch(&lsquo;db_results&rsquo;);</p>

<p>if($results_array == null){</p>

<pre><code>$db = new Mysqli($host, $user, $password, $database); 
//get data from the database
$results = $db-&gt;query("SELECT title, SUM(views) AS view_count FROM tbl_octoblog 
    LEFT JOIN tbl_blogviews ON tbl_octoblog.id = tbl_blogviews.post_id
    GROUP BY title");

$results_array = $results-&gt;fetch_array(MYSQLI_ASSOC); //convert results to associative array
apc_add('db_results', $results_array, 86400); //store results in the cache for 1 day (1 day = 86400 seconds)
</code></pre>

<p>}</p>

<p>//do something with the $results_array
?>
```</p>

<p>If you wish to learn more about APC, be sure to check out the <a href="http://www.php.net/apc/">official APC documentation</a> on PHP.net.</p>

<h5>Memcached</h5>

<p>Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering. That&rsquo;s the definition that I got from the memcached site. To put simply, memcached is used for temporarily storing data that came from a specific source (database, API, page rendering).</p>

<p>To install memcached execute the following from your terminal:</p>

<p><code>
sudo apt-get install memcached
</code></p>

<p>And just like with APC, you also have to restart apache in order for the changes to take effect:</p>

<p><code>
sudo service apache2 restart
</code></p>

<p>Once that&rsquo;s done, you can go ahead and start using memcached. To use memcached you first have to define the memcached server in which you want to connect to. Since this is just a getting started tutorial we can simply use <code>127.0.0.1</code> as the host. This refers to the localhost or the machine that you&rsquo;re currently working on. As for the port, the default port that memcached is running on is port <code>11211</code>. You can change these values by updating the <code>memcached.conf</code> file located under the <code>etc</code> directory.
After that, declare a new object of the Memcache class then call the <code>connect</code> method using the newly declared object. The <code>connect</code> method takes up the host and port that you declared earlier as its arguments. You can then use the variable that you used to store the result of that call to check whether the connection was successful or not.
From there the scenario is similar to that of the APC example earlier. First you call the <code>get</code> method and supply a unique key that you will be using to refer to the data as the argument then store the result in a variable. Then you simply check whether this variable contains <code>null</code>. If its <code>null</code> then it means there&rsquo;s no data assigned to the specific key that you used so you have to get the data from its original source, in the case of the example below the database is the original source. Once you get the data from its original source you can then use the <code>set</code> method to save the data into the cache. The <code>set</code> method takes up 2 required arguments, the first is the unique key that will be used to identify the data, the second is the data that you want to store, the third is a flag on whether to use compression or not. If you want to compress the data you can use <code>MEMCACHE_COMPRESSED</code> as the value for the flag, otherwise simply use <code>false</code>. The last argument is the expiration time. You can use either a unix timestamp or the number of seconds in which to store the data in the cache. In the example below we used the number of seconds <code>86400</code> which is the number of seconds in a day.
The next time the script runs it will no longer go back to the database to get the data. It will get it from the cache instead.</p>

<p>```php
&lt;?php
//define the memcached host and port to connect to
$memcache_host = &lsquo;127.0.0.1&rsquo;;
$memcache_port = &lsquo;11211&rsquo;;</p>

<p>//connect to memcached server
$memcache = new Memcache;
$is_cache = $memcache->connect($memcache_host, $memcache_port);</p>

<p>if($is_cache){</p>

<pre><code>$things = $memcache-&gt;get('things');

if($things == null){ //if data hasn't been cached yet
    $db = new Mysqli($db_host, $db_user, $db_password, $db_name); 
    $results = $db-&gt;query("SELECT * FROM tbl_things WHERE needed = 'yes'");
    $things = $results-&gt;fetch_array(MYSQLI_ASSOC); //convert result set to an array

    $memcache-&gt;set('things', $things, false, 86400); //cache the data
}

//do something with the $things, output it, mess with it, whatever.
</code></pre>

<p>}
?>
```</p>

<p>Here are some of the common methods that you can use with memcached:</p>

<ul>
<li><strong>add</strong> &ndash; saves a specific data into the cache</li>
<li><strong>store</strong> &ndash; saves a specific data into the cache. The only difference between <code>store</code> and <code>add</code> is that <code>add</code> will return <code>false</code> if the key already exists but store goes ahead and over-writes the data if it already exists</li>
<li><strong>delete</strong> &ndash; deletes data from the cache based on the key that you define as its argument</li>
<li><strong>flush</strong> &ndash; deletes all the data that you have on the cache</li>
</ul>


<p>To learn more about memcached be sure to check out the <a href="http://memcached.org/">official memcached site</a> or the <a href="http://php.net/manual/en/book.memcache.php">memcached documentation for PHP</a>.</p>

<h3>Database Cache</h3>

<p>We have been talking about how to do caching in the application layer but caching can also be in the database layer.
In this form of caching the caching is done by the database server itself. This works by caching the results of the query so the query is only parsed the first time it runs and in the succeeding requests it won&rsquo;t be parsed since the results from the specific query is already cached by the database server.
In this section I&rsquo;m going to walk you through how caching is done in MySQL.</p>

<p>To configure caching in MySQL simply open up the <code>my.cnf</code> file under the <code>etc</code> directory and add the following lines:</p>

<p><code>
query_cache_type    = 1
query_cache_limit   = 1M
query_cache_size    = 16M
</code></p>

<ul>
<li><strong>query_cache_type</strong> &ndash; whether to enable caching. Set to <code>0</code> if you want to disable, <code>1</code> to enable for all cacheable queries except those that begin with <code>SELECT SQL_NO_CACHE</code>. And <code>2</code> to cache only for cacheable queries that begin with <code>SELECT SQL_CACHE</code></li>
<li><strong>query_cache_limit</strong> &ndash; limit caching for a specific result set. If the results returned from the query exceeds the value set in this option then it won&rsquo;t be cache</li>
<li><strong>query_cache_size</strong> &ndash; the amount of memory allocated for caching results</li>
</ul>


<p>The query cache works by storing the text of a SELECT statement together with the result. If the same query is received at a later time, the server retrieves the results from the query cache rather than parsing and executing the statement again. The query cache is shared among sessions, so a result set generated by one client can be sent in response to the same query issued by another client.</p>

<p>But you may ask: &ldquo;What if the contents of a specific table has been changed, will the server return the results from the cache?&rdquo;. The answer is no it doesn&rsquo;t. The server is smart enough to flush the cache when the tables in question is updated or modified in some way.</p>

<p>Here are some of the things that you need to remember when using the query cache in MySQL:</p>

<ul>
<li>Only full queries are cached. This means that subqueries aren&rsquo;t cached by the server at all</li>
<li>Query cache stores the text of a SELECT statement together with the result. Yes I already said that earlier but I think its worth emphasizing</li>
<li>Only works for SELECT queries</li>
<li>No support for prepared statements</li>
<li>Only works for queries that are absolutely the same</li>
</ul>


<p>Be sure to read about <a href="http://dev.mysql.com/doc/refman/5.1/en/query-cache-operation.html">how the query caching operates</a> at the official MySQL website if you want to learn more about the query cache.</p>

<h3>Caching Libraries</h3>

<p>To make the caching implementation easier you can also use caching libraries. Caching libraries allows you to use different caching methods such as the file system, sqlite, apc, memcached and xcache.</p>

<h4>PHPFastCache</h4>

<p>First on the list is PHPFastCache. PHPFastCache is a high-performance object caching system for PHP.
To use PHPFastCache all you have to do is download the library from their site and include the <code>phpfastcache.php</code> file on the script where you plan to use it. Then declare a variable that will contain the configuration details such as the storage, the path for the cache files and the htaccess protection to disable direct access to the data that are cached.</p>

<p>```php
&lt;?php
require_once(&ldquo;libs/phpfastcache/phpfastcache.php&rdquo;);</p>

<p>//configuration
$config = array(</p>

<pre><code>"storage" =&gt; "files",
"path" =&gt; "/somewhere/outside/your/web_folder", //path for cache files
"htaccess" =&gt; true, //set htaccess protection (default: true)
</code></pre>

<p>);
?>
```</p>

<p>You can also supply a <code>fallback</code> option in case the primary caching option that you supplied isn&rsquo;t available on the server where you deploy your application.</p>

<p>```
&lt;?php
$config = array(</p>

<pre><code>"fallback"  =&gt;  array(
    "memcache" =&gt; "files", //if memcached isn't installed use file system instead
    "apc" =&gt; "files", //if apc isn't installed use file system instead
)
</code></pre>

<p>);
?>
```</p>

<p>If you used memcached as the cache type, you can provide the memcached server details under the <code>server</code> key of the configuration. If you remember earlier when we used memcached we supplied the <code>server</code> and the <code>port</code>. You also need to pass these details under the configuration.</p>

<p>```
&lt;?php
$config = array(
 &ldquo;server&rdquo; =>  array(</p>

<pre><code>array("127.0.0.1", 11211, 1) 
</code></pre>

<p>  )
);
?>
```</p>

<p>Once you&rsquo;re done with setting up the configuration, simply pass it as the argument for the <code>setup</code> method then declare a new instance of the <code>phpFastCache</code> class:</p>

<p><code>
&lt;?php
phpFastCache::setup($config);
$cache = new phpFastCache();
?&gt;
</code></p>

<p>Just like with any other caching methods that we&rsquo;ve used so far there&rsquo;s only a couple of methods that you have to remember: <code>get</code> and <code>set</code>. In PHPFastCache we use <code>set</code> to save a specific data into the cache and <code>get</code> to get the data back for processing.
In the example below were trying to get the products from the cache. If it doesn&rsquo;t exist we simply get the data from the original source and cache it.</p>

<p>```
&lt;?php
$products_cache = $cache->get(&ldquo;products&rdquo;);
if($products_cache == null){</p>

<pre><code>$results = $db-&gt;query("SELECT item_name, quantity, price FROM tbl_products LIMIT 10");
$results-&gt;fetch_array(MYSQLI_ASSOC);
$cache-&gt;set("products", $products_cache);
</code></pre>

<p>}
?>
```</p>

<p>You can learn more about <a href="http://www.phpfastcache.com/">PHPFastCache</a> on their official site.</p>

<h4>Doctrine/Cache</h4>

<p>The Doctrine Object Relational Mapper also comes with a caching module which you can use separately even if you&rsquo;re not using Doctrine. You can install the Doctrine caching module through composer.</p>

<p>```
{</p>

<pre><code>"require": {
  "doctrine/cache": "1.2"
}
</code></pre>

<p>}
```</p>

<p>Include the <code>autoload.php</code> file and initialize the cache driver that you want to use.</p>

<p>```
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;
$cache = new \Doctrine\Common\Cache\ApcCache(); //use APC as the driver
$fruits = $cache->fetch(&lsquo;fruits&rsquo;); //fetch the data from the cache</p>

<p>if($fruits == null){</p>

<pre><code>$fruits = array('apple', 'orange', 'grapes', 'coconut', 'papaya');
$cache-&gt;save('fruits', $fruits); //save data into the cache
</code></pre>

<p>}</p>

<p>//do something with $fruits
?>
```</p>

<p>With Doctrine you can also use the following as the cache driver:</p>

<ul>
<li>ArrayCache</li>
<li>CouchbaseCache</li>
<li>FileCache</li>
<li>FilesystemCache</li>
<li>MemcacheCache</li>
<li>MemcachedCache</li>
<li>MongoDBCache</li>
<li>PhpFileCache</li>
<li>RedisCache</li>
<li>RiakCache</li>
<li>WinCacheCache</li>
<li>XcacheCache</li>
<li>ZendDataCache</li>
</ul>


<p>So if you want to use Memcache you do something like this:</p>

<p><code>
&lt;?php
$memcache = new Memcache();
$memcache-&gt;connect('127.0.0.1', 11211); //connect to the memcache server
$cache = new \Doctrine\Common\Cache\MemcacheCache();
?&gt;
</code></p>

<p>As you can see Doctrine doesn&rsquo;t automatically handle connecting to the memcache server so you have to do it manually before initialiazing the cache driver that you want to use. After that you can use the same methods that you use with any other caching driver. Here are the commonly used methods:</p>

<ul>
<li>fetch($id) &ndash; fetch an item from the cache</li>
<li>contains($id) &ndash; check if an item exists in the cache</li>
<li>save($id, $data, $lifetime) &ndash; save the data into the cache. Note that the lifetime is expressed in seconds</li>
<li>delete($id) &ndash; deletes an item from the cache</li>
</ul>


<p>You can learn more about the Doctrine caching module <a href="http://docs.doctrine-project.org/en/2.0.x/reference/caching.html">here</a>.</p>

<h3>Things to Remember</h3>

<p>Implementing a caching functionality in the applications that you&rsquo;re writing can be great, but like Uncle Ben from Spiderman said &lsquo;With great power comes great responsibility&rsquo;. So as developers we always have to carefully study if caching is appropriate for a specific scenario or not. For example here are some instances in which caching is not recommended:</p>

<ul>
<li>real-time data</li>
<li>search results</li>
<li>latest news</li>
</ul>


<p>A good rule of thumb when trying to implement caching is that to ask yourself whether the data needs to be always fresh or not. For the examples above caching is pretty much not applicable. But if you think about the requirements, for example for the latest news, is there always a latest news every minute? Yes there may be but does publishing a new news in news website (that&rsquo;s a tongue twister that I just came up with) takes less than a minute? Maybe you can actually apply caching but only cache for example 30 seconds. The same is true with search results, if the website doesn&rsquo;t really publish much content then caching can still be applied. Just be sure to think about the expiration time carefully.</p>

<h2>Conclusion</h2>

<p>There you have it! Some of the most common caching techniques that you can use with PHP to improve the performance of the applications that you&rsquo;re writing. Like I just said, caching is a very good way to improve the performance of your app. There&rsquo;s no need to run a query every time a page is requested. If you can cache it somewhere (filesytem, memory) where it will take less time to access, the better.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/548301/what-is-caching">What is Caching</a></li>
<li><a href="http://www.slideshare.net/anisniit/caching-new">Caching Basics</a></li>
<li><a href="http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/">Beginners Guide to HTTP Cache Headers</a></li>
<li><a href="http://en.wikipedia.org/wiki/Database_caching">Database Caching</a></li>
<li><a href="http://www.mysqlperformanceblog.com/2011/04/04/mysql-caching-methods-and-tips/">MySQL Caching Methods Tips and Tricks</a></li>
<li><a href="http://www.taos.com/2013/04/10/understanding-mysql-query-cache/">Understanding MySQL Query Cache</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Paypal API]]></title>
    <link href="http://anchetawern.github.io/blog/2014/01/08/getting-started-with-paypal-api/"/>
    <updated>2014-01-08T18:15:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/01/08/getting-started-with-paypal-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can get started with using the Paypal API. I&rsquo;ll walk you through the steps needed in order to get you started with using the Paypal API in your projects.</p>

<!-- more -->


<h3>Concepts to Remember</h3>

<p>Here are some of the concepts that you have to remember when working with the Paypal API in any of your projects:</p>

<ul>
<li><strong>Sandbox</strong> &ndash; this is used for testing requests to the Paypal API. Sandbox Paypal accounts can be assigned with funds of up to 5000 USD and then you can use it for testing.</li>
<li><strong>Live</strong> &ndash; the live Paypal website. You can switch your API calls to use the live endpoints upon deploying your project.</li>
<li><strong>API Request</strong> &ndash; you can use either NVP (Name-Value Pair) or SOAP when making request to the API. We will use name-value pairs in this tutorial.</li>
<li><strong>API Credentials</strong> &ndash; the credentials that you will use in order to make API calls.</li>
<li><strong>API</strong> &ndash; short for Application Programming Interface. Paypal is composed of different APIs such as the adaptive accounts, adaptive payments, invoicing, merchant APIs and permissions. In this tutorial I&rsquo;m going to discuss about the merchant API.</li>
<li><strong>Service Endpoint</strong> &ndash; this simply refers to the URL of the server that will handle a specific request. Note that the endpoints used for testing (sandbox) and production (live) are different. So you have to update the endpoints after you&rsquo;re done with the testing.</li>
<li><strong>Call Payload</strong> &ndash; the minimum data required by paypal that you have to submit as part of the request to the API.</li>
<li><strong>Request and Response Formats</strong> &ndash; the format in which your API request and the response that&rsquo;s going to be returned after a successful call.</li>
<li><strong>HTTP Headers</strong> &ndash; the HTTP request header information that you have to specify in each API call.</li>
</ul>


<h3>Create a Paypal Account</h3>

<p>First you have to create either a Paypal Personal Account or a Paypal Business Account on the Paypal website.
After creating an account go to <a href="https://developer.paypal.com/">developer.paypal.com</a> and login using the account that you created.</p>

<h3>Create a Sandbox Account</h3>

<p>Once you&rsquo;re logged in to the paypal developer website, click on the applications tab then go to sandbox accounts. In this page you will see the default paypal account that you can use for testing. The default account contains information that you can use to authenticate your API calls. In most cases you would only need to take note of the username, password and the signature in order to authenticate API calls.</p>

<p><img src="/images/posts/getting_started_with_paypal/default-test-account.png" alt="default account" /></p>

<p>The default test account is a business account so if you need to test on a personal account you may need to create a new test account which you can do on the same page by clicking on the <code>Create Account</code> button.</p>

<p><img src="/images/posts/getting_started_with_paypal/paypal-create-testacc.png" alt="create test account" /></p>

<p>The default test account along with any test account that you create can be used to login in the <a href="https://www.sandbox.paypal.com">sandbox paypal website</a>. This is great as you can use this like a real paypal account to view your transactions, make payments, etc.</p>

<h3>Getting Live API Credentials</h3>

<p>Note that the API credentials that comes along with the default test account can&rsquo;t be used to make API calls with the live version of the API. For that you would need to login to <a href="http://paypal.com">paypal</a> then go to <strong>My Account</strong> &ndash;> <strong>Profile</strong> &ndash;> <strong>My Selling Tools</strong> then click on the <strong>update</strong> link beside the <strong>API Access</strong> section. After that click on the <strong>Request API Credentials</strong> link. Finally, select <strong>Request API signature</strong> and click <strong>Agree and Submit</strong>. This will generate the API Username, Password and Signature that you can use in your live API calls.</p>

<h3>Paypal Class</h3>

<p>Now were ready to build the class that we will be using later on to make requests to the Paypal API.
First create a new class and call it <code>Paypal</code>. Then declare the following class variables:</p>

<ul>
<li><strong>request method</strong> &ndash; the request method to use. This can be either CURL or file_get_contents.</li>
<li><strong>errors</strong> &ndash; stores the current errors that occured while making the requests.</li>
<li><strong>credentials</strong> &ndash; stores the API credentials.</li>
<li><strong>endpoint</strong> &ndash; the URL of the service end point to use.</li>
<li><strong>version</strong> &ndash; the version of the API. Currently its 74.0</li>
</ul>


<p>```php
&lt;?php
class Paypal{</p>

<p>  public $request_method;</p>

<p>  public $_errors = array();</p>

<p>  protected $<em>credentials;
  protected $</em>endPoint = &lsquo;<a href="https://api-3t.sandbox.paypal.com/nvp">https://api-3t.sandbox.paypal.com/nvp</a>&rsquo;;
  protected $_version = &lsquo;74.0&rsquo;;</p>

<p>}
?>
```</p>

<p>Next declare the constructor. This will take 3 required arguments and two optional arguments:</p>

<ul>
<li><strong>user</strong> &ndash; the API username that you got from paypal. Note that this should correspond with the endpoint that you use. If the endpoint is a sandbox endpoint then use the sandbox credentials otherwise use the live credentials.</li>
<li><strong>pass</strong> &ndash; the API password</li>
<li><strong>signature</strong> &ndash; the API signature</li>
<li><strong>paypal server</strong> &ndash; this can either be set to sandbox or live. This is set to sandbox by default so its using the sandbox endpoint. Setting this to live will set the endpoint to the live endpoint.</li>
<li><strong>request method</strong> &ndash; the request method to use, this can be either file_get_contents or curl. Its recommended to use curl since its more secure. The file_get_contents method is only there in case the server where you are deploying has no support for CURL.</li>
</ul>


<p>What the constructor does is to initialize the values for the class variables based on the arguments supplied when an object for the class is declared.</p>

<p>```
&lt;?php
  public function __construct($user, $pass, $signature, $paypal_server = &lsquo;sandbox&rsquo;, $request_method = &lsquo;file_get_contents&rsquo;){</p>

<pre><code>$this-&gt;_credentials = array(
    'USER' =&gt; $user,
    'PWD' =&gt; $pass,
    'SIGNATURE' =&gt; $signature,
);

$this-&gt;request_method = $request_method;
if($paypal_server == 'live'){
  $this-&gt;_endPoint = 'https://api-3t.paypal.com/nvp';
}
</code></pre>

<p>  }
?>
```</p>

<p>Next create the request method. This will be the primary method that we will call from this class once we make the request to the API. This accepts two arguments:</p>

<ul>
<li><strong>method</strong> &ndash; the API method to use.</li>
<li><strong>params</strong> &ndash; the parameters required by the method that we specified.</li>
</ul>


<p>What this method does is to build the name-value pair that will be used for the request. It also builds the required HTTP header based on the credentials supplied through the constructor earlier. Once its done building all the information required by a specific API method it makes the request depending on the request method.</p>

<p>```
&lt;?php
  public function request($method, $params = array()){</p>

<pre><code>$this-&gt;_errors = array();
if(empty($method)){ 
  $this-&gt;_errors = array('There is no API Method');
  return false;
}

$requestParams = array(
   'METHOD' =&gt; $method,
   'VERSION' =&gt; $this-&gt;_version
) + $this-&gt;_credentials;


$request = http_build_query($requestParams + $params); //build a query string based on the array of request parameters

if($this-&gt;request_method == 'curl'){

    //build the HTTP header required by Paypal
    $http_header = array(
        'X-PAYPAL-SECURITY-USERID' =&gt; $this-&gt;_credentials['USER'],
        'X-PAYPAL-SECURITY-PASSWORD' =&gt; $this-&gt;_credentials['PWD'],
        'X-PAYPAL-SECURITY-SIGNATURE' =&gt; $this-&gt;_credentials['SIGNATURE'],
        'X-PAYPAL-REQUEST-DATA-FORMAT' =&gt; 'JSON',
        'X-PAYPAL-RESPONSE-DATA-FORMAT' =&gt; 'JSON'
    );

    //set options for CURL
    $curlOptions = array (
        CURLOPT_HTTPHEADER =&gt; $http_header,
        CURLOPT_URL =&gt; $this-&gt;_endPoint,
        CURLOPT_VERBOSE =&gt; 1,
        CURLOPT_SSL_VERIFYPEER =&gt; true, 
        CURLOPT_SSL_VERIFYHOST =&gt; 2,
        CURLOPT_CAINFO =&gt; dirname(__FILE__) . '/cert/cacert.pem', //CA cert file
        CURLOPT_RETURNTRANSFER =&gt; 1,
        CURLOPT_POST =&gt; 1,
        CURLOPT_POSTFIELDS =&gt; $request
    );

    $ch = curl_init();
    curl_setopt_array($ch, $curlOptions);

    $response = curl_exec($ch); //make the request

    if(curl_errno($ch)){
        $this-&gt;_errors = curl_error($ch);
        curl_close($ch);
        return false;
    }else{
        curl_close($ch);
        $responseArray = array();
        parse_str($response, $responseArray); //convert the response string to an array
        return $responseArray;
    }

}else if($this-&gt;request_method == 'file_get_contents'){

    //build the HTTP header required by Paypal
    $context_options = array(
        "http" =&gt; array(
          "method" =&gt; "POST",
          "header"  =&gt; "Content-type: application/x-www-form-urlencoded\r\n" .
                "X-PAYPAL-SECURITY-USERID: " . $this-&gt;_credentials['USER'] . "\r\n" .
                "X-PAYPAL-SECURITY-PASSWORD: " . $this-&gt;_credentials['PWD'] . "\r\n" .
                "X-PAYPAL-SECURITY-SIGNATURE: " . $this-&gt;_credentials['SIGNATURE'] . "\r\n" .
                "X-PAYPAL-REQUEST-DATA-FORMAT: JSON\r\n" .
                "X-PAYPAL-RESPONSE-DATA-FORMAT: JSON\r\n",
          "content" =&gt; $request
        )
    );

    $context = stream_context_create($context_options); //create context for file_get_contents
    $response = file_get_contents($this-&gt;_endPoint, false, $context); //make the request

    $responseArray = array();
    parse_str($response, $responseArray); //convert the response string to an array
    return $responseArray;

}
</code></pre>

<p>  }
}
?>
```</p>

<h3>API Methods</h3>

<p>Before we dive into actually making an API request its important that we first understand the API methods that we will actually use. In this tutorial were only going to use 3 methods: SetExpressCheckout, GetExpressCheckoutDetails, and DoExpressCheckoutPayment. Were going to use these methods to create an application that accepts payments using Paypal.</p>

<h4>SetExpressCheckout</h4>

<p>The <code>SetExpressCheckout</code> method allows you to initiate an express checkout transaction. This is the easiest way to implement a payment operation in your application. What this does is to generate a unique token that can be appended into the paypal URL which is used for making payments. The URL to be used for sandbox and live are different so you have to make sure that the URL that you&rsquo;re using corresponds to the current API endpoint that you&rsquo;re using:</p>

<ul>
<li><strong>sandbox</strong> &ndash; <a href="https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN">https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN</a></li>
<li><strong>live</strong> &ndash; <a href="https://www.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN">https://www.paypal.com/webscr?cmd=_express-checkout&amp;token=UNIQUE_TOKEN</a></li>
</ul>


<p>The <code>SetExpressCheckout</code> method requires the following parameters:</p>

<ul>
<li><p><strong>METHOD</strong> &ndash; must be set to <code>SetExpressCheckout</code></p></li>
<li><p><strong>RETURNURL</strong> &ndash; this is the URL where the buyer will be redirected after a successful payment</p></li>
<li><strong>CANCELURL</strong> &ndash; this is the URL where the buyer will be redirected if he doesn&rsquo;t accept to make the payment</li>
<li><strong>NOSHIPPING</strong> &ndash; you can use this to specify if shipping information is enabled or not. If the customer is paying for a specific service that doesn&rsquo;t require shipping then you can simply set the value to <code>1</code></li>
<li><p><strong>ALLOWNOTE</strong> &ndash; you can use this to specify if notes are allowed. You can set this to <code>0</code> if you don&rsquo;t want buyers to send a note along with the payment information. Otherwise set it to <code>1</code></p></li>
<li><p><strong>PAYMENTREQUEST_0_AMT</strong> &ndash; the total cost of the product or service. If you have more than one item then the value for this parameter should be the total of those items. Note that any value that you supply for any parameter that requires an amount should be expressed in 2 decimal places. So if the item is worth 25 dollars then it should be written as <code>25.00</code>.</p></li>
<li><strong>PAYMENTREQUEST_0_SHIPPINGAMT</strong> &ndash; the shipping cost. If the <code>NOSHIPPING</code> is set to <code>1</code> then there&rsquo;s no need to supply a value for this parameter</li>
<li><p><strong>PAYMENTREQUEST_0_ITEMAMT</strong> &ndash; the cost of the product or service. Note that if you have more than one product you can simply set this to <code>PAYMENTREQUEST_1_ITEMAMT</code>, <code>PAYMENTREQUEST_2_ITEMAMT</code> and so on. Just be sure to get the total of the values that you supplied to those parameters</p></li>
<li><p><strong>PAYMENTREQUEST_0_CURRENCYCODE</strong> &ndash; the currency in which the <code>PAYMENTREQUEST_0_AMT</code> and <code>PAYMENTREQUEST_0_ITEMAMT</code> is expressed. Here&rsquo;s a <a href="https://developer.paypal.com/docs/classic/api/currency_codes/">list of currency codes</a> that you can use. If you don&rsquo;t specify a value for this parameter the default value of <code>USD</code> will be used.</p></li>
<li><p><strong>L_PAYMENTREQUEST_0_NAME0</strong> &ndash; the name of the product or service</p></li>
<li><strong>L_PAYMENTREQUEST_0_DESC0</strong> &ndash; the description of the product or service</li>
<li><strong>L_PAYMENTREQUEST_0_AMT0</strong> &ndash; the cost of the product or service</li>
<li><strong>L_PAYMENTREQUEST_0_QTY0</strong> &ndash; the quantity of the product or service</li>
</ul>


<p>After a successfull request it returns the following response:</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that can be appended to the URL of the paypal website where the payment can be made.</li>
</ul>


<h4>GetExpressCheckoutDetails</h4>

<p>The <code>GetExpressCheckoutDetails</code> method is used for getting additional information regarding a specific express checkout transaction. This is called after a payment has successfully been made through the paypal website. This happens when paypal successfully redirects to the <code>RETURNURL</code> that we specified in the <code>SetExpressCheckout</code> method.</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that paypal has appended to the return URL. You can get the token by using <code>$_GET['token']</code>.</li>
</ul>


<p>After a successful request paypal returns a bunch of information regarding the payment. This includes information about the transaction itself and some payer information. Check out the <a href="https://developer.paypal.com/docs/classic/api/merchant/GetExpressCheckoutDetails_API_Operation_NVP/">official documentation</a> if you want to see a full list of the response objects returned from calling the <code>GetExpressCheckoutDetails</code> method.</p>

<h4>DoExpressCheckoutPayment</h4>

<p>The <code>DoExpressCheckoutPayment</code> method is used for completing the express checkout transaction. You might think that once the payment has been made its already completed but actually its not. The transaction isn&rsquo;t actually completed unless the payment is confirmed on both sides (paypal and your website).</p>

<ul>
<li><strong>TOKEN</strong> &ndash; the token that paypal has appended to the return URL. Yes this is the same as the token that you used for the <code>GetExpressCheckoutDetails</code> method.</li>
<li><strong>PAYMENTREQUEST_n_PAYMENTACTION</strong> &ndash; specifies how you want to obtain the payment. There are 3 possible values for this: <code>Authorization</code>, <code>Order</code>, and <code>Sale</code>. In most cases the value used here is <code>Sale</code>.</li>
<li><strong>PAYERID</strong> &ndash; the unique ID of the buyer. This information is also appended in the return URL, you can get it by using <code>$_GET['PayerID']</code></li>
<li><strong>PAYMENTREQUEST_0_AMT</strong> &ndash; this should be the same as the value you supplied in the <code>PAYMENTREQUEST_0_AMT</code> parameter on the <code>SetExpressCheckout</code> method.</li>
<li><strong>PAYMENTREQUEST_0_CURRENCYCODE</strong> &ndash; this should be the same as the value you supplied in the <code>PAYMENTREQUEST_0_CURRENCYCODE</code> parameter on the <code>SetExpressCheckout</code> method.</li>
</ul>


<p>After a successful request the express checkout transaction is now completed.</p>

<h3>Making API Requests</h3>

<p>Now were ready to actually make requests to the API. First include the file where the Paypal class is located. Then create a new object for the Paypal class:</p>

<p>```
&lt;?php
require &lsquo;Paypal.php&rsquo;;</p>

<p>//get credentials from DB
$credentials = $db->get(&ldquo;tbl_credentials&rdquo;, &ldquo;paypal&rdquo;);
extract($credentials);</p>

<p>$paypal = new Paypal($user, $pass, $signature, $paypal_server);</p>

<p>if(empty($<em>GET[&lsquo;TOKEN&rsquo;]) &amp;&amp; empty($</em>GET[&lsquo;PayerID&rsquo;])){</p>

<pre><code>$request_params = array(
   'RETURNURL' =&gt; $success_url,
   'CANCELURL' =&gt; $cancel_url,
   'NOSHIPPING' =&gt; '1',
   'ALLOWNOTE' =&gt; '1'
);  

$order_params = array(
   'PAYMENTREQUEST_0_AMT' =&gt; $amount,
   'PAYMENTREQUEST_0_ITEMAMT' =&gt; $amount,
   'PAYMENTREQUEST_0_CURRENCYCODE' =&gt; $currency
);

$item = array(
   'L_PAYMENTREQUEST_0_NAME0' =&gt; 'Oldies Anime Collection',
   'L_PAYMENTREQUEST_0_DESC0' =&gt; 'old anime',
   'L_PAYMENTREQUEST_0_AMT0' =&gt; $amount,
   'L_PAYMENTREQUEST_0_QTY0' =&gt; '1'
);  

//initiate express checkout transaction
$response = $paypal-&gt;request('SetExpressCheckout', $request_params + $order_params + $item);

if(is_array($response) &amp;&amp; $response['ACK'] == 'Success'){
    $token = $response['TOKEN'];
    //redirect to paypal where the buyer will make his payment
    header('Location: https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&amp;token=' . $token);
}
</code></pre>

<p>}else{</p>

<pre><code>//after a successful redirect, complete the express checkout transaction
$request_params = array(
    'TOKEN' =&gt; $_GET['token'],
    'PAYMENTACTION' =&gt; 'Sale',
    'PAYERID' =&gt; $_GET['PayerID'],
    'PAYMENTREQUEST_0_AMT' =&gt; $amount, 
    'PAYMENTREQUEST_0_CURRENCYCODE' =&gt; $currency
);

$response = $paypal-&gt;request('DoExpressCheckoutPayment', $request_params);

if(is_array($response) &amp;&amp; $response['ACK'] == 'Success'){
    //commit the transaction in your database
}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>In this tutorial you&rsquo;ve learned the basics of making API requests to the Paypal API. We have specifically used the Merchant API. But there are other Paypal APIs which we can use for different use cases.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developer.paypal.com/docs/classic/api/gs_PayPalAPIs/">Paypal Classic API Getting Started Guide</a></li>
<li><a href="https://developer.paypal.com/docs/classic/api/">Paypal Classic API Reference</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
