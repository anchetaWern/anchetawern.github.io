<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-10-03T18:35:53+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Introduction to phpsh]]></title>
    <link href="http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh/"/>
    <updated>2015-10-03T11:12:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/10/03/quick-tip-introduction-to-phpsh</id>
    <content type="html"><![CDATA[<p>In this quick-tip I&rsquo;ll introduce you to a tool called <a href="http://www.phpsh.org/">phpsh</a>. This project has been created for quite some time now. It was created at Facebook but is no longer actively being developed. But this shouldn&rsquo;t stop you from using it. It&rsquo;s a really important tool to have especially when you want to quickly test a PHP script. PHPsh is an interactive shell for PHP. It&rsquo;s features include the following:</p>

<ul>
<li>readline history</li>
<li>tab completion</li>
<li>quick access to documentation</li>
</ul>


<p>You can download it directly from <a href="http://github.com/facebook/phpsh/zipball/master">this link</a>.</p>

<p>Once you&rsquo;re done downloading phpsh, extract the zip file and navigate to the extracted folder. Then execute the following commands to install it in your system.</p>

<p><code>
python setup.py build
sudo python setup.py install
</code></p>

<p>Once that&rsquo;s done, you can now open any terminal window and execute <code>phpsh</code> to start using it.</p>

<p>To get documentation regarding a specific function, use the <code>d</code> command followed by the name of the function you want to look up. Here are a few examples.</p>

<p><code>
d echo
d array_push
d array_filter
</code></p>

<p>It will then output the documentation.</p>

<p>```</p>

<h1>echo</h1>

<p>(PHP 4, PHP 5)</p>

<p>echo &mdash; Output one or more strings</p>

<h3>Description</h3>

<p>void echo ( string $arg1 [, string $&hellip; ] )</p>

<p>Outputs all parameters.</p>

<p>echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses.</p>

<p>echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the <a href="#ini.short-open-tag">short_open_tag</a> configuration setting enabled.</p>

<p><code>I have &lt;?=$foo?&gt; foo.</code></p>

<h3>Parameters</h3>

<p>arg1</p>

<p>The parameter to output.</p>

<p>&hellip;</p>

<h3>Return Values</h3>

<p>No value is returned.</p>

<h3></h3>

<p>```</p>

<p>Aside from directly accessing the docs, you can also write and execute any PHP code that you wish to test. Here&rsquo;s a screenshot of me declaring an array and then looping through it.</p>

<p><img src="/images/posts/phpsh/php-sh.png" alt="phpsh" /></p>

<p>You can also connect to a database and perform operations on it.</p>

<p><img src="/images/posts/phpsh/db.png" alt="db" /></p>

<p>That&rsquo;s it for this quick-tip. I hope I&rsquo;ve encouraged you to use phpsh on your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Migrations in PHP with Phinx]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx/"/>
    <updated>2015-09-20T17:29:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/20/database-migrations-in-php-with-phinx</id>
    <content type="html"><![CDATA[<p>Gone are the days where you use the export functionality of your database management tool and share the SQL file to your team mates. Most PHP frameworks today already comes with a database migration tool which you can use to construct and make changes to your database and easily share them through your version control system of choice. In this tutorial I&rsquo;ll be walking you through <a href="https://phinx.org/">Phinx</a>, a database migration tool for PHP.</p>

<p>If you don&rsquo;t know what a database migration is, it&rsquo;s basically a way to version your database. Pretty much like what you do with version control systems like Git, SVN or Mercurial. It allows you to make changes to your database and easily rollback any of those changes later on if you make a mistake or if there are some changes that needs to be implemented. You can then share the changes you&rsquo;ve made to your team by committing it to your version control system and pushing it to the main repository of your project. Your team mates can then pull those changes into their own copy and run the migrations so that they have the same state of the database as you do.</p>

<h3>Installation</h3>

<p>You can install Phinx through Composer by executing the following commands on your terminal. If you have an existing project, you can navigate to your project directory and execute it from there.</p>

<p><code>
composer require robmorgan/phinx
composer install --no-dev
</code></p>

<p>Next create a <code>migrations</code> folder. This is where the database migrations are going to be stored.</p>

<p>Finally, execute the following command to initialize Phinx.</p>

<p><code>
php vendor/bin/phinx init
</code></p>

<h3>Configuration</h3>

<p>When Phinx was initialized, you might have noticed that it created a <code>phinx.yml</code> file on the root of your project. This file is the Phinx configuration. This is where you can modify the database used by Phinx for production, development and testing environments. By default Phinx uses the development environment so go ahead and modify the details for that.</p>

<p>```
paths:</p>

<pre><code>migrations: %%PHINX_CONFIG_DIR%%/migrations
</code></pre>

<p>environments:</p>

<pre><code>default_migration_table: phinxlog
default_database: development
production:
    adapter: mysql
    host: localhost
    name: production_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

development:
    adapter: mysql
    host: localhost
    name: development_db
    user: root
    pass: ''
    port: 3306
    charset: utf8

testing:
    adapter: mysql
    host: localhost
    name: testing_db
    user: root
    pass: ''
    port: 3306
    charset: utf8
</code></pre>

<p>```</p>

<h3>Usage</h3>

<p>Using Phinx mainly composed of the following workflow:</p>

<ol>
<li>Create a migration</li>
<li>Modify the migration class</li>
<li>Run the migration</li>
<li>If you need to make a change to a previous migration, roll it back, make the change to the migration class and run the migration again.</li>
</ol>


<h4>Creating Migrations</h4>

<p>To create a new migration, you use the Phinx shell script. Below is a migration for creating a users table.</p>

<p><code>
php vendor/bin/phinx create CreateUsersTable
</code></p>

<p>This creates a new file in the <code>migrations</code> directory. For me it created a file named <code>20150727004941_create_users_table.php</code>. The filename is made up of the timestamp and the machine-friendly version of the name of the migration that you provided.</p>

<p>It&rsquo;s best practice that you name your migrations based on what they do, so that you can easily look for them if you need to modify something. Each migration should only be doing one specific task so that you can easily roll them back without having to worry about side-effects. Creating a users table should add the fields that are necessary to that table. But if you&rsquo;re modifying a specific table, in most cases, you should only modify one field at a time. For example, you need to modify the data type from <code>INT</code> to <code>VARCHAR</code>. Only modify one field. But if it makes sense to change two or more fields in a single migration, then do so. For example, if you need to modify the length of the <code>username</code> and <code>password</code> fields so they can accomodate more data.</p>

<p>Going back to the migration file. Open it up if you haven&rsquo;t yet. Here&rsquo;s how it looks like by default.</p>

<p>```php
&lt;?php</p>

<p>use Phinx\Migration\AbstractMigration;</p>

<p>class CreateUsersTable extends AbstractMigration
{</p>

<pre><code>/**
 * Change Method.
 *
 * Write your reversible migrations using this method.
 *
 * More information on writing migrations is available here:
 * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class
 */
public function change()
{

}
</code></pre>

<p>}
?>
```</p>

<p>Phinx already creates a skeleton class for you s you only need to modify what&rsquo;s in the <code>change</code> function. This is where you need to add the code for modifying your database. In this case the change is to create a <code>users</code> table. Add the following inside the <code>change</code> function.</p>

<p>```php
&lt;?php
  $table = $this->table(&lsquo;users&rsquo;);
  $table->addColumn(&lsquo;username&rsquo;, &lsquo;string&rsquo;)</p>

<pre><code>  -&gt;addColumn('email', 'string')
  -&gt;addColumn('password', 'string')
  -&gt;create();
</code></pre>

<p>?>
```</p>

<p>The table is declared using the <code>table</code> function. This accepts the name of the table as its argument. The fields are then added by calling the <code>addColumn</code> method in the table. This accepts 2 required arguments: the name of the field and the data type. Finally, the <code>create</code> function is called to actually create the table. Once that&rsquo;s done, save the file.</p>

<p>Let&rsquo;s pretend we forgot to add the <code>photo</code> field, so create another migration to add that.</p>

<p><code>
php vendor/bin/phinx migrate AddPhotoFieldToUsersTable
</code></p>

<p>Add the following inside the <code>change</code> method.</p>

<p>```php</p>

<pre><code>$table = $this-&gt;table('users');
$table-&gt;addColumn('photo', 'string', array('after' =&gt; 'username'))
        -&gt;update();
</code></pre>

<p>```</p>

<p>Nothing new here, the only thing that&rsquo;s changed is the method to be called to actually execute the change that you need to make. In this case instead of <code>create</code>, the <code>update</code> method is used. This is how Phinx will know that you are trying to update the <code>users</code> table by adding the <code>photo</code> field.</p>

<h4>Running Migrations</h4>

<p>You can run all the migrations that haven&rsquo;t been run yet by using the <code>migrate</code> command.</p>

<p><code>
php vendor/bin/phinx migrate
</code></p>

<p>It would output something similar to the following when the migration is run.</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727004941 CreateUsersTable: migrating
 == 20150727004941 CreateUsersTable: migrated 0.3325s</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: migrating
 == 20150727013547 AddPhotoFieldToUsersTable: migrated 0.5018s</p>

<p>All Done. Took 0.6773s
```</p>

<p>You can now check if the table was actually created by opening your database management tool of choice. Also notice that there is a <code>phinxlog</code> table in your database. This is used by Phinx to keep track of which specific migrations were run and the start and end time for each. The migration is determined by its version, which is basically the first part of the file name for a specific migration file. On my testing, the version is <code>20150727004941</code>.</p>

<h4>Rolling Back Changes</h4>

<p>To rollback changes you can use the <code>rollback</code> command which does exactly the opposite of the <code>migrate</code> command. All it does is rollback everything that has changed on the last migrate.</p>

<p><code>
php vendor/bin/phinx rollback
</code></p>

<p>The command above outputs something similar to the following:</p>

<p>```
warning no environment specified, defaulting to: development
using adapter mysql
using database tester</p>

<p> == 20150727013547 AddPhotoFieldToUsersTable: reverting
 == 20150727013547 AddPhotoFieldToUsersTable: reverted 0.4672s</p>

<p> == 20150727004941 CreateUsersTable: reverting
 == 20150727004941 CreateUsersTable: reverted 0.1503s</p>

<p>All Done. Took 0.6175s
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to create database migrations with Phinx. Be sure to check out the <a href="http://docs.phinx.org/en/latest/">official documentation</a> if you want to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with the Filesystem with Flysystem]]></title>
    <link href="http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem/"/>
    <updated>2015-09-13T11:10:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/09/13/working-with-the-filesystem-with-flysystem</id>
    <content type="html"><![CDATA[<h3>Installation</h3>

<p>You can install Flysystem via <a href="https://getcomposer.org/">Composer</a>.</p>

<p><code>
composer require league/flysystem
</code></p>

<h3>Usage</h3>

<p>To use Flysystem, you first have to include the vendor autoload file which you got when you installed Flysystem on your working directory. After that, use the <code>Filesystem</code> class in the <code>League\Flysystem</code> namespace and the <code>Local</code> class in the <code>League\Flysystem\Adapter</code> namespace. The <code>Filesystem</code> class allows you to use the main Flysystem package. And the <code>Local</code> class allows you to use the local adapter. With Flysystem it&rsquo;s not just the local filesystem that you can work with. It has adapters for any cloud storage service that you can think of. Theres an adapter for Dropbox, FTP, AWS S3, Rackspace and even a Zip archive. So the <code>Local</code> class allows you to work with files in your local filesystem.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use League\Flysystem\Filesystem;
use League\Flysystem\Adapter\Local;
?>
```</p>

<p>Next, create a new instance of the <code>Local</code> class and pass in the path to the base path you want to work with. This allows you to create an adapter for a local path in your filesystem. In the example below, it&rsquo;s the <code>upload</code> directory located in the root of my working directory. After that, create a new instance of the <code>Filesystem</code> class and pass in the local adapter as the argument.</p>

<p><code>php
&lt;?php
$adapter = new Local(__DIR__ . '/uploads');
$filesystem = new Filesystem($adapter);
?&gt;
</code></p>

<p>Once that&rsquo;s done, you can now use Flysystem to wreack havoc on your local filesystem.</p>

<h4>Check if File Exists</h4>

<p>To check if a file exists, you can use the <code>has</code> method and then pass in the path to the file. Remember that this uses the root path that you passed in when you created the local adapter.</p>

<p><code>php
&lt;?php
$exists = $filesystem-&gt;has('path/to/image.png');
?&gt;
</code></p>

<h4>Read Files</h4>

<p>Reading files only really makes sense for text files. You can use the <code>read</code> method for this.</p>

<p><code>php
&lt;?php
$contents = $filesystem-&gt;read('path/to/file.txt');
?&gt;
</code></p>

<h4>Write to Files</h4>

<p>When writing to files, the path doesn&rsquo;t need to already exist. You can pass in a long path and it will create the individual directories that precedes the actual file.</p>

<p><code>php
&lt;?php
$contents = $filesystem-&gt;write('path/to/file.txt');
?&gt;
</code></p>

<h4>Copy Files</h4>

<p>Copying files can work with any file type and the destination doesn&rsquo;t need to be the same path where the original file exists.</p>

<p><code>php
&lt;?php
$filesystem-&gt;copy('original.txt', 'path/to/copy.txt');
?&gt;
</code></p>

<h4>Rename Files</h4>

<p>You can use the <code>rename</code> method to rename files. This also doubles as a move function because you can assign the same name to the file but have a different path.</p>

<p><code>php
&lt;?php
$filesystem-&gt;rename('original_name.txt', 'new_name.txt'); //rename
$filesystem-&gt;rename('original_name.txt', 'path/to/original_name.txt'); //move
?&gt;
</code></p>

<h4>Delete Files</h4>

<p>If you want to delete a file, use the <code>delete</code> method.</p>

<p><code>php
&lt;?php
$filesystem-&gt;delete('path/to/file.txt');
?&gt;
</code></p>

<h4>Listing Contents of a Directory</h4>

<p>To list the contents of the root directory, you need to call the <code>listContents</code> method. This returns an array containing the items in the root directory. Note that this isn&rsquo;t a recursive function. This means that only the direct children of the root directory is going to be listed.</p>

<p>```php
&lt;?php
$contents = $filesystem->listContents();
foreach ($contents as $object) {
  if ($object[&lsquo;type&rsquo;] == &lsquo;file&rsquo;) {</p>

<pre><code>echo $object['basename'] . "&lt;br&gt;";
</code></pre>

<p>  }
}
?>
```</p>

<h4>Get File Information</h4>

<p>You can use any of the functions below to get specific information about the file.</p>

<p><code>php
&lt;?php
$mimetype = $filesystem-&gt;getMimetype('path/to/photo.jpg'); // image/jpeg
$timestamp = $filesystem-&gt;getTimestamp('path/to/photo.jpg'); // 1438143700
$size = $filesystem-&gt;getSize('path/to/photo.jpg'); // 101771
?&gt;
</code></p>

<h4>Exceptions</h4>

<p>When performing an operation on the filesystem, be sure to wrap it in a <code>try..catch</code> block so that you can handle the errors accordingly. In the example below, if <code>file.txt</code> doesn&rsquo;t exists in the directory, it would return an error.</p>

<p>```php
&lt;?php
try {</p>

<pre><code>$filesystem-&gt;delete('file.txt');
</code></pre>

<p>} catch (Exception $e) {</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>In this tutorial, you&rsquo;ve learned how to ease filesystem work with the Flysystem library. You have barely scratch the surface with what&rsquo;s possible with Flysystem. Be sure to check out their <a href="http://flysystem.thephpleague.com/">official website</a> to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Twig Templating Engine in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php/"/>
    <updated>2015-08-31T21:40:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/31/using-the-twig-templating-engine-in-php</id>
    <content type="html"><![CDATA[<p>Separation of concerns is a design principle in Computer Science for separating a program into sections, each with their own responsibility. MVC, an architectural pattern used in most PHP frameworks allows developers to implement separation of concerns. One part of MVC is the View which handles the presentation layer of the application. In this tutorial I&rsquo;ll walk you through Twig, a templating engine for PHP. This allows us to separate the view from the business logic of the app.</p>

<h3>Installation</h3>

<p>Execute the following on your terminal to install Twig.</p>

<p><code>
composer require twig/twig
</code></p>

<p>In your working directory, create a <code>template</code> folder for storing the Twig templates and a <code>cache</code> folder for storing the cached templates. Twig puts the compiled version of templates into this folder so that the next time it&rsquo;s requested and there&rsquo;s no change in the template, it serves the cached version instead. Be sure to change the file permissions of the <code>cache</code> folder so that Twig can write into it. I had to do the following to have it work.</p>

<p><code>
sudo chmod -R 777 cache
</code></p>

<h3>Usage</h3>

<p>To use Twig, include the vendor autoload file.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
?&gt;
</code></p>

<p>Next create a new instance of the <code>Twig_Loader_Filesystem</code> class and supply the path to the <code>templates</code> directory as its argument. After that, create a new instance of the <code>Twig_Environment</code> class and pass in the loader and an array of options as its argument. In this case, only the <code>cache</code> item is specified. This allows you specify the path of the <code>cache</code> directory.</p>

<p>```php
&lt;?php
$loader = new Twig_Loader_Filesystem(&lsquo;templates&rsquo;);
$twig = new Twig_Environment($loader, array(</p>

<pre><code>'cache' =&gt; 'cache',
</code></pre>

<p>));
?>
```</p>

<p>To load a template, use the <code>loadTemplate</code> method on the Twig instance that you created earlier. Then pass in the path to the template that you want to use. After that, you can now output the view by calling the <code>render</code> method on the template. This accepts the data that you want to pass in to the view.</p>

<p><code>php
&lt;?php
$template = $twig-&gt;loadTemplate('index.html');
echo $template-&gt;render(array('name' =&gt; 'John Doe', 'age' =&gt; 19));
?&gt;
</code></p>

<p>On the <code>templates</code> directory, create the <code>index.html</code> file that you were referring to in the <code>loadTemplate</code> method and then add the following code.</p>

<p>```html

&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;twig&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;h1&gt;Hi {{ name }}!&lt;/h1&gt;
&lt;h2&gt;You are {{ age }} years old&lt;/h2&gt;
</code></pre>

<p></body>
</html>

```</p>

<p>From the above code, you can see that the way the individual items in the array that you passed in the <code>render</code> method is by wrapping the name of the item in double curly braces. Here&rsquo;s how it&rsquo;s going to look like when access from the browser.</p>

<p><img src="/images/posts/twig/twig-first.png" alt="twig hello world" /></p>

<p>Note that Twig is pretty forgiving when it comes to data that you pass in to the template. For example, if you do not pass in the <code>age</code>, it wouldn&rsquo;t throw an error at you.</p>

<p><code>php
&lt;?php
echo $template-&gt;render(array('name' =&gt; 'John Doe'));
?&gt;
</code></p>

<h4>Outputting Raw HTML</h4>

<p>Twig automatically escapes HTML so if you pass in HTML as data for your template, it is outputted as is.</p>

<p><code>php
&lt;?php
echo $template-&gt;render(array('name' =&gt; 'John Doe', 'html_string' =&gt; '&lt;h3&gt;hi Im an html inside a template&lt;/h3&gt;'));
?&gt;
</code></p>

<p>If you want to get the HTML interpreted by the browser, you have to use the <code>raw</code> filter.</p>

<p>```html

<body></p>

<pre><code>&lt;h1&gt;Hi {{ name }}!&lt;/h1&gt;
&lt;h2&gt;You are {{ age }} years old&lt;/h2&gt;
{{ html_string | raw }}
</code></pre>

<p></body>

```</p>

<h4>Looping through Arrays</h4>

<p>You can also load arrays for the data.</p>

<p>```php
&lt;?php
$template = $twig->loadTemplate(&lsquo;index.html&rsquo;);</p>

<p>$data = array(</p>

<pre><code>'users' =&gt; array(
    array(
        'name' =&gt; 'Yoh Asakura',
        'age' =&gt; 10
    ),
    array(
        'name' =&gt; 'Ash Ketchum',
        'age' =&gt; 14
    ),
    array(
        'name' =&gt; 'Naruto Uzumaki',
        'age' =&gt; 25
    )
)
</code></pre>

<p>);</p>

<p>echo $template->render($data);
?>
```</p>

<p>And the way you output them in your template is by using the <code>for</code> tag. Here&rsquo;s an example.</p>

<p>```html</p>

<h1>Users</h1>


<table border="1">
    <thead>
        <tr>
            <th>Name</th>
            <th>Age</th>
        </tr>
    </thead>
    <tbody>
        
        {% for user in users %}
        <tr>
            <td>{{ user.name }}</td>
            <td>{{ user.age }}</td>
        </tr>
        {% endfor %}
        
    </tbody>
</table>


<p>```</p>

<p>To use the <code>for</code> tag, assign an alias for each item in the array that you specified. In this case, the array is <code>users</code> and each item is represented by the <code>user</code> variable. Inside the <code>for</code> tag, you can then access each user field. After you have outputted all the user details, close it with the <code>endfor</code> tag.</p>

<p><img src="/images/posts/twig/array.png" alt="for" /></p>

<h4>Conditions</h4>

<p>Twig allows you to use tags such as <code>if</code>, <code>else</code>, <code>elseif</code>, and <code>if not</code> for checking for simple conditions in your templates. Here&rsquo;s an example of using the <code>if</code> tag for checking if the age of the user is greater than or equal to 14.</p>

<p>```html</p>

<h1>Users</h1>


<table border="1">
    <thead>
        <tr>
            <th>Name</th>
            <th>Age</th>
        </tr>
    </thead>
    <tbody>
        
        {% for user in users %}
            {% if user.age >= 14 %}
            <tr>
                <td>{{ user.name }}</td>
                <td>{{ user.age }}</td>
            </tr>
            {% endif %}
        {% endfor %}
        
    </tbody>
</table>


<p>```</p>

<p><img src="/images/posts/twig/if.png" alt="if" /></p>

<h4>Layouts</h4>

<p>Layouts can be used in order to avoid repitition of re-occurring elements of the page such as the header and the footer. To use layouts, you need a base template (<code>base.html</code>). This is the template that contains all the re-occurring elements of the page. This is essentially the main template in which all the other templates (child templates) inherits from. Your main template is where you usually declare the content block. This is the block that&rsquo;s going to get replaced by the content that you supply on your child template.</p>

<p>```html
&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;link rel="stylesheet" href="assets/css/style.css" /&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="content"&gt;
    
    {% block content %}{% endblock %}
    
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>From your child template (<code>child.html</code>), use the <code>extends</code> tag to let Twig know which template you want to inherit from. Below it, you use the same block that you used in your main template. In this case the name of the block is <code>content</code>. Inside the block, you put in the contents that you want to get rendered.</p>

<p><code>html

{% extends "base.html" %}
{% block content %}
   &lt;h1&gt;Hello World!&lt;/h1&gt;
{% endblock %}

</code></p>

<p>Notice that in the main template there&rsquo;s also a stylesheet. You need to create it on the <code>assets/css</code> directory. Here&rsquo;s the contents of the <code>style.css</code> file.</p>

<p>```css
body {</p>

<pre><code>background: orange;
</code></pre>

<p>}
```</p>

<p>Finally, from your PHP file, all you need to do is render the child template.</p>

<p><code>php
&lt;?php
$template = $twig-&gt;loadTemplate('child.html');
echo $template-&gt;render(array('title' =&gt; 'my page'));
?&gt;
</code></p>

<p>Here&rsquo;s how its going to look like:</p>

<p><img src="/images/posts/twig/layouts.png" alt="layouts" /></p>

<h4>Filters</h4>

<p>Twig also comes with filters. Filters as the name suggests, allows you to filter the content that you pass into it.</p>

<h5>Format</h5>

<p>If you need to perform a find and replace on a string, you can use the <code>format</code> filter. Here&rsquo;s how you can use it.</p>

<p>```php
&lt;?php
$data = array(</p>

<pre><code>'name' =&gt; 'Ami Damaru',
'age' =&gt; 110
</code></pre>

<p>);
?>
```</p>

<p>```html</p>

<p>

{{ "Hi I'm %s, I am %s years old" | format(name, age) }}

</p>


<p>```</p>

<p>As you have seen above, to use the <code>format</code> filter, simply pipe it to the string that you want to perform find and replace on. Each string that you want to replace within the string should be <code>%s</code>. So in this case, the name and age is substituted for that value. It should result in the following output:</p>

<p><code>
Hi I'm Ami Damaru, I am 110 years old
</code></p>

<h5>nl2br</h5>

<p>The <code>nl2br</code> filter allows you to replace line breaks (<code>\n</code>) in your string with <code>&lt;br /&gt;</code> tags. This is useful if you want to output a string which uses line breaks instead of <code>&lt;br /&gt;</code> tags.</p>

<p>```php
&lt;?php
$data = array(</p>

<pre><code>'string' =&gt; "The quick brown fox\n jumps over the heade\n of the lazy dog"
</code></pre>

<p>);</p>

<p>echo $template->render($data);
?>
```</p>

<p>```html</p>

<p>

    {{ string | nl2br }}
    
</p>


<p>```</p>

<h5>date and date_modify</h5>

<p>The <code>date</code> and <code>date_modify</code> filters allows you to modify the formatting of a date.</p>

<p>```php
&lt;?php
$date = array(</p>

<pre><code>'date' =&gt; '2015-03-17'
</code></pre>

<p>);</p>

<p>echo $template->render($data);
?>
```</p>

<p>```html
</p>

<p>
    {{ date | date_modify("+1 week") | date('M d, Y') }}
</p>


<p>
```</p>

<p>The code above will output.</p>

<p><code>
Aug 03, 2015
</code></p>

<h5>upper and lower</h5>

<p><code>upper</code> and <code>lower</code> filters allows you to change the individual letters in a string into uppercase or lowercase.</p>

<p><code>

{{ 'MAKE ME LOWER' | lower }}
{{ 'make me higher' | upper }}

</code></p>

<p>The output will be:</p>

<p><code>
make me lower MAKE ME HIGHER
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with Twig, a templating engine for PHP. For more information about Twig, check out the <a href="http://twig.sensiolabs.org/documentation">official docs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Staticizer]]></title>
    <link href="http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer/"/>
    <updated>2015-08-02T19:33:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/08/02/introduction-to-staticizer</id>
    <content type="html"><![CDATA[<p>Welcome to yet another promotional post on another side-project of mine. This time it&rsquo;s Staticizer, a static site generator.</p>

<h3>Yet Another Static Site Generator?</h3>

<p>No. This isn&rsquo;t unlike any static site generator out there. I created this project to create a static version for my <a href="https://github.com/anchetaWern/antares">antares project</a>. So you can use this to create a static version of an existing project. All it really does is request a URL in your local machine and create an HTML file out of it. This works best for websites that has only a few pages.</p>

<h3>How to Use</h3>

<p>First you have to update the <code>index.php</code> file and write your own code for fetching the pages in the website you want to convert to a static one.</p>

<p>Next, update the <code>config.php</code> file and change the values for the <code>BASE_URL</code>, <code>STATIC_PATH</code> and <code>JSON_PATH</code>. The <code>BASE_URL</code> is the base URL of the website you want to convert. The <code>STATIC_PATH</code> is the base directory where you want to save the generated HTML files. The <code>JSON_PATH</code> is the path to the json files inside the <code>STATIC_PATH</code> that you specified. This is optional. Only use this if you are serving json files on the original website.</p>

<p><code>php
&lt;?php
define('BASE_URL', 'http://antaresapp.dev/');
define('STATIC_PATH', 'site');
define('JSON_PATH', 'json');
?&gt;
</code></p>

<p>Note that you have to manually copy front-end assets (css, script, images) in the <code>STATIC_PATH</code>.</p>

<h4>Deployment</h4>

<p>This works best with Github pages. Just create a new Github account that directly matches the name of the website. As an example, I created a Github account and named it antaresapp. I then created a new repository named <a href="https://github.com/antaresapp/antaresapp.github.io">antaresapp.github.io</a>. This will serve as the repository that the Github page will use. Remember that you can only create a single Github page for every Github account.</p>

<p>On your static path, initialize a new Git repo and add the Github page repository as a remote.</p>

<p>Lastly, you can use this project by executing the following commands from your terminal.</p>

<p>To update the database:</p>

<p><code>
php update.php
</code></p>

<p>To generate the static HTML files and JSON files:</p>

<p><code>
php generate.php
</code></p>

<p>To push the changes to the Github repo:</p>

<p><code>
php push.php
</code></p>

<p>If you want to know more about the project, you can check it out <a href="https://github.com/anchetaWern/staticizer">here</a>.</p>
]]></content>
  </entry>
  
</feed>
