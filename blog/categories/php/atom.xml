<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-10-01T12:04:04+00:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[URL Manipulation with Purl]]></title>
    <link href="http://wern-ancheta.com/blog/2016/03/03/url-manipulation-with-purl/"/>
    <updated>2016-03-03T07:15:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/03/03/url-manipulation-with-purl</id>
    <content type="html"><![CDATA[<p>In PHP projects, there&rsquo;s often a need to construct URL&rsquo;s to be used for making requests to API&rsquo;s. Normally we would concatenate the different pieces of the URL together in order to make up a complete URL where the request is made. In this tutorial, I&rsquo;ll be talking about Purl. This library reduces the need for concatenation. With this library, you can manipulate a specific URL anyway you want. You can do things like parsing the URL so you can get it&rsquo;s individual parts such as the scheme, port, path, query parameters and even fragments. These parts can then be modified any way you want.</p>

<h3>Installation</h3>

<p>You can use <a href="https://getcomposer.org/">Composer</a> to install Purl.</p>

<p><code>
composer require jwage/purl
</code></p>

<h3>Usage</h3>

<p>To use Purl, you have to include the vendor autoload file and then use the <code>Url</code> class in the <code>Purl</code> namespace. Optionally, you can give it an alias so you only have to use it instead of the namespace + class syntax.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Purl\Url as purl;
?>
```</p>

<h4>Getting a URL</h4>

<p>To use Purl, create a new instance of it using the alias you&rsquo;ve assigned earlier and then pass in the URL that you want to manipulate. In order to get the modified URL back, call the <code>getUrl</code> method.</p>

<p><code>php
&lt;?php
$url = new purl('http://wern-ancheta.com');
echo $url-&gt;getUrl(); //http://wern-ancheta.com
?&gt;
</code></p>

<p>In the above code, the URL wasn&rsquo;t really manipulated yet so it will return the same thing that you passed.</p>

<h4>Getting Parts of the URL</h4>

<p>You can use any of the following properties to extract different parts of the URL. Note that the subdomain in this specific URL will return an empty string since there&rsquo;s no subdomain. If the URL was <code>http://blog.wern-ancheta.com</code> then the value for subdomain will be <code>blog</code>. Another thing to note is the <code>canonical</code> property. This returns everything in the URL except the scheme and the fragment. Also the <code>publicSuffix</code> is the first value, followed by the <code>registerableDomain</code>. So instead of <code>wern-ancheta.com</code>, you will see <code>com.wern-ancheta</code>. Lastly, the <code>port</code> is an empty string since it wasn&rsquo;t explicitly specified in the URL. By default, website uses port 80 and it doesn&rsquo;t need to be explicitly specified.</p>

<p>```php
&lt;?php
$url = new purl(&lsquo;<a href="http://wern-ancheta.com/some/path?query=some_query&amp;another=query#fragment">http://wern-ancheta.com/some/path?query=some_query&amp;another=query#fragment</a>&rsquo;);</p>

<p>echo $url->scheme; // http
echo $url->port; // empty string
echo $url->publicSuffix; // com
echo $url->registerableDomain; // wern-ancheta.com
echo $url->subdomain; // empty string
echo $url->canonical; // com.wern-ancheta/some/path?query=some_query&amp;another=query
echo $url->path; // /some/path
echo $url->query; // query=some_query&amp;another=query
echo $url->fragment; // fragment
?>
```</p>

<h4>Setting Parts of the URL</h4>

<p>If you want to set the different parts of the URL, you have to use the static method <code>parse</code> and then pass in the URL you want to manipulate. This allows you to chain the <code>set</code> methods. If you initialize a new instance of the <code>purl</code> class instead, you will get an error.</p>

<p>```php
&lt;?php
$url = purl::parse(&lsquo;<a href="http://wern-ancheta.com">http://wern-ancheta.com</a>&rsquo;)</p>

<pre><code>-&gt;set('scheme', 'https')
-&gt;set('port', '1122')
-&gt;set('user', 'wern')
-&gt;set('pass', 'ancheta')
-&gt;set('path', 'some/path')
-&gt;set('query', 'query1=value1&amp;query2=value2')
-&gt;set('fragment', 'my-fragment');
</code></pre>

<p>echo $url->getUrl(); // <a href="https://wern:ancheta@wern-ancheta.com:1122/some/path?query1=value1&amp;query2=value2#my-fragment">https://wern:ancheta@wern-ancheta.com:1122/some/path?query1=value1&amp;query2=value2#my-fragment</a>
?>
```</p>

<p>If you want to individually add paths to the URL, you have to initialize a new instance of the <code>purl</code> class.</p>

<p><code>php
&lt;?php
$url = new purl('http://wern-ancheta.com');
$url-&gt;path-&gt;add('my')-&gt;add('awesome')-&gt;add('page');
echo $url-&gt;getUrl(); //http://wern-ancheta.com/my/awesome/page
?&gt;
</code></p>

<p>If you need to individually set the query parameters, you can use teh <code>setData</code> method. This allows you to pass in an associative array with its key being the query and the value being the value for that query.</p>

<p>```php
&lt;?php
$url = new purl(&lsquo;<a href="http://wern-ancheta.com">http://wern-ancheta.com</a>&rsquo;);
$url->query->setData(array(</p>

<pre><code>'query1' =&gt; 'value1',
'query2' =&gt; 'value2'
</code></pre>

<p>));
echo $url->getUrl(); //<a href="http://wern-ancheta.com/?query1=value1&amp;query2=value2">http://wern-ancheta.com/?query1=value1&amp;query2=value2</a>
?>
```</p>

<p>If it&rsquo;s the other way around, and you want to extract the query parameters from a specific URL. Here&rsquo;s the way you do it.</p>

<p><code>php
&lt;?php
$url = new purl('http://wern-ancheta.com?query1=value1&amp;query2=value2');
print_r($url-&gt;query-&gt;getData()); // Array ( [query1] =&gt; value1 [query2] =&gt; value2 )
?&gt;
</code></p>

<h4>Extracting URL&rsquo;s</h4>

<p>One bonus feature of this library is that it allows you to extract URL&rsquo;s in a specific string of text. Call the static <code>extract</code> method to use this. You can then extract each individual URL by using the key.</p>

<p><code>php
&lt;?php
$str = "Hey I'm a string with url's in it http://google.com and another one http://github.com";
$urls = purl::extract($str);
echo $urls[0] . "&lt;br&gt;";
echo $urls[1];
?&gt;
</code></p>

<p>Note that each extracted URL&rsquo;s are Purl URL instances of their own. So you can actually extract or manipulate individual parts as well.</p>

<p>```php
&lt;?php
echo $urls[0]&ndash;>registerableDomain; //google.com</p>

<p>$urls[0]&ndash;>path->add(&lsquo;my&rsquo;)&ndash;>add(&lsquo;awesome&rsquo;)&ndash;>add(&lsquo;path&rsquo;);
echo $urls[0]&ndash;>getUrl(); //<a href="http://google.com/my/awesome/path">http://google.com/my/awesome/path</a>
?>
```</p>

<h3>Conclusion</h3>

<p>In this tutorial, you&rsquo;ve learned about Purl, a URL manipulation library for PHP. For more information, check out their official <a href="https://github.com/jwage/purl">Github project page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Swiftmailer]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/24/getting-started-with-swiftmailer/"/>
    <updated>2016-02-24T20:14:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/24/getting-started-with-swiftmailer</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to walk you through how to use Swift Mailer in your PHP applications. Swift Mailer, as the name suggests is a library for sending emails in PHP.</p>

<h3>Installation</h3>

<p>You can install Swiftmailer through Composer by executing the following command.</p>

<p><code>
composer require swiftmailer/swiftmailer
</code></p>

<h3>Usage</h3>

<p>To start sending emails you first have to create a new instance of the <code>Swift_SmtpTransport</code> class. This accepts the host as its first argument and the port as its second. You can then set your username and password by calling the <code>setUsername</code> and <code>setPassword</code> methods. So for example, you want to use your mandrill for sending emails, you can use the following. Just replace the username and password to that of your mandrill account.</p>

<p><code>
$transport = Swift_SmtpTransport::newInstance('smtp.mandrillapp.com', 587)
  -&gt;setUsername('your-mandrill-username')
  -&gt;setPassword('your-mandrill-password');
</code></p>

<p>Next, create a new Swift mailer instance and passing in the transport object as the argument. You can use this later on to send messages.</p>

<p><code>
$mailer = Swift_Mailer::newInstance($transport);
</code></p>

<p>You can create a new message by creating a new instance of <code>Swift_Message</code> class. From there, call the <code>setSubject</code>, <code>setBody</code>, <code>setFrom</code> and <code>setTo</code> methods to add the details of the email.</p>

<p><code>
$message = Swift_Message::newInstance()
  -&gt;setSubject('YOUR-SUBJECT')
  -&gt;setBody('BODY-OF-YOUR-MESSAGE')
  -&gt;setFrom(array('YOUR-EMAIL@HOST.COM' =&gt; 'YOUR-USER-NAME'))
  -&gt;setTo(array('EMAIL-TO@HOST.COM' =&gt; 'NAME-TO@HOST.COM'));
</code></p>

<p>Optionally, you can set an alternative body:</p>

<p><code>
$message-&gt;addPart('YOUR-ALTERNATIVE-BODY', 'text/html');
</code></p>

<p>You can also attach a file:</p>

<p><code>
$message-&gt;attach(Swift_Attachment::fromPath('/path/to/file.pdf'));
</code></p>

<p>If you want to send to multiple clients, then you can pass in additional items to the <code>setTo</code> method:</p>

<p><code>
$message-&gt;setTo(array('EMAIL-TO@HOST.COM' =&gt; 'NAME-TO@HOST.COM', 'ANOTHER-EMAIL@HOST.COM' =&gt; 'ANOTHER-NAME@HOST.COM'));
</code></p>

<p>Finally, you can send the message by calling the <code>send</code> method in the mailer instance that you have created earlier. Pass in the message as its argument.</p>

<p>```
try {</p>

<pre><code>$response = $mailer-&gt;send($message);
</code></pre>

<p>}catch (Exception $e){</p>

<pre><code>echo 'error occured while trying to send your message';
echo $e-&gt;getMessage();
</code></pre>

<p>}</p>

<p>```</p>

<p>The <code>send</code> method will return <code>1</code> as its response if the message was sent successfully. If not then it will return an error, that&rsquo;s why you need to wrap it in a <code>try catch</code> block.</p>

<p>If you&rsquo;re using Laravel, SwiftMailer is already added as a dependency by default. All you have to do is update the mail configuration file. If you&rsquo;re using another framework, you can just follow the examples here.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to use SwiftMailer on your php applications. If you want to learn more, be sure to check out the <a href="http://swiftmailer.org/docs/introduction.html">official docs</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Intervention Image Library in PHP]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/18/using-the-intervention-image-library-in-php/"/>
    <updated>2016-02-18T14:04:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/18/using-the-intervention-image-library-in-php</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how to manipulate images in PHP using the <a href="http://image.intervention.io/">Intervention Image library</a>. In the PHP applications that I write, I primarily use intervention image for resizing images into smaller one&rsquo;s. But aside from that, there are other things that this library can do.</p>

<h3>Installation and Setup</h3>

<p>To use intervention image, you need to have ImageMagick installed. In Ubuntu, you can do that by executing the following command from your terminal:</p>

<p><code>
sudo apt-get install imagemagick
</code></p>

<p>On your working directory, execute the following to install Intervention Image.</p>

<p><code>
composer require intervention/image
</code></p>

<p>This command uses Composer. If you don&rsquo;t have it already, check out the <a href="https://getcomposer.org/download/">downloads page</a> and install it on your system.</p>

<p>Create a new PHP file and name it <code>tester.php</code>. This will be the file that you&rsquo;re going to use for the rest of this tutorial.</p>

<p>To use the library, require the autoload file in the vendor directory. This allows you to include the Intervention Image library into your current file. You can then give an alias to the <code>ImageManagerStatic</code> class and use it for manipulating images.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Intervention\Image\ImageManagerStatic as Image;
?>
```</p>

<h3>Create Image Instance</h3>

<p>The first thing that you need to do when working with this library is to create an instance of the image from source. This is like saving a copy of the image into memory so that it can be easily manipulated. Any changes made to the image are only in memory until you choose to commit it to the filesystem.</p>

<p><code>php
&lt;?php
$img = Image::make('images/a.jpg');
?&gt;
</code></p>

<h3>Resizing Images</h3>

<p>You can resize images by calling the <code>resize</code> method in the image instance that you&rsquo;ve created. In the example below, the image is resized to exactly 50x50 pixels. It doesn&rsquo;t matter if the image is distorted in the process. So if you have an image which is 300x600 (where 300 is the width and 600 is the height), the height will have to get squashed. This results in a sandwich-like image.</p>

<p><code>php
&lt;?php
$img-&gt;resize(50, 50);
?&gt;
</code></p>

<p>If you don&rsquo;t want that to happen, you need to utilize aspect ratio. This allows you to supply only either the width or the height. In the example below, the width is optional and the height is 50. This resizes the image to have a height of 50 and the width can have any value as long as the aspect ratio is the same.</p>

<p>```php
&lt;?php
$img->resize(null, 50, function ($constraint) {</p>

<pre><code>$constraint-&gt;aspectRatio();
</code></pre>

<p>});
?>
```</p>

<h3>Adjusting Brightness, Contrast and Opacity</h3>

<p>To adjust the brightness of an image, you can use values between 100 and -100. 100 being the brightess and -100 being the darkest. So you&rsquo;ll only really see a white image if you supply 100 as the value and a black image if the value is -100. Positive values are used to bring the brightness up and negative to bring it down. In the example below, the brightness is adjusted to 25% of the default brightness of the image.</p>

<p><code>php
&lt;?php
$img-&gt;brightness(25);
?&gt;
</code></p>

<p>To adjust the contrast, yup you guessed it right!, use the the <code>contrast</code> method. Just like the <code>brightness</code> method this accepts values between 100 and -100.</p>

<p><code>php
&lt;?php
$img-&gt;contrast(25);
?&gt;
</code></p>

<p>To adjust the opacity, supply a value between 0 and 100 to the <code>opacity</code> method. With <code>100</code> being the full opacity and <code>0</code> being the full transparency. Note that adjusting the opacity of an image takes a bit of time. On my testing, it took a bit longer for it to finish than the other operations I&rsquo;ve used so far.</p>

<p><code>php
&lt;?php
$img-&gt;opacity(25);
?&gt;
</code></p>

<h3>Cropping</h3>

<p>Cropping images can be done by calling the <code>crop</code> method. This accepts 2 required arguments and 2 optional. The first and second arguments are the width and height of the area to be cropped. And the optional third and fourth arguments are the X and Y axis of the starting points of the crop area. If you do not supply those values, Intervention Image is going to assume that you want to crop at the very center of the image moving outward. That&rsquo;s what the example below does.</p>

<p><code>
&lt;?php
$img-&gt;crop(100, 100);
?&gt;
</code></p>

<p>If you&rsquo;re planning to implement a cropping functionality in your PHP application, Intervention Image can&rsquo;t do it alone. It has to have a client-side component that allows the user to visually crop the image. For that there&rsquo;s a jQuery plugin called <a href="http://fengyuanchen.github.io/cropper/">cropper</a>. I haven&rsquo;t personally used it but the demo shows that the X and Y coordinates and the width and height can be determined using this library. So all you have to do is pass in those values to the server side and let Intervention Image do its thing.</p>

<h3>Saving Images</h3>

<p>Finally, you can commit the changes that you&rsquo;ve made to the filesystem by using the <code>save</code> method. You don&rsquo;t need to supply any arguments to it if you want to replace the original image. If you do not want that, then you can supply the path to the file where you want to save it. If you have a keen eye, you might have noticed that the original image was a <code>.jpg</code> image, and now its being saved as a <code>.png</code> image. Well that&rsquo;s acceptable, Intervention Image automatically converts the image type for you. Lastly, the quality of the image can also be modified by passing in a second argument which has a value between 0 and 100. 100 being the same quality of the original image. In the example below, the quality is adjusted to 50% of the original one.</p>

<p><code>php
&lt;?php
$img-&gt;save(); //replace the original image
$img-&gt;save('images/b.png'); //save to another file
$img-&gt;save('images/b.png', 50); //adjust quality of image
?&gt;
</code></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to manipulate images in your PHP applications using the Intervention Image. As always, you have barely scratched the surface with this tutorial. There&rsquo;s much more things that you can do with this library. I recommend you to check out the <a href="http://image.intervention.io/">official website</a> to learn more about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validating Data with Respect Validation]]></title>
    <link href="http://wern-ancheta.com/blog/2016/02/13/validating-data-with-respect-validation/"/>
    <updated>2016-02-13T07:44:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/02/13/validating-data-with-respect-validation</id>
    <content type="html"><![CDATA[<p>Data validation is an absolute need for every PHP application. This protects your app from security breaches caused by malicious user input. Good thing there&rsquo;s not a shortage of data validation libraries available for PHP. And most frameworks (if not all) have it as part of their core functionalities. In this tutorial, I&rsquo;ll be walking you through using the Respect Validation library for PHP. It&rsquo;s one of the most complete validation libraries that I&rsquo;ve seen. It can validate a whole range of data types such as numbers, strings, arrays, objects, date, banking data, phone numbers, emails and others.</p>

<h3>Installation</h3>

<p>You can install the library through Composer.</p>

<p><code>
composer require respect/validation
</code></p>

<p>Once that&rsquo;s done, include the vendor autoload file and give an alias to the Validation class. This allows you to use the alias instead of the actual class name.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>use Respect\Validation\Validator as v;
?>
```</p>

<h3>Validating Data</h3>

<p>Now let&rsquo;s take a look at some of the most common validators that you might want to use. All of the validators returns a boolean value, so if the data is valid it returns <code>true</code>, and if it&rsquo;s not then it returns <code>false</code>. To validate a data, you first call the validator. Some validators allows you to specify the format in which the data should be and some does not. In cases that it allows you, simply pass in the format as the argument for that validator. Next, call the <code>validate</code> method and pass in the data that you want to validate.</p>

<h4>Dates</h4>

<p>To validate dates, you use the <code>date</code> validator. This accepts the date format as its argument. If you do not specify one, the default date format of <code>Y-m-d</code> is used.</p>

<p><code>php
&lt;?php
$is_datevalid = v::date()-&gt;validate('2015-02-30'); //true
$is_datevalid = v::date('m-d-Y')-&gt;validate('2015-02-30'); //false
?&gt;
</code></p>

<p>If you haven&rsquo;t noticed yet, one thing to note about date validation, is that it returns <code>true</code> even for a day that shouldn&rsquo;t exist in a specific month. In the example above, the month february shouldn&rsquo;t have a 30th day. If you use 32 or 33 for the day, it works fine since most of months have only 31 days.</p>

<h4>Country Code</h4>

<p>Validating country codes can be done by using the <code>countryCode</code> validator. On my testing, its only able to validate 2-character ISO country codes.</p>

<p><code>php
&lt;?php
$is_validcountrycode = v::countryCode()-&gt;validate('PH'); //true
$is_validcountrycode = v::countryCode()-&gt;validate('PHL'); //false
?&gt;
</code></p>

<h4>Between</h4>

<p>The <code>between</code> validator allows you to validate if a specific value is between 2 values. It can validate strings, numbers and dates.</p>

<p>```php
&lt;?php
$is_between = v::string()&ndash;>between(&lsquo;a&rsquo;, &lsquo;z&rsquo;)&ndash;>validate(&rsquo;d'); //true
$is_between = v::string()&ndash;>between(&lsquo;a&rsquo;, &lsquo;c&rsquo;)&ndash;>validate(&rsquo;d'); //false</p>

<p>$is_between = v::int()&ndash;>between(50, 90)&ndash;>validate(20); //false
$is_between = v::int()&ndash;>between(30, 60)&ndash;>validate(31); //true</p>

<p>$is_between = v::date()&ndash;>between(&lsquo;2015-03-25&rsquo;, &lsquo;2015-04-30&rsquo;)&ndash;>validate(&lsquo;2015-03-28&rsquo;); //true
$is_between = v::date()&ndash;>between(&lsquo;2015-07-12&rsquo;, &lsquo;2015-10-30&rsquo;)&ndash;>validate(&lsquo;2015-03-01&rsquo;); //false
?>
```</p>

<h4>Length</h4>

<p>To validate if a string or array matches a specific length between a minimum and a maximum value, you can use the <code>length</code> validator. You can specify either of the minimum and maximum values if you don&rsquo;t want to be specific.</p>

<p>```php
&lt;?php
$is_length = v::string()&ndash;>length(10, 20)&ndash;>validate(&lsquo;my-username&rsquo;); //true
$is_length = v::string()&ndash;>length(10, 20)&ndash;>validate(&lsquo;my&rsquo;); //false</p>

<p>$is_length = v::arr()&ndash;>length(5, null)&ndash;>validate(array(&lsquo;abc&rsquo;, &lsquo;def&rsquo;, &lsquo;ghi&rsquo;)); //false
$is_length = v::arr()&ndash;>length(null, 3)&ndash;>validate(array(&lsquo;abc&rsquo;, &lsquo;def&rsquo;, &lsquo;ghi&rsquo;)); //true
?>
```</p>

<h4>Min and Max</h4>

<p>The <code>min</code> and <code>max</code> validators allows you to check if an integer or date value is within the minimum or maximum value that you specify.</p>

<p>```php
&lt;?php
$is_min = v::int()&ndash;>min(100)&ndash;>validate(25); //false
$is_min = v::int()&ndash;>min(1)&ndash;>validate(2); //true</p>

<p>$is_max = v::date()&ndash;>max(&lsquo;2015-07-27&rsquo;)&ndash;>validate(&lsquo;2015-03-12&rsquo;); //true
$is_max = v::date()&ndash;>max(&lsquo;2015-06-13&rsquo;)&ndash;>validate(&lsquo;2015-08-29&rsquo;); //false
?>
```</p>

<h4>Numbers</h4>

<p>You can validate number values using the <code>numeric</code>, <code>digit</code>, and <code>int</code> validators. <code>numeric</code> is the generic number validator, it can accept integer, double or float values and even negative numbers. <code>digit</code> accepts whitespaces between integer values but it doesn&rsquo;t accept float or double values. <code>int</code> accepts only integer values.</p>

<p>```php
&lt;?php
$is_numeric = v::numeric()&ndash;>validate(&lsquo;55&rsquo;); //true
$is_numeric = v::numeric()&ndash;>validate(&lsquo;99.9&rsquo;); //true</p>

<p>$is_numeric = v::digit()&ndash;>validate(&lsquo;45 3 330&rsquo;); //true
$is_numeric = v::digit()&ndash;>validate(&lsquo;7.9&rsquo;); //false</p>

<p>$is_int = v::int()&ndash;>validate(&lsquo;8.2&rsquo;); //false
$is_int = v::int()&ndash;>validate(&lsquo;709&rsquo;); //true
?>
```</p>

<h4>Domain</h4>

<p>Domain names can be validated using the <code>domain</code> validator.</p>

<p><code>php
&lt;?php
$is_domain = v::domain()-&gt;validate('github.com'); //true
$is_domain = v::domain()-&gt;validate('google.com.ph'); //true
?&gt;
</code></p>

<h4>Bank</h4>

<p>Bank information can also be validated. Currently, you can only validate bank accounts and bank identifier codes for Germany. And you have to install the bav Composer package to do that:</p>

<p><code>
composer require malkusch/bav
</code></p>

<p>Here are a few examples:</p>

<p>```php
&lt;?php
$is_bankaccount = v::bankAccount(&ldquo;de&rdquo;, &ldquo;70169464&rdquo;)&ndash;>validate(&ldquo;1112&rdquo;); //true
$is_bankaccount = v::bankAccount(&ldquo;de&rdquo;, &ldquo;70169464&rdquo;)&ndash;>validate(&ldquo;1234&rdquo;); //false</p>

<p>$is_bankaccount = v::bic(&ldquo;de&rdquo;)&ndash;>validate(&ldquo;VZVDDED1XXX&rdquo;); //true
$is_bankaccount = v::bic(&ldquo;de&rdquo;)&ndash;>validate(&ldquo;VZVDDED1&rdquo;); //true
?>
```</p>

<h4>Alpha</h4>

<p>If you want to restrict a string to only have letters, you can use the <code>apha</code> validator.</p>

<p><code>php
&lt;?php
$is_alpha = v::alpha()-&gt;validate('abc 123'); //false
$is_alpha = v::alpha()-&gt;validate('abc def'); //true
?&gt;
</code></p>

<h4>Alnum</h4>

<p>You can validate alphanumeric characters (numbers and letters) using the <code>alnum</code> validator. You can group it</p>

<p><code>php
&lt;?php
$is_alnum = v::alnum()-&gt;validate('batman 123'); //true
$is_alnum = v::alnum()-&gt;lowercase()-&gt;validate('batman 123'); //true
$is_alnum = v::alnum()-&gt;uppercase()-&gt;validate('batman 123'); //false
$is_alnum = v::alnum()-&gt;notEmpty()-&gt;validate('batman 123'); //true
?&gt;
</code></p>

<h4>Email</h4>

<p>Email addresses are validated using the <code>email</code> validator.</p>

<p><code>php
&lt;?php
$is_email = v::email()-&gt;validate('not'); //false
$is_email = v::email()-&gt;validate('email@gmail.com'); //true
?&gt;
</code></p>

<h4>Phone</h4>

<p>Phone numbers that have 7, 10 or 11 digits in them can be validated.</p>

<p><code>php
&lt;?php
$is_phone = v::phone()-&gt;validate('(072) 242 8084'); //true
$is_phone = v::phone()-&gt;validate('+639111111111'); //true
?&gt;
</code></p>

<h4>Required</h4>

<p>To set a specific data as required, you use the <code>notEmpty</code> validator.</p>

<p><code>php
&lt;?php
$is_required = v::isNotEmpty()-&gt;validate(''); //false
$is_required = v::isNotEmpty()-&gt;validate('im not empty'); //true
?&gt;
</code></p>

<h4>Chaining</h4>

<p>As you have seen earlier, you can combine different validators together. Here are a few examples:</p>

<p><code>php
&lt;?php
$is_alnum = v::alnum()-&gt;notEmpty()-&gt;validate('superman 456'); //true
$is_alnum = v::email()-&gt;notEmpty()-&gt;lowercase()-&gt;validate('superman456@gmail.com'); //true
?&gt;
</code></p>

<h4>Validating an Array of Data</h4>

<p>To validate an array of data or a form, you need to setup the rules for each field and add them in an array. You then loop through each item in the array and validate them one by one. In the example below, the <code>check</code> method is used instead of the <code>validate</code> method. This is because the <code>validate</code> method only returns a boolean value and not the actual error message. While the <code>check</code> method returns an exception which you can then get by calling the <code>getMainMessage</code> method in the exception that was returned. Lastly, use <code>break</code> to break the execution of the <code>foreach</code> loop.</p>

<p>```php
&lt;?php
$rules = array(</p>

<pre><code>'username' =&gt; v::string()-&gt;lowercase()-&gt;length(10, 20)-&gt;notEmpty()-&gt;setName('username'),
'email' =&gt; v::email()-&gt;notEmpty()-&gt;setName('email'),
'phone_number' =&gt; v::phone()-&gt;notEmpty()-&gt;setName('phone number')
</code></pre>

<p>);</p>

<p>$data = array(</p>

<pre><code>'username' =&gt; 'wernancheta', 
'email' =&gt; 'myemail@gmail.com',
'phone_number' =&gt; '111'
</code></pre>

<p>);</p>

<p>foreach($data as $key => $value){</p>

<pre><code>try{
    $rules[$key]-&gt;check($value);
} catch (\InvalidArgumentException $e) {
    echo $e-&gt;getMainMessage();  
    break;  
}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned how to use the Respect Validation library for PHP. Be sure to check out the <a href="http://respect.li/Validation">official docs</a> if you want to learn more. If you&rsquo;re using Laravel, you might want to check out this article on Sitepoint: <a href="http://www.sitepoint.com/validating-your-data-with-respect-validation/">Validating your data with Respect Validation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Fake Data in PHP with Faker]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker/"/>
    <updated>2016-01-28T07:13:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/28/generating-fake-data-in-php-with-faker</id>
    <content type="html"><![CDATA[<p>In the good old days, I often test PHP applications by accessing it directly from the browser and input the data in the forms. Today, with the explosion of <a href="https://github.com/ziadoz/awesome-php">awesome PHP libraries</a> you can now generate most kinds of data by using code alone. The data can then be directly inserted into the database. This reduces the need to input data directly into the app. In this tutorial, I&rsquo;ll be walking you through <a href="https://github.com/fzaninotto/Faker">Faker</a>, a PHP library that generates fake data for you.</p>

<h3>Installation</h3>

<p>You can install Faker by executing the following command. Note that this requires you to have <a href="https://getcomposer.org/">Composer</a> installed.</p>

<p><code>
composer require fzaninotto/faker
</code></p>

<h3>Concepts</h3>

<p>Here are a few concepts that you need to remember before moving on.</p>

<ul>
<li><strong>generators</strong> &ndash; responsible for generating data.</li>
<li><strong>providers</strong> &ndash; the data source for generators. Generators can&rsquo;t really stand by themselves. Providers really shine on the localization feature of Faker. Real places, phone numbers in countries can be generated by Faker through the use of providers.</li>
<li><strong>formatters</strong> &ndash; these are the properties that you can access from a specific generator. Examples include name, city, address, and phoneNumber.</li>
</ul>


<h3>Usage</h3>

<p>To use Faker from your file, you need to include the vendor autoload file and create a new Faker instance.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$faker = Faker\Factory::create();
?>
```</p>

<h4>Localization</h4>

<p>Since Faker is an open-source project that anyone can contribute to, lots of localized providers has already been added. You can take advantage of this by passing in the locale when you create a new Faker instance. For example, if you live in the Philippines:</p>

<p><code>php
&lt;?php
$faker = Faker\Factory::create('en_PH');
?&gt;
</code></p>

<p>You can then generate an address in the Philippines by using the <code>address</code> formatter. Note that it&rsquo;s only down to the city level. This means that the street and barangay are using the default providers.</p>

<p><code>php
&lt;?php
echo $faker-&gt;address;
?&gt;
</code></p>

<p>Note that each provider doesn&rsquo;t have generators for every possible formatter. For example, the <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider/en_PH">Philippine provider</a> has only generators for the Address and PhoneNumber. This means that you can only have localized values for those. All the other formatters will utilize the default ones provided by Faker.
For a list of providers, check out <a href="https://github.com/fzaninotto/Faker/tree/master/src/Faker/Provider">this page</a> in their Github repo.</p>

<h4>Formatters</h4>

<p>Here are the formatters that I commonly use in my projects.</p>

<p>```php
&lt;?php
//person
$faker->name;
$faker->firstName(&lsquo;male&rsquo;);
$faker->lastName;</p>

<p>//address
$faker->address;
$faker->streetName;
$faker->streetAddress;
$faker->postCode;
$faker->address;
$faker->country;</p>

<p>//company
$faker->company;</p>

<p>//date and time
$faker->year;
$faker->month; //number representation of a month
$faker->monthName;
$faker->timezone; //valid php timezone (<a href="http://php.net/manual/en/timezones.php">http://php.net/manual/en/timezones.php</a>)
$faker->time; //string time
$faker->dateTime; //datetime object
$faker->unixTime; //unix timestamp</p>

<p>//internet
$faker->email;
$faker->userName;
$faker->password;</p>

<p>//payment
$faker->creditCardType;
$faker->creditCardNumber;</p>

<p>//images
$faker->imageUrl(50, 60); //where width=50 and height=60
?>
```</p>

<h4>Creating New Providers</h4>

<p>If you want to create a provider for your own project, you can easily extend Faker. For example, if you want to generate random pokemon names. The first thing that you need to do is to declare the namespace in which the class belongs. Next, declare a new class and have it extend the faker provider base class. Inside the class, create an array of Pokemon names. Create a new function and call it <code>pokemon</code>, this is the function that will be called later on to generate a random pokemon name. To pick a random item from the array you created, use the <code>randomElement</code> function and then pass in the array which you want to use as the data source.</p>

<p>```php
&lt;?php
namespace Faker\Provider;</p>

<p>class Pokemon extends \Faker\Provider\Base {</p>

<p>  protected static $pokemon = array(</p>

<pre><code>'Pikachu',
'Bulbasaur',
'Cubone',
'Charizard',
'Marowak',
'Gastly',
'Alakazam',
'Arcanine',
'Vaporeon',
'Flareon',
'Venusaur',
'Wartortle'
</code></pre>

<p>  );</p>

<p>  public function pokemon(){</p>

<pre><code>return static::randomElement(static::$pokemon);
</code></pre>

<p>  }
}
?>
```</p>

<p>Save the file and name it <code>Pokemon.php</code>. You can save it any where in your project as long as you can easily reference it from your main file.</p>

<p>On your main file, include the vendor autoload together with the file that you&rsquo;ve just created.</p>

<p><code>php
&lt;?php
require_once 'vendor/autoload.php';
require_once 'Pokemon.php';
?&gt;
</code></p>

<p>Create a new faker generator. This is a bare bones generator with no providers assigned to it. So if you use <code>$faker-&gt;name</code>, all you get is an error.</p>

<p><code>php
&lt;?php
$faker = new Faker\Generator();
?&gt;
</code></p>

<p>If you want to use the default providers, you can include them by calling the <code>addProvider</code> method and passing in a new instance of the provider that you want to include.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\en_US\Person($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Address($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\PhoneNumber($faker));
$faker-&gt;addProvider(new Faker\Provider\en_US\Company($faker));
$faker-&gt;addProvider(new Faker\Provider\Lorem($faker));
$faker-&gt;addProvider(new Faker\Provider\Internet($faker));
?&gt;
</code></p>

<p>To add the new Pokemon provider.</p>

<p><code>php
&lt;?php
$faker-&gt;addProvider(new Faker\Provider\Pokemon($faker));
?&gt;
</code></p>

<p>Once that&rsquo;s done, you can now call the new <code>pokemon</code> formatter.</p>

<p><code>
&lt;?php
$faker-&gt;pokemon; //marowak
?&gt;
</code></p>

<h4>Integration with Your PHP Application</h4>

<p>Most PHP frameworks today already comes with a database seeding feature. If you&rsquo;re using Laravel, it has a database <a href="http://laravel.com/docs/5.0/migrations">migration and seeding functionality</a>. You can simply install Faker into your project, generate a new seeder and then use Faker inside the seeder. This allows you to seed your database with Fake data in a single command by using <a href="http://laravel.com/docs/5.0/artisan">Artisan CLI</a>. If your framework doesn&rsquo;t include a seeding feature, you can use Phinx, a database-migration tool for PHP. This tool also allows you to <a href="http://docs.phinx.org/en/latest/seeding.html">create seeders for your database</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial, you&rsquo;ve learned how to work with the Faker library to generate fake and random data for testing your PHP applications. Check out the <a href="https://github.com/fzaninotto/Faker">official github page</a> for more information regarding its usage.</p>
]]></content>
  </entry>
  
</feed>
