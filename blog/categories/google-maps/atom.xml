<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: google-maps | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/google-maps/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-12-18T14:47:36+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spatial search with Apache Solr and Google Maps]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps/"/>
    <updated>2013-07-03T21:33:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/07/03/spatial-search-with-apache-solr-and-google-maps</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how to setup spatial search in Apache Solr then were going to create an application which uses Spatial searching with the use of Google Maps.</p>

<!--More-->


<h2>What is Spatial Searching?</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Geomatics">Wikipedia</a>:</p>

<p><blockquote><p>Geospatial technology or geomatics engineering is the discipline of gathering, storing, processing, and delivering geographic information, or spatially referenced information.</p></blockquote></p>

<p>For the purposes of this tutorial were going to use Spatial search to find the locations which are near the place that we specify.</p>

<h2>Configure schema.xml File</h2>

<p>First you need to configure the <code>schema.xml</code> to include a special field type called location. This field type is specifically used for geospatial searching. Depending on the Solr version that you&rsquo;re running on your machine it may or may not already be included on the default <code>schema.xml</code> file. But in case its not already included, here&rsquo;s what you have to add:</p>

<p><code>xml
&lt;fieldType name="location" class="solr.LatLonType" subFieldType="tdouble"/&gt;
</code></p>

<p>Then you can create a dynamic field that would use that specific field type by simply supplying the value for the <code>type</code> attribute to be <code>location</code>.</p>

<p><code>
&lt;dynamicField name="locm_*" type="location" indexed="true"  stored="true" multiValued="true"/&gt;
</code></p>

<p>After that you can now declare fields which will use the dynamic field:</p>

<p><code>
&lt;field name="locm_places"&gt;12.3456,-987.65&lt;/field&gt;
</code></p>

<p>As you can see from the example above, you can use dynamic fields by using the its name as the prefix for any field. In this case the prefix that we used is <code>locm_</code>. On the dynamic field declaration earlier we used the star <code>*</code> to tell to Solr that any field which uses the strings before the star will be using the attributes for this dynamic field.</p>

<h2>Geocoding</h2>

<p>We need actual coordinates as our data-source for the project that were going to build later on so were going to use the Google Geocoding API to convert places into coordinates. I&rsquo;m just going to use some places in my town as an example:</p>

<p>```php
&lt;?php
$places = array(</p>

<pre><code>'San Fernando (La Union) Fire Station, San Fernando City, Region I, Philippines',
'San Fernando (La Union) PNR',
'Catbangen Central School, Gualberto Street, San Fernando City, Philippines',
'Don Mariano Marcos Memorial State University, San Fernando City, Region I, Philippines',
'TESDA Regional Training Center, San Fernando City, Region I, Philippines',
'Lorma Colleges, San Fernando City, Philippines',
'marcos building san fernando la union',
'CICOSAT Medical Hospital, MacArthur Highway, San Fernando City, Region I, Philippines',
'Gifted Learning Center, Gov. Nisce Street, San Fernando City, Region I, Philippines',
'Union Christian College, San Fernando City, Region I, Philippines',
'High Altitude Discotheque, Aguila Road, San Fernando City, Region I, Philippines',
'Bethany Hospital, San Fernando City, Region I, Philippines',
'sea and sky college san fernando la union',
'Chowking, Gov. Luna Street, San Fernando City, Region I, Philippines',
'saint williams cathedral san fernando la union',
'ilocanos norte community school',
'zaragosa elementary school',
'bacnotan national highschool',
'busel-busel elementary school',
'luna public cemetery',
'paratong elementary school'
</code></pre>

<p>);
?>
```</p>

<p>If you want you can also use places in your town. Just make sure you check it with the Google Geocoding API first so that you know that it actually returns something. You can just paste the following URL in your browser&rsquo;s address bar and replace <code>SOME_PLACE_THAT_YOU_KNOW</code> with an actual place that you know, well-known and highly accessible places in your town is a great choice since there will be a greater chance that its already been geocoded.</p>

<p><code>
http://maps.googleapis.com/maps/api/geocode/json?address=SOME_PLACE_THAT_YOU_KNOW&amp;sensor=false
</code></p>

<p><blockquote><p>It&rsquo;s important that you set the sensor to false since were not actually using a device with a location sensor (GPS locator) in this application.</p></blockquote></p>

<p>Next we use the Google Geocoding API to convert the places that we specified earlier into a coordinate (latitude and longitude). Here were simply extracting the data returned from the Google Geocoding API for each of the places then storing it in a variable called <code>$data</code>. Then we convert it back to a JSON string using the <code>json_encode()</code> method.</p>

<p><blockquote><p>Id is a required attribute for documents indexed in Solr so we have to generate a unique ID for each of the places that were going to add. Also remember to use dynamic fields that are already available from the schema.xml file in Solr. In this case were using the dynamic field ss<em>* which has a data type of string to store the name of the place, and the dynamic field locm</em>* to store the coordinates of the place.</p></blockquote></p>

<p>```
&lt;?php
$url = &lsquo;<a href="http://maps.googleapis.com/maps/api/geocode/json?address=place&amp;sensor=false">http://maps.googleapis.com/maps/api/geocode/json?address=place&amp;sensor=false</a>&rsquo;;</p>

<p>$data = array();
$id_prefix = &lsquo;SUPER&rsquo;; //it&rsquo;s a good idea to prefix your Solr ID&rsquo;s just to make sure it won&rsquo;t have the same id as something that already exists</p>

<p>foreach($places as $i => $place){</p>

<pre><code>$request_url = str_replace('place', urlencode($place) , $url); //replace the place string in the url with the urlencoded address
$response = file_get_contents($request_url); //make the actual request to the google geocoding api
$results = json_decode($response); //google geocoding api returns a JSON string so we have to use json_decode() to convert it to an array

$data[] = array(
    'id' =&gt; $id_prefix . $i,
    'ss_place' =&gt; $results-&gt;results[0]-&gt;address_components[0]-&gt;short_name,
    'locm_lat' =&gt; $results-&gt;results[0]-&gt;geometry-&gt;location-&gt;lat . ',' . $results-&gt;results[0]-&gt;geometry-&gt;location-&gt;lng
);
</code></pre>

<p>}</p>

<p>$doc = json_encode($data); //convert the data to a json string
?>
```</p>

<p>Next make the request to the Solr server to update the index using <code>curl</code>:</p>

<p>```
&lt;?php
$solr_update_url = &lsquo;<a href="http://localhost:8080/solr/update/json">http://localhost:8080/solr/update/json</a>&rsquo;; //the url for updating the solr index using a json document
$solr_commit_url = &lsquo;<a href="http://localhost:8080/solr/update?commit=true">http://localhost:8080/solr/update?commit=true</a>&rsquo;; //the url for commiting the updates</p>

<p>$curl = curl_init();</p>

<p>curl_setopt_array($curl, array(</p>

<pre><code>CURLOPT_RETURNTRANSFER =&gt; 1, //specify that we want to return the response so we can store it in a variable
CURLOPT_HTTPHEADER =&gt; array("Content-type:application/json"), //header type
CURLOPT_URL =&gt; $solr_update_url,
CURLOPT_POST =&gt; 1, //specify that we want to post a data
CURLOPT_POSTFIELDS =&gt; $doc, //the data that we want to post
</code></pre>

<p>));</p>

<p>$update_response = curl_exec($curl);
curl_close($curl);</p>

<p>//commit the changes to SOLR
$curl = curl_init();
curl_setopt_array($curl, array(</p>

<pre><code>CURLOPT_URL =&gt; $solr_commit_url
</code></pre>

<p>));</p>

<p>$commit_response = curl_exec($curl);
curl_close($curl);
?>
```</p>

<h2>Building the Application</h2>

<p>Now for the fun part, let&rsquo;s start building the application. You&rsquo;re going to need to download and link up the following resources if you want to follow along:</p>

<ul>
<li>jQuery</li>
<li>jQuery UI (Use the custom builder to only include the dependencies of jQuery UI slider and the Slider itself)</li>
<li>Google Maps API Key (you&rsquo;re going to need a Google Account, just access the <a href="http://code.google.com/apis/console">Google Console</a> and activate the Google Maps API)</li>
</ul>


<p>The application that were going to build is simple, were just going to need a text field in which the user will input the base location, then a slider to adjust the distance. The markers that points out the nearby places which matches the current distance will automatically be updated once the user moves the slider.</p>

<p>```html
<link rel="stylesheet" href="jquery-ui/css/ui-lightness/jquery-ui-1.10.3.custom.min.css">
<link rel="stylesheet" href="style.css"></p>

<script type="text/javascript"
  src="http://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&sensor=false&libraries=places">
</script>


<p><body></p>

<pre><code>&lt;p&gt;
  &lt;label for="location"&gt;Location:&lt;/label&gt; 
  &lt;input type="text" id="location"/&gt;     
&lt;/p&gt;     
&lt;div id="slider"&gt;&lt;/div&gt;
&lt;div id="map-canvas"&gt;&lt;/div&gt;&lt;!--the container of the map--&gt;
</code></pre>

<p></body></p>

<script src="jquery.js"></script>


<script src="jquery-ui/js/jquery-ui-1.10.3.custom.min.js"></script>


<script src="script.js"></script>


<p>```</p>

<p>Then on the <code>style.css</code> file sprinkle some css that will make the presentation slightly:</p>

<p>```css
html {
  height: 100%;
}</p>

<p>body {
  height: 100%;
  margin: 0;
  padding: 0;
}</p>

<h1>map-canvas {</h1>

<p>  height: 90%;
}</p>

<h1>slider {</h1>

<p>  width: 200px;
}
```</p>

<p>Then on the <code>script.js</code> file add the code that will set the default map options. Were just going to make everything global so we can access them from anywhere.</p>

<p>```javascript
var loc; //this will store information about the current base location selected by the user
var markers_array = []; //this will store an array of the markers that were created</p>

<p>//set the map options
var map_options = {</p>

<pre><code>center: new google.maps.LatLng(16.61096000671, 120.31346130371),
zoom: 17, //set zoom level to 17 
mapTypeId: google.maps.MapTypeId.ROADMAP //set map type to road map
</code></pre>

<p>};</p>

<p>//layout the map in the page
var map = new google.maps.Map(document.getElementById(&ldquo;map-canvas&rdquo;), map_options);</p>

<p>var homeLatlng = new google.maps.LatLng(18.35827827454, 121.63744354248); //set the base coordinate</p>

<p>//set the marker for the base coordinate
var homeMarker = new google.maps.Marker({</p>

<pre><code>position: homeLatlng,
map: map,
draggable: false
</code></pre>

<p>});</p>

<p>//get the text field which the user will use to search for a base location
var input = document.getElementById(&lsquo;location&rsquo;);
var autocomplete = new google.maps.places.Autocomplete(input); //google maps autocomplete</p>

<p>autocomplete.bindTo(&lsquo;bounds&rsquo;, map); //bind the selected place in the autocomplete text field to the map</p>

<p>/<em>
 executed when a place is selected from the search bar
 this will automatically adjust the map settings to display the place that was entered in the text field
</em>/
google.maps.event.addListener(autocomplete, &lsquo;place_changed&rsquo;, function(){</p>

<pre><code>var place = autocomplete.getPlace();

//if the selected location has a geometry then show it on the map
if(place.geometry.viewport){
  map.fitBounds(place.geometry.viewport); //automatically adjust the display on the viewport
}else{
  map.setCenter(place.geometry.location); //if the location doesn't have a geometry, use the location
  map.setZoom(17); //set the zoom level to 17
}

homeMarker.setMap(map); //place the marker in the map
homeMarker.setPosition(place.geometry.location); //set the position of the marker based on the selected location


//update the global variable which stores the current location
loc = place.geometry.location; 
</code></pre>

<p>});
```</p>

<p>Add a method to clear the markers, this will be used to clear the markers every time the distance is updated:</p>

<p>```
google.maps.Map.prototype.clear_markers = function() {
  for (var i = 0; i &lt; markers_array.length; i++){</p>

<pre><code>markers_array[i].setMap(null);
</code></pre>

<p>  }
}
```</p>

<p>Add the code for when the user moves the slider, were going to bind it to a text field so the actual value is visible to the user. The value will have a unit of kilometers.</p>

<p>```
$(&ldquo;#slider&rdquo;).slider({
  slide: function(event, ui){</p>

<pre><code>map.clear_markers(); //clear all the markers that are currently in the map

var distance = ui.value; //the selected distance

//get the latitude and longitude from the location that we updated  earlier
var coordinate = loc.lat() + "," + loc.lng(); 

//create the object which will store the data that were going to pass through solr
var data = {
  'coordinate' : coordinate,
  'distance' : distance
};

$("#distance").val(distance); //update the text field which shows the current distance

//make the request
$.post('http://my.dev/tester/geocoding/get_nearby_places.php', data, function(response){

  var results = JSON.parse(response); //convert the JSON string to a JavaScript object
  if(results.response){

    var places = results.response.docs; //the actual places that were returned by solr

    var place_count = places.length;
    var markers = [];

    //loop through all the places that were returned
    for(var x = 0; x &lt; place_count; x++){

      var coordinate = (places[x]['locm_lat'][0]).split(','); //convert the string to an array
      var lat = coordinate[0];
      var lng = coordinate[1];

      //create the marker which points out the nearby places
      marker = new google.maps.Marker({
          position: new google.maps.LatLng(lat, lng),
          map: map
      });

      //push the marker to the array which stores the markers so we can clear them later
      //when user moves the slider again
      markers_array.push(marker); 

    }
  }


});
</code></pre>

<p>  }
});
```</p>

<p>Finally, add the code which will make the query to the Solr server to get the places which are near to the selected location. What were doing here is constructing the URL needed to make the request to the solr server, then getting the actual response that was returned and then outputting it.</p>

<p>```php
&lt;?php
//the url for querying solr, 8080 is the port where solr is running
$url  = &lsquo;<a href="http://localhost:8080/solr/select?q=*:*&amp;fq=">http://localhost:8080/solr/select?q=*:*&amp;fq=</a>&rsquo;;</p>

<p>//the string that we need to replace in the query
$search = array(</p>

<pre><code>'BASE_COORDINATE',
'DISTANCE'
</code></pre>

<p>);</p>

<p>//the string that were going to use as a query
$replace = array(</p>

<pre><code>$_POST['coordinate'], //the latitude and longitude pair (eg. 123.111,456.233)
$_POST['distance'] //the selected distance
</code></pre>

<p>);</p>

<p>//replace the placeholder text with the input supplied by the user then encode the part of the url which has the query
$url .= urlencode(str_replace($search, $replace, &lsquo;{!geofilt pt=BASE_COORDINATE sfield=locm_lat d=DISTANCE}&rsquo;));
$url .= &lsquo;&amp;wt=json&rsquo;; //set the response type to json</p>

<p>$response = file_get_contents($url); //get the json string returned from the query
echo $response; //output the json string
?>
```</p>

<p>The output will look like this:</p>

<p><img src="/images/posts/spatial_search_with_apache_solr_and_google_maps/output.PNG" alt="asana" /></p>

<h2>Conclusion</h2>

<p>That&rsquo;s it for this tutorial, you&rsquo;ve learned how to use Solr&rsquo;s spatial search with Google Maps.
You can further improve the application that we just built. For example, you can make a distinction to the marker for the selected location by giving it a different color or icon since the marker for that is currently the same with the markers for locations which are near the selected location. You can also add filters, for example only show nearby restaurants to the location that you selected.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://wiki.apache.org/solr/SpatialSearch">Solr Spatial Search</a></li>
<li><a href="https://developers.google.com/maps/">Google Maps API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Maps with Mysql and PHP]]></title>
    <link href="http://anchetaWern.github.io/blog/2012/08/27/using-google-maps-with-mysql/"/>
    <updated>2012-08-27T21:12:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2012/08/27/using-google-maps-with-mysql</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>In this article were going to build a simple application that allows users to plot a specific place in Google Maps and save the coordinates in a database. The application will also have a search feature that allows users to search the places that they have saved in the database. Once a place has been selected it will be plotted back into the map. This article won&rsquo;t serve as an introduction to using Google Maps so its required that you first go ahead and read up the Google Maps v3 API Documentation if its your first time using Google Maps API. But if you want a quick and dirty solution without understanding anything then feel free to go ahead and copy-paste all the things.
Here&rsquo;s what the output would look like:</p>

<p><img src="/images/posts/googlemaps_and_mysql/place1.jpg" alt="place" />
<img src="/images/posts/googlemaps_and_mysql/search.jpg" alt="search" /></p>

<p>If that has gotten you interested then let&rsquo;s get started.</p>

<!--More-->


<h4>Database</h4>

<p>Let&rsquo;s start by creating the table that will store the coordinates of places in the map. Note that the code below will only create the table so go ahead and create the database which will serve as the home for this table.</p>

<p>```sql</p>

<pre><code>CREATE TABLE IF NOT EXISTS `tbl_places` (
`place_id` int(10) NOT NULL AUTO_INCREMENT,
`place` varchar(160) NOT NULL,
`description` varchar(200) NOT NULL,
`lat` float(15,11) NOT NULL,
`lng` float(15,11) NOT NULL,
PRIMARY KEY (`place_id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=latin1;
</code></pre>

<p>```</p>

<p>Include the Google Maps API JavaScript and jQuery</p>

<p>Next were going to include the Google Maps API JavaScript file and jQuery into the page. Jquery isn&rsquo;t actually required but its going to make our life easier in selecting the elements that we need and delegating events to specific elements. So if you want to use plain JavaScript or another JavaScript library then feel free to use them. In the options we have set the sensor equal to false since were not gonna detect the users location. We&rsquo;ve also set the libraries equal to places to make use of the places library which powers the search feature of the application that were going to make. This allows the user to search for places that are already in Google&rsquo;s database.</p>

<p>```html</p>

<script type="text/javascript" src="js/jquery172.js"></script>


<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=YOUR_KEY&sensor=false&libraries=places"></script>


<p>```</p>

<h4>Setting Map Defaults</h4>

<p>Next we set the default information to be used by the map like the coordinates where the map will be centered when the page is loaded, the marker, the map type. I&rsquo;m not a big fan of explaining everything in sentences when making this type of articles so be sure to read up the comments if you don&rsquo;t know what each line of code does.
Set default coordinate information.</p>

<p><code>javascript
var lat = 18.35827827454; //default latitude
var lng = 121.63744354248; //default longitude
var homeLatlng = new google.maps.LatLng(lat, lng); //set default coordinates
</code></p>

<p>Set default settings for the marker.</p>

<p><code>
var homeMarker = new google.maps.Marker({ //set marker
  position: homeLatlng, //set marker position equal to the default coordinates
  map: map, //set map to be used by the marker
  draggable: true //make the marker draggable
});
</code></p>

<p>Set the defaults settings to be used by the map.</p>

<p>```
var myOptions = {</p>

<pre><code>center: new google.maps.LatLng(16.61096000671, 120.31346130371), //set map center
zoom: 17, //set zoom level to 17
mapTypeId: google.maps.MapTypeId.ROADMAP //set map type to road map
</code></pre>

<p>  };
  var map = new google.maps.Map($(&ldquo;#map_canvas&rdquo;),</p>

<pre><code>  myOptions); //initialize the map
</code></pre>

<p>```</p>

<h4>Search Feature</h4>

<p>Next lets build the search feature for new places. First create the text field in which the users will type his queries:</p>

<p><code>html
&lt;label for="search_new_places"&gt;New Places&lt;/label&gt;
&lt;input id="search_new_places" type="text" /&gt;
</code></p>

<h4>Bind the search field into the Map</h4>

<p>Next let&rsquo;s bind the search field to the autocomplete using the Autocomplete class. This allows us to store an instance of the text field for the auto-complete search field. And that is stored by the autocomplete variable which we will use later on as the argument for the event listener when the place selected on the auto-complete search field changes.</p>

<p>```</p>

<pre><code>var input = $('#search_new_places'); //get element to use as input for autocomplete
var autocomplete = new google.maps.places.Autocomplete(input); //set it as the input for autocomplete
autocomplete.bindTo('bounds', map); //bias the results to the maps viewport
</code></pre>

<p>```</p>

<p>Also add the other html code that we will be using later on for searching existing places and saving new places into the database.</p>

<p>```html
<label for="search_ex_places">Saved Places</label>
<input id="search_ex_places" type="text" /></p>

<!--this will hold the place id of the selected existing place-->


<p><input id="place_id" type="hidden" name="place_id" /></p>

<!--The following are used for holding the name of the place and its description-->


<p><label for="place">Name</label>
<input id="n_place" type="text" name="n_place" /></p>

<p><label for="description">Description</label>
<input id="n_description" type="text" name="n_description" /></p>

<!--buttons used for executing functions for saving the place and plotting marker into the map-->


<p><input id="btn_save" type="button" value="save place" />
<input id="plot_marker" type="button" value="plot marker" />
```</p>

<h4>Load existing places into search field</h4>

<p>Include the database configuration file(which we will be creating shortly). Create a query that will select all the places that were saved in the database.</p>

<p>```php
&lt;?php</p>

<pre><code>require_once('places_config.php'); //include database config file
$places = $db-&gt;query("SELECT * FROM tbl_places");
</code></pre>

<p>?>
```</p>

<p>Then loop through it. Inside the loop we create a new option for the datalist(the datalist serves as the data source for the auto-complete search field) we also add a corresponding data attribute for each of the fields from the table. <code>data-id</code> stores the id of the place, <code>data-lat</code> stores the latitude, etc. We will then use this data later on to fill in the text fields for the place id, name of the place, and description.</p>

<p>```html
<datalist id="saved_places"></p>

<pre><code>&lt;!--loop through the places saved in the database and store their data into each of the data attribute in the options--&gt;
&lt;?php while($row = $places-&gt;fetch_object()){ ?&gt;
&lt;option value="&lt;?php echo $row-&gt;place; ?&gt;" data-id="&lt;?php echo $row-&gt;place_id; ?&gt;" 
        data-lat="&lt;?php echo $row-&gt;lat; ?&gt;" data-lng="&lt;?php echo $row-&gt;lng; ?&gt;" 
        data-place="&lt;?php echo $row-&gt;place; ?&gt;" data-description="&lt;?php echo $row-&gt;description; ?&gt;"&gt;&lt;?php echo $row-&gt;place; ?&gt;
&lt;/option&gt;
&lt;?php } ?&gt;
</code></pre>

<p></datalist>
```</p>

<h4>Add event listener for the new places search field</h4>

<p>Next were going to add an event listener for when a place is selected from the new places search field. This allows us to get information such as the coordinates of the selected place and use that information to set where the marker will be plotted in the map. If you remember earlier we created a variable named autocomplete which we binded into the map. This variable is what were going to use as the first argument for the event listener when the place selected from the auto-complete search field changes.</p>

<p>```javascript
//executed when a place is selected from the search field
google.maps.event.addListener(autocomplete, &lsquo;place_changed&rsquo;, function(){</p>

<pre><code>//get information about the selected place in the autocomplete text field
var place = autocomplete.getPlace();

if (place.geometry.viewport){ //for places within the default view port (continents, countries)
  map.fitBounds(place.geometry.viewport); //set map center to the coordinates of the location
} else { //for places that are not on the default view port (cities, streets)
  map.setCenter(place.geometry.location);  //set map center to the coordinates of the location
  map.setZoom(17); //set a custom zoom level of 17
}

homeMarker.setMap(map); //set the map to be used by the  marker
homeMarker.setPosition(place.geometry.location); //plot marker into the coordinates of the location
</code></pre>

<p>});
```</p>

<h4>Plotting the Marker</h4>

<p>Next we&rsquo;ll also add the function which will allow the user to plot a marker in the center of the map.</p>

<p>```
$(&lsquo;#plot_marker&rsquo;).click(function(e){ //used for plotting the marker into the map if it doesn&rsquo;t exist already
  e.preventDefault();
  homeMarker.setMap(map); //set the map to be used by marker
  homeMarker.setPosition(map.getCenter()); //set position of marker equal to the current center of the map
  map.setZoom(17);</p>

<p>  $(&lsquo;input[type=text], input[type=hidden]&rsquo;).val(&lsquo;&rsquo;);
});
```</p>

<h4>Search field for existing places</h4>

<p>Next we&rsquo;ll add the functionality to search for existing places saved in the database.</p>

<p>```
$(&lsquo;#search_ex_places&rsquo;).blur(function(){//once the user has selected an existing place</p>

<p>  var place = $(this).val();
  //initialize values
  var exists = 0;
  var lat = 0;
  var lng = 0;
  $(&lsquo;#saved_places option&rsquo;).each(function(index){ //loop through the save places</p>

<pre><code>var cur_place = $(this).data('place'); //current place description

//if current place in the loop is equal to the selected place
//then set the information to their respected fields
if(cur_place == place){
  exists = 1;
  $('#place_id').val($(this).data('id'));
  lat = $(this).data('lat');
  lng = $(this).data('lng');
  $('#n_place').val($(this).data('place'));
  $('#n_description').val($(this).data('description'));
}
</code></pre>

<p>  });</p>

<p>  //if the place doesn&rsquo;t exist then empty all the text fields and hidden fields
  if(exists == 0){</p>

<pre><code>$('input[type=text], input[type=hidden]').val('');
</code></pre>

<p>  }else{</p>

<pre><code>//set the coordinates of the selected place
var position = new google.maps.LatLng(lat, lng);

//set marker position
homeMarker.setMap(map);
homeMarker.setPosition(position);

//set the center of the map
map.setCenter(homeMarker.getPosition());
map.setZoom(17);
</code></pre>

<p>  }
});
```</p>

<h4>Submit information via AJAX</h4>

<p>Were going to submit the information about the place(name of the place, description, latitude, longitude) via AJAX into the backend.</p>

<p>```
$(&lsquo;#btn_save&rsquo;).click(function(){</p>

<pre><code>var place   = $.trim($('#n_place').val());
var description = $.trim($('#n_description').val());
var lat = homeMarker.getPosition().lat();
var lng = homeMarker.getPosition().lng();

$.post('save_place.php',
    {
    'place' : place, 'description' : description,
    'lat' : lat, 'lng' : lng
    },
  function(data){
    var place_id = data;
    var new_option = $('').attr(
                    {
                    'data-id' : place_id, 'data-place' : place, 
                    'data-lat' : lat, 'data-lng' : lng, 'data-description' : description
                    }
                ).text(place);          

new_option.appendTo($('#saved_places')); //append new option to the datalist      

});    

$('input[type=text], input[type=hidden]').val('');    
</code></pre>

<p>});
```</p>

<h4>Connecting to the Database</h4>

<p>Next were going to connect to the database using MySQLi(MySQL Improved). Make sure that the mysqli extension is enabled in your php.ini file:</p>

<p><code>
[PHP_MYSQLI]
extension=php_mysqli.dll
</code></p>

<p>Next create a new file(places_config.php) that will serve as the database configuration file.</p>

<p>```php
&lt;?php
//host, user, password, database name
$db = new Mysqli(&ldquo;localhost&rdquo;, &ldquo;root&rdquo;, &ldquo;&rdquo;, &ldquo;db&rdquo;);
if ($db->connect_errno){</p>

<pre><code>die('Connect Error: ' . $db-&gt;connect_errno);
</code></pre>

<p>}
?>
```</p>

<h4>Save the place into the Database</h4>

<p>Then create an insert query to save the place into the database.</p>

<p>```
&lt;?php <br/>
require_once(&lsquo;places_config.php&rsquo;); //include database config file</p>

<p>//get place information submitted via ajax earlier<br/>
$place = $<em>POST[&lsquo;place&rsquo;]; <br/>
$description = $</em>POST[&lsquo;description&rsquo;]; <br/>
$latitude = $<em>POST[&lsquo;lat&rsquo;];<br/>
$longitude = $</em>POST[&lsquo;lng&rsquo;];</p>

<p>$db->query("</p>

<pre><code>INSERT INTO tbl_places SET place='$place', description='$description',
lat='$latitude', lng='$longitude'
");
</code></pre>

<p>$place_id = $db->insert_id; //get the id of the newly inserted record
echo $place_id;
?>
```</p>

<h3>Demo</h3>

<p>Here&rsquo;s a little demo using <code>localStorage</code> as a data store for the places that are saved.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/gNah7/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Conclusion</h3>

<p>You&rsquo;ve learned how to use the Google Maps API together with PHP, MySQL and jQuery to create a simple application that allows users to plot places in Google Maps and allow them to save it in the database for later access.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/maps/documentation/javascript/tutorial">Google Maps v3 API Documentation</a></li>
<li><a href="http://leaflet.cloudmade.com/">Leaflet</a></li>
<li><a href="https://github.com/anchetaWern/tutorials/tree/master/gmaps">Code Samples from this Article</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
