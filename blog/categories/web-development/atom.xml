<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web-development | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-01-04T19:05:49+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Web Servers]]></title>
    <link href="http://wern-ancheta.com/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers/"/>
    <updated>2014-03-01T08:35:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers</id>
    <content type="html"><![CDATA[<p>In this part four of the series A Whirlwind Tour of Web Developer Tools I&rsquo;m going to walk you through web servers. Web servers are computers that commonly delivers web pages. But when talking about web development web server refers to the software used for serving up the web pages. In this blog post I&rsquo;m going to talk about 4 web servers that you can use in serving up your web projects.</p>

<!--more-->


<h3>Python Simple HTTP Server</h3>

<p>First on the list is the simple http server that is built-in to python. So in order to use this you would need to have Python installed. Python already comes pre-installed in Ubuntu and other Linux distributions so you already have the simple http server by default. For Mac OS X its also pre-installed. But for Windows you would need to get an installer from the <a href="http://python.org/download/">Python website</a>.
You can use it by opening up a terminal from any directory that you want to serve and execute the following command:</p>

<p><code>
python -m SimpleHTTPServer
</code></p>

<p>To test it out you can create a new <code>index.html</code> file on the directory where you executed the command above and access <a href="http://localhost:8000">http://localhost:8000</a> from your browser.</p>

<p>Note that the simple http server will simply list out all the files in that directory if you do not have an <code>index.html</code> file:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/simplehttpserver.png" alt="simple http server" /></p>

<p>You can also implement your own web server by creating a new python file (<code>server.py</code>) and putting the following code:</p>

<p>```python
import SimpleHTTPServer
import SocketServer</p>

<p>PORT = 1234</p>

<p>Handler = SimpleHTTPServer.SimpleHTTPRequestHandler</p>

<p>httpd = SocketServer.TCPServer((&ldquo;&rdquo;, PORT), Handler)</p>

<p>print &ldquo;serving at port&rdquo;, PORT
httpd.serve_forever()
<code>``
You can then execute the</code>server.py` file from the terminal to start the server. Note that the file must be inside the same directory that you want to serve.</p>

<h4>PHP Server</h4>

<p>There is also the built-in server for PHP version 5.4.0 and above. This comes with PHP so you need to install it first before you can start using it. You can install PHP by executing the following command from your terminal</p>

<p><code>
sudo apt-get install php5
</code></p>

<p>Once you&rsquo;re done installing it you can now start using the server by navigating to the directory that you want to serve and executing the following command from the terminal:</p>

<p><code>
php -S localhost:8000
</code></p>

<p>This will serve up the current directory under port 8000 of your local machine so to access it from the browser you can open up the following url: <a href="http://localhost:8000">http://localhost:8000</a>.</p>

<p>Note that if you do not have a default file (either <code>index.html</code> or <code>index.php</code> file) in the directory that you are serving the PHP server is going to return a 404 not found:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/php-server.png" alt="php-server" /></p>

<p>The advantage of using the PHP server over simple http server is that you can actually create some php files in the directory that you are serving, write some code in it and the server will also be able to interpret it for you.</p>

<h3>Apache</h3>

<p>Next is the Apache HTTP Server from the Apache Foundation. You can install it by executing the following command from the terminal:</p>

<p><code>
sudo apt-get install apache2
sudo /etc/init.d/apache2 restart
</code></p>

<p>For Windows users there is this thing called <a href="http://www.wampserver.com/en/">WAMP</a> which you can install. Apache is packaged with it along with MySQL and PHP so you can start playing with it immediately without doing a lot of configuration. You can also have them installed separately but you will have to do some configuration before you can start playing with it. I&rsquo;ve written a tutorial about it before: <a href="http://kyokasuigetsu25.wordpress.com/2012/04/12/how-to-install-and-configure-apache-php-and-mysql/">How to install and configure apache, php, and mysql</a> so check that out if you do not want to use packaged versions.</p>

<p>For MAC OS there&rsquo;s <a href="http://www.mamp.info/en/index.html">MAMP</a>.</p>

<p>There&rsquo;s also <a href="http://www.apachefriends.org/index.html">XAMPP</a> which is a cross-platform solution for easily setting up Apache, PHP, and MySQL on your machine.</p>

<p>If you&rsquo;re a beginner I definitely recommend using either WAMP, MAMP or XAMPP as it can be sometimes frustrating to configure everything on your own.</p>

<p>Ok back to the main topic of this section which is Apache. If you&rsquo;re on Linux and you have installed Apache separately you might want to <a href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">configure the default web directory</a> since the default web directory that is used by Apache isn&rsquo;t writeable if you do not access the file explorer as a super user. This becomes a problem when accessing the web directory from the browser as Apache throws you a forbidden error. If you haven&rsquo;t catch it the first time you can go ahead and use the following tutorial: <a href="[configure%20the%20default%20web%20directory](http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">fixing the forbidden error in Apache</a>) to properly configure Apache. Once you&rsquo;re done with that you can go back to this blog post.</p>

<p>After configuring the default web directory used by Apache you can now put some test files on the web directory. Something like <code>index.html</code> and put the following contents:</p>

<p>```html</p>

<h1>Hello World from Apache!</h1>


<p><code>``
Now if you go to [http://localhost](http://localhost) you can now see the</code>index.html` being served by Apache. Apache serves everything on port 80 by default so we didn&rsquo;t have to add the port when we access it from the browser. This is because the browser knows by default that web pages are served at port 80. If you already have PHP installed you can also serve php files. Apache already knows how to serve those by default so there&rsquo;s no need for further configuration.</p>

<h3>Nginx</h3>

<p>Lastly there&rsquo;s Nginx one of the HTTP servers that&rsquo;s gaining market share lately. You can install it by executing the following command from your terminal:</p>

<p><code>
sudo apt-get install nginx
</code></p>

<p>If you&rsquo;re on Windows there&rsquo;s a guide from the Nginx website on <a href="http://nginx.org/en/docs/windows.html">how to install Nginx on Windows</a>.</p>

<p>For Mac you can install it via homebrew:</p>

<p><code>
brew install nginx
</code></p>

<p>Once Nginx is installed you can run it by executing <code>sudo nginx</code>. Note that if you already have Apache installed you would have a problem starting Nginx up. Most likely you would get an error similar to the one below:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/nginx-port.png" alt="nginx port error" /></p>

<p>This is Nginx telling you that port 80 is already in use. We learned earlier that Apache uses port 80 by default so running another server which serves web pages at port 80 will lead to that issue.
What we need to do is to configure Nginx to listen to another port. And you can do that by navigating to the following path:</p>

<p><code>
cd /etc/nginx/sites-available
</code></p>

<p>Then open up the <code>default</code> file:</p>

<p><code>
sudo gedit default
</code></p>

<p>From there scroll down to the line which is similar to the following:</p>

<p>```
server {</p>

<pre><code>listen 80 default_server;
listen [::]:80 default_server ipv6only=on;

root /usr/share/nginx/html;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>There are 2 things that you can do from here. First replace the 2 instances of <code>80</code> which is the default port used by Nginx to something like <code>6789</code>. Then you can also change the default web directory. Nginx uses <code>/usr/share/nginx/html</code> as its default, you can change it to something like <code>/home/your_user_name/nginx_web_files</code>. After updating the <code>default</code> file it should now look like this:</p>

<p>```
server {</p>

<pre><code>listen 6789 default_server;
listen [::]:6789 default_server ipv6only=on;

root /home/your_user_name/nginx_web_files;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>After that save the file and restart Nginx using the following command:</p>

<p><code>
sudo nginx -s reload
</code></p>

<p>You can now go ahead and create a sample <code>index.html</code> file in your chosen web directory and put the following contents:</p>

<p>```html</p>

<h1>hello world from nginx!</h1>


<p>```</p>

<p>To access it from your browser go to <a href="http://localhost:6789">http://localhost:6789</a>.</p>

<h4>Configuring PHP in Nginx</h4>

<p>Not unlike Apache, Nginx doesn&rsquo;t work with PHP by default so if you try serving up a PHP file Nginx won&rsquo;t understand it and it will give you a bad gateway error.</p>

<p>In order to make PHP work with Nginx you first have to install the <code>php5-fpm</code> package via the terminal:</p>

<p><code>
sudo apt-get install php5-fpm
</code></p>

<p>Once that&rsquo;s done you can now update the <code>default</code> file under the <code>/etc/nginx/sites-availble</code> directory.</p>

<p><code>
sudo gedit default
</code></p>

<p>Scroll down to the line where you have something similar to the following:</p>

<p>```</p>

<h1>location ~ .php$ {</h1>

<h1>fastcgi_split_path_info ^(.+.php)(/.+)$;</h1>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<h1>fastcgi_pass 127.0.0.1:9000;</h1>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<h1>fastcgi_index index.php;</h1>

<h1>include fastcgi_params;</h1>

<h1>}</h1>

<p>```</p>

<p>Then uncomment the lines that are necessary to make PHP work:</p>

<p>```
location ~ .php$ {
fastcgi_split_path_info ^(.+.php)(/.+)$;</p>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<pre><code>fastcgi_pass 127.0.0.1:9000;
</code></pre>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<pre><code>fastcgi_index index.php;
include fastcgi_params;
</code></pre>

<p>}
```</p>

<p>Save the changes and restart php5-fpm and Nginx:</p>

<p><code>
sudo service php5-fpm restart
nginx -s reload
</code></p>

<p>You can now request a PHP file from Nginx.</p>

<h3>Conclusion</h3>

<p>You&rsquo;ve learned how to serve up web pages using the following http servers:</p>

<ul>
<li>SimpleHTTPServer</li>
<li>PHP Server</li>
<li>Apache HTTP Server</li>
<li>Nginx</li>
</ul>


<p>Web Servers are flexible by default. They can serve up different types of content and they can also serve up interpreted language such as PHP. You can pretty much live with the just the defaults but if your web project is something that&rsquo;s used by many people across the world then its important that you configure your web server to accommodate the needs of every user. And that is to be able to access your website fast and securely.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.python.org/2/library/simplehttpserver.html">Simple HTTP Server</a></li>
<li><a href="http://www.php.net/manual/en/features.commandline.webserver.php">PHP Built-in Web Server</a></li>
<li><a href="http://httpd.apache.org/docs/">Apache HTTP Server</a></li>
<li><a href="http://nginx.org/en/docs/">Nginx</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A whirlwind Tour of Web Developer Tools: Text Editors]]></title>
    <link href="http://wern-ancheta.com/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors/"/>
    <updated>2014-02-15T11:00:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors</id>
    <content type="html"><![CDATA[<p>This is part two of the series A Whirlwind Tour of Web Developer Tools. This time I&rsquo;ll be talking about text editors and related tools.</p>

<p>Text editors are used by web developers to write code. Text editors are not the same thing as word processors because anything written on a text editor is saved as a plain text file and it normally uses a simple character set such as ASCII to represent different characters (letters, numbers, etc). On the other hand word processors saves formatted text which enables tables, symbols and other form of graphical information to be represented without having to use any form of markup like HTML.</p>

<!--more-->


<h4>Sublime Text</h4>

<p>When you say text editor the first thing that comes to mind these days is <a href="http://www.sublimetext.com/">Sublime Text</a>. It&rsquo;s like the sexiest text editor these days. So this whole blog post is primarily going to be about Sublime Text and some of the plugins that I found useful.</p>

<h5>Plugins</h5>

<p>In order to install plugins for Sublime Text you first have to install <a href="https://sublime.wbond.net/">package control</a> which is a package manager for Sublime Text that allows you to easily install plugins. To install package manager copy the following code in the Sublime Text console which can be accessed by pressing <code>ctrl + back tick</code> on your keyboard. After that restart the editor to finish the installation:</p>

<p><code>
import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
</code></p>

<p>Note that the code above is for Sublime Text 2, if you&rsquo;re using Sublime Text 3 then use the following code:</p>

<p><code>
import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<p>After restarting sublime text you can now press <code>ctrl + shift + p</code>, select &lsquo;install package&rsquo; and press <code>enter</code>, this will load all the available plugins from the plugin repository. From there you can just search for the plugin that you want to install.</p>

<p>And now for the plugins:</p>

<ul>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCS</a> &ndash; a PHP code quality tool.</li>
<li><a href="http://emmet.io/">Emmet</a> &ndash; previously known as Zen Coding. If that doesn&rsquo;t ring a bell then Emmet is basically a tool for improving productivity by implementing shortcuts for generating code that you would normally write out by hand. All you have to do is to write something like this:</li>
</ul>


<p><code>
html:5
</code></p>

<p>And right after pressing <code>tab</code> you get a whole bunch of code written out for you:</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body></p>

<p></body>
</html>
```</p>

<ul>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">Sidebar Enhancements</a> &ndash; allows you to create a new file and it will immediately ask you the filename, duplicating or copying files and folders from the sidebar, and a bunch of other good stuff that the default sublime text sidebar doesn&rsquo;t allow you to do.</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a> &ndash; allows for easier visualization of where the ending bracket is.</li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a> &ndash; keeps a history of clipboard items so you can just paste them in later.</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">Docblockr</a> &ndash; pretty much like emmet but only for document blocks. Useful for writing comments.</li>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a> &ndash; allows for easy alignment of code. All you have to do is press <code>ctrl + alt + a</code> on your keyboard.</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-for-ST2">Sublime Linter</a> &ndash; inline linting for a bunch of languages (PHP, HTML, CSS, Ruby, etc). If you don&rsquo;t know what linting is, its basically a process of analyzing code to determine potential errors. In most cases its used by web developers to check their code quality against a specific coding standard. For example, when coding in JavaScript its not usually required to put semi-colons but if you&rsquo;re using Sublime linter it will remind you to put those semi-colons in if you forget it. If you have unused variables in your code the linter will also complain and it will tell you that variable <code>z</code> isn&rsquo;t actually used in your code.</li>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime">EditorConfig</a> &ndash; tool for implementing coding conventions. You can use this to specify whether to use tabs or spaces for specific file types (<code>.js</code>, <code>.css</code>) or whether to use double quotes or single quotes for the quote type. You can do all that by installing the editorconfig plugin for the text editor that you&rsquo;re using. Then create a <code>.editorconfig</code> file in the root of your project directory or any directory in your project if you want to use different rules for different directories. Here&rsquo;s a sample <code>.editorconfig</code> file:</li>
</ul>


<p>```
root = true</p>

<p>[*]
end_of_line = lf
insert_final_newline = false
charset = utf-8
trim_trailing_whitespace = true
quote_type = double</p>

<p>[*.php]
indent_style = space
indent_size = 4</p>

<p>[*.py]
indent_style = space
indent_size = 4</p>

<p>[*.js]
indent_style = space
indent_size = 2</p>

<p>[*.css]
indent_style = space
indent_size = 5
```</p>

<p>As you can see from the sample above you can specify a whole bunch of settings. You can also have different rules for different file types.</p>

<h4>IDE</h4>

<p>There&rsquo;s also this thing called the IDE or Integrated Development Environment which is basically text editors on steroids. They have huge install size since they allow you to do more than just writing code. IDE&rsquo;s packs a bunch of features which you would not normally find in a text editor such as compiling code. Some IDE&rsquo;s such as Visual Studio also allows you to build the GUI of applications by simply dragging and dropping GUI elements (text boxes, buttons, etc.) from a toolbox. Other features include code completion (intellisense), debugger, integrated services (allows viewing and manipulating the database right from the IDE).</p>

<h3>Conclusion</h3>

<p>Text editors and IDEs are the main weapons of every web developer. Without it they won&rsquo;t be able to produce any code. So its important to learn the ins and outs of the text-editor or IDE that you are using to maximize your productivity when using it. Be sure to check out the resources below for more Sublime Text awesomeness.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.hongkiat.com/blog/sublime-text-tips/">Sublime Text Tips and Tricks</a></li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Perfect Workflow in Sublime Text 2</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">Popular Sublime Text Plugins</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">Compariosn of Text Editors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Comparison of Integrated Development Environments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: In-Browser Tools]]></title>
    <link href="http://wern-ancheta.com/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/"/>
    <updated>2014-02-09T12:30:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools</id>
    <content type="html"><![CDATA[<p>In this series of blog posts I&rsquo;m going to give you an overview of some of the tools that are commonly used by web developers to get their work done. You can expect some examples on how to install and use each tool but I won&rsquo;t be going too deep. The main purpose is to simply give you an idea on what tools are available, how to use them and encourage you to integrate them into your workflow. Note that the tools that will be mentioned in this blog post aren&rsquo;t platform specific so you can use them whether you&rsquo;re developing in Windows, Linux or Mac. Over the coming weeks I&rsquo;m going to walk you through the following:</p>

<ul>
<li>In-Browser Tools</li>
<li>Text Editor</li>
<li>Virtualization</li>
<li>Web Servers</li>
<li>Command Line Utilities</li>
<li>Package Managers</li>
<li>Source Control</li>
<li>Build Tools</li>
<li>Linting</li>
<li>Testing</li>
<li>Language Compilers</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end Frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous</li>
</ul>


<!-- more -->


<h3>In-Browser Tools</h3>

<p>First on the list is the browser tools. Browser tools are a set of tools that live on the browser which can help you in inspecting and debugging web applications.</p>

<h4>Chrome Developer Tools</h4>

<p>One of the most popular browser tool today is the Chrome Developer Tools. You can access it by pressing <code>Ctrl + Shift + I</code> or <code>Cmd + Opt + I</code> on your keyboard. By default this opens up the last panel that you have accessed.</p>

<ul>
<li><strong>Elements</strong> &ndash; allows DOM inspection and modification, changes are reflected on the page as you update.</li>
<li><strong>Network</strong> &ndash; this is where you can view all of the HTTP requests made by your web project. The size and time it took to download each requested file are also viewable so the network panel is mostly used for evaluating the performance of your web project in terms of the HTTP requests that are made.</li>
<li><strong>Sources</strong> &ndash; used for viewing and updating the source files used by your web project. If you selected a JavaScript file it will also allow you to debug it.</li>
<li><strong>Timeline</strong> &ndash; used for evaluating the performance of your web project in terms of frames and memory consumed</li>
<li><strong>Profiles</strong> &ndash; used for profiling JavaScript performance</li>
<li><strong>Resources</strong> &ndash; kind of similar with the sources panel, but it doesn&rsquo;t allow you to edit the source files. It also allows you to view and modify cookie and local storage information.</li>
<li><strong>Audits</strong> &ndash; evaluates the web page performance in terms of network utilization and css and JavaScript performance.</li>
<li><strong>Console</strong> &ndash; allows you to run JavaScript code and inspect JavaScript objects.</li>
</ul>


<h4>Useful Extensions and Plugins</h4>

<ul>
<li><strong>Web Developer</strong> &ndash; packs various extensions and tools to help in testing web pages <a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">[firefox]</a></li>
<li><strong>Tincr</strong> &ndash; allows live reloading of web pages as you make changes to the source file. The saving of changes is also bi-directional which means that if you edit the file in the sources panel of the Chrome Developer Tools the changes will also get saved to the source file. Pretty sweet! <a href="https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih?hl=en">[chrome]</a></li>
<li><strong>Pagespeed Insights</strong> &ndash; used for evaluating the performance of web pages based on industry best practices. It will give you some suggestions on how you can improve the performance of your website based on its evaluation. <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">[chrome]</a></li>
<li><strong>YSlow</strong> &ndash; the same as Pagespeed Insights. <a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">[firefox]</a></li>
</ul>


<h4>Firefox Developer Tools</h4>

<p>Pretty much the same with the Chrome Developer Tools. It also allows you to inspect and modify a web page, debug JavaScript code, monitor and inspect HTTP requests as they happen. During my testing I found out that most of the features are the same, the only tool that is not present by default in the Chrome Developer Tools is the 3d view for web pages.</p>

<p><img src="/images/posts/whirlwind_tour_web_developer_tools/3dview.png" alt="3d view" /></p>

<h4>Firebug</h4>

<p>The in-browser tool that started it all. It was already around before Chrome Dev Tools and Firefox Dev Tools came out. Most of the features are also the same with that of Chrome Dev Tools and Firefox Dev Tools.</p>

<h3>Conclusion</h3>

<p>In-browser tools are a nice way to easily design and test websites. They allow you to do almost everything right from the browser itself. The main benefit of this is instant feedback. You get to see what effect your changes have on the website right after making the change. Tools like tincr even make it possible to commit your changes to your source files so you won&rsquo;t have to go back to the text-editor and commit your changes.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks">Chrome Developer Tools Tools Tips and Tricks</a></li>
<li><a href="https://getfirebug.com/faq/">Firebug</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Tools">Firefox Developer Tools</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This crazy world of web development]]></title>
    <link href="http://wern-ancheta.com/blog/2013/04/13/this-crazy-world-of-web-development/"/>
    <updated>2013-04-13T13:45:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2013/04/13/this-crazy-world-of-web-development</id>
    <content type="html"><![CDATA[<p>Need a css framework? There&rsquo;s Foundation, Bootstrap, HTML Kickstart, Kube, Skeleton, Baseline, Gumby, Ink, Groundwork.
There&rsquo;s also a bunch of others which are based from Bootstrap: Flatstrap, Metro Bootstrap.</p>

<p>Need a boilerplate? There&rsquo;s the HTML5 Boilerplate, 320 and up, HTML5Bones.</p>

<p>Need a package manager? There&rsquo;s component, ender, bower, jam, NPM.</p>

<p>Need a browser tool? There&rsquo;s Firebug, Chrome Developer tools, Page Speed Insights, JSON View, YSlow, MeasureIt, Colorzilla, CSS Usage, PageSpeed, SEO Doctor.</p>

<p>Need a coding tool? There&rsquo;s Codekit(for Mac), ScoutApp (for Windows), LiveReload, Yeoman, Grunt, Lumbar, Yeoman, Sublime Text, Brackets.</p>

<p>Need a css base? There&rsquo;s reset.css and normalize.css.</p>

<p>Need a CSS Compiler? There&rsquo;s SASS + Compass, LESS.</p>

<p>Need a validator/linting tool? There&rsquo;s JSLint, JSHint, JSON Lint, HTML Validator, CSS Validator.</p>

<p>Need a static site generator? There&rsquo;s Jekyll, Octopress, Middleman.</p>

<p>Need an MVC/MVP/MVVM Framework? There&rsquo;s Backbone, Ember, Knockout, Angular.</p>

<p>Tired of writing helper functions from scratch? There&rsquo;s underscore.js, sugar.js, lo-dash, yepnope.js, modernizr, accounting.js.</p>

<p>Need to work with SVG? There&rsquo;s Processing.js, Raphael.js, SVG Kit and SVG Web.</p>

<p>How about templating libraries? There&rsquo;s Smarty, Handlebars, Mustache, Hogan.js.</p>

<p>Need a JavaScript library? There&rsquo;s jQuery, Dojo, Mootools.</p>

<p>You think JavaScript is ugly? There&rsquo;s Coffeescript, TypeScript, Dart.</p>

<p>Want a back-end framework? There&rsquo;s Ruby on Rails for Ruby, Laravel for PHP, and Django for Python, Node.js.</p>

<p>Need a database? There&rsquo;s MySQL, PostgreSQL, MongoDB, CouchDB, RavenDB.</p>

<p>How about a Software Development Methodology? There&rsquo;s Waterfall, Prototyping, Spiral, RAD, Agile.</p>

<p>How about Design Patterns? There&rsquo;s Singleton, Adapater, Bridge, Facade, Factory and a bunch of others.</p>

<p>Heck there&rsquo;s a lot! The list is endless and it&rsquo;s hard to keep up.
There&rsquo;s always something new everyday.
There&rsquo;s always a new technology, methodology, library, and tool.
There&rsquo;s always a new blog post, video, and podcasts that speaks about these technologies, methodologies, libraries and tools.
There&rsquo;s always a new, cool and faster way to solve problems.</p>

<p>There&rsquo;s always this temptation (in most cases obsession) to check out all the shiny and new stuff, to read all those blog posts which speaks about them.
And before you know it there&rsquo;s no more time left for you to solve the real problems that needs solving.</p>

<p>Most of the tools, libraries and methodologies that comes out everyday is yet another way to solve existing problems.
The only difference is that its newer and it looks sexier. But sooner or later it becomes out of fashion and a shiny new thing will replace it again.</p>

<p>What&rsquo;s important is learning the core technology behind a library, so instead of learning jQuery, Mootools or Dojo we should first learn JavaScript. Instead of learning how to use Bootstrap or Foundation we should learn the basics and important concepts in CSS first. Core technologies that makes the whole platform (the web) work  never gets replaced thus it should be given the priority before the shiny and new stuff. And once your done learning the core technologies you&rsquo;re in a good position to try out some of the shiny and new stuff. And by try I mean giving it a go for a week or so and see if it feels right for you. If it feels right for you and you think it makes you more productive then you should definitely include it in your daily workflow.</p>

<p>Who cares if you&rsquo;re using MS Paint and not Photoshop. Who cares if you&rsquo;re using Notepad or Dreamweaver instead of Sublime Text. Who cares if you&rsquo;re still using <code>alert</code> instead of <code>console.log</code> to debug your JavaScript. If you think you&rsquo;re productive by using some of the old tools then why not right? At the end of the day it doesn&rsquo;t really matter what tools, libraries or methodologies we use as long as we get to solve problems and we make our clients happy by solving them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The road so far.. (September 21, 2012 Edition)]]></title>
    <link href="http://wern-ancheta.com/blog/2012/09/21/the-road-so-far-september-21/"/>
    <updated>2012-09-21T11:04:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2012/09/21/the-road-so-far-september-21</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a big fan of the Supernatural series so the Supernatural fans out there
might have noticed that the title of this post came from the usual
tagline on the last episode of each Supernatural season.
This post is not any different from that idea, as I will talk about some of
my adventures in Web Development from the time I&rsquo;ve taken it seriously up to this day.</p>

<p>My adventures probably started during my first year in College as I took up Information Technology.
It was around this time that I developed my interest with computers and technology.
As IT students we had classes such as Computer Fundamentals, Internet, Computer Programming,
Data Structures, Hardware and Software, Database Design, Web Development and a bunch others which isn&rsquo;t really relevant
to the path that were going to take later on.</p>

<p>During my first year in College we mostly worked with C++, HTML and a bit of CSS.
We built simple programs that emulates bank transaction, sorting, and other things which probably looked really
cool to my eyes back then.
We also built web pages using tables, Frames and probably a pinch of inline css.</p>

<p>Second year college was about VB.Net, databases, and assembly language which I really hate because of lack of resources in the internet.
But I probably didn&rsquo;t have much of a Googling super powers back then so I can&rsquo;t find the things that I wanted.
It felt awesome building applications that run on my Windows machine.
I got my hands dirty on Text Files, MS Access, MS Sql and MySQL while working with VB.Net.
I also built some sort of a super combination of VB.Net and PHP.
But it wasn&rsquo;t really a super combination since I was only rendering things on my localhost just like a browser does.
And VB.Net used the same engine that the IE installed on my computer was using(It was probably IE 6) so it kinda suck.
The story behind that is that I didn&rsquo;t know how to make a login system with PHP back then as I was only starting to get
my hands dirty on that language so I kinda used VB.Net for the login and PHP for the main system.
But it was a really fun experience I dive right into connecting PHP to MySQL without learning the basics first so it took some time before it finally clicked.</p>

<p>It was also during that time that we started writing queries and normalizing databases (1NF, 2NF, 3NF&hellip;).
We also did some assembly language on our Operating System course but it really didn&rsquo;t made much impact
since it was really boring and was only running on the command line.</p>

<p>Third year college was about Web Development and Software Engineering (things are getting a lot more fun).
I learned more about HTML, CSS, JavaScript and PHP.
It was also my first encounter with the JavaScript library called jQuery which made my life easier.
We built a Cart System on our Web Development, it really took a lot of Googling as I had no idea how to build one.
But you&rsquo;re not really doing things the right way if you&rsquo;re effortlessly doing it so I really gained some experience by building that Cart System.</p>

<p>On our Software Engineering class we built a Point of Sale System using PHP.
It had purchasing, selling, maintenance and reporting features.</p>

<p>Fourth year college was about Practicum and Capstone Project.
The project for our Practicum and Capstone was the same as it was a semi-huge system with 3 modules(Business Permits, Tax Collection, Administration).
I had 3 team mates who worked with me on the Project which was the Business Permit and Licensing System which we created for a Local Government Unit.
And I can say that it wasn&rsquo;t easy I had my head ache a dozen of times. And I had a few aha! moments as well.
I also had few times to work with it in the middle of the night just to fix a bug.
I learned more about PHP, jQuery, JavaScript, SQL and some HTML5 stuff in the process of building it.
I also learned about DomPDF, HTML2PDF, PHPMailer and other stuff which we needed to incorporate in the project.
I also dealt with some configuration issues.
This really gave me a lot of headaches as well since the application simply refused to work on a different environment.
We developed the application while using WAMPServer then used a separate installation of PHP, Mysql and Apache
on deployment. As expected there were lots of differences between development and production environment so I had to
do a bunch of Googling and eyeball search(literally using my eyeballs to scan the file) on each of the configuration files of PHP (PHP.ini), MySQL (My.ini) and Apache (httpd.conf).
I also did a bunch of testing and bug-fixing (I regret not learning about TDD before I started the project).</p>

<h3>Personal Projects</h3>

<p>Then came vacation time after the graduation. Of course lots of us graduates only thought about resting like there&rsquo;s no tomorrow.
But there were some who already started looking for a job and scouting some companies for possible employment and I wasn&rsquo;t one of those.
Instead I focused on further improving my programming and overall web development skills.</p>

<p>And so I built a few personal projects like ChatRo, Placio, and Zenoir. Here&rsquo;s a bit of an overview:</p>

<h4>ChatRo</h4>

<p>ChatRo was an application used for conducting meetings through chat (text). It also had a file-sharing feature which allows
the people in the current chat session to share some files which can immediately be downloaded by the people who are in the same session.
There was also a file viewing feature which is limited to viewing image, audio, excel, pdf, html, and video files.
That&rsquo;s probably a lot but the downside is that its not available on every existing browser.
Playing of audio and video is only for browsers which supports html5 audio and video.</p>

<h4>Zenoir</h4>

<p>I&rsquo;m a fan of the PS1 Game called Legend of Legaia and the name of this application
came from one of the monsters in the game that I really liked.
Zenoir is an online classroom that has features such as:</p>

<ul>
<li>Multi-File Upload</li>
<li>Chat &ndash; implemented using node.js to make it realtime</li>
<li>Status Monitoring &ndash; posts that hasn&rsquo;t been read by the currently logged in user has a red star</li>
<li>Logging &ndash; student activities such as opening up a handout, answering assignment or joining a session can be seen by the teachers and administrators</li>
</ul>


<p>Building this application gave me a lot of experience in using the CodeIgniter framework for PHP and MVC in general.
I also gained some experience in using Node.js, Node Package Manager, Socket.io, Mysql package for Node.js, and Now.js.</p>

<h4>Placio</h4>

<p>Placio is a project I built to have an exercise on using the Google Maps API.
I first started out by using different libraries that abstracts the Google Maps API.
But it didn&rsquo;t provide with the data and power that I needed so I sort of came back to
learn the API itself. It was a bit harder to use than most of the abstractions but its
more flexible and it had almost everything I needed.
Placio is used for plotting places on the map and allows the user to save
that place on the database and then assign images to that place. Sort of like Geo-tagging.</p>

<p>I also built a few applications for my own consumption such us Fylo, Snipper, and Sniply.</p>

<h4>Fylo</h4>

<p>Fylo is a super simple application that&rsquo;s used for managing collections, in my case a DVD collection of anime series.</p>

<h4>Snipper</h4>

<p>Just like what the name suggests this application is used for storing  and managing code snippets.
Syntax highlighting is provided by Google Code Prettify.</p>

<h4>Sniply</h4>

<p>Probably the simplest application which only does one thing.
It allows the users to paste an image from the clipboard to a div, downside is that it only works on Chrome.
I envisioned it to be used for bug reporting as it also had a textarea for describing the problem that was
shown in the image and it allows the user to send it to the email that is on the config file.</p>

<h3>Back to Basics</h3>

<p>May of 2012, I discovered about this American company called Village88 that is dedicated to giving Free Education on Web Software Engineering.
So I gave it a try and their education is really something. They care a lot about code quality.
They have mentors who will check and comment on your work until it meets their standards.
They have courses on HTML and CSS, PHP and MySQL, jQuery and Ajax, Object Oriented PHP and CodeIgniter, Version Control using Git and SVN,
and Application Deployment. At the time of writing of this article they offer 5 certifications.
I only got certified in HTML and CSS. But I&rsquo;m planning to take the other courses soon.</p>

<h3>Jobs and Projects</h3>

<p>Late July of 2012 I got my first online job at RNLTEK Media where I worked with a lot of new things such as the Facebook JavaScript and PHP SDK,
Live Contacts API, Yahoo Contacts API, and some open source libraries such as OpenInviter that is used for importing contacts from different email services.
My job at RNLTEK media was part-time so I pretty much had the time to work on my personal projects and go through some free online courses
such as the JavaScript and jQuery course on appendTo, and the Computer Science course at Udacity.</p>

<p>I also got this project at a Local Government Unit so I worked on that too on my free time.</p>

<h3>Blogging</h3>

<p>While going through some of the blogs that I read daily I came accross this blogging platform called Octopress
and I got really interested since it had all this cool stuff like responsive design, nice syntax highlighting,
and its using this static site generator called Jekyll</p>

<h3>JavaScript</h3>

<p>I can say that my education didn&rsquo;t have much of a direction since I just go ahead and learn any technology that I got interested with.
But this year I&rsquo;ve mostly done JavaScript. JavaScript is pretty much in its Renaissance period, new JavaScript libraries are popping out
every second, lots of projects are built around JavaScript, and everyone is all about JavaScript and how awesome it is.
So I have pretty much gone with the flow and wanted to learn more about JavaScript.
I read books like JavaScript Enlightenment, Eloquent JavaScript, and jQuery Fundamentals which is by the way absolutely free.
I learned some of the best practices and quirks in JavaScript like not using Eval, avoiding global variables as they might
cause a conflict with some of the JavaScript libraries in the page, closures and that you can use them as some sort of database which can keep variable state,
I also learned about hoisting, and that JavaScript only have function scope.</p>

<h3>More Personal Projects</h3>

<p>I had lots of ideas on projects that I want to build one of those was fgenerate which I envisioned
to help me on generating code that I usually write like connecting to the database, html forms, and code for manipulating the database.
At the time of writing of this article I only got as far as generating html forms from the fields selected from a mysql database.
The application is probably at 10% there&rsquo;s still much code to write. Hopefully I&rsquo;ll be able to finish it.</p>

<p>Before I even finish fgenerate I got another idea that I wanted to execute.
I called the project &ldquo;Postr&rdquo;. As I haven&rsquo;t finished working on fgenerate yet I decided to start with
something minimal. Postr is an application which might have probably been built before.
But it doesn&rsquo;t hurt to recreate the wheel sometimes especially if you can learn a thing or two by recreating the wheel.
So I don&rsquo;t really believe in the quote &ldquo;Don&rsquo;t recreate the wheel&rdquo;.
Postr allows the users to simultaneously post status updates on 4 of the major social networking sites: Facebook, Twitter, Google Plus and Linked In.</p>

<p>That&rsquo;s pretty much the road so far and I&rsquo;ll keep on getting better each day by constantly practicing and keeping my knowledge current.
I&rsquo;ll probably do a post like this maybe 2 or 3 years from now to look back from where I came from and to assess where I am now.</p>
]]></content>
  </entry>
  
</feed>
