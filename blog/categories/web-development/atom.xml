<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web-development | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-10-01T10:57:13+00:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Linting]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting/"/>
    <updated>2016-01-09T16:25:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/09/a-whirlwind-tour-of-web-developer-tools-linting</id>
    <content type="html"><![CDATA[<p>Yo! It&rsquo;s been a while but I&rsquo;ve decided to continue this series on A Whirlwind Tour of Web Developer Tools. For those who don&rsquo;t know, I started this series a year ago but then I got so busy with work and I became an author at Sitepoint. So you can only count the number of in-depth tutorials with your fingers. But I quit my job and now I have a lot of free-time. That is why I no longer have any excuse not to continue what I started.</p>

<p>Ok enough with the life update. Now let&rsquo;s move on to the main topic of this article. This is part eight of the series on Web Developer Tools where I&rsquo;m going to walk you through linting. Linting is the process of running a program that will check the quality of code in order to avoid any potential errors. Take for example the following code:</p>

<p>```javascript
function main(){
  if(x == y){</p>

<pre><code>return 'Hello, World!'
</code></pre>

<p>  }
  return &lsquo;Hello&rsquo;;
}
```</p>

<p>By looking at the code, you can immediately see that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. The semicolon is also missing from the first <code>return</code> statement. But if add this function to a JavaScript file, you will see that it doesn&rsquo;t actually cause any errors until you add the code that will call the function. Only then will you realize that <code>x</code> and <code>y</code> hasn&rsquo;t been defined. But JavaScript doesn&rsquo;t actually complain if you miss a semicolon or two so the first <code>return</code> statement won&rsquo;t probably cause any errors. This is because of the automatic semicolon insertion in JavaScript. I know the example that I gave is a bit contrived but you get the point. As developers we sometimes miss the obvious things such as defining a variable or putting a semicolon. That is why there are tools to help us avoid making these kinds of mistakes. Linters are one of those. In the world of web development there are a bunch of tools which can be classified as linters. I&rsquo;m going to walk you through some of those in this tutorial.</p>

<h3>Markup Validation Service</h3>

<p>The <a href="https://validator.w3.org/">markup validation service</a> by the World Wide Web Consortium allows developers to check the validity of the HTML code that they&rsquo;ve written. It uses the doctype defined at the very top of the document as a basis for which specific rules to use for checking the code. You can supply a URL, upload a file or directly input the HTML code that you want to check. Here&rsquo;s an example:</p>

<p><img src="/images/posts/devtools_linters/w3c-validator.png" alt="w3c validator" /></p>

<p>As you can see from the screenshot, it gives you three types of feedback: info, warning and error. Info gives you general information about the page. Warnings are messages telling you that you can do better. Or something could be improved. In the example above it says that the document uses unicode private use areas. Which is basically another way of saying that undefined unicode characters shouldn&rsquo;t be used in publicly available documents. Lastly there&rsquo;s the error. These are messages that tells you to fix something because it might cause problems to the users of your website. In the example above, it&rsquo;s saying that an <code>alt</code> attribute should always be defined, except in specific conditions. And then it points out to the SVG logo of the website which should probably have an <code>alt</code> assigned to it. This is important because some users might be partially disabled (color-blind, partially blind, etc.) might be using a screenreader to interact with your website. And the value that you have placed in the <code>alt</code> attribute is read out by the screenreader. If there&rsquo;s nothing there then the user won&rsquo;t be able to know what he&rsquo;s currently focusing at.</p>

<h3>HTMLHint</h3>

<p><a href="http://htmlhint.com/">HTMLHint</a> is a linter for HTML code. Unlike the markup validation service, this allows you to specify what specific validation rules are to be used to check your HTML code. For example you can specify that all tags should be in lowercase. Or that in every file, an ID can only be used once. Here&rsquo;s an example:</p>

<p><img src="/images/posts/devtools_linters/htmlhint.png" alt="htmlhint" /></p>

<p>HTMLHint gives you feedback on which specific line has problems in it. And if you hover over the line number, you will see what the specific error is. In the example above you can see that the errors are:</p>

<ul>
<li>the id <code>a_unique_id</code> has been used twice. It doesn&rsquo;t matter that the elements used are different as long as an ID is used more than once, it triggers the error on the lines in which the ID is used for the second time.</li>
<li>the <code>div</code> with the ID of <code>a_unique_id</code> hasn&rsquo;t been closed. Note that this doesn&rsquo;t get triggered on the line where the tag hasn&rsquo;t been closed. Instead it gets triggered on the nearest closing tag which doesn&rsquo;t have a pair.</li>
</ul>


<p>At the bottom part of the website, you can check or uncheck rules depending on what you&rsquo;d like to apply. There are are a number of rules you can choose from and the naming is pretty self-explanatory so I won&rsquo;t be delving into that.</p>

<h3>CSSLint</h3>

<p><a href="http://csslint.net/">CSSLint</a> as the name suggests, is a linter for CSS code. Just like HTMLHint it allows you to specify which validation rules you&rsquo;d like to apply for the checking of your CSS code. With CSSLint there are mostly warning rules but you can trigger errors as well. Such as when a specific rule is empty, or when using unknown CSS properties, or disallowing duplicate one&rsquo;s. Warning rules on the other hand requires you to add fallback colors if you&rsquo;re using <code>hsl</code>, <code>rgba</code>, <code>rgb</code>, or <code>hsla</code> to specify colors. Older browsers might not support those methods of specifying colors so you&rsquo;ll have to provide a fallback in hexadecimal format. Another example is disallowing units for 0 values. This is mostly for performance benefits. Here&rsquo;s an example CSS code that I&rsquo;ve checked with CSSLint:</p>

<p>```css
body {</p>

<pre><code>font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
padding: 0;
margin: 0;
height: 100%;
width: 100%;
</code></pre>

<p>}</p>

<h1>settings-button {</h1>

<pre><code>float: right;
margin-top: 20px;
margin-right: 20px;
</code></pre>

<p>}</p>

<p>h1 {</p>

<pre><code>padding-left: 40px;
display: inline-block;
</code></pre>

<p>}</p>

<h1>message {</h1>

<pre><code>padding: 20px 40px;
background: #64CF49;
</code></pre>

<p>}</p>

<h1>sidebar {</h1>

<pre><code>width: 20%;
float: left;
background-color: #67B6DA;
position: fixed;
height: 100%;
</code></pre>

<p>}</p>

<h1>items-container {</h1>

<pre><code>width: 80%;
float: left;
position: relative;
margin-left: 20%;
background-color: #F7F7F7;
</code></pre>

<p>}</p>

<p>ul li {</p>

<pre><code>list-style: none;
</code></pre>

<p>}</p>

<h1>sidebar h3 {</h1>

<pre><code>border-bottom: 3px solid;
padding: 0;
padding-left: 30px;
</code></pre>

<p>}</p>

<h1>types li {</h1>

<pre><code>padding: 10px 30px;
</code></pre>

<p>}</p>

<p>ul#types {</p>

<pre><code>padding: 0;
font-size: 15px;
</code></pre>

<p>}</p>

<h1>types li a {</h1>

<pre><code>text-decoration: none;
color: #575757;
</code></pre>

<p>}</p>

<h1>items {</h1>

<pre><code>padding: 0 20px;
</code></pre>

<p>}</p>

<h1>items li a {</h1>

<pre><code>text-decoration: none;
color: #3A3A3A;
display: inline-block;
</code></pre>

<p>}</p>

<h1>items li {</h1>

<pre><code>padding: 20px;
</code></pre>

<p>}</p>

<h1>items li:hover {</h1>

<pre><code>background-color: #DFDFDF;
</code></pre>

<p>}</p>

<p>.item-info {</p>

<pre><code>display: inline-block;
width: 100%;
font-size: 15px;
color: #8A8A8A;
margin-top: 5px;
</code></pre>

<p>}
```</p>

<p>And then it showed me the following feedback:</p>

<p><img src="/images/posts/devtools_linters/csslint.png" alt="csslint" /></p>

<p>As you can see I&rsquo;ve used a lot of ID&rsquo;s in this css file so CSSLint is complaining that I shouldn&rsquo;t use ID&rsquo;s. This is mainly because CSSLint have this idea that ID&rsquo;s are completely unique and therefore there&rsquo;s no room for reuse. CSSLint advocates the use of OOCSS (Object-oriented CSS) whose main principle is the reusability of code by means of using objects.</p>

<p>Another warning is the use of overqualified selectors:</p>

<p>```css
ul#types{</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>It&rsquo;s saying that just using <code>#types</code> would suffice.</p>

<p>The last type of warning is the heading should not be qualified warning:</p>

<p>```css</p>

<h1>sidebar h3 {</h1>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>This is because headings are considered as top-level styles. This means that you shouldn&rsquo;t define their styles under a specific element. Because their appearance should be consistent throughout the entire website. Note that this is not saying that headings cannot be nested under a specific element. You can do that but when you&rsquo;re declaring their styles it should be just on its own so that you can ensure that they look the same throughout the whole website.</p>

<h3>JSHint</h3>

<p><a href="http://jshint.com/">JSHint</a> helps to detect errors and potential problems in your JavaScript code. It checks for undefined variables, the use of <code>eval</code> (we all know that <code>eval</code> is evil right?), unused variables and <a href="http://jshint.com/docs/options/">many others</a>. In the JSHint website you can configure which rules to apply by clicking on the <em>configure</em> link. Here&rsquo;s an example of how it works:</p>

<p><img src="/images/posts/devtools_linters/jshint.png" alt="jshint" /></p>

<p>As you can see it provides you with some code metrics. It tells you how many functions has been defined, how many variables are not defined and how many are not used.</p>

<p>It also tells you the cyclomatic complexity of the largest functions. In case you&rsquo;re wondering, <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a> is just a fancy term for the complexity of a specific program. You can see that the cyclomatic complexity of the largest function that I&rsquo;ve defined is 2. And the median (average) complexity of all the functions in the file is 1.5. People generally say that a cyclomatic complexity of 0 to 5 is fine. But if you get around 6 or more then you should consider refactoring your code.</p>

<p>Another warning that you can see in the example is the missing &ldquo;use strict&rdquo; statement. This is a way of telling the browser to use strict mode. I haven&rsquo;t really dived into strict mode yet but the main idea is that adding this literal expression at the very top of each JavaScript file and at the very top of each function makes the browser complain more about your code. Take for example the following code:</p>

<p><code>javascript
x = "y"; //browser: sweet!
console.log(x);
</code></p>

<p>Without invoking strict mode, the browser would happily execute this piece of code for you. But with strict mode it will complain that you haven&rsquo;t defined <code>x</code> yet.</p>

<p><code>javascript
"use strict";
x = "y"; //browser: Uncaught ReferenceError: x is not defined
console.log(x);
</code></p>

<h3>Command Line Tool</h3>

<p>HTMLHint, CSSLint, and JSHint can all be used through the command line. We&rsquo;re going to take a look at how to do that in this section.</p>

<p>The first thing that you need to do is to install node.js and npm. But we&rsquo;re not going to go through that here because I previously mentioned it in my article on <a href="http://wern-ancheta.com/blog/2014/03/30/a-whirlwind-tour-of-web-developer-tools-package-managers/">package managers</a>. Go ahead and check that out if you don&rsquo;t already have node.js and npm installed.</p>

<p>Once you&rsquo;ve installed node.js and npm, you can now install htmlhint, csslint, and jshint using npm:</p>

<p><code>
npm install -g htmlhint csslint jshint
</code></p>

<p>You can now immediately use them right after the installation is complete:</p>

<p><code>
htmlhint index.html
csslint style.css
jshint main.js
</code></p>

<p>Note that each of these tools already comes with default options. So if you were to execute each of the commands above, you will most likely get a warning or an error if your code is already complex enough. But you can also specify which rules to apply by creating a configuration file inside of your project directory.</p>

<p>For HTMLHint the configuration file that you have to create is <code>.htmlhintrc</code> and it looks something like this:</p>

<p>```json
{</p>

<pre><code>"tagname-lowercase": true,
"attr-lowercase": true,
"tag-pair": true,
"doctype-first": true,
"tag-self-close": true,
"attr-no-duplication": true,
"attr-value-double-quotes": true,
"attr-value-not-empty": false,
"title-require": true,
"id-unique": true,
"inline-style-disabled": true, 
"inline-script-disabled": true,
"doctype-html5": true,
"alt-require": false
</code></pre>

<p>}
```</p>

<p>You can find the rules that you can specify in <a href="https://github.com/yaniswang/HTMLHint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s the HTMLHint cli-tool in action:</p>

<p><img src="/images/posts/devtools_linters/htmlhint-cli.png" alt="htmlhint-cli" /></p>

<p>And here&rsquo;s the file that I checked:</p>

<p>```html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Document&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div&gt;
    &lt;p id="boom"&gt;&lt;/p&gt;
    &lt;span id="boom"&gt;&lt;/span&gt;
    &lt;STRONG&gt;&lt;/STRONG&gt;
    &lt;strong&gt;&lt;/strong&gt;
    &lt;span&gt;
    &lt;i data href=fldsfl BOOM="bam!" style="color:red;"&gt;&lt;b&gt;dds&lt;/b&gt;&lt;/i&gt;
    &lt;div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>For CSSLint it&rsquo;s <code>.csslintrc</code> and it looks like this:</p>

<p><code>json
{
  "adjoining-classes": false,
  "box-sizing": false,
  "box-model": false,
  "compatible-vendor-prefixes": false,
  "floats": false,
  "font-sizes": false,
  "gradients": false,
  "important": false,
  "known-properties": false,
  "outline-none": false,
  "qualified-headings": false,
  "regex-selectors": false,
  "shorthand": false,
  "text-indent": false,
  "unique-headings": false,
  "universal-selector": false,
  "unqualified-attributes": false
}
</code></p>

<p>Note that I&rsquo;ve pick up that configuration straight from <a href="https://github.com/twbs/bootstrap/blob/master/less/.csslintrc">bootstrap&rsquo;s</a> <code>.csslintrc</code> file. You can find the rules for CSSLint in <a href="https://github.com/CSSLint/csslint/wiki/Rules">this page</a>.</p>

<p>Here&rsquo;s CSSLint&rsquo;s cli-tool in action:</p>

<p><img src="/images/posts/devtools_linters/csslint-cli.png" alt="csslint-cli" /></p>

<p>Here&rsquo;s the stylesheet that was checked:</p>

<p>```css
body {</p>

<pre><code>font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
padding: 0;
margin: 0;
height: 100%;
width: 100%;
</code></pre>

<p>}</p>

<h1>settings-button {</h1>

<pre><code>float: right;
margin-top: 20px;
margin-right: 20px;
</code></pre>

<p>}</p>

<p>h1 {</p>

<pre><code>padding-left: 40px;
display: inline-block;
</code></pre>

<p>}</p>

<h1>message {</h1>

<pre><code>padding: 20px 40px;
background: #64CF49;
</code></pre>

<p>}</p>

<h1>sidebar {</h1>

<pre><code>width: 20%;
float: left;
background-color: #67B6DA;
position: fixed;
height: 100%;
</code></pre>

<p>}</p>

<h1>items-container {</h1>

<pre><code>width: 80%;
float: left;
position: relative;
margin-left: 20%;
background-color: #F7F7F7;
</code></pre>

<p>}</p>

<p>ul li {</p>

<pre><code>list-style: none;
</code></pre>

<p>}</p>

<h1>sidebar h3 {</h1>

<pre><code>border-bottom: 3px solid;
padding: 0;
padding-left: 30px;
</code></pre>

<p>}</p>

<h1>types li {</h1>

<pre><code>padding: 10px 30px;
</code></pre>

<p>}</p>

<p>ul#types {</p>

<pre><code>padding: 0;
font-size: 15px;
</code></pre>

<p>}</p>

<h1>types li a {</h1>

<pre><code>text-decoration: none;
color: #575757;
</code></pre>

<p>}</p>

<h1>items {</h1>

<pre><code>padding: 0 20px;
</code></pre>

<p>}</p>

<h1>items li a {</h1>

<pre><code>text-decoration: none;
color: #3A3A3A;
display: inline-block;
</code></pre>

<p>}</p>

<h1>items li {</h1>

<pre><code>padding: 20px;
</code></pre>

<p>}</p>

<h1>items li:hover {</h1>

<pre><code>background-color: #DFDFDF;
</code></pre>

<p>}</p>

<p>.item-info {</p>

<pre><code>display: inline-block;
width: 100%;
font-size: 15px;
color: #8A8A8A;
margin-top: 5px;
</code></pre>

<p>}
```</p>

<p>Lastly there&rsquo;s jshint. Here&rsquo;s a sample <code>.jshintrc</code> file which I&rsquo;ve taken from <a href="https://github.com/CSSLint/csslint/blob/master/.jshintrc">CSSLint</a>. CSSLint is basically written in JavaScript that&rsquo;s why it has its own <code>.jshintrc</code> file to help the developers in checking their code.</p>

<p>```json
{</p>

<pre><code>"camelcase": true,
"curly": true,
"eqeqeq": true,
"es3": true,
"forin": true,
"immed": true,
"indent": 4,
"latedef": true,
"newcap": true,
"noarg": true,
"noempty": true,
"nonbsp": true,
"quotmark": "double",
"strict": true,
"undef": true,
"unused": true
</code></pre>

<p>}
```</p>

<p>You can find a list of options <a href="http://jshint.com/docs/options/">here</a>.</p>

<p>And here is JSHint&rsquo;s cli tool in action:</p>

<p><img src="/images/posts/devtools_linters/jshint-cli.png" alt="jshint-cli" /></p>

<p>With this script file being checked:</p>

<p>```javascript
&ldquo;use strict&rdquo;;
x = &ldquo;y&rdquo;;
console.log(x);</p>

<p>function beam(){</p>

<pre><code>return x + u;
</code></pre>

<p>}
```</p>

<h3>Build Tool Integration</h3>

<p>Ok so we have a slight improvement over just copying and pasting the code that we want to check in the HTMLHint, CSSLint, and JSHint website. But wouldn&rsquo;t it be great if we don&rsquo;t need to execute the command every time we need to check? And in real-world projects you would most likely have multiple css, JavaScript and HTML files. So executing the commands for each of those files would be too troublesome and time-consuming. That is where build tools comes in. Luckily I&rsquo;ve already done an article specifically about <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">build tools</a> so if you&rsquo;re new to it then be sure to check that out. Then you can go back to this article once you have an idea how to use a build tool.</p>

<p>Ok so you&rsquo;re back. Hopefully you&rsquo;ve learned all about Grunt and Gulp. In this article we&rsquo;ll be using Gulp and the Gulp plugins for HTMLHint, CSSLint and JSHint. You can install those with the following command:</p>

<p><code>
npm install gulp gulp-htmlhint gulp-csslint gulp-jshint
</code></p>

<p>Optionally you can also install the formatters to make the reports more beautiful.</p>

<p><code>
npm install htmlhint-stylish jshint-stylish
</code></p>

<p>Note that there&rsquo;s also a package called <a href="https://www.npmjs.com/package/csslint-stylish">csslint-stylish</a> but it currently doesn&rsquo;t work with Gulp. If you&rsquo;re reading this article at a later time be sure to check out that page and see if it already works for Gulp.</p>

<p>The next step is to create a <code>gulpfile.js</code> file in the root of your project directory and then add the following code:</p>

<p>```javascript
var gulp   = require(&lsquo;gulp&rsquo;);</p>

<p>var htmlhint = require(&ldquo;gulp-htmlhint&rdquo;);
var csslint = require(&lsquo;gulp-csslint&rsquo;);
var jshint = require(&lsquo;gulp-jshint&rsquo;);</p>

<p>gulp.task(&lsquo;lint_html&rsquo;, function(){</p>

<pre><code>gulp.src("*.html")
    .pipe(htmlhint())
    .pipe(htmlhint.reporter("htmlhint-stylish"));
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;lint_css&rsquo;, function(){
  gulp.src(&lsquo;*.css&rsquo;)</p>

<pre><code>.pipe(csslint())
.pipe(csslint.reporter());
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;lint_js&rsquo;, function(){</p>

<pre><code>gulp.src('*.js')
    .pipe(jshint())
    .pipe(jshint.reporter("jshint-stylish"));
</code></pre>

<p>});</p>

<p>gulp.task(&lsquo;watch&rsquo;, function() {</p>

<pre><code>gulp.watch('*.html', ['lint_html']);
gulp.watch('*.css', ['lint_css']);
gulp.watch('*.js', ['lint_js']);
</code></pre>

<p>});
```</p>

<p>Like I said earlier, I won&rsquo;t go deep into this because I&rsquo;ve already written a whole article on <a href="http://wern-ancheta.com/blog/2014/04/27/a-whirlwind-tour-of-web-developer-tools-build-tools/">Build Tools</a>. Basically what this file does is to declare all the task that we want to perform with Gulp. We have four tasks in total, one for each linter and one for watching files in a specific directory. The only task that we need to execute is the last one:</p>

<p><code>
gulp watch
</code></p>

<p>What this does is to watch all the HTML files and then execute the HTML Linter. The same is true with the other file types. The linter for each specific file type is executed once you save a file. So if you press <code>ctrl + s</code> on your keyboard, the task is immediately executed. What you can do is you can either switch windows (<code>alt + tab</code>) or put the command line window and your text-editor side by side so you get instant feedback on your code.</p>

<h3>Text-editor Integration</h3>

<p>For the final part we&rsquo;re going to look at how to integrate the linting tools in the text-editor. I&rsquo;m a Sublime Text user so I&rsquo;ll be using it for the examples. But if you&rsquo;re using another text-editor or IDE be sure to check out if these tools are also available.</p>

<p>The first thing that you need to do is to install the SublimeLinter plugin with Sublime <a href="https://packagecontrol.io/">Package Control</a>.</p>

<p>Once installed, determine where HTMLHint, CSSLint, and JSHint are installed in your computer. In Ubuntu you can do something like:</p>

<p><code>
which htmlhint
which csslint
which jshint
</code></p>

<p>That will return the path to the executable file. For me it was <code>/home/wern/.nvm/v4.0.0/bin/csslint</code> for csslint. Note that <code>csslint</code> in that path is the executable file itself. So the path that you actually want is <code>/home/wern/.nvm/v4.0.0/bin</code>. It returned the same path for HTMLHint and JSHint for me so I only need that one path. Once you&rsquo;ve found it, go ahead and copy that path.</p>

<p>Next open Sublime Text, click on the <em>preferences</em> menu > <em>package settings</em> > <em>SublimeLinter</em> > <em>Settings &ndash; User</em>. This opens the user configuration file for SublimeLinter. Add the following into it and then save.</p>

<p><code>json
{}
</code></p>

<p>Open the file again by going through the same steps above. This time Sublime Text has already added the default configurations in there. What you need to do now is to look for the <code>paths</code> object and under your current operating system at the path to where the HTMLHint, CSSLint and JSHint executables are. Because I&rsquo;m using Ubuntu I had to put it inside <code>linux</code> object.</p>

<p>```json
&ldquo;paths&rdquo;: {</p>

<pre><code>"linux": [
    "/home/wern/.nvm/v4.0.0/bin"
],
"osx": [],
"windows": []
</code></pre>

<p>},
```</p>

<p>Once you&rsquo;re done, save the file then restart Sublime Text (close it and open again).</p>

<p>Open the Sublime Text console by pressing <code>ctrl + `</code> then look for something similar to the following:</p>

<p><code>
SublimeLinter: htmlhint activated: /home/wern/.nvm/v4.0.0/bin/htmlhint
SublimeLinter: jshint activated: /home/wern/.nvm/v4.0.0/bin/jshint
SublimeLinter: csslint activated: /home/wern/.nvm/v4.0.0/bin/csslint
</code></p>

<p>This tells you that SublimeLinter has successfully picked up the paths to where the linters are installed. If you&rsquo;re seeing that then you&rsquo;re good to go, if not then be sure to check if the path that you&rsquo;ve supplied really contains the executable code for each of those linters.</p>

<p>Here are some screenshot that shows the linters in action:</p>

<p><img src="/images/posts/devtools_linters/htmlhint-text.png" alt="htmlhint text editor" /></p>

<p><img src="/images/posts/devtools_linters/csslint-text.png" alt="csslint text editor" /></p>

<p><img src="/images/posts/devtools_linters/jshint-text.png" alt="jshint text editor" /></p>

<p>The yellow dots indicates warnings, while the red dots indicate errors. If you move your cursor over to the line where a dot is, you can see the actual message on the status bar (bottom left corner of the screen). Pretty sweet right?</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it! In this article you&rsquo;ve learned how to use some of the tools that you could use to help you with determining potential problems in your HTML, CSS and JavaScript code. You&rsquo;ve also learned how to integrate this into your workflow by making use of the command-line tool or the text-editor integration.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/yaniswang/HTMLHint/wiki">HTMLHint Wiki</a></li>
<li><a href="https://github.com/CSSLint/csslint/wiki">CSSLint Wiki</a></li>
<li><a href="https://github.com/jshint/jshint/wiki/Documentation">JSHint Wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: Web Servers]]></title>
    <link href="http://wern-ancheta.com/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers/"/>
    <updated>2014-03-01T08:35:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/03/01/a-whirlwind-tour-of-web-developer-tools-web-servers</id>
    <content type="html"><![CDATA[<p>In this part four of the series A Whirlwind Tour of Web Developer Tools I&rsquo;m going to walk you through web servers. Web servers are computers that commonly delivers web pages. But when talking about web development web server refers to the software used for serving up the web pages. In this blog post I&rsquo;m going to talk about 4 web servers that you can use in serving up your web projects.</p>

<!--more-->


<h3>Python Simple HTTP Server</h3>

<p>First on the list is the simple http server that is built-in to python. So in order to use this you would need to have Python installed. Python already comes pre-installed in Ubuntu and other Linux distributions so you already have the simple http server by default. For Mac OS X its also pre-installed. But for Windows you would need to get an installer from the <a href="http://python.org/download/">Python website</a>.
You can use it by opening up a terminal from any directory that you want to serve and execute the following command:</p>

<p><code>
python -m SimpleHTTPServer
</code></p>

<p>To test it out you can create a new <code>index.html</code> file on the directory where you executed the command above and access <a href="http://localhost:8000">http://localhost:8000</a> from your browser.</p>

<p>Note that the simple http server will simply list out all the files in that directory if you do not have an <code>index.html</code> file:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/simplehttpserver.png" alt="simple http server" /></p>

<p>You can also implement your own web server by creating a new python file (<code>server.py</code>) and putting the following code:</p>

<p>```python
import SimpleHTTPServer
import SocketServer</p>

<p>PORT = 1234</p>

<p>Handler = SimpleHTTPServer.SimpleHTTPRequestHandler</p>

<p>httpd = SocketServer.TCPServer((&ldquo;&rdquo;, PORT), Handler)</p>

<p>print &ldquo;serving at port&rdquo;, PORT
httpd.serve_forever()
<code>``
You can then execute the</code>server.py` file from the terminal to start the server. Note that the file must be inside the same directory that you want to serve.</p>

<h4>PHP Server</h4>

<p>There is also the built-in server for PHP version 5.4.0 and above. This comes with PHP so you need to install it first before you can start using it. You can install PHP by executing the following command from your terminal</p>

<p><code>
sudo apt-get install php5
</code></p>

<p>Once you&rsquo;re done installing it you can now start using the server by navigating to the directory that you want to serve and executing the following command from the terminal:</p>

<p><code>
php -S localhost:8000
</code></p>

<p>This will serve up the current directory under port 8000 of your local machine so to access it from the browser you can open up the following url: <a href="http://localhost:8000">http://localhost:8000</a>.</p>

<p>Note that if you do not have a default file (either <code>index.html</code> or <code>index.php</code> file) in the directory that you are serving the PHP server is going to return a 404 not found:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/php-server.png" alt="php-server" /></p>

<p>The advantage of using the PHP server over simple http server is that you can actually create some php files in the directory that you are serving, write some code in it and the server will also be able to interpret it for you.</p>

<h3>Apache</h3>

<p>Next is the Apache HTTP Server from the Apache Foundation. You can install it by executing the following command from the terminal:</p>

<p><code>
sudo apt-get install apache2
sudo /etc/init.d/apache2 restart
</code></p>

<p>For Windows users there is this thing called <a href="http://www.wampserver.com/en/">WAMP</a> which you can install. Apache is packaged with it along with MySQL and PHP so you can start playing with it immediately without doing a lot of configuration. You can also have them installed separately but you will have to do some configuration before you can start playing with it. I&rsquo;ve written a tutorial about it before: <a href="http://kyokasuigetsu25.wordpress.com/2012/04/12/how-to-install-and-configure-apache-php-and-mysql/">How to install and configure apache, php, and mysql</a> so check that out if you do not want to use packaged versions.</p>

<p>For MAC OS there&rsquo;s <a href="http://www.mamp.info/en/index.html">MAMP</a>.</p>

<p>There&rsquo;s also <a href="http://www.apachefriends.org/index.html">XAMPP</a> which is a cross-platform solution for easily setting up Apache, PHP, and MySQL on your machine.</p>

<p>If you&rsquo;re a beginner I definitely recommend using either WAMP, MAMP or XAMPP as it can be sometimes frustrating to configure everything on your own.</p>

<p>Ok back to the main topic of this section which is Apache. If you&rsquo;re on Linux and you have installed Apache separately you might want to <a href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">configure the default web directory</a> since the default web directory that is used by Apache isn&rsquo;t writeable if you do not access the file explorer as a super user. This becomes a problem when accessing the web directory from the browser as Apache throws you a forbidden error. If you haven&rsquo;t catch it the first time you can go ahead and use the following tutorial: <a href="[configure%20the%20default%20web%20directory](http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/">fixing the forbidden error in Apache</a>) to properly configure Apache. Once you&rsquo;re done with that you can go back to this blog post.</p>

<p>After configuring the default web directory used by Apache you can now put some test files on the web directory. Something like <code>index.html</code> and put the following contents:</p>

<p>```html</p>

<h1>Hello World from Apache!</h1>


<p><code>``
Now if you go to [http://localhost](http://localhost) you can now see the</code>index.html` being served by Apache. Apache serves everything on port 80 by default so we didn&rsquo;t have to add the port when we access it from the browser. This is because the browser knows by default that web pages are served at port 80. If you already have PHP installed you can also serve php files. Apache already knows how to serve those by default so there&rsquo;s no need for further configuration.</p>

<h3>Nginx</h3>

<p>Lastly there&rsquo;s Nginx one of the HTTP servers that&rsquo;s gaining market share lately. You can install it by executing the following command from your terminal:</p>

<p><code>
sudo apt-get install nginx
</code></p>

<p>If you&rsquo;re on Windows there&rsquo;s a guide from the Nginx website on <a href="http://nginx.org/en/docs/windows.html">how to install Nginx on Windows</a>.</p>

<p>For Mac you can install it via homebrew:</p>

<p><code>
brew install nginx
</code></p>

<p>Once Nginx is installed you can run it by executing <code>sudo nginx</code>. Note that if you already have Apache installed you would have a problem starting Nginx up. Most likely you would get an error similar to the one below:</p>

<p><img src="/images/posts/whirlwind_tour_webservers/nginx-port.png" alt="nginx port error" /></p>

<p>This is Nginx telling you that port 80 is already in use. We learned earlier that Apache uses port 80 by default so running another server which serves web pages at port 80 will lead to that issue.
What we need to do is to configure Nginx to listen to another port. And you can do that by navigating to the following path:</p>

<p><code>
cd /etc/nginx/sites-available
</code></p>

<p>Then open up the <code>default</code> file:</p>

<p><code>
sudo gedit default
</code></p>

<p>From there scroll down to the line which is similar to the following:</p>

<p>```
server {</p>

<pre><code>listen 80 default_server;
listen [::]:80 default_server ipv6only=on;

root /usr/share/nginx/html;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>There are 2 things that you can do from here. First replace the 2 instances of <code>80</code> which is the default port used by Nginx to something like <code>6789</code>. Then you can also change the default web directory. Nginx uses <code>/usr/share/nginx/html</code> as its default, you can change it to something like <code>/home/your_user_name/nginx_web_files</code>. After updating the <code>default</code> file it should now look like this:</p>

<p>```
server {</p>

<pre><code>listen 6789 default_server;
listen [::]:6789 default_server ipv6only=on;

root /home/your_user_name/nginx_web_files;
index index.html index.htm;
</code></pre>

<p>```</p>

<p>After that save the file and restart Nginx using the following command:</p>

<p><code>
sudo nginx -s reload
</code></p>

<p>You can now go ahead and create a sample <code>index.html</code> file in your chosen web directory and put the following contents:</p>

<p>```html</p>

<h1>hello world from nginx!</h1>


<p>```</p>

<p>To access it from your browser go to <a href="http://localhost:6789">http://localhost:6789</a>.</p>

<h4>Configuring PHP in Nginx</h4>

<p>Not unlike Apache, Nginx doesn&rsquo;t work with PHP by default so if you try serving up a PHP file Nginx won&rsquo;t understand it and it will give you a bad gateway error.</p>

<p>In order to make PHP work with Nginx you first have to install the <code>php5-fpm</code> package via the terminal:</p>

<p><code>
sudo apt-get install php5-fpm
</code></p>

<p>Once that&rsquo;s done you can now update the <code>default</code> file under the <code>/etc/nginx/sites-availble</code> directory.</p>

<p><code>
sudo gedit default
</code></p>

<p>Scroll down to the line where you have something similar to the following:</p>

<p>```</p>

<h1>location ~ .php$ {</h1>

<h1>fastcgi_split_path_info ^(.+.php)(/.+)$;</h1>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<h1>fastcgi_pass 127.0.0.1:9000;</h1>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<h1>fastcgi_index index.php;</h1>

<h1>include fastcgi_params;</h1>

<h1>}</h1>

<p>```</p>

<p>Then uncomment the lines that are necessary to make PHP work:</p>

<p>```
location ~ .php$ {
fastcgi_split_path_info ^(.+.php)(/.+)$;</p>

<h1>NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</h1>

<p>#</p>

<h1># With php5-cgi alone:</h1>

<pre><code>fastcgi_pass 127.0.0.1:9000;
</code></pre>

<h1># With php5-fpm:</h1>

<h1>#fastcgi_pass unix:/var/run/php5-fpm.sock;</h1>

<pre><code>fastcgi_index index.php;
include fastcgi_params;
</code></pre>

<p>}
```</p>

<p>Save the changes and restart php5-fpm and Nginx:</p>

<p><code>
sudo service php5-fpm restart
nginx -s reload
</code></p>

<p>You can now request a PHP file from Nginx.</p>

<h3>Conclusion</h3>

<p>You&rsquo;ve learned how to serve up web pages using the following http servers:</p>

<ul>
<li>SimpleHTTPServer</li>
<li>PHP Server</li>
<li>Apache HTTP Server</li>
<li>Nginx</li>
</ul>


<p>Web Servers are flexible by default. They can serve up different types of content and they can also serve up interpreted language such as PHP. You can pretty much live with the just the defaults but if your web project is something that&rsquo;s used by many people across the world then its important that you configure your web server to accommodate the needs of every user. And that is to be able to access your website fast and securely.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://docs.python.org/2/library/simplehttpserver.html">Simple HTTP Server</a></li>
<li><a href="http://www.php.net/manual/en/features.commandline.webserver.php">PHP Built-in Web Server</a></li>
<li><a href="http://httpd.apache.org/docs/">Apache HTTP Server</a></li>
<li><a href="http://nginx.org/en/docs/">Nginx</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A whirlwind Tour of Web Developer Tools: Text Editors]]></title>
    <link href="http://wern-ancheta.com/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors/"/>
    <updated>2014-02-15T11:00:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/02/15/a-whirlwind-tour-of-web-developer-tools-text-editors</id>
    <content type="html"><![CDATA[<p>This is part two of the series A Whirlwind Tour of Web Developer Tools. This time I&rsquo;ll be talking about text editors and related tools.</p>

<p>Text editors are used by web developers to write code. Text editors are not the same thing as word processors because anything written on a text editor is saved as a plain text file and it normally uses a simple character set such as ASCII to represent different characters (letters, numbers, etc). On the other hand word processors saves formatted text which enables tables, symbols and other form of graphical information to be represented without having to use any form of markup like HTML.</p>

<!--more-->


<h4>Sublime Text</h4>

<p>When you say text editor the first thing that comes to mind these days is <a href="http://www.sublimetext.com/">Sublime Text</a>. It&rsquo;s like the sexiest text editor these days. So this whole blog post is primarily going to be about Sublime Text and some of the plugins that I found useful.</p>

<h5>Plugins</h5>

<p>In order to install plugins for Sublime Text you first have to install <a href="https://sublime.wbond.net/">package control</a> which is a package manager for Sublime Text that allows you to easily install plugins. To install package manager copy the following code in the Sublime Text console which can be accessed by pressing <code>ctrl + back tick</code> on your keyboard. After that restart the editor to finish the installation:</p>

<p><code>
import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
</code></p>

<p>Note that the code above is for Sublime Text 2, if you&rsquo;re using Sublime Text 3 then use the following code:</p>

<p><code>
import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></p>

<p>After restarting sublime text you can now press <code>ctrl + shift + p</code>, select &lsquo;install package&rsquo; and press <code>enter</code>, this will load all the available plugins from the plugin repository. From there you can just search for the plugin that you want to install.</p>

<p>And now for the plugins:</p>

<ul>
<li><a href="https://github.com/benmatselby/sublime-phpcs">PHPCS</a> &ndash; a PHP code quality tool.</li>
<li><a href="http://emmet.io/">Emmet</a> &ndash; previously known as Zen Coding. If that doesn&rsquo;t ring a bell then Emmet is basically a tool for improving productivity by implementing shortcuts for generating code that you would normally write out by hand. All you have to do is to write something like this:</li>
</ul>


<p><code>
html:5
</code></p>

<p>And right after pressing <code>tab</code> you get a whole bunch of code written out for you:</p>

<p>```html
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body></p>

<p></body>
</html>
```</p>

<ul>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements">Sidebar Enhancements</a> &ndash; allows you to create a new file and it will immediately ask you the filename, duplicating or copying files and folders from the sidebar, and a bunch of other good stuff that the default sublime text sidebar doesn&rsquo;t allow you to do.</li>
<li><a href="https://github.com/facelessuser/BracketHighlighter">Bracket Highlighter</a> &ndash; allows for easier visualization of where the ending bracket is.</li>
<li><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a> &ndash; keeps a history of clipboard items so you can just paste them in later.</li>
<li><a href="https://github.com/spadgos/sublime-jsdocs">Docblockr</a> &ndash; pretty much like emmet but only for document blocks. Useful for writing comments.</li>
<li><a href="https://github.com/wbond/sublime_alignment">Alignment</a> &ndash; allows for easy alignment of code. All you have to do is press <code>ctrl + alt + a</code> on your keyboard.</li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter-for-ST2">Sublime Linter</a> &ndash; inline linting for a bunch of languages (PHP, HTML, CSS, Ruby, etc). If you don&rsquo;t know what linting is, its basically a process of analyzing code to determine potential errors. In most cases its used by web developers to check their code quality against a specific coding standard. For example, when coding in JavaScript its not usually required to put semi-colons but if you&rsquo;re using Sublime linter it will remind you to put those semi-colons in if you forget it. If you have unused variables in your code the linter will also complain and it will tell you that variable <code>z</code> isn&rsquo;t actually used in your code.</li>
<li><a href="https://github.com/sindresorhus/editorconfig-sublime">EditorConfig</a> &ndash; tool for implementing coding conventions. You can use this to specify whether to use tabs or spaces for specific file types (<code>.js</code>, <code>.css</code>) or whether to use double quotes or single quotes for the quote type. You can do all that by installing the editorconfig plugin for the text editor that you&rsquo;re using. Then create a <code>.editorconfig</code> file in the root of your project directory or any directory in your project if you want to use different rules for different directories. Here&rsquo;s a sample <code>.editorconfig</code> file:</li>
</ul>


<p>```
root = true</p>

<p>[*]
end_of_line = lf
insert_final_newline = false
charset = utf-8
trim_trailing_whitespace = true
quote_type = double</p>

<p>[*.php]
indent_style = space
indent_size = 4</p>

<p>[*.py]
indent_style = space
indent_size = 4</p>

<p>[*.js]
indent_style = space
indent_size = 2</p>

<p>[*.css]
indent_style = space
indent_size = 5
```</p>

<p>As you can see from the sample above you can specify a whole bunch of settings. You can also have different rules for different file types.</p>

<h4>IDE</h4>

<p>There&rsquo;s also this thing called the IDE or Integrated Development Environment which is basically text editors on steroids. They have huge install size since they allow you to do more than just writing code. IDE&rsquo;s packs a bunch of features which you would not normally find in a text editor such as compiling code. Some IDE&rsquo;s such as Visual Studio also allows you to build the GUI of applications by simply dragging and dropping GUI elements (text boxes, buttons, etc.) from a toolbox. Other features include code completion (intellisense), debugger, integrated services (allows viewing and manipulating the database right from the IDE).</p>

<h3>Conclusion</h3>

<p>Text editors and IDEs are the main weapons of every web developer. Without it they won&rsquo;t be able to produce any code. So its important to learn the ins and outs of the text-editor or IDE that you are using to maximize your productivity when using it. Be sure to check out the resources below for more Sublime Text awesomeness.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.hongkiat.com/blog/sublime-text-tips/">Sublime Text Tips and Tricks</a></li>
<li><a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">Perfect Workflow in Sublime Text 2</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">Popular Sublime Text Plugins</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_text_editors">Compariosn of Text Editors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments">Comparison of Integrated Development Environments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Whirlwind Tour of Web Developer Tools: In-Browser Tools]]></title>
    <link href="http://wern-ancheta.com/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools/"/>
    <updated>2014-02-09T12:30:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/02/09/a-whirlwind-tour-of-web-developer-tools</id>
    <content type="html"><![CDATA[<p>In this series of blog posts I&rsquo;m going to give you an overview of some of the tools that are commonly used by web developers to get their work done. You can expect some examples on how to install and use each tool but I won&rsquo;t be going too deep. The main purpose is to simply give you an idea on what tools are available, how to use them and encourage you to integrate them into your workflow. Note that the tools that will be mentioned in this blog post aren&rsquo;t platform specific so you can use them whether you&rsquo;re developing in Windows, Linux or Mac. Over the coming weeks I&rsquo;m going to walk you through the following:</p>

<ul>
<li>In-Browser Tools</li>
<li>Text Editor</li>
<li>Virtualization</li>
<li>Web Servers</li>
<li>Command Line Utilities</li>
<li>Package Managers</li>
<li>Source Control</li>
<li>Build Tools</li>
<li>Linting</li>
<li>Testing</li>
<li>Language Compilers</li>
<li>Coding Standards</li>
<li>Boilerplates and Front-end Frameworks</li>
<li>Templating</li>
<li>Deployment</li>
<li>Miscellaneous</li>
</ul>


<!-- more -->


<h3>In-Browser Tools</h3>

<p>First on the list is the browser tools. Browser tools are a set of tools that live on the browser which can help you in inspecting and debugging web applications.</p>

<h4>Chrome Developer Tools</h4>

<p>One of the most popular browser tool today is the Chrome Developer Tools. You can access it by pressing <code>Ctrl + Shift + I</code> or <code>Cmd + Opt + I</code> on your keyboard. By default this opens up the last panel that you have accessed.</p>

<ul>
<li><strong>Elements</strong> &ndash; allows DOM inspection and modification, changes are reflected on the page as you update.</li>
<li><strong>Network</strong> &ndash; this is where you can view all of the HTTP requests made by your web project. The size and time it took to download each requested file are also viewable so the network panel is mostly used for evaluating the performance of your web project in terms of the HTTP requests that are made.</li>
<li><strong>Sources</strong> &ndash; used for viewing and updating the source files used by your web project. If you selected a JavaScript file it will also allow you to debug it.</li>
<li><strong>Timeline</strong> &ndash; used for evaluating the performance of your web project in terms of frames and memory consumed</li>
<li><strong>Profiles</strong> &ndash; used for profiling JavaScript performance</li>
<li><strong>Resources</strong> &ndash; kind of similar with the sources panel, but it doesn&rsquo;t allow you to edit the source files. It also allows you to view and modify cookie and local storage information.</li>
<li><strong>Audits</strong> &ndash; evaluates the web page performance in terms of network utilization and css and JavaScript performance.</li>
<li><strong>Console</strong> &ndash; allows you to run JavaScript code and inspect JavaScript objects.</li>
</ul>


<h4>Useful Extensions and Plugins</h4>

<ul>
<li><strong>Web Developer</strong> &ndash; packs various extensions and tools to help in testing web pages <a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">[firefox]</a></li>
<li><strong>Tincr</strong> &ndash; allows live reloading of web pages as you make changes to the source file. The saving of changes is also bi-directional which means that if you edit the file in the sources panel of the Chrome Developer Tools the changes will also get saved to the source file. Pretty sweet! <a href="https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih?hl=en">[chrome]</a></li>
<li><strong>Pagespeed Insights</strong> &ndash; used for evaluating the performance of web pages based on industry best practices. It will give you some suggestions on how you can improve the performance of your website based on its evaluation. <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli?hl=en">[chrome]</a></li>
<li><strong>YSlow</strong> &ndash; the same as Pagespeed Insights. <a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">[chrome]</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">[firefox]</a></li>
</ul>


<h4>Firefox Developer Tools</h4>

<p>Pretty much the same with the Chrome Developer Tools. It also allows you to inspect and modify a web page, debug JavaScript code, monitor and inspect HTTP requests as they happen. During my testing I found out that most of the features are the same, the only tool that is not present by default in the Chrome Developer Tools is the 3d view for web pages.</p>

<p><img src="/images/posts/whirlwind_tour_web_developer_tools/3dview.png" alt="3d view" /></p>

<h4>Firebug</h4>

<p>The in-browser tool that started it all. It was already around before Chrome Dev Tools and Firefox Dev Tools came out. Most of the features are also the same with that of Chrome Dev Tools and Firefox Dev Tools.</p>

<h3>Conclusion</h3>

<p>In-browser tools are a nice way to easily design and test websites. They allow you to do almost everything right from the browser itself. The main benefit of this is instant feedback. You get to see what effect your changes have on the website right after making the change. Tools like tincr even make it possible to commit your changes to your source files so you won&rsquo;t have to go back to the text-editor and commit your changes.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developers.google.com/chrome-developer-tools/">Chrome Developer Tools</a></li>
<li><a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks">Chrome Developer Tools Tools Tips and Tricks</a></li>
<li><a href="https://getfirebug.com/faq/">Firebug</a></li>
<li><a href="https://developer.mozilla.org/en/docs/Tools">Firefox Developer Tools</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This crazy world of web development]]></title>
    <link href="http://wern-ancheta.com/blog/2013/04/13/this-crazy-world-of-web-development/"/>
    <updated>2013-04-13T13:45:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2013/04/13/this-crazy-world-of-web-development</id>
    <content type="html"><![CDATA[<p>Need a css framework? There&rsquo;s Foundation, Bootstrap, HTML Kickstart, Kube, Skeleton, Baseline, Gumby, Ink, Groundwork.
There&rsquo;s also a bunch of others which are based from Bootstrap: Flatstrap, Metro Bootstrap.</p>

<p>Need a boilerplate? There&rsquo;s the HTML5 Boilerplate, 320 and up, HTML5Bones.</p>

<p>Need a package manager? There&rsquo;s component, ender, bower, jam, NPM.</p>

<p>Need a browser tool? There&rsquo;s Firebug, Chrome Developer tools, Page Speed Insights, JSON View, YSlow, MeasureIt, Colorzilla, CSS Usage, PageSpeed, SEO Doctor.</p>

<p>Need a coding tool? There&rsquo;s Codekit(for Mac), ScoutApp (for Windows), LiveReload, Yeoman, Grunt, Lumbar, Yeoman, Sublime Text, Brackets.</p>

<p>Need a css base? There&rsquo;s reset.css and normalize.css.</p>

<p>Need a CSS Compiler? There&rsquo;s SASS + Compass, LESS.</p>

<p>Need a validator/linting tool? There&rsquo;s JSLint, JSHint, JSON Lint, HTML Validator, CSS Validator.</p>

<p>Need a static site generator? There&rsquo;s Jekyll, Octopress, Middleman.</p>

<p>Need an MVC/MVP/MVVM Framework? There&rsquo;s Backbone, Ember, Knockout, Angular.</p>

<p>Tired of writing helper functions from scratch? There&rsquo;s underscore.js, sugar.js, lo-dash, yepnope.js, modernizr, accounting.js.</p>

<p>Need to work with SVG? There&rsquo;s Processing.js, Raphael.js, SVG Kit and SVG Web.</p>

<p>How about templating libraries? There&rsquo;s Smarty, Handlebars, Mustache, Hogan.js.</p>

<p>Need a JavaScript library? There&rsquo;s jQuery, Dojo, Mootools.</p>

<p>You think JavaScript is ugly? There&rsquo;s Coffeescript, TypeScript, Dart.</p>

<p>Want a back-end framework? There&rsquo;s Ruby on Rails for Ruby, Laravel for PHP, and Django for Python, Node.js.</p>

<p>Need a database? There&rsquo;s MySQL, PostgreSQL, MongoDB, CouchDB, RavenDB.</p>

<p>How about a Software Development Methodology? There&rsquo;s Waterfall, Prototyping, Spiral, RAD, Agile.</p>

<p>How about Design Patterns? There&rsquo;s Singleton, Adapater, Bridge, Facade, Factory and a bunch of others.</p>

<p>Heck there&rsquo;s a lot! The list is endless and it&rsquo;s hard to keep up.
There&rsquo;s always something new everyday.
There&rsquo;s always a new technology, methodology, library, and tool.
There&rsquo;s always a new blog post, video, and podcasts that speaks about these technologies, methodologies, libraries and tools.
There&rsquo;s always a new, cool and faster way to solve problems.</p>

<p>There&rsquo;s always this temptation (in most cases obsession) to check out all the shiny and new stuff, to read all those blog posts which speaks about them.
And before you know it there&rsquo;s no more time left for you to solve the real problems that needs solving.</p>

<p>Most of the tools, libraries and methodologies that comes out everyday is yet another way to solve existing problems.
The only difference is that its newer and it looks sexier. But sooner or later it becomes out of fashion and a shiny new thing will replace it again.</p>

<p>What&rsquo;s important is learning the core technology behind a library, so instead of learning jQuery, Mootools or Dojo we should first learn JavaScript. Instead of learning how to use Bootstrap or Foundation we should learn the basics and important concepts in CSS first. Core technologies that makes the whole platform (the web) work  never gets replaced thus it should be given the priority before the shiny and new stuff. And once your done learning the core technologies you&rsquo;re in a good position to try out some of the shiny and new stuff. And by try I mean giving it a go for a week or so and see if it feels right for you. If it feels right for you and you think it makes you more productive then you should definitely include it in your daily workflow.</p>

<p>Who cares if you&rsquo;re using MS Paint and not Photoshop. Who cares if you&rsquo;re using Notepad or Dreamweaver instead of Sublime Text. Who cares if you&rsquo;re still using <code>alert</code> instead of <code>console.log</code> to debug your JavaScript. If you think you&rsquo;re productive by using some of the old tools then why not right? At the end of the day it doesn&rsquo;t really matter what tools, libraries or methodologies we use as long as we get to solve problems and we make our clients happy by solving them.</p>
]]></content>
  </entry>
  
</feed>
