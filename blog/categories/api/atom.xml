<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-11-26T21:38:43+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gettting Started with Coinbase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api/"/>
    <updated>2013-11-03T13:34:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/11/03/gettting-started-with-coinbase-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started developing applications which communicates with the Coinbase API. But first what is Coinbase?</p>

<p><blockquote><p>Coinbase is a service that allows you to use bitcoins as a means of payment for goods and services.<br/>Its like Paypal but for bitcoins.</p></blockquote></p>

<p>First thing that you need to do is to register an account with Coinbase.</p>

<p><img src="/images/posts/coinbase_api/coinbase-register.png" alt="register account" /></p>

<p>Then go to your email and verify the account.</p>

<p>Accept the license.</p>

<p><img src="/images/posts/coinbase_api/coinbase-license.png" alt="accept license" /></p>

<p>Next, click on account settings and then click on the integrations tab:</p>

<p><img src="/images/posts/coinbase_api/coinbase-api.png" alt="integrations" /></p>

<p>Next, click on show my API key. You would need to enter your password to verify that you are indeed the account owner. Initially the API key is disabled so you need to enable it as well.</p>

<p><img src="/images/posts/coinbase_api/enable-apikey.png" alt="enable api key" /></p>

<p>After that, simply copy the API key that&rsquo;s displayed.</p>

<p><img src="/images/posts/coinbase_api/copy-apikey.png" alt="copy api key" /></p>

<p>The API key will be used for authenticating requests to the Coinbase API.</p>

<h3>Authentication</h3>

<p>There are 2 ways in which a request to the API can be authenticated:</p>

<ol>
<li>API key</li>
<li>OAuth2</li>
</ol>


<h4>Authentication using API Key</h4>

<p>Authenticating a request via the API Key is the easier way of making requests to the API. All you have to do is to append the api key on each request. The cool thing is you can directly execute a request to the API directly from the browser for methods that can be called via <code>GET</code>.</p>

<p>For example when you want to get the account balance, you simply do something like:</p>

<p><code>
https://coinbase.com/api/v1/account/balance?api_key=xyz
</code></p>

<p>There&rsquo;s a bunch of other methods which you can call directly from the browser. They&rsquo;re all listed <a href="https://coinbase.com/api/doc/1.0.html">here</a>. Do note that you can only call a method directly from the browser when its request method is <code>GET</code>. <code>POST</code> methods cannot be called directly from the browser, you need to use <code>curl</code> or <code>file_get_contents()</code> to be able to make the request.</p>

<p>Here&rsquo;s an example of using <code>curl</code> to generate  a payment button, remember to pass the API Key along with the parameters required by the specific API method:</p>

<p>```php
&lt;?php</p>

<pre><code>$request = '{
    "api_key" : "xyz", 
    "button": {
        "name": "test",
        "price_string": "1.23",
        "price_currency_iso": "USD"
    }
}';

$post_fields = json_decode($request, true); //convert json string to an object
$post_fields = http_build_query($post_fields); //urlencode for arrays

$curl = curl_init();
curl_setopt($curl, CURLOPT_POST, true); //tell curl that were posting some data along with the request 
curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields); //the data that we want to post
curl_setopt($curl, CURLOPT_URL, 'https://coinbase.com/api/v1/buttons'); //the request url

curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); //return the transfer, by default its being echoed out
$response = curl_exec($curl); //execute the request
</code></pre>

<p>?>
```</p>

<p>The method that we have used above is the <code>buttons</code> method. It only requires 3 arguments:</p>

<ul>
<li><p><strong>button[name]</strong> &ndash; the name of the item or service for which you are collecting bitcoins.</p></li>
<li><p><strong>button[price_string]</strong> &ndash; the total price of the item or service.</p></li>
<li><p><strong>button[price_currency_iso]</strong> &ndash; the currency of the price used in the <code>button[price_string]</code> argument. Examples are <code>USD</code>, <code>PHP</code>, <code>SGD</code>, <code>CAD</code>, or <code>BTC</code> for the bitcoin currency. It would be easier if <code>BTC</code> isn&rsquo;t used so you won&rsquo;t have to convert. Simply use your local currency and the API will automatically convert it to <code>BTC</code> depending on the current exchange rate.</p></li>
</ul>


<p>The response would be formatted in JSON:</p>

<p>```json
{</p>

<pre><code>"success": true,
"button": {
    "code": "93865b9cae83706ae59220c013bc0afd",
    "type": "buy_now",
    "style": "buy_now_large",
    "text": "Pay With Bitcoin",
    "name": "test",
    "description": "Sample description",
    "custom": "Order123",
    "price": {
        "cents": 123,
        "currency_iso": "USD"
    }
}
</code></pre>

<p>}
```</p>

<p>To generate the payment button, simply create a div with a class of <code>coinbase-button</code> then give it a data attribute <code>data-code</code> using the button code as its value. After that create a new script element and use the <code>button.js</code> from coinbase:</p>

<p>```html</p>

<div class="coinbase-button" data-code="<?php echo $response->button->code; ?>"></div>


<script src="https://coinbase.com/assets/button.js"></script>


<p>```</p>

<p>The response returned above can also be used for generating payment pages.
All you have to do is append the button code to the coinbase checkout url:</p>

<p><code>html
&lt;?php
$response = json_decode($response); //convert json string to an object
?&gt;
&lt;a href="https://coinbase.com/checkouts/&lt;?php echo $response-&gt;button-&gt;code; ?&gt;"&gt;Checkout&lt;/a&gt;
</code></p>

<h4>Authentication using OAuth2</h4>

<p>Authentication using OAuth2 is a bit difficult. Thankfully there are good people out there who creates libraries that makes our lives easier. One of those libraries is the <a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a> library.</p>

<p>To use it, simply download the zip file from the Github repository or clone it on your machine. Once the download is done, you can just include it on your working script:</p>

<p><code>php
&lt;?php
require 'libs/coinbase/Coinbase.php';
?&gt;
</code></p>

<p>After that, you can go ahead and call the methods available from the library. In the example below were calling the <code>getOrders()</code> method which simply returns all the orders received by the merchant who owns the API Key that is used in the code. This means that every merchant who plans to integrate Coinbase in their application has to create their own Coinbase app in order to receive an API Key. The API Key will then serve as their identification for each request that is made to the API. Yes this is a bit of a drag for the merchants but that&rsquo;s just how it works so there&rsquo;s no choice but to stick with it.</p>

<p><code>
&lt;?php
$api_key = 'xyz';
$coinbase = new Coinbase($api_key);
$orders = $coinbase-&gt;getOrders();
?&gt;
</code></p>

<p>The response returned from the code above is not the same as the response that you directly get from the API.
The library already converts it to an object so there&rsquo;s no need to. Here&rsquo;s an example of looping through the orders:</p>

<p>```
&lt;?php
if($orders->total_count > 0){</p>

<pre><code>foreach($orders-&gt;orders as $row){

    echo $row-&gt;order-&gt;created_at; 
    echo $row-&gt;order-&gt;button-&gt;description; 
    echo $row-&gt;order-&gt;status; 
    echo $row-&gt;order-&gt;total_native-&gt;cents; 
    echo $row-&gt;order-&gt;button-&gt;name; 

}
</code></pre>

<p>}
?>
```</p>

<h2>Conclusion</h2>

<p>You&rsquo;ve learned how to perform requests to the Coinbase API. Requests can be performed directly from the browser or via Curl. You have also learned how to generate payment buttons via the API.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://coinbase.com/api/doc/1.0.html">API Documentation</a></li>
<li><a href="https://github.com/coinbase/coinbase-php">Coinbase-PHP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Delicious API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api/"/>
    <updated>2013-10-20T13:17:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/20/getting-started-with-delicious-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get the links that you have bookmarked using Delicious using the Delicious API.</p>

<p>The Delicious API unlike other Web API&rsquo;s that&rsquo;s using either OAuth, OAuth2 or their custom Authentication method is using <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Basic Access Authentication</a>. This means that performing API calls requires the username and the password of the user whose bookmarks you want to have access to.
This means that there&rsquo;s no confidentiality with this Authentication method. Without you knowing, the application that&rsquo;s going to do the talking with the Delicious API can just save your username and password in a database and the developers can have access to the links that you&rsquo;ve bookmarked in your account whether public or private. So as a user its recommended that you only bookmark links that doesn&rsquo;t contain any confidential or classified information.</p>

<h3>Delicious Class</h3>

<p>First let&rsquo;s go ahead and create the class that we will be using to access the Delicious API. Let&rsquo;s name it <code>class.delicious.php</code>. Then declare the 4 private variables that we will be using throughout the class:</p>

<p>```php
&lt;?php
class delicious{</p>

<pre><code>private $curl;
private $curl_options; //options that will be used for curl
private $username; //delicious username
private $password; //delicious password
</code></pre>

<p>?>
```</p>

<p>The constructor will accept 2 arguments, the delicious username and password. We&rsquo;ll also initialize <code>curl</code> so we don&rsquo;t have to initialize it on every method call.</p>

<p>```
&lt;?php
public function __construct($username, $password){</p>

<pre><code>$this-&gt;username = $username;
$this-&gt;password = $password;
$this-&gt;curl = curl_init();
</code></pre>

<p>}
?>
```</p>

<p>Next, create the <code>set_options()</code> method. This method will simply set the curl options.</p>

<p>```
&lt;?php
public function set_options(){</p>

<pre><code>$this-&gt;curl_options = array(
    CURLOPT_RETURNTRANSFER =&gt; 1, //return the response from the delicious API.
    CURLOPT_SSL_VERIFYPEER =&gt; false, //disable verification of the peer's certificate 
    CURLOPT_USERPWD =&gt; $this-&gt;username . ':' . $this-&gt;password //set the username and password to be used for authentication
);
</code></pre>

<p>}
?>
```</p>

<p>Next is the <code>execute()</code> method. This method is called from every method calls that are responsible for calling a specific method from the API. What it does is to assign the curl options to the curl object, executes it and then returns the response.</p>

<p>```
&lt;?php
public function execute(){</p>

<pre><code>curl_setopt_array($this-&gt;curl, $this-&gt;curl_options);

$response = curl_exec($this-&gt;curl);
if(!$response){
    //terminate the execution of the script if there's no response
    die('Error: "' . curl_error($this-&gt;curl) . '" - Code: ' . curl_errno($this-&gt;curl));
}
curl_close($this-&gt;curl); //close the connection              
return $response;
</code></pre>

<p>}
?>
```</p>

<h4>Getting all Bookmarks</h4>

<p>We can now create the methods for actually getting the bookmarks. The first method that we will create is the <code>get_all()</code> method. As the name suggests, the <code>get_all()</code> method simply gets everything that you have ever bookmarked on your delicious account. This might take some time to execute depending on the number of links that you have bookmarked.</p>

<p>```
&lt;?php
public function get_all(){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
$response = $this-&gt;execute();
$xml = simplexml_load_string($response); //converts the string response into an xml object      
return $xml;
</code></pre>

<p>}
?>
```</p>

<p>Before we proceed with the next method, I&rsquo;d like you to take a few minutes to observe what were doing here.
Because the pattern that we&rsquo;ve used here will be used on other methods that we will be creating later.</p>

<p>As you can see, were calling the <code>set_options()</code> method to set the arguments that will be needed for the request.</p>

<p><code>
&lt;?php
$this-&gt;set_options();
?&gt;
</code></p>

<p>Next, we set the main URL that were requesting from. In this cae were requesting the <code>https://api.del.icio.us/v1/posts/all</code> url. At the time of writing of this article, the main request url is <code>https://api.del.icio.us</code> The version of the API is <code>v1</code> and the method is <code>posts/all</code>. You can see the full list of API methods that you can call <a href="https://github.com/avos/delicious-api/blob/master/APIs.md">here</a>.</p>

<p><code>
&lt;?php
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/all';
?&gt;
</code></p>

<p>Next, we execute the request. The <code>execute()</code> method returns the response from the API. The response is basically in string format so we have to process it further to really get into the details that we want.</p>

<p><code>
&lt;?php
$response = $this-&gt;execute();
?&gt;
</code></p>

<p>In order to do that we call the <code>simplexml_load_string()</code> method. It&rsquo;s a built-in PHP method which you can call to convert a string response into an XML object. You can read more about it <a href="http://php.net/manual/en/function.simplexml-load-string.php">here</a>.</p>

<p><code>
&lt;?php
$xml = simplexml_load_string($response);
?&gt;
</code></p>

<p>After converting the response to an XML object, we simply return it.</p>

<p><code>
&lt;?php
return $xml;
?&gt;
</code></p>

<h4>Getting Bookmarks by Tag</h4>

<p>We can also get bookmarks by tag name. All we have to do is to specify the <code>tag</code> argument to the <code>posts/all</code> method and supply a url encoded value as the query.</p>

<p>```
&lt;?php
public function get_by_tag($tag){</p>

<pre><code>$this-&gt;set_options();
$request_url = 'https://api.del.icio.us/v1/posts/all?tag=' . urlencode($tag);
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Bookmarks by Offset</h4>

<p>We can also get by a certain limit and offset. All we have to do is supply a value for the <code>start</code> argument (offset), and the <code>results</code> argument (limit).</p>

<p>```
&lt;?php
public function get_by_offset($start, $limit){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/all?start=' . $start;
$request_url .= '&amp;results=' . $limit;
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();        
$xml = simplexml_load_string($response);        
return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Getting Recently Bookmarked Links</h4>

<p>Recently bookmarked links can also be fetched from the API. The method to be used is the <code>posts/recent</code> method.
You can also supply an optional <code>tag</code> or <code>count</code> argument.</p>

<p>`&ldquo;
&lt;?php
public function get_recent($tag = &rdquo;, $count = 1){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/recent?';
if(!empty($tag)){ //limit results by tag
    $request_url .= 'tag=' . urlencode($tag);
}

if(!empty($count)){ //limit results by bookmark count
    $request_url .= '&amp;count=' . $count;
}
$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$response = $this-&gt;execute();
$xml = simplexml_load_string($response);        

return $xml;
</code></pre>

<p>}
?>
```</p>

<h4>Bookmarking Links</h4>

<p>Bookmarking new links can also be done from the API. The method to be used is the <code>posts/add</code> method.
The <code>url</code> argument is required and you can also set an optional <code>description</code> or <code>tags</code>. If there are more than one tags you can separate them using a comma (E.g php, web-development)</p>

<p>`&ldquo;
&lt;?php
public function add($url, $description = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$this-&gt;set_options();
$request_url  = 'https://api.del.icio.us/v1/posts/add?';
$request_url .= 'url=' . urlencode($url);
$request_url .= '&amp;description=' . urlencode($description);
$request_url .= '&amp;tags=' . urlencode($tags);

$this-&gt;curl_options[CURLOPT_URL] = $request_url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<h4>Deleting Bookmarks</h4>

<p>You can also delete links that were previously bookmarked. The request method is <code>posts/delete</code>.
You have to pass in the <code>url</code> of the link that you wish to delete.</p>

<p>```
&lt;?php
public function delete($url){</p>

<pre><code>$this-&gt;set_options();
$this-&gt;curl_options[CURLOPT_URL] = 'https://api.del.icio.us/v1/posts/delete?url=' . $url;
$this-&gt;execute();
</code></pre>

<p>}
?>
```</p>

<p>There are a bunch of other methods which you can use so be sure to check out the Delicious API documentation.</p>

<h3>Using the Class</h3>

<p>```
&lt;?php
&lt;?php
require_once(&lsquo;class.delicious.php&rsquo;);</p>

<p>$username = &lsquo;XYZ&rsquo;;
$password = &lsquo;secret&rsquo;;</p>

<p>$deli = new Delicious($username, $password);</p>

<p>$links = $deli->get_by_tag(&lsquo;php&rsquo;);</p>

<p>foreach($links->post as $row){
?></p>

<pre><code>&lt;li&gt;&lt;?php echo $row['href']; ?&gt;&lt;/li&gt;
</code></pre>

<p>&lt;?php <br/>
}
?>
```</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/avos/delicious-api/blob/master/APIs.md">Delicious API</a></li>
<li><a href="https://github.com/anchetaWern/delicious-php">Delicious-PHP</a> &ndash; a little PHP class that I created for interacting with the Delicious API</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<p>```php
&lt;?php
class Flickr{</p>

<pre><code>private $flickr_key;
private $flickr_secret;
private $format = 'json';

public function __construct($flickr_key, $flickr_secret) {

    $this-&gt;flickr_key = $flickr_key;
    $this-&gt;flickr_secret = $flickr_secret;
}
</code></pre>

<p>?>
```</p>

<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<p>`&ldquo;
&lt;?php
public function searchPhotos($query = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$urlencoded_tags = array(); 

if(!empty($tags)){  
    $tags_r = explode(',', $tags);
    foreach($tags_r as $tag){
        $urlencoded_tags[] = urlencode($tag);
    }
}   

//construct the url
$url  = 'http://api.flickr.com/services/rest/?';
$url .= 'method=flickr.photos.search';
$url .= '&amp;text=' . urlencode($query);
$url .= '&amp;tags=' . implode(',', $urlencoded_tags); //convert the array of url encoded tags back to a string
$url .= '&amp;sort=relevance';
$url .= '&amp;safe_search=1';
$url .= '&amp;content_type=4';
$url .= '&amp;api_key=' . $this-&gt;flickr_key;
$url .= '&amp;format=' . $this-&gt;format;
$url .= '&amp;per_page=10';

//get the results
$result = file_get_contents($url);

//remove the unneccessary strings that wraps the result returned from the API
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);

$photos = array();
$data = json_decode($json, true);

//check if the status didn't fail
if($data['stat'] != 'fail'){
    //return only the data for the photos as that's the only thing that we need
    $photos = $data['photos']['photo'];
    return $photos;
}else{
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<p><code>
&lt;?php
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);
?&gt;
</code></p>

<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<p>```
&lt;?php
$photos = array();
$data = json_decode($json, true);</p>

<p>//check if the status didn&rsquo;t fail
if($data[&lsquo;stat&rsquo;] != &lsquo;fail&rsquo;){</p>

<pre><code>//return only the data for the photos as that's the only thing that we need
$photos = $data['photos']['photo'];
return $photos;
</code></pre>

<p>}else{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<p><code>
&lt;?php
$src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
?&gt;
</code></p>

<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<p>```
&lt;?php
require_once(&lsquo;class.flickr.php&rsquo;);</p>

<p>$flickr = new Flickr($api_key, $api_secret);</p>

<p>$results = $flickr->searchPhotos($query, $tags);
if(!empty($results)){</p>

<pre><code>foreach($results as $photo){

    $src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
</code></pre>

<p>?></p>

<pre><code>&lt;img src="&lt;?php echo $src; ?&gt;" alt="&lt;?php echo $photo['title']; ?&gt;"&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ebay Finding API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api/"/>
    <updated>2013-04-03T08:09:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can access the e-bay finding API to access products that are sold from e-bay.
Product data such as the list price, available quantities, images are available from the e-bay finding API.</p>

<!--More-->


<h3>Getting an API Key</h3>

<p>First thing that you have to do is to get an API Key from e-bay.
This will serve as a unique identification for your application
and a means for e-bay to limit access to their API to only those that have an API key.</p>

<p>To get an API key you must first register with e-bay: <a href="https://developer.ebay.com/join/">developer.ebay.com/join</a></p>

<p>After successfully registering you will receive an email from e-bay. Click on the link to verify your email and you will be redirected to a screen similar to the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_ebay_finding_api/registration_success.jpg" alt="successful registration" /></p>

<p>You can then click on the get your application keys link, you will be redirected to the accounts page where you can click on the Generate production keys button to generate the API key.</p>

<h3>Building a Simple e-bay Class</h3>

<p>Next were going to build the class that were going to use later to access the API.
Create a new PHP file and name it <code>class.ebay.php</code>. Then put the following contents:</p>

<p>```
&lt;?php
class ebay{</p>

<p>}
?>
```</p>

<p>Inside the class declare the following private member variables:</p>

<p><code>php
&lt;?php
private $url = 'http://svcs.ebay.com/services/search/FindingService/v1';
private $app_id; //api key
private $global_id; //e-bay region (eg. EBAY-US)
private $version = '1.0.0'; //version of the API to use
private $format = 'json'; //format of the returned data
?&gt;
</code></p>

<p>The <code>$url</code> is the address in which the API can be accessed.</p>

<p>The <code>$app_id</code> is the API key that you got earlier from registering your application with e-bay.</p>

<p>The <code>$global_id</code> is the e-bay region in which you want to access product data. Think of it as the e-bay store which you access in your browser when you want to buy something online. The e-bay store that you&rsquo;re accessing when you type in <code>ebay.com</code> is the US store which has a global id of <code>EBAY-US</code>. There are also other global ids that you can use, you can access them here: <a href="http://developer.ebay.com/DevZone/finding/CallRef/Enums/GlobalIdList.html">Global ID List</a></p>

<p>The <code>$version</code> is the version of the API that you want to use. At the time of writing of this article the version that is available is <code>1.0.0</code> so were going to use that here.</p>

<p>The <code>$format</code> is the format in which you want the returned data to be encoded. The preffered format is <code>json</code> since we can easily manipulate it using PHP or JavaScript.</p>

<p>Next is the constructor which will take up 3 arguments. The <code>$app_id</code> and <code>$global_id</code>.
The constructor is called once you create an object of this class so you&rsquo;ll have to pass in the 2 arguments when you create an object.</p>

<p>```
&lt;?php
public function __construct($app_id, $global_id){</p>

<pre><code>$this-&gt;app_id = $app_id; 
$this-&gt;global_id = $global_id; 
</code></pre>

<p>}
?><br/>
```</p>

<p>Next, create a new method and call it <code>findItems</code> this will take 2 arguments: the <code>$keyword</code> and the <code>$limit</code>.
The <code>$keyword</code> is your query. For example <code>computer accessories</code>.
The <code>$limit</code> is the number of products which you want to return.</p>

<p>In this method were simply appending the different parameters to the <code>$url</code> that we declared earlier.</p>

<p>The parameters that we have used here are:</p>

<ul>
<li><p>operation-name &ndash; the operation that you want to perform. In the example below were using the <code>findItemsByKeywords</code> operation. The type of operation will determine the other parameters that you will be including in your request.
In the case of <code>findItemsByKeywords</code> the required parameter is the <code>keywords</code>. There are also other operations which you can use you can find them at the <a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">call reference page</a>.</p></li>
<li><p><strong>service-version</strong> &ndash; the version of the API that you would want to use. In our example were using version    <code>1.0.0</code></p></li>
<li><p><strong>keywords</strong> &ndash; the parameter required by the <code>findItemsByKeywords</code> operation in which you supply your url encoded query.</p></li>
<li><p><strong>paginationInput.entriesPerPage</strong> &ndash; the number of entries per page</p></li>
<li><p><strong>security-appname</strong> &ndash; the APP id that you got from registering your application with e-bay</p></li>
<li><p><strong>response-data-format</strong> &ndash; the format in which you want the returned data to be.
The preferred format is json although you can also have XML or SOAP as response data format.</p></li>
</ul>


<p>Once the parameters are all appended together with the request url we can then make a request to the API by using the <code>file_get_contents</code> method and supplying the request url as the argument. And since we specified <code>json</code> as the format earlier were going to use the <code>json_decode</code> method to convert the json string into an array.</p>

<p>`&ldquo;
&lt;?php
public function findItems($keyword = &rdquo;, $limit = 2){</p>

<pre><code>$url    = $this-&gt;url . '?';
$url .= 'operation-name=findItemsByKeywords';
$url .= '&amp;service-version=' . $this-&gt;version;
$url .= '&amp;keywords=' . urlencode($keyword);
$url .= '&amp;paginationInput.entriesPerPage=' . $limit;

$url .= '&amp;security-appname='. $this-&gt;app_id;
$url .= '&amp;response-data-format=' . $this-&gt;format;

return json_decode(file_get_contents($url), true);
</code></pre>

<p>}
?><br/>
```</p>

<p>We can also have a method where we can have more specificity with what we want to find.
We can also specify the sorting type, item type, minimum price and maximum price. Note that we are using a different operation name for this method and that is the <code>findItemsAdvanced</code> operation.</p>

<p>`&ldquo;
&lt;?php
public function findItemsAdvanced($keyword = &rdquo;, $item_sort = &lsquo;BestMatch&rsquo;, $item_type = &lsquo;FixedPricedItem&rsquo;, $min_price = &lsquo;0&rsquo;, $max_price = &lsquo;9999999&rsquo;, $limit = 2){</p>

<pre><code>    $url    = $this-&gt;url . '?';
    $url .= 'operation-name=findItemsAdvanced';
    $url .= '&amp;service-version=' . $this-&gt;version;
    $url .= '&amp;global-id=' . $this-&gt;global_id;
    $url .= '&amp;keywords=' . urlencode($keyword);

    $url .= '&amp;sortOrder=BestMatch';
    $url .= '&amp;itemFilter(0).name=ListingType';
    $url .= '&amp;itemFilter(0).value=FixedPrice';
    $url .= '&amp;itemFilter(1).name=MinPrice';
    $url .= '&amp;itemFilter(1).value=' . $min_price;
    $url .= '&amp;itemFilter(2).name=MaxPrice';
    $url .= '&amp;itemFilter(2).value=' . $max_price;
    $url .= '&amp;paginationInput.entriesPerPage=' . $limit;
    $url .= '&amp;descriptionSearch=false';

    $url .= '&amp;security-appname='. $this-&gt;app_id;
    $url .= '&amp;response-data-format=' . $this-&gt;format;

    return json_decode(file_get_contents($url), true);
}
</code></pre>

<p>?>
```</p>

<p>Lastly, we can also create a method which simply returns an array of the sort orders available via e-bay.
You can find the available values for sort orders in <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsAdvanced.html#Request.sortOrder">this page</a>.</p>

<p>```
&lt;?php
public function sortOrders(){</p>

<pre><code>$sort_orders = array(
    'BestMatch' =&gt; 'Best Match',
    'BidCountFewest' =&gt; 'Bid Count Fewest',
    'BidCountMost' =&gt; 'Bid Count Most',
    'CountryAscending' =&gt; 'Country Ascending',
    'CountryDescending' =&gt; 'Country Descending',
    'CurrentPriceHighest' =&gt; 'Current Highest Price',
    'DistanceNearest' =&gt; 'Nearest Distance',
    'EndTimeSoonest' =&gt; 'End Time Soonest',
    'PricePlusShippingHighest' =&gt; 'Price Plus Shipping Highest',
    'PricePlusShippingLowest' =&gt; 'Price Plus Shipping Lowest',
    'StartTimeNewest' =&gt; 'Start Time Newest'
);

return $sort_orders;
</code></pre>

<p>}
?>
```</p>

<h3>Building a Simple App</h3>

<p>Time to use the class that we just created in building a simple application.
Our simple application will have a search field for inputting products that the user wants to search
and a drop-down box to sort the results.</p>

<p>The only product details that were going to show to the user is the item title, price and the product image.
In the code below were declaring an object of the class that we created earlier specifying the API key
and the e-bay region as the first and second parameter.</p>

<p>Then we call the <code>sortOrders</code> method which simply returns an array of sort orders that are available from the e-bay finding API.</p>

<p>Next, we build the form for searching products.</p>

<p>Finally, we check if the <code>$_POST['search']</code> variable is not empty and use its value together with the sort selected by the user as the argument for the <code>findItemsAdvanced</code> method.
Going back to the class that we created earlier we used <code>findItemsAdvanced</code> as the operation.
The operation determines the first index when accessing the results.
So for the <code>findItemsAdvanced</code> it will have <code>findItemsAdvancedResponse</code> as the first index.</p>

<p>```
&lt;?php
require_once(&lsquo;class.ebay.php&rsquo;);</p>

<p>$ebay = new ebay(&lsquo;YOUR API KEY&rsquo;, &lsquo;EBAY-US&rsquo;);
$sort_orders = $ebay->sortOrders();
?></p>

<p><form action="ebay_finding_test.php" method="post"></p>

<pre><code>&lt;input type="text" name="search" id="search"&gt;
&lt;select name="sort" id="sort"&gt;
&lt;?php
foreach($sort_orders as $key =&gt; $sort_order){
?&gt;
    &lt;option value="&lt;?php echo $key; ?&gt;"&gt;&lt;?php echo $sort_order; ?&gt;&lt;/option&gt;
&lt;?php   
}
?&gt;
&lt;/select&gt;
&lt;input type="submit" value="Search"&gt;
</code></pre>

<p></form></p>

<p>&lt;?php
if(!empty($_POST[&lsquo;search&rsquo;])){</p>

<pre><code>$results = $ebay-&gt;findItemsAdvanced($_POST['search'], $_POST['sort']);
$item_count = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['@count'];

if($item_count &gt; 0){
    $items = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['item'];

    foreach($items as $i){
</code></pre>

<p>?></p>

<pre><code>    &lt;li&gt;
        &lt;div class="item_title"&gt;
            &lt;a href="&lt;?php echo $i['viewItemURL'][0]; ?&gt;"&gt;&lt;?php echo $i['title'][0]; ?&gt;&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="item_img"&gt;
            &lt;img src="&lt;?php echo $i['galleryURL'][0]; ?&gt;" alt="&lt;?php echo $i['title']; ?&gt;"&gt;
        &lt;/div&gt;
        &lt;div class="item_price"&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['@currencyId']; ?&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['__value__']; ?&gt;
        &lt;/div&gt;
    &lt;/li&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>    }
}       
</code></pre>

<p>}
?>
```</p>

<p>Here&rsquo;s the demo for this simple application implemented using JavaScript by using Handlebars for the template and jQuery&rsquo;s <code>$.ajax</code> method to request the data. Be sure to place your own app id that you got from e-bay in order to make this demo work.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/L6Nkj/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it for this tutorial. Using the API is really easy since you don&rsquo;t need to construct signatures to be used in the request like other API&rsquo;s. Be sure to check out the resources below if you want to learn more about the e-bay finding API.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://developer.ebay.com/DevZone/finding/HowTo/">Finding API How To</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html">Making an API Call</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">Call Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/ebay_finding_api.7z">Sample Application Source Code</a></li>
<li><a href="http://tutorialdemos-wern.rhcloud.com/ebay_finding_api/ebay_finding_test.php">Sample Application Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Freebase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api/"/>
    <updated>2013-02-11T19:55:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to show you the basics of using the Freebase API.</p>

<h3>What is Freebase?</h3>

<p>Freebase is a collection of data from different sources.
So its basically like an encyclopedia in which you can pull data from.</p>

<p>Here&rsquo;s a diagram that shows exactly what type of data you can fetch from Freebase:</p>

<p><img src="/images/posts/getting_started_with_freebase/Freebase-Domains.jpg" alt="freebase diagram" /></p>

<p>You can also watch this video Introducing the knowledge graph:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mmQl6VGvX-c "></iframe></div></p>

<!--More-->


<h3>Playing with the API</h3>

<p>Most API&rsquo;s requires an API Key so that you could access its data but Freebase is different.
You have the choice whether or not to register an API key. If you just want to try things out
you can simply access the data from Freebase like this:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=nirvana&amp;indent=true
</code></p>

<p>There are 2 parameters used in this url:</p>

<ul>
<li>query &ndash; what you want to search.</li>
<li>indent &ndash; can either be true or false, specify the value of true if you want to return a formatted json string so that you can easily read it.</li>
</ul>


<h4>Specifying Language</h4>

<p>You can also specify the language by using the <code>lang</code> parameter.
If you specified a non-supported language the API will also tell you:</p>

<p><img src="/images/posts/getting_started_with_freebase/unsupported_language.jpg" alt="unsupported language" /></p>

<h4>Filters</h4>

<p>But the true power of this API lies on the filters that you can use to specify what is exactly the type
of data that you&rsquo;re looking for. For example you want to be able to find music that has the name &ldquo;Robot&rdquo; on it:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=robot&amp;indent=true&amp;filter=(all%20type:music)
</code></p>

<p>The query above would return:</p>

<p><img src="/images/posts/getting_started_with_freebase/robot_music.jpg" alt="robot music" /></p>

<p>Another example would be if you&rsquo;re looking for &ldquo;One piece&rdquo; not the swimsuit but the <a href="http://en.wikipedia.org/wiki/One_Piece">manga/anime</a>:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)
</code></p>

<p>And as expected it returns only the data which refers to the &ldquo;One Piece&rdquo; anime/manga:</p>

<p><img src="/images/posts/getting_started_with_freebase/one_piece.jpg" alt="one piece anime" /></p>

<h3>Read Services</h3>

<p>The Freebase API is actually composed of several services which you can use separately or in tandem with other services. We will go over some of these services later on and implement it using PHP.</p>

<ul>
<li>Search Service</li>
<li>MQL Read Service</li>
<li>Topic API</li>
<li>RDF API</li>
<li>Text Service</li>
<li>Image Service</li>
<li>Freebase Suggest</li>
</ul>


<h3>Getting an API Key</h3>

<p>Once you&rsquo;ve played around the Freebase API a bit you might want to register an API key.
You can register from the <a href="https://code.google.com/apis/console/">Google API Console</a>.
It&rsquo;s free to register but when your application gets more and more users and it exceeds the limit for the free service Google will have you pay for the service.</p>

<p>If you haven&rsquo;t created a project with the Google console before you might need to create a new project.</p>

<p><img src="/images/posts/getting_started_with_freebase/new_project.jpg" alt="new project" /></p>

<p>Once that&rsquo;s done look for the Freebase API in the services tab and then enable it by turning it on:</p>

<p><img src="/images/posts/getting_started_with_freebase/freebase.jpg" alt="freebase" /></p>

<p>Accept the service agreement and then click on the API Access tab:</p>

<p><img src="/images/posts/getting_started_with_freebase/api_key.jpg" alt="api key" /></p>

<p>All you have to do now is copy the API key and use it on your requests by specifying a key parameter.
Using our previous query, your query will now look like this with the api key specified:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)&amp;key=xyz
</code></p>

<h3>Freebase with PHP</h3>

<p>Now that we&rsquo;ve played around with the Freebase API in the browser its time to access it using PHP.</p>

<p>First were going to build a simple class that will query the Freebase API for us.</p>

<p>```php
&lt;?php
class Freebase{</p>

<p>}
?><br/>
```</p>

<p>Create a new private variable that will store the API key that we got from the Google console earlier.</p>

<p><code>
private $api_key = 'xyz';
</code></p>

<h4>Search Service</h4>

<p>Like I mentioned earlier we will go through some of the read services that the Freebase API offers.
So were going to create a method which will utilize these services in our class.</p>

<p>The service that we have gone over earlier was the Search service which simply allows you to search based on keywords.</p>

<p>Create a new method and call it search this will utilize the search service.
Here we have 1 required parameter ($query) and 5 optional parameters.
You can see a full list of the parameters that you can specify in the wiki for the <a href="http://wiki.freebase.com/wiki/ApiSearch">Search API</a>.</p>

<p>As you can see from the code below
were just building the URL from the arguments that we will supply later on when we call the method.</p>

<p>`&ldquo;
&lt;?php
public function search($query, $filter = &rdquo;, $start = 0, $limit = 10, $exact = &lsquo;false&rsquo;){</p>

<pre><code>if(!empty($query)){
    $query = urlencode($query);
    $url    = 'https://www.googleapis.com/freebase/v1/search?query='. $query;
    $url .= '&amp;filter=(' . urlencode($filter) . ')';
    $url .= '&amp;start=' . $start;
    $url .= '&amp;limit=' . $limit;
    $url .= '&amp;exact=' . $exact;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return json_decode(file_get_contents($url), true)['result'];
}
</code></pre>

<p>}
?>
```</p>

<p>The important thing to note here is that the query should be <a href="http://php.net/manual/en/function.urlencode.php">url encoded</a> otherwise your query won&rsquo;t work properly if for example the query has spaces in it or some special characters.</p>

<p>You can see url encoding in action when you input your query manually in the address bar of the browser.
If you manually input our query earlier it will look like this before you type in enter:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one piece&amp;indent=true&amp;filter=(all type:animation)&amp;key=xyz
</code></p>

<p>But once you press on enter all those spaces will be replaced with <code>%20</code> or <code>+</code>:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)&amp;key=xyz
</code></p>

<p>Here&rsquo;s a <a href="http://www.w3schools.com/tags/ref_urlencode.asp">url encoding reference</a> from W3Schools.</p>

<p>The main meat of all the methods that we will be creating
for this class is the actual fetching of the data from the Freebase API.
We do the fetching by using a method called <code>file_get_contents</code> which takes a <code>url</code> as an argument and returns the contents (both html, javascript and text) of the page referenced by the url that you supplied.</p>

<p>But do note that <code>file_get_contents</code> doesn&rsquo;t work with every site or every API out there.
So in the case it doesn&rsquo;t work then you can use CURL instead.
There&rsquo;s a very gentle introduction on <a href="http://codular.com/curl-with-php">how to perform cURL request using PHP</a> at codular.</p>

<p>Also note that <code>file_get_contents</code> returns a warning if the content that you&rsquo;re requesting doesn&rsquo;t exist because of an HTTP Error or the API simply didn&rsquo;t find the data that you&rsquo;re requesting for.
In those cases you might want to include an <code>@</code> sign before the actual method name like <code>@file_get_contents</code> that way it wouldn&rsquo;t return a warning even if nothing is returned.</p>

<p>Lastly we use the <code>json_decode</code> method to convert the json string to a PHP array which we can easily manipulate or loop through.</p>

<h4>Image Service</h4>

<p>There&rsquo;s also the Image Service which simply returns an image base on the entity ID.
The entity ID can be a string or a number representing the entity.
But in my experience I notice that this service doesn&rsquo;t generalize if you query for something like &lsquo;naruto&rsquo;, &lsquo;ichigo&rsquo; or &lsquo;gundam&rsquo;. It can only return an image for a certain entity that is globally known like the following people or works:</p>

<ul>
<li>vincent_van_gogh</li>
<li>pablo_picasso</li>
<li>mona_lisa</li>
<li>the_scream</li>
<li>jose_rizal</li>
<li>andres_bonifacio</li>
<li>leonardo_da_vinci</li>
</ul>


<p>For the others which aren&rsquo;t globally known or entities which didn&rsquo;t deserve to have an actual index for the image service you can use the search service to get the entity ID and then use that entity ID to query the image service.
We&rsquo;ll go through that in a minute.</p>

<p>For now let&rsquo;s look at the method for fetching image from the image service.
We have 3 parameters, 1 required and 2 optional.</p>

<p>There&rsquo;s not really much parameters that you can specify for the image service, be sure to check out the wiki for the <a href="http://wiki.freebase.com/wiki/ApiImage">image service</a> to learn more.</p>

<p>The first parameter is the <code>entity_id</code> which for globally known entities can be just words separated by underscores like we saw earlier.
As you can see were not actually using the <code>file_get_contents</code> method here since we only need the url for the image we only return the url itself.</p>

<p>```
&lt;?php
public function image($entity_id, $max_width = 150, $max_height = 150){</p>

<pre><code>if(!empty($entity_id)){
    $url = 'https://usercontent.googleapis.com/freebase/v1/image' . $entity_id;
    $url .= '?maxwidth=' . $max_width;
    $url .= '&amp;maxheight=' . $max_height;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return $url;        
}
</code></pre>

<p>}
?>
```</p>

<h4>Text Service</h4>

<p>The text service is different from the image service in that the
image service actually accepts the title or name of well-known entities as a value for the entity ID as well as the ID representing the entity itself.
But for the text service we can only utilize it once we&rsquo;ve
called the search service which returns the entity ID that we need.</p>

<p>The method has also a  <code>max_length</code> parameter which is simply used to specify the maximum length of the text that will be returned. <code>0</code> being no limit so it basically returns everything it can return.</p>

<p>```
&lt;?php
public function text($entity_id, $max_length = &lsquo;0&rsquo;){</p>

<pre><code>if(!empty($entity_id)){
    $url    = 'https://www.googleapis.com/freebase/v1/text/' . $entity_id;
    $url .= '?maxlength=' . $max_length;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return json_decode(file_get_contents($url), true)['result'];        
}
</code></pre>

<p>}
?>
```</p>

<h4>Topic API</h4>

<p>Lastly there&rsquo;s the topic API. There&rsquo;s actually 3 more services in the Freebase API which we haven&rsquo;t gone over but I&rsquo;ll leave those for another day. The topic API just like the text service and image service requires an entity ID for the request.</p>

<p>```
&lt;?php
public function topic($entity_id){</p>

<pre><code>if(!empty($entity_id)){
    $url = 'https://www.googleapis.com/freebase/v1/topic' . $entity_id;
    return json_decode(file_get_contents($url), true);      
}
</code></pre>

<p>}
?>
```</p>

<h3>Calling the Methods</h3>

<p>Now that were done creating the class its now time to actually call the methods
to produce some output. Create a new file and then import the class that we created earlier.
Also create an object of that class so that we can use it to call the methods.</p>

<p>What the code below does is just using the search method as the base data source
and then the image and text methods to fetch the image and a description for each entity
returned from our main search.</p>

<p>```
&lt;?php
require_once(&lsquo;class.freebase.php&rsquo;);</p>

<p>$freebase = new Freebase();
$result = $freebase->search(&lsquo;Dragon ball z&rsquo;, &lsquo;all type:manga&rsquo;);</p>

<p>foreach($result as $entity){</p>

<pre><code>$id = $entity['mid'];
$name = $entity['name'];

$image = $freebase-&gt;image($id);
$text = $freebase-&gt;text($id);
</code></pre>

<p>?>
<li></p>

<pre><code>&lt;h3&gt;&lt;?php echo $name; ?&gt;&lt;/h3&gt;
&lt;img src="&lt;?php echo $image; ?&gt;" alt="&lt;?php echo $name; ?&gt;"&gt;
&lt;p&gt;
&lt;?php echo $text; ?&gt;    
&lt;/p&gt;    
</code></pre>

<p></li>
&lt;?php
}
?>
```</p>

<h2>Resources</h2>

<ul>
<li><a href="http://wiki.freebase.com/wiki/ApiSearch">Search Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiImage">Image Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiText">Text Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/Topic_API">Topic API</a></li>
<li><a href="http://wiki.freebase.com/wiki/Search_Cookbook">Search Cookbook</a></li>
<li><a href="http://www.w3schools.com/tags/ref_urlencode.asp">URL Encoding Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/getting_started_with_freebase_api.7z">Sample Application Source Code</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
