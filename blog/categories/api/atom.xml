<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-11-28T06:47:39+00:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stalking the Programmer Way with Clearbit's Person API]]></title>
    <link href="http://wern-ancheta.com/blog/2016/01/15/stalking-the-programmer-way-with-clearbits-person-api/"/>
    <updated>2016-01-15T13:41:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2016/01/15/stalking-the-programmer-way-with-clearbits-person-api</id>
    <content type="html"><![CDATA[<p>In this tutorial, I&rsquo;ll be showing you can programatically find out information about any person using their email. You can do that by using the Clearbit Person API.</p>

<p>In order to use the Person API, you first have to <a href="https://clearbit.com/">create your Clearbit account</a>. After creating your account, you&rsquo;ll be assigned with an API key which you can use for making requests to their API.</p>

<p>If you&rsquo;re on Ruby, Node or Python you can search for the Clearbit client for each of those platforms from their <a href="https://github.com/clearbit">Github page</a>. Just search for &lsquo;clearbit-&rsquo; followed by the platform. So if you&rsquo;re on Ruby, then you search for &lsquo;clearbit-ruby&rsquo;. You can then install the client on your machine and follow the examples provided in the <a href="https://clearbit.com/docs#person-api">official documentation</a>.</p>

<p>At the time of writing of this article, there&rsquo;s still no client available for PHP. But you can use <a href="http://guzzle.readthedocs.org/en/latest/">Guzzle</a> to easily make requests to their API. You can install Guzzle via Composer by executing the following command.</p>

<p><code>
composer require guzzlehttp/guzzle:~6.0
</code></p>

<p>Once that&rsquo;s done, you can include the vendor autoload file in your test file and then create a new instance of the Guzzle client. Use <code>http://person.clearbit.com/v1/</code> as the base for all your requests.</p>

<p>```php
&lt;?php
require_once &lsquo;vendor/autoload.php&rsquo;;</p>

<p>$client = new GuzzleHttp\Client(array(&lsquo;base_uri&rsquo; => &lsquo;<a href="http://person.clearbit.com/v1/">http://person.clearbit.com/v1/</a>&rsquo;));
?>
```</p>

<p>To request the data of a specific person, you can pass their email after the <code>people/email</code> endpoint. Here&rsquo;s an example.</p>

<p>```php
&lt;?php
$response = $client->get(&lsquo;people/email/<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x61;&#110;&#99;&#104;&#x65;&#x74;&#x61;&#46;&#x77;&#x65;&#x72;&#110;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x61;&#110;&#99;&#104;&#x65;&#116;&#97;&#x2e;&#119;&#x65;&#x72;&#110;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a>&rsquo;, array(&lsquo;auth&rsquo; => array(</p>

<pre><code>    'YOUR-CLEARBIT-API-KEY', ''
)));
</code></pre>

<p>$res = json_decode($response->getBody(), true);
?></p>

<pre>
    <?php print_r($res); ?>
</pre>


<p>```</p>

<p>Clearbit uses basic authentication. The API key acts as the username so the password should be left blank.</p>

<p>It would then return the following output.</p>

<p>```</p>

<pre><code>Array
</code></pre>

<p>(</p>

<pre><code>[id] =&gt; c29c2e9f-d082-4525-8dd3-1291835bf834
[name] =&gt; Array
    (
        [fullName] =&gt; Wern Ancheta
        [givenName] =&gt; Wern
        [familyName] =&gt; Ancheta
    )

[email] =&gt; ancheta.wern@gmail.com
[gender] =&gt; 
[location] =&gt; Philippines
[geo] =&gt; Array
    (
        [city] =&gt; 
        [state] =&gt; 
        [country] =&gt; PH
        [lat] =&gt; 12.879721
        [lng] =&gt; 121.774017
    )

[bio] =&gt; JavaScripter, PHP Junkie, Anime Fanatic, Pokemon Master, Supernatural Enthusiast
[site] =&gt; http://wern-ancheta.com
[avatar] =&gt; https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/c29c2e9f-d082-4525-8dd3-1291835bf834
[employment] =&gt; Array
    (
        [name] =&gt; 
        [title] =&gt; 
        [domain] =&gt; 
    )

[facebook] =&gt; Array
    (
        [handle] =&gt; vern.ancheta
    )

[github] =&gt; Array
    (
        [handle] =&gt; 
        [id] =&gt; 
        [avatar] =&gt; 
        [company] =&gt; 
        [blog] =&gt; 
        [followers] =&gt; 
        [following] =&gt; 
    )

[twitter] =&gt; Array
    (
        [handle] =&gt; Wern_Ancheta
        [id] =&gt; 283769265
        [bio] =&gt; JavaScripter, PHP Junkie, Anime Fanatic, Pokemon Master, Supernatural Enthusiast
        [followers] =&gt; 330
        [following] =&gt; 961
        [statuses] =&gt; 7402
        [favorites] =&gt; 356
        [location] =&gt; Philippines
        [site] =&gt; http://wern-ancheta.com
        [avatar] =&gt; https://pbs.twimg.com/profile_images/2585189311/7q7dmz2h78lv32f8tw78.jpeg
    )

[linkedin] =&gt; Array
    (
        [handle] =&gt; 
    )

[googleplus] =&gt; Array
    (
        [handle] =&gt; 
    )

[angellist] =&gt; Array
    (
        [handle] =&gt; 
        [id] =&gt; 
        [bio] =&gt; 
        [blog] =&gt; 
        [site] =&gt; 
        [followers] =&gt; 
        [avatar] =&gt; 
    )

[klout] =&gt; Array
    (
        [handle] =&gt; 
        [score] =&gt; 
    )

[foursquare] =&gt; Array
    (
        [handle] =&gt; 
    )

[aboutme] =&gt; Array
    (
        [handle] =&gt; 
        [bio] =&gt; 
        [avatar] =&gt; 
    )

[gravatar] =&gt; Array
    (
        [handle] =&gt; zenonn
        [urls] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [value] =&gt; http://kyokasuigetsu25.wordpress.com
                        [title] =&gt; Data Integrated Entity Blog
                    )

                [1] =&gt; Array
                    (
                        [value] =&gt; http://wernancheta.wordpress.com
                        [title] =&gt; Wern Ancheta Web Development Blog
                    )

                [2] =&gt; Array
                    (
                        [value] =&gt; http://wernancheta.carbonmade.com
                        [title] =&gt; Wern Ancheta Portfolio
                    )

            )

        [avatar] =&gt; http://2.gravatar.com/avatar/717bcde740783a83a168468df0dbbb75
        [avatars] =&gt; Array
            (
                [0] =&gt; Array
                    (
                        [url] =&gt; http://2.gravatar.com/avatar/717bcde740783a83a168468df0dbbb75
                        [type] =&gt; thumbnail
                    )

                [1] =&gt; Array
                    (
                        [url] =&gt; http://0.gravatar.com/userimage/29616243/2e8d74c1260a1c180328ea6317ebb8e0
                        [type] =&gt; 
                    )

            )

    )

[fuzzy] =&gt; 
</code></pre>

<p>)
```</p>

<p>As you can see, it&rsquo;s not very complete. It has left out my Github, LinkedIn, GooglePlus and FourSquare profiles. It doesn&rsquo;t have one for Instagram as well. Nevertheless, this API proves to be a good resource if you want to get data about a specific person.</p>

<p>If you want to update your own data, extract the ID that clearbit has assigned to your profile and then use it on your request. Here&rsquo;s an example.</p>

<p>```php
&lt;?php
$client = new GuzzleHttp\Client([&lsquo;base_uri&rsquo; => &lsquo;<a href="http://person.clearbit.com/v1/">http://person.clearbit.com/v1/</a>&rsquo;]);
$response = $client->post(&lsquo;people/YOUR-CLEARBIT-ID/flag&rsquo;,</p>

<pre><code>        array('auth' =&gt; array(
            'YOUR-CLEARBIT-API-KEY', ''
        ), 
        'form_params' =&gt; array(
            'foursquare' =&gt; array('handle' =&gt; 'wern_ancheta'),
            'googleplus' =&gt; array('handle' =&gt; '+WernAncheta'),
            'github' =&gt; array(
                'handle' =&gt; 'anchetaWern'
            ),
            'gender' =&gt; 'male',
            'linkedin' =&gt; array('handle' =&gt; 'wernr'),
            'gravatar' =&gt; array('handle' =&gt; 'vernancheta')
        )
    )
</code></pre>

<p>);
$res = json_decode($response->getBody(), true);
echo $response->getStatusCode(); //200
?>
```</p>

<p>Note that your data won&rsquo;t be immediately update. This is good since the update must be reviewed by an actual human so that not just anyone can mess with your data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with the Yahoo Finance API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/04/05/getting-started-with-the-yahoo-finance-api/"/>
    <updated>2015-04-05T13:24:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/04/05/getting-started-with-the-yahoo-finance-api</id>
    <content type="html"><![CDATA[<p>The Yahoo Finance API provides a way for developers to get the latest information about the stock market. How the different stocks are doing. What&rsquo;s the current buying price for a single stock. How much is the difference of the current market value to that of yesterday&rsquo;s, etc.</p>

<p>First thing that you need to do is to install the Guzzle library for PHP. This allows us to easily make http requests to the server. You can do that by adding the following on your <code>composer.json</code> file:</p>

<p>```
 {
   &ldquo;require&rdquo;: {</p>

<pre><code>  "guzzlehttp/guzzle": "~5.0"
</code></pre>

<p>   }
}
```</p>

<p>Then execute <code>composer install</code> from your terminal.</p>

<p>Next create a <code>test.php</code> file and put the following code:</p>

<p><code>php
&lt;?php
require 'vendor/autoload.php';
$client = new GuzzleHttp\Client();
?&gt;
</code></p>

<p>This allows us to use guzzle from our file.</p>

<p>Before we move on here are the specific data that you can get from the API:</p>

<p><strong>Pricing</strong></p>

<ul>
<li><code>a</code> &ndash; ask</li>
<li><code>b</code> &ndash; bid</li>
<li><code>b2</code> &ndash; ask (realtime)</li>
<li><code>b3</code> &ndash; bid (realtime)</li>
<li><code>p</code> &ndash; previous close</li>
<li><code>o</code> &ndash; open</li>
</ul>


<p><strong>Dividends</strong></p>

<ul>
<li><code>y</code> &ndash; dividend yield</li>
<li><code>d</code> &ndash; dividend per share</li>
<li><code>r1</code> &ndash; dividend pay date</li>
<li><code>q</code> &ndash; ex-dividend date</li>
</ul>


<p><strong>Date</strong></p>

<ul>
<li><code>c1</code> &ndash; change</li>
<li><code>c</code> &ndash; change &amp; percentage change</li>
<li><code>c6</code> &ndash; change (realtime)</li>
<li><code>k2</code> &ndash; change percent</li>
<li><code>p2</code> &ndash; change in percent</li>
<li><code>d1</code> &ndash; last trade date</li>
<li><code>d2</code> &ndash; trade date</li>
<li><code>t1</code> &ndash; last trade time</li>
</ul>


<p><strong>Averages</strong></p>

<ul>
<li><code>c8</code> &ndash; after hours change</li>
<li><code>c3</code> &ndash; commission</li>
<li><code>g</code> &ndash; day&rsquo;s low</li>
<li><code>h</code> &ndash; day&rsquo;s high</li>
<li><code>k1</code> &ndash; last trade (realtime) with time</li>
<li><code>l</code> &ndash; last trade (with time)</li>
<li><code>l1</code> &ndash; last trade (price only)</li>
<li><code>t8</code> &ndash; 1 yr target price</li>
<li><code>m5</code> &ndash; change from 200 day moving average</li>
<li><code>m6</code> &ndash; percent change from 200 day moving average</li>
<li><code>m7</code> &ndash; change from 50 day moving average</li>
<li><code>m8</code> &ndash; percent change from 50 day moving average</li>
<li><code>m3</code> &ndash; 50 day moving average</li>
<li><code>m4</code> &ndash; 200 day moving average</li>
</ul>


<p><strong>Misc</strong></p>

<ul>
<li><code>w1</code> &ndash; day&rsquo;s value change</li>
<li><code>w4</code> &ndash; day&rsquo;s value change (realtime)</li>
<li><code>p1</code> &ndash; price paid</li>
<li><code>m</code> &ndash; day&rsquo;s range</li>
<li><code>m2</code> &ndash; day&rsquo;s range (realtime)</li>
<li><code>g1</code> &ndash; holding gain percent</li>
<li><code>g3</code> &ndash; annualized gain</li>
<li><code>g4</code> &ndash; holdings gain</li>
<li><code>g5</code> &ndash; holdings gain percent (realtime)</li>
<li><code>g6</code> &ndash; holdings gain (realtime)</li>
<li><code>t7</code> &ndash; ticker trend</li>
<li><code>t6</code> &ndash; trade links</li>
<li><code>i5</code> &ndash; order book (realtime)</li>
<li><code>l2</code> &ndash; high limit</li>
<li><code>l3</code> &ndash; low limit</li>
<li><code>v1</code> &ndash; holdings value</li>
<li><code>v7</code> &ndash; holdings value (realtime)</li>
<li><code>s6</code> &ndash; revenue</li>
</ul>


<p><strong>52 Week Pricing</strong></p>

<ul>
<li><code>k</code> &ndash; 52 week high</li>
<li><code>j</code> &ndash; 52 week low</li>
<li><code>j5</code> &ndash; change from 52 week low</li>
<li><code>k4</code> &ndash; change from 52 week high</li>
<li><code>j6</code> &ndash; percent change from 52 week low</li>
<li><code>k5</code> &ndash; percent change from 52 week high</li>
<li><code>w</code> &ndash; 52 week range</li>
</ul>


<p><strong>Symbol Info</strong></p>

<ul>
<li><code>v</code> &ndash; more info</li>
<li><code>j1</code> &ndash; market capitalization</li>
<li><code>j3</code> &ndash; market cap (realtime)</li>
<li><code>f6</code> &ndash; float shares</li>
<li><code>n</code> &ndash; name</li>
<li><code>n4</code> &ndash; notes</li>
<li><code>s</code> &ndash; symbol</li>
<li><code>s1</code> &ndash; shares owned</li>
<li><code>x</code> &ndash; stock exchange</li>
<li><code>j2</code> &ndash; shares outstanding</li>
</ul>


<p><strong>Volume</strong></p>

<ul>
<li><code>v</code> &ndash; volume</li>
<li><code>a5</code> &ndash; ask size</li>
<li><code>b6</code> &ndash; bid size</li>
<li><code>k3</code> &ndash; last trade size</li>
<li><code>a2</code> &ndash; average daily volume</li>
</ul>


<p><strong>Ratios</strong></p>

<ul>
<li><code>e</code> &ndash; earnings per share</li>
<li><code>e7</code> &ndash; eps estimate current year</li>
<li><code>e8</code> &ndash; eps estimate next year</li>
<li><code>e9</code> &ndash; eps estimate next quarter</li>
<li><code>b4</code> &ndash; book value</li>
<li><code>j4</code> &ndash; EBITDA</li>
<li><code>p5</code> &ndash; price / sales</li>
<li><code>p6</code> &ndash; price / book</li>
<li><code>r</code> &ndash; P/E ratio</li>
<li><code>r2</code> &ndash; P/E ratio (realtime)</li>
<li><code>r5</code> &ndash; PEG ratio</li>
<li><code>r6</code> &ndash; price / eps estimate current year</li>
<li><code>r7</code> &ndash; price /eps estimate next year</li>
<li><code>s7</code> &ndash; short ratio</li>
</ul>


<p>Wew! Ok so that&rsquo;s a lot. I&rsquo;ll let you catch your breath for a second. Ready?</p>

<p>Ok so now were ready to make a request to the API. You can either do that from here:</p>

<p><code>
http://download.finance.yahoo.com/d/quotes.csv?s={SYMBOLS}&amp;f={DATA THAT WE WANT}
</code></p>

<p>Or here:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s={SYMBOLS}&amp;f={DATA THAT WE WANT}
</code></p>

<p>Doesn&rsquo;t really matter which. Both returns the same thing. Here&rsquo;s an example which you can just copy and paste into your browser&rsquo;s address bar:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s=GOOGL&amp;f=abo
</code></p>

<p>Breaking it down. We make a request to this URL:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv
</code></p>

<p>And then we pass in some query parameters: <code>s</code> and <code>f</code>. <code>s</code> represents the symbol or symbols that you want to query. And <code>f</code> represents the data that you want. That&rsquo;s the big list that we just went through earlier. So if you want the API to return the ask, bid and open. We just need to pass in:</p>

<p><code>
f=abo
</code></p>

<p>In the example that we have. Were requesting this information for the <code>GOOGL</code> symbol. Which is basically Google. When this is requested in the browser, it downloads a <code>quotes.csv</code> file which contain something similar to the following:</p>

<p><code>
580.36,575.90,576.35
</code></p>

<p>Its a comma-separated list of all the values you requested. So 580.36 is the ask price, 575.90 is the bidding price, and 576.35 is the open price.</p>

<p>If you want to query more than one symbol, you just separate each symbol with a comma. So for example you want to request the stock information about Google, Apple, Microsoft and Facebook:</p>

<p><code>
http://finance.yahoo.com/d/quotes.csv?s=GOOGL,AAPL,MSFT,FB&amp;f=abo
</code></p>

<p>Now let&rsquo;s proceed with actually making this all work with PHP. First we need to create a table that will store all the information that we need. In this case, we only need the symbol, ask, bid and open values:</p>

<p>```sql
CREATE TABLE symbols (</p>

<pre><code>id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
symbol VARCHAR(30) NOT NULL,
ask DOUBLE,
bid DOUBLE,
open DOUBLE
</code></pre>

<p>)
```</p>

<p>Next create an <code>indexer.php</code> file. What this file does is to query the yahoo finance api and then save the results to a csv file. Note that we can only query up to 200 symbols per request. So we&rsquo;ll have to work based on that on our code.</p>

<p>The first thing that the code below does is to query the number of symbols currently in the database. And then we calculate how many times we need to loop in order to update all the symbols. We also need to declare the file path of the csv file in which will save all the results from the API. And initialize it by setting its value to an empty string. Then we declare the format <code>sabo</code>. Which means symbol, ask, bid and open. Next we create a for loop that will keep on executing until the value of <code>$x</code> reaches the total loop times that we got from dividing the total number of symbols by the API limit. Inside the loop we calculate the offset value by multiplying the current value of <code>$x</code> by the API limit. After that, we select the symbols that we need based on that. Then we loop through the results, specifically the symbol and then put them in an array. After looping through all the results, we convert the array into a comma separated list. This allows us to use this value for querying the API. Once we get the result back, we just save it to the csv file using <code>file_put_contents</code>.</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;
$db = new Mysqli(HOST, USER, PASS, DB);
$client = new GuzzleHttp\Client();</p>

<p>$symbols_count_result = $db->query(&ldquo;SELECT COUNT(id) FROM symbols&rdquo;);
$symbol_row = $symbols_count_result->fetch_row();
$symbol_count = $symbol_row[0];</p>

<p>$api_limit = 200;</p>

<p>$loop_times = $symbol_count / $api_limit;
$loop_times = floor($loop_times) + 1;</p>

<p>$file = &lsquo;uploads/csv/stocks.csv&rsquo;;
file_put_contents($file, &lsquo;&rsquo;);</p>

<p>$format = &lsquo;sabo&rsquo;;</p>

<p>for($x = 0; $x &lt; $loop_times; $x++){</p>

<pre><code>$from = $x * $api_limit;
$symbols_result = $db-&gt;query("SELECT * FROM symbols LIMIT '$api_limit' OFFSET '$from'");

if($symbols_result-&gt;num_rows &gt; 0){

    $symbols = array();
    while($row = $symbols_result-&gt;fetch_object()){
        symbols[] = $row-&gt;symbol;
    } 

    $symbols_str = implode(',', $symbols);
    $stocks = $client-&gt;get("http://download.finance.yahoo.com/d/quotes.csv?s={$symbols_str}&amp;f={$format}");

    file_put_contents($file, $stocks-&gt;getBody(), FILE_APPEND);
}
</code></pre>

<p>}      <br/>
?>
```</p>

<p>That&rsquo;s it! The Yahoo Finance API is a really nice way of getting financial information about specific companies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Stripe API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/03/22/getting-started-with-stripe-api/"/>
    <updated>2015-03-22T11:08:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/03/22/getting-started-with-stripe-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through the Stripe&rsquo;s API. Let&rsquo;s start by defining what Stripe is. From the Stripe website itself:</p>

<p><blockquote><p>Stripe is a developer-friendly way to accept payments online and in mobile apps.<br/>We process billions of dollars a year for thousands of companies of all sizes.</p></blockquote></p>

<p>Now we know that Stripe is a payment processor, similar to Paypal.</p>

<p>With Stripe, you can accept payments in three ways:</p>

<ul>
<li>Embedded Form</li>
<li>Custom Form</li>
<li>Mobile App Integration</li>
</ul>


<p>In this tutorial I&rsquo;ll only be walking you through the first two: embedded form and custom form.</p>

<h3>Embedded Form</h3>

<p>If you do not want to bother with creating your own checkout forms, an embedded form is the way to go. An embedded form is basically Stripe&rsquo;s checkout widget. All you have to do is include their script on your website, specifically inside a form element. And the front-end side is already handled for you.</p>

<p>```html
<form action="/checkout.php" method="POST">
  &lt;script</p>

<pre><code>src="https://checkout.stripe.com/checkout.js" class="stripe-button"
data-key="pk_test_xxxxxxxxxxxxxxxxxxx"
data-amount="1000"
data-name="Web Development"
data-description="Develop a website"
data-image="http://mywebsite.com/img/logo.png"&gt;
</code></pre>

<p>  </script>
</form>
```</p>

<p>Breaking it down. For the script to work, you need to supply a value to the following attributes:</p>

<ul>
<li><code>src</code> &ndash; Stripe&rsquo;s checkout script. This should be <code>https://checkout.stripe.com/checkout.js</code></li>
<li><code>data-key</code> &ndash; your stripe publishable key. You can find it by clicking on your username, then select &lsquo;account settings&rsquo;, then click on the &lsquo;api keys&rsquo; tab. From there you can use either your test publishable key or your live publishable key. The test key is used for testing. This allows you to supply a fake credit card number and pay for a fake product or service. After successful payment, you can see your fake client from the <a href="https://dashboard.stripe.com/customers">customers</a> page on your Stripe dashboard. Don&rsquo;t forget to switch to <a href="https://dashboard.stripe.com/test/customers">test</a>.</li>
<li><code>data-amount</code> &ndash; the amount you want to charge in cents. Just multiply what you want to charge by 100. So for example you want to charge $10, you need to supply 1000 instead.</li>
<li><code>data-name</code> &ndash; the name of your product or service.</li>
<li><code>data-description</code> &ndash; the description of your product or service.</li>
<li><code>data-image</code> &ndash; your logo. This should be an absolute url.</li>
</ul>


<p>Next we need to install Stripe&rsquo;s library via <a href="https://getcomposer.org/">composer</a>. Add the following code on your <code>composer.json</code> file:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"stripe/stripe-php": "2.*"
</code></pre>

<p>  }
}
```</p>

<p>Once that&rsquo;s done, execute <code>composer install</code> from your terminal. This will fetch the library from the repository.</p>

<p>Next create the <code>checkout.php</code> file and add the following code:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $<em>POST[&lsquo;stripeToken&rsquo;];
$email = $</em>POST[&lsquo;stripeEmail&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, first we included the <code>vendor/autoload.php</code> file so that we can use the Stripe library on our script. Next we initialize the library by setting the Stripe secret key. Next we get the data supplied by Stripe for us from the front-end. The <code>stripeToken</code> is the unique token generated by Stripe, this represents the transaction that the client made on the front-end. That is, paying $10 for our service. Next is the <code>stripeEmail</code>, this is basically just the email supplied by the client. Next we wrap the stripe charge call in a try catch statement. This allows us to capture any error returned by the API and show it to the client. Calling the stripe charge method requires 4 arguments:</p>

<ul>
<li><code>amount</code> &ndash; the amount that you want to charge in cents.</li>
<li><code>currency</code> &ndash; the currency code representing the currency that we want to use.</li>
<li><code>source</code> &ndash; the token that stripe generated on the front-end.</li>
<li><code>description</code> &ndash; a text that we want to assign to the charge. This is usually the clients email. But you can add more details such as the name of the service if you&rsquo;re offering more than one product or service.</li>
</ul>


<p>If the API call is successful, this method returns a whole bunch of data. Such as the amount paid, and the description. In most cases you&rsquo;ll basically only want the id of the transaction. You can get this by accessing the <code>id</code> property:</p>

<p><code>
$charge_id = $charge-&gt;id;
</code></p>

<p>You can then save this on your database as a reference. But of course you can always see this on <a href="https://dashboard.stripe.com/test/payments">your payments page</a>.</p>

<h3>Custom Forms</h3>

<p>If you need to ask additional information from your clients. Or you just want to use your own form. You can use custom forms. This allows you to write your own markup, supply your own fields and style them the way you want it with css. Here&rsquo;s an example of how a custom checkout form might look like:</p>

<p>```html
<form action="checkout.php" method="POST" id="payment-form">
  <div class="errors"></div></p>

<p>  <div></p>

<pre><code>&lt;label for="email"&gt;Email&lt;/label&gt;
&lt;input type="email" id="email" name="email"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="name"&gt;Name&lt;/label&gt;
&lt;input type="text" id="name" name="name"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="card-number"&gt;Card Number&lt;/label&gt;
&lt;input type="text" size="20" data-stripe="number" id="card-number" name="card-number"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="cvc"&gt;Security Code&lt;/label&gt;
&lt;input type="text" size="4" data-stripe="cvc" id="cvc" name="cvc"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
&lt;input type="text" data-stripe="exp-month" name="exp-month"&gt;
&lt;span&gt; / &lt;/span&gt;
&lt;input type="text" data-stripe="exp-year" name="exp-year"/&gt;
</code></pre>

<p>  </div></p>

<p>  <button type="submit">Pay</button>
</form>
```</p>

<p>This form works with the Stripe checkout script by adding the <code>data-stripe</code> attribute to the following fields. Just supply the value on the right-hand side as the value for the <code>data-stripe</code> attribute depending on the field:</p>

<ul>
<li>card number &ndash; <code>card-number</code></li>
<li>security code or cvc &ndash; <code>cvc</code></li>
<li>card expiration month &ndash; <code>exp-month</code></li>
<li>card expiration year &ndash; <code>exp-year</code></li>
</ul>


<p>Next we need to include the stripe checkout script:</p>

<p>```html</p>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>


<p>```</p>

<p>And then set the publishable key. This allows stripe to identify which stripe account the request came from:</p>

<p>```html</p>

<script>
Stripe.setPublishableKey('pk_test_xxxxxxxxxxxxxxxxxxx');
</script>


<p>```</p>

<p>Next we need to define the method that will process the response that we get from Stripe when the client submits the payment form. This takes up 2 parameters: status and response. The status is the <a href="https://stripe.com/docs/api#errors">status code</a>. The response contains the actual Stripe response. This is an object containing information about the transaction. One of those is the <code>id</code> which is basically the token that we need to pass in to the back-end. All we have to do is to append it to the payment form so it gets submitted with the rest of the fields. If there is an error with the request, an error property becomes available in the response object. This contains the error message, we just show it to the user by supplying it as a value to the <code>errors</code> div. After that, we enable the submit button so the client can fix the errors and submit the form again:</p>

<p>```javascript
function processStripeResponse(status, response){
  var form = $(&lsquo;#payment-form&rsquo;);</p>

<p>  if(response.error){</p>

<pre><code>form.find('.errors').text(response.error.message);
form.find('button').prop('disabled', false);
</code></pre>

<p>  }else{</p>

<pre><code>var token = response.id;
form.append($('&lt;input type="hidden" name="stripeToken" /&gt;').val(token));
form.get(0).submit();
</code></pre>

<p>  }
};
```</p>

<p>Next we define the event handler for when the payment form is submitted. This calls the <code>createToken</code> method which requires the payment form and the response handler as its arguments. Don&rsquo;t forget to return <code>false</code> so the form doesn&rsquo;t get submitted. The response handler will be the one which will trigger the submit if the response doesn&rsquo;t have any errors:</p>

<p>```javascript
$(function(){
  $(&lsquo;#payment-form&rsquo;).submit(function(event) {</p>

<pre><code>var form = $(this);
form.find('button').prop('disabled', true);

Stripe.card.createToken(form, processStripeResponse);

return false;
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>On the back-end we can just use the previous code and use the custom fields that we added. Note that the <code>stripeToken</code> field stays the same. We don&rsquo;t need to pass the card number, security code and expiration date:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $_POST[&lsquo;stripeToken&rsquo;];</p>

<p>$email = $<em>POST[&lsquo;email&rsquo;];
$name = $</em>POST[&lsquo;name&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to interact with the Stripe API in order to easily process payments.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://stripe.com/docs">Stripe Docs</a></li>
<li><a href="https://stripe.com/docs/api?lang=php">Stripe API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Twilio API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/02/22/getting-started-with-twilio-api/"/>
    <updated>2015-02-22T07:42:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2015/02/22/getting-started-with-twilio-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be walking you through the basics of using the Twilio API in PHP. But before that, what is Twilio? Twilio is a cloud communications company. They offer APIs which developers can use to enable Text Messaging, Voice, VoIP on their apps.</p>

<p>Now that we got the introduction out of the way. Let&rsquo;s get started.</p>

<p>If you don&rsquo;t have an account with Twilio yet now is the time to create one. You can do so from this page: <a href="https://www.twilio.com/try-twilio">Try Twilio</a>. After signing up, Twilio will need to verify you&rsquo;re a human. You can either have them call you or send you a text message containing your verification code. You&rsquo;ll just have to select which country you&rsquo;re in and then your phone number. Twilio already adds the country code as the prefix so you will only have to add your actual phone number. After you have verified your phone number, Twilio assigns you your first phone number.</p>

<p><img src="/images/posts/twilio/phone_number.png" alt="twilio phone number" /></p>

<p>After that, Twilio will have you take your phone number for a spin. You can either make a call, send an SMS, receive a call, or receive an SMS.</p>

<p><img src="/images/posts/twilio/test-drive.png" alt="twilio test drive" /></p>

<p>Go ahead and try atleast one of those options so you have an idea how it works.</p>

<h3>SMS API</h3>

<p>Twilio&rsquo;s SMS API allows you to:</p>

<ul>
<li><p><strong>Send and receive SMS or MMS</strong> &ndash; when you signup with Twilio, you can purchase a phone number. You can then use this phone number to send text messages or multi-media messages to your users. At the same time, users can also send text messages to that phone number in order to interact with your application. How it works is that when a specific person sends a text message to the phone number that has been assigned to you by Twilio. Twilio makes an HTTP request to the URL you assigned to that phone number. The HTTP request contains the same data that the person sent. You can then use this data to have your app do what the user requested.</p></li>
<li><p><strong>Track SMS Conversations</strong> &ndash; this allows you to track conversations between two phone numbers through the use of HTTP cookies. These HTTP cookies are use to keep a state. Just like when you login to a specific website. Cookies allows you to continue accessing the admin pages as long as you have that cookie around. After being active for some time, the cookie expires automatically. The same idea is used when tracking conversations with Twilio. Each phone number is assigned a cookie, and this cookie is sent along with the text message on every HTTP request made by Twilio.</p></li>
</ul>


<h4>SMS API Hello World</h4>

<p>Now were ready to write some code. First create a <code>composer.json</code> file and add the following:</p>

<p>```
{</p>

<pre><code>"require": {
    "twilio/sdk": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>This tells composer to require the twilio sdk for PHP. If you don&rsquo;t know what composer is. You can check out <a href="https://getcomposer.org/">getcomposer.org</a> to get started. Once you have saved the file, execute <code>composer install</code> from your terminal to install the twilio sdk.</p>

<p>Next, create a new PHP file then add the following code:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;; //include the twilio sdk</p>

<p>$sid = &ldquo;xxx&rdquo;; //your twilio account sid number
$token = &ldquo;yyy&rdquo;; //your twilio account token</p>

<p>$your_twilio_phonenumber = &lsquo;&rsquo;; //the friendly name of your twilio phone number
$phone_number_to_send_to = &lsquo;&rsquo;; //the phone number to send the message
$text_to_send = &lsquo;Hello world! from twilio&rsquo;;</p>

<p>$client = new Services_Twilio($sid, $token);</p>

<p>//send message
$message = $client->account->messages->sendMessage(
  $your_twilio_phonenumber,
  $phone_number_to_send_to,
  $text_to_send
);</p>

<p>echo $message->sid; //the message id
?>
```</p>

<p>From the code above, the first line includes the twilio sdk. This allows us to easily make requests to the Twilio API. Next we declare the sid and token. You can find this on your <a href="https://www.twilio.com/user/account/settings">account settings page</a> under the <strong>API Credentials</strong> section. You can either use the live or the test credentials. The only thing to note is that when using the live credentials, your account is charged by Twilio. But if your account is in trial mode, you can only use the live credentials. Twilio doesn&rsquo;t charge you when your account is in trial mode. But there are <a href="https://www.twilio.com/help/faq/twilio-basics/how-does-twilios-free-trial-work">some restrictions</a>. Going back to the code. Next we declare the twilio phone number. If you don&rsquo;t know what your twilio phone number is, visit the <a href="https://www.twilio.com/user/account/phone-numbers/incoming">numbers</a> page. You&rsquo;ll want to use the friendly name for your number. Next is the phone number where you want to send your message. This can be any phone number from any country supported twilio. Note that only United States and Canada are enabled by default. So you&rsquo;ll have to <a href="https://www.twilio.com/user/account/settings/international/sms">enable sending a message to your country</a> if you don&rsquo;t live in any of those places. Just add a check mark to the country you want to send the message to. Next add the text that you want to send. Then create a new instance of the <code>Services_Twilio</code> class and supply the sid and token that we declared earlier. Finally, send the message using the <code>sendMessage</code> method. This takes up 3 arguments: your twilio phone number, the phone number to send to and the message. This method returns the following data:</p>

<ul>
<li><code>sid</code> &ndash; a uniqued id assigned to the message.</li>
<li><code>date_created</code> &ndash; the date and time that the message was created.</li>
<li><code>date_updated</code> &ndash; the most recent date and time that the message was updated</li>
<li><code>date_sent</code> &ndash; normally this is empty when the request to send a message has just been made. Twilio messages doesn&rsquo;t seem to be sent immediately when the <code>sendMessage</code> method is called (it is queued). Therefore its only natural for this to be empty and only updated when the message is actually sent.</li>
<li><code>to</code> &ndash; the phone number where the message is sent.</li>
<li><code>from</code> &ndash; the twilio phone number that you used for sending the message.</li>
<li><code>body</code> &ndash; the actual text message.</li>
<li><code>status</code> &ndash; the status of the message, normally this has a value of &lsquo;queued&rsquo; right after getting the response from the <code>sendMessage</code> method. It is then updated to &lsquo;sent&rsquo; once the message is actually sent. For inbound messages, the value for this is &lsquo;received&rsquo;. If the message is currently being sent, this will have a value of &lsquo;sending&rsquo;. If the sending failed, it will have &lsquo;failed&rsquo; as the value.</li>
<li><code>num_segments</code> &ndash; the number of segments the message has. Text messages are only limited to 160 characters so your message is divided into 160-character segments. Each segment are then sent separately.</li>
<li><code>num_media</code> &ndash; the number of media items associated with your message.</li>
<li><code>direction</code> &ndash; can have a value of <code>outbound-api</code>, <code>inbound</code>, <code>outbound-call</code>, and <code>outbound-reply</code>. These are basically like the name suggests, <code>outbound-api</code> are the messages you have sent from your app. <code>inbound</code> are the ones that are sent from an actual phone number to your twilio phone number. <code>outbound-call</code> are the messages initiated during a call. And <code>outbound-reply</code> are messages initiated in response to an incoming SMS.</li>
<li><code>api_version</code> &ndash; the twilio api version used when the message was sent.</li>
<li><code>price</code> &ndash; the amount billed for the message.</li>
<li><code>price_unit</code> &ndash; the currency used for the price.</li>
<li><code>error_code</code> &ndash; the error code returned. This will only have a value if the value for <code>status</code> is failed. If you are having an error returned to you, be sure to check out the <a href="https://www.twilio.com/docs/errors/reference">errors reference</a>.</li>
<li><code>uri</code> &ndash; the uri of the resource used for sending the message.</li>
<li><code>subresource_uris</code> &ndash; the sub-resources used in sending the message. For SMS, a possible sub-resource can be the media resource.</li>
</ul>


<h4>Dev Tools</h4>

<p>Before we move on to writing some more code. I&rsquo;d like to do a quick introduction on the dev tools offered by Twilio. Twilio&rsquo;s dev tools includes the following:</p>

<ul>
<li><p><strong>App Monitor</strong> &ndash; allows you to monitor the requests being made to your app. These requests can be an outbound test/call to a specific phone number, or an inbound text/call to your twilio phone number. Basically, every interaction to your app are logged in the app monitor.</p></li>
<li><p><strong>API Explorer</strong> &ndash; allows you to make and explore API requests. This includes the parameters needed for a specific resource and the response that it returns. The good part is that it also includes code samples in different programming languages. Which you can readily copy and paste in order to test in your application. One thing to note when making requests through the API explorer is that you get charged for specific resources. An example of such resource is the resource for sending messages.</p></li>
<li><p><strong>Connect Apps</strong> &ndash; allows you to create a twilio app for the purpose of letting your clients connect to it. This allows you to perform specific actions on behalf of your client. If you&rsquo;ve ever used the Facebook API before, its pretty much the same idea. The only difference is that its your clients twilio account that is connected to your app. This is useful for clients who have their own clients. This allows you to send messages or make calls to the clients of your client on their behalf. This means all the charges are being made to your clients twilio account instead of yours if you choose to.</p></li>
</ul>


<h3>Searching and Buying Phone Numbers</h3>

<p>If your app allows your users to have their own phone numbers. You can also use the twilio API to search for available phone numbers:</p>

<p>```php
&lt;?php</p>

<p>$area_code = 201; //only for US and Canada
$search_params = array(</p>

<pre><code>'AreaCode' =&gt; $area_code
</code></pre>

<p>);</p>

<p>//make a request to search for available phone numbers on a specific area
$numbers = $client->account->available_phone_numbers->getList(&lsquo;US&rsquo;, &lsquo;Local&rsquo;, $search_params);</p>

<p>$nums = array();
foreach($numbers->available_phone_numbers as $n){</p>

<pre><code>$nums[] = json_decode(json_encode($n-&gt;phone_number), true);
</code></pre>

<p>}
?></p>

<pre>
<?php print_r($nums); ?>
</pre>


<p>```</p>

<p>You can supply the following arguments for your search:</p>

<ul>
<li><code>AreaCode</code> &ndash; any valid area code in US or Canada.</li>
<li><code>Contains</code> &ndash; a regular expression for matching the characters you want the phone numbers to have.</li>
<li><code>SmsEnabled</code> &ndash; if sms capabilities are enabled. This can either be true or false.</li>
<li><code>MmsEnabled</code> &ndash; if mms capabilities are enabled. This can either be true or false.</li>
<li><code>VoiceEnabled</code> &ndash; if making and receiving calls is enabled. This can either be true or false.</li>
<li><code>ExcludeAllAddressRequired</code> &ndash; if you want to exclude the phone numbers that require an address or not.</li>
<li><code>ExcludeLocalAddressRequired</code> &ndash; if you want to exclude the phone numbers that require a local address or not.</li>
<li><code>ExcludeForeignAddressRequired</code> &ndash; if you want to exclude the phone numbers that require a foreign address or not.</li>
</ul>


<p>Once your user has selected a number, you can then make a request to buy a phone number:</p>

<p>```php
&lt;?php
$phone_number = $_POST[&lsquo;phone_number&rsquo;];</p>

<p>$number = $client->account->incoming_phone_numbers->create(array(</p>

<pre><code>        'VoiceUrl' =&gt; 'http://yourwebsite.com/greet',
        'PhoneNumber' =&gt; $phone_number
</code></pre>

<p>));
?>
```</p>

<p>The request requires two arguments: the <code>VoiceUrl</code>, which is the URL which you want Twilio to make a request to when this specific phone number is called by someone. We&rsquo;ll talk more about this on the TwiML section, which is Twilio&rsquo;s way for interacting with users in a call through a computer voice. The second argument is the <code>PhoneNumber</code>, which is the phone number selected by the user which came from the search results earlier. Note that making a request to purchase a phone number costs money.</p>

<h3>TwiML</h3>

<p>TwiML or the Twilio Markup Language isn&rsquo;t exactly a new markup language created by Twilio. Its basically just plain old XML which you can use to do all kinds of cool stuff when a user calls your twilio phone number. Here are a few examples of awesome stuff you can do with TwiML. Note that these are all performed during a call:</p>

<ul>
<li><strong>Play</strong> &ndash; allows you to play an audio file.</li>
<li><strong>Say</strong> &ndash; allows you to convert text to speech.</li>
<li><strong>Dial</strong> &ndash; dials another phone number that can then be added to the current call.</li>
<li><strong>Record</strong> &ndash; record the voice of the caller.</li>
<li><strong>Sms</strong> &ndash; send a text message.</li>
<li><strong>Gather</strong> &ndash; allows you to gather the users input. Currently inputs are only limited to numbers.</li>
</ul>


<p>Now that you have an idea what you can do with TwiML, lets move on to some practical stuff. Let&rsquo;s build an app that allows the user to input a number and have a different sound played based on the number.</p>

<p>Start by creating a <code>hello.xml</code> file, then add the following:</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Say&gt;Hello! Please enter a number from 1 to 5&lt;/Say&gt;
  &lt;Gather numDigits="1" action="/choose.php" method="POST" /&gt;
&lt;/Response&gt;
</code></p>

<p>What this does is allows you to control the response that the user hears when they call your twilio phone number. The first line specifies the xml version and the encoding. The second line is the response wrapper. This allows us to specify the actual response that the user will hear. The first thing that the user will hear is the speech version of the text that we added inside the <code>Say</code> verb. In this case, were asking the user for a single digit number from 1 to 5. Next we use the <code>Gather</code> verb to gather the digit entered by the user. The <code>numDigits</code> attribute allows you to specify the number of digits. This has an added benefit of submitting the response immediately after the number of digits you specified matches the number of digits entered by the user. The digits entered by the user are submitted to the page you specify on the <code>action</code> attribute. In this case its the <code>choose.php</code> file in the same request URL you added to your twilio number. If you don&rsquo;t know how to change the request URL used by your number, then visit the <a href="https://www.twilio.com/user/account/phone-numbers">numbers page</a> and click the number you want to use. That will redirect you to the settings page of that number. From there look for the voice section and then change the request url then click save. This means that if your request url is &lsquo;<a href="http://mywebsite.com">http://mywebsite.com</a>&rsquo; and you specified &lsquo;/choose.php&rsquo; as the action, then you need to have the &lsquo;choose.php&rsquo; file in the root web directory of your website in order for the digits to be submitted properly.</p>

<p>Add the following code to the <code>choose.php</code> file:</p>

<p>```php
&lt;?php
header(&ldquo;content-type: text/xml&rdquo;); //specify content type to be xml</p>

<p>$digits = $_POST[&lsquo;Digits&rsquo;]; //the digit inputted by the user in his/her phone</p>

<p>//the array of sounds that we will be playing back to the user
$animals = array(</p>

<pre><code>'bassethound.wav',
'cat.wav',
'cattle.wav',
'chicken.wav',
'sheep.wav'
</code></pre>

<p>);
?>
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
<Response>
  <Say>Here is the sound you selected</Say>
  <Play><a href="http://mywebsite.com/sounds/">http://mywebsite.com/sounds/</a>&lt;?php echo $animals[$digits &ndash; 1]; ?></Play>
</Response>
?>
```</p>

<p>From the code above, the first line specifies the content type to be xml. The second line is where we get the digits enterred by the user. Next we declare an array containing the sounds that we want to play. I got these sounds from <a href="http://www.animal-sounds.org/animal-sounds-free-download.html">animal-sounds.org</a>. Next we just set the response starting with a speech saying &lsquo;Here is the sound you selected&rsquo;, then we just play it back using the <code>Play</code> verb.</p>

<h3>Conclusion</h3>

<p>Twilio&rsquo;s API allows you to add SMS and Voice superpowers to your apps at ease. Their documentation, quick start guides can get you up and running pretty quickly. Their code samples include some of the most popular programming languages for the web. Such as PHP, Ruby, Python, Java and .Net. If you need to add SMS and Voice capabilities to your app, there is no doubt that Twilio should be your first choice.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://www.twilio.com/docs/quickstart">Twilio &ndash; Quickstart Docs</a></li>
<li><a href="https://www.twilio.com/docs/api">Twilio &ndash; API Docs</a></li>
<li><a href="https://www.twilio.com/docs/libraries">Twilio &ndash; Helper Libraries</a></li>
<li><a href="https://www.twilio.com/docs/howto">Twilio &ndash; How-tos</a></li>
<li><a href="https://www.twilio.com/docs/errors/reference">Twilio &ndash; Errors Reference</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zillow API]]></title>
    <link href="http://wern-ancheta.com/blog/2014/03/20/getting-started-with-zillow-api/"/>
    <updated>2014-03-20T14:01:00+00:00</updated>
    <id>http://wern-ancheta.com/blog/2014/03/20/getting-started-with-zillow-api</id>
    <content type="html"><![CDATA[<p>In this tutorial were going to have a quick look at the Zillow API. But before we move on with actually writing some code lets first define what Zillow is. Taken from the <a href="http://www.zillow.com/corp/About.htm">Zillow about page</a> itself:</p>

<p><blockquote><p>Zillow is a home and real estate marketplace dedicated to helping homeowners, home buyers, sellers, renters, real estate agents, mortgage professionals, landlords and property managers find and share vital information about homes, real estate, mortgages and home improvement.</p></blockquote></p>

<p>To sum it up Zillow is a place where you can find useful information on real estate properties that are up for sale or rent.</p>

<!-- more -->


<h4>Getting a Zillow Web Service ID</h4>

<p>In order to start making requests to the Zillow API you must first register an account with them. Registering with zillow is free, all you have to do is visit the <a href="http://www.zillow.com/">zillow homepage</a> and click on the join link. After that just enter all the information that is being asked. Once registered go to the <a href="http://www.zillow.com/webservice/Registration.htm">API registration page</a> and enter the necessary information:</p>

<p><img src="/images/posts/2014-03-20-getting-started-with-zillow-api/api-signup.png" alt="zillow api registration" /></p>

<p>Just check the specific API that you will need for your project, agree to the terms of use then click on the submit button. Zillow will also ask about a sample URL where you will use the API, if you do not have a specific URL in mind you can just place <code>http://localhost</code> or some other URL which you can use for testing purposes.</p>

<p>Once that&rsquo;s done zillow will email you the API details. All you need here is the value for the Zillow Web Services Identification (ZWSID).</p>

<h4>GetSearchResults API</h4>

<p>Now that we have a zillow web service ID its time to test out some of the API methods that are available. First on the list is the <code>GetSearchResults API</code> which you can use to find real estate information for a specific address. Note that an address must be posted first by an owner or an agent in the <a href="http://www.zillow.com/for-sale-by-owner/">Zillow site</a> before it can be viewed.</p>

<p>The URL for requesting search results is <code>http://www.zillow.com/webservice/GetSearchResults.htm</code>.</p>

<p>It requires 3 url encoded arguments to be passed in:</p>

<ul>
<li><strong>zws-id</strong> &ndash; the zillow web service id</li>
<li><strong>address</strong> &ndash; the address of the property to search (e.g. 3799 S Las Vegas Blvd, Las Vegas, NV 89109, United States)</li>
<li><strong>citystatezip</strong> &ndash; the city + state combination or the zip code of the address that you specified in the <code>address</code> field.</li>
</ul>


<p>A successful request will return an XML file containing all the search results. Here&rsquo;s a JSON string representation of the XML file that will be returned:</p>

<p>```json
{</p>

<pre><code>request: {
    address: '',
    citystatezip: ''
},
message: {
    text: '',
    code: ''
},
response: {
    results: {
        result: [
            {
                zpid: '',
                link: {
                    homedetails: '',
                    graphsanddata: '',
                    comparables: ''
                },
                address: {
                    street: '',
                    zipcode: '',
                    city: '',
                    state: '',
                    latitude: '',
                    longitude: ''
                },
                zestimate: {
                    amount: '',
                    last-updated: '',
                    oneWeekChange: {
                        @attributes: {
                            deprecated: ''
                        }
                    },
                    valueChange: '',
                    valuationRange: {
                        low: '',
                        high: ''
                    },
                    percentile: ''
                },
                localRealEstate: {
                    region: {
                        @attributes: {
                            id: '',
                            type: '',
                            name: ''
                        },
                        links: {
                            overview: '',
                            forSaleByOwner: '',
                            forSale: ''
                        }
                    }
                }
            }
        ]
    }
}
</code></pre>

<p>}
```</p>

<p>And no the results doesn&rsquo;t exactly return empty strings for the values of each of the properties. I just did it that way so you can focus on the actual properties that are returned.</p>

<p>Here&rsquo;s an example PHP code that makes a request to the zillow API using <code>file_get_contents</code>. You can also use <code>curl</code> to have the benefit of error handling but to keep things simple lets stick with <code>file_get_contents</code> for this tutorial:</p>

<p>```php
&lt;?php
$zillow_id = &lsquo;xxx&rsquo;; //the zillow web service ID that you got from your email</p>

<p>$search = $<em>GET[&lsquo;address&rsquo;];
$citystate = $</em>GET[&lsquo;citystate&rsquo;];
$address = urlencode($search);
$citystatezip = urlencode($citystate);</p>

<p>$url = &ldquo;<a href="http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip">http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=$zillow_id&amp;address=$address&amp;citystatezip=$citystatezip</a>&rdquo;;</p>

<p>$result = file_get_contents($url);
$data = simplexml_load_string($result);
?>
```</p>

<p>Once the request is completed you can just access individual properties using the arrow notation. In the example below were accessing the <code>zpid</code> property:</p>

<p><code>
&lt;?php
echo $data-&gt;response-&gt;results-&gt;result[0]-&gt;zpid;
?&gt;
</code></p>

<p>But what happens when we enter an address which doesn&rsquo;t exist in the zillow database? For that you can check the value for the <code>message.code</code>:</p>

<p><code>
&lt;?php
$code = $data-&gt;message-&gt;code;
?&gt;
</code></p>

<p>This contains a 1-3 digit number. <code>0</code> basically means that the request was successful and that there are results that are returned. <code>507</code> or <code>508</code> means that there&rsquo;s no exact match for the inputted address. There are a bunch of other error codes which you can use so check out the messages and codes section in the <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">search results api page</a> for more information.</p>

<p>For more information regarding the search results API check out <a href="http://www.zillow.com/howto/api/GetSearchResults.htm">this page</a></p>

<h4>GetZestimate API</h4>

<p>Another API Method that we can use is the <code>GetZestimate</code>. This returns information regarding the zestimate of a specific property. A Zestimate is Zillow&rsquo;s estimated market value, computed using a proprietary formula. You can use the <code>GetZestimate</code> method by making a request to this URL: <code>http://www.zillow.com/webservice/GetZestimate.htm</code>.</p>

<p>The <code>GetZestimate</code> method only requires 2 arguments: the <code>zws-id</code> and the <code>zpid</code>. Of this 2 arguments the <code>zpid</code> is of interest since we didn&rsquo;t use it in the previous method. The <code>zpid</code> is basically a unique ID assigned by zillow to a specific property.</p>

<p>If you might have noticed earlier the <code>SearchResults</code> method already returns some zestimate data:</p>

<p>```json
zestimate: {</p>

<pre><code>amount: '',
last-updated: '',
oneWeekChange: {
    @attributes: {
        deprecated: ''
    }
},
valueChange: '',
valuationRange: {
    low: '',
    high: ''
},
percentile: ''
</code></pre>

<p>}
```</p>

<p>You can pretty much use this one if you don&rsquo;t need detailed information about a specific zestimate of a property. But if need more detailed information the <code>GetZestimate</code> method is the one that you need to use. Here&rsquo;s the JSON string representation of the result that it returns:</p>

<p>```
{</p>

<pre><code>request: {
    zpid: ''
},
message: {
   text: '',
   code: ''
},
response: {
    zpid: '',
    links: {
        homedetails: '',
        graphsanddata: '',
        mapthishome: '',
        comparables: ''
    },
    address: {
        street: '',
        zipcode: '',
        city: '',
        state: '',
        latitude: '',
        longitude: ''
    },
    zestimate: {
        amount: '',
        last-update: '',
        oneWeekChange: '',
        valueChange: '',
        valuationRange: {
            low: '',
            high: ''
        },
        percentile: ''
    },
    localRealEstate: {
        region: {
            links: {
                overview: '',
                forSaleByOwner: '',
                forSale
            }
        }
    },
    regions: {
        zipcode-id: '',
        city-id: '',
        county-id: '',
        state-id: ''
    }
}
</code></pre>

<p>}
```</p>

<p>The one caveat about the <code>GetZestimate</code> method is that it cannot be used without having information on the <code>zpid</code>. And you can only get the <code>zpid</code> with the <code>GetSearchResults</code> method so the <code>GetZestimate</code> method is always used in tandem with the <code>GetSearchResults</code> method unless you&rsquo;re saving <code>zpid</code>&rsquo;s in your database.</p>

<p>If you want to know more about the <code>GetZestimate</code> method check out the <a href="http://www.zillow.com/howto/api/GetZestimate.htm">documentation</a></p>

<h4>GetChart</h4>

<p>The last method that I&rsquo;m going to talk about in this tutorial is the <code>GetChart</code> method. You can use the <code>GetChart</code> method to get a URL to an image which shows the historical zestimates for a specific property. You can make a request to this method by using this URL: <code>http://www.zillow.com/webservice/GetChart.htm</code></p>

<p>The <code>GetChart</code> method requires the following argument to be passed in:</p>

<ul>
<li><code>zws-id</code></li>
<li><code>zpid</code> &ndash; the unique ID assigned by zillow to the specific property</li>
<li><code>unit-type</code> &ndash; you can either use <code>dollar</code> or <code>percent</code> as the value. This is basically use for specifying whether to display the dollar changed or the percent changed of a specific property</li>
<li><code>height</code> &ndash; the height of the image to return in pixels</li>
<li><code>width</code> &ndash; the width of the image to return in pixels</li>
</ul>


<p>You can pretty much guess the <code>unit-type</code> that was used for this image. Yep that&rsquo;s right its in dollars. So the image above is basically showing that the value for the specific property went up from 96,000 dollars to 104,000 dollars over a period of about one year. You can actually specify this value by passing in the <code>chartDuration</code> argument. Then you can have values like <code>1year</code>, <code>2years</code> or <code>10years</code>. If you don&rsquo;t specify anything it defaults to &lsquo;1year&rsquo;.</p>

<p>For more information regarding the <code>GetChart</code> method check out its <a href="http://www.zillow.com/howto/api/GetChart.htm">documentation</a>.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! Like with any other getting started guide we&rsquo;ve only scratched the surface with this tutorial. There&rsquo;s a lot more that you can do with Zillow API so be sure to check out the resources below to learn more.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.zillow.com/howto/api/APIOverview.htm">Zillow API Documentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
