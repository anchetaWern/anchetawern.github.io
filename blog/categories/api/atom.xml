<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Wern Ancheta]]></title>
  <link href="http://anchetaWern.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://anchetaWern.github.io/"/>
  <updated>2013-10-13T11:08:14+08:00</updated>
  <id>http://anchetaWern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Flickr API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api/"/>
    <updated>2013-10-13T11:00:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/10/13/getting-started-with-flickr-api</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;ll be showing you how to get started with using the Flickr API.
The Flickr API is a way to interact with data from Flickr Accounts.</p>

<h3>Getting an API Key</h3>

<p>First you have get an API Key from the <a href="http://www.flickr.com/services/apps/create/apply/">flickr developer website</a>.
In order to get an API key you first have to create an app.
The app is a way for flickr to track usage of their API. As you know, yahoo owns flickr so you first have to log in using your yahoo account in order to access the page for creating an app.</p>

<p>For the purpose of this tutorial you can just apply for a non-commercial key.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/key_type.png" alt="key type" /></p>

<p>Next, enter an app info. It can be anything you want, but be sure to provide more detailed information if you will be using the API for a project that you&rsquo;re building:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_info.png" alt="key type" /></p>

<p>Check the two checkboxes to agree with <a href="http://www.flickr.com/services/api/tos/">Flickr API terms of use</a>.
Be sure to read it so you will be informed of the limitations of the API.</p>

<p><img src="/images/posts/getting_started_with_flickr_api/app_key.png" alt="app key" /></p>

<p>Once you&rsquo;re done with that you can now see the Flickr key and Secret.
Copy those two as you will be needing it to interact with the API later.</p>

<h3>Interacting with the API</h3>

<p>Now were ready to actually interact with the API.
For this tutorial were going to create a little library that will interact with the flickr API for us and then we can simply include it in our code and call the methods from there.</p>

<p>Create a new php file and call it <code>class.flickr.php</code>. Declare 3 private variables which will store the flickr API key, the secret key and the format in which the results will be returned. In this case were using <code>json</code> so we can manipulate it with either JavaScript or PHP if we want. Under the constructor, simply assign the values for the <code>$flickr_key</code> and <code>$flickr_secret</code> to that of the arguments that will be passed later on when the <code>Flickr</code> class is instantiated.</p>

<p>```php
&lt;?php
class Flickr{</p>

<pre><code>private $flickr_key;
private $flickr_secret;
private $format = 'json';

public function __construct($flickr_key, $flickr_secret) {

    $this-&gt;flickr_key = $flickr_key;
    $this-&gt;flickr_secret = $flickr_secret;
}
</code></pre>

<p>?>
```</p>

<h4>Searching of Public Photos</h4>

<p>Now let&rsquo;s create a method for searching of public photos on Flickr.
This method performs a call to the <code>flickr.photos.search</code> method from the API.
You can read more about the arguments which you can pass to that method <a href="http://www.flickr.com/services/api/flickr.photos.search.html">here</a>.</p>

<p>The <code>searchPhotos</code> method will take two arguments.
The first one is the query or the image that you&rsquo;re looking for. It can be the image title, description or tags that has been attached to it. Note that the query can be a single word or a collection of words, you can also prepend the minus sign (&ndash;) to a word if you want to exclude it in the search results.</p>

<p>The next argument is the tags, the tags is a comma-separated list of words that can be used to further describe the image that you&rsquo;re looking for.</p>

<p>As you can see from the method below were using the <code>urlencode()</code> method to wrap all the user input. This includes the query and the tags. We need to do this in order to properly format the request url.</p>

<p>Were also specifying a couple of arguments to the url aside from the <code>text</code> and the <code>tags</code>:</p>

<ul>
<li><p><strong>sort</strong> &ndash; the order in which to return the results, in this case I&rsquo;ve chosen <code>relevance</code> to be the value but it can also have a value of of <code>date-posted-asc</code>, <code>date-posted-desc</code>, <code>date-taken-asc</code>, <code>date-taken-desc</code>, <code>interestingness-desc</code>, and <code>interestingness-asc</code> all of which is self-explanatory.</p></li>
<li><p><strong>safe_search</strong> &ndash; the safe search argument is a filter for results that are returned. You will usually want this to have a value of <code>1</code> which tells to the API to only return results that are safe for viewing for all ages.</p></li>
<li><p><strong>content_type</strong> &ndash; the type of content, I&rsquo;ve selected the value of <code>4</code> for this to indicate that I want to return results that can be either photos or screenshots.</p></li>
<li><p><strong>api_key</strong> &ndash; the API key that we got earlier from creating the app.</p></li>
<li><p><strong>format</strong> &ndash; the format in which to return the results. In this case were using json.</p></li>
<li><p><strong>per_page</strong> &ndash; this is the limit of images to return per page. In this case we only want the API to return 10 images per page.</p></li>
</ul>


<p>`&ldquo;
&lt;?php
public function searchPhotos($query = &rdquo;, $tags = &lsquo;&rsquo;){</p>

<pre><code>$urlencoded_tags = array(); 

if(!empty($tags)){  
    $tags_r = explode(',', $tags);
    foreach($tags_r as $tag){
        $urlencoded_tags[] = urlencode($tag);
    }
}   

//construct the url
$url  = 'http://api.flickr.com/services/rest/?';
$url .= 'method=flickr.photos.search';
$url .= '&amp;text=' . urlencode($query);
$url .= '&amp;tags=' . implode(',', $urlencoded_tags); //convert the array of url encoded tags back to a string
$url .= '&amp;sort=relevance';
$url .= '&amp;safe_search=1';
$url .= '&amp;content_type=4';
$url .= '&amp;api_key=' . $this-&gt;flickr_key;
$url .= '&amp;format=' . $this-&gt;format;
$url .= '&amp;per_page=10';

//get the results
$result = file_get_contents($url);

//remove the unneccessary strings that wraps the result returned from the API
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);

$photos = array();
$data = json_decode($json, true);

//check if the status didn't fail
if($data['stat'] != 'fail'){
    //return only the data for the photos as that's the only thing that we need
    $photos = $data['photos']['photo'];
    return $photos;
}else{
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>After constructing the url we simply use the <code>file_get_contents()</code> method to request the data from the API.
The results will then be stored to the <code>$result</code> variable. But the API has wrapped up the data with a function named <code>jsonFlickrApi()</code> as you can see from the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/flickr_results.png" alt="flickr results" /></p>

<p>Thus we cannot immediately convert it to a PHP array or even parse it with a json parser. So we need to use the <code>str_replace()</code> function to trim the unneccessary characters. And that&rsquo;s exactly what this particular line does:</p>

<p><code>
&lt;?php
$json = substr($result, strlen("jsonFlickrApi("), strlen($result) - strlen("jsonFlickrApi(") - 1);
?&gt;
</code></p>

<p>Then we simply use the <code>json_decode()</code> function to convert the json string to an array.</p>

<p>```
&lt;?php
$photos = array();
$data = json_decode($json, true);</p>

<p>//check if the status didn&rsquo;t fail
if($data[&lsquo;stat&rsquo;] != &lsquo;fail&rsquo;){</p>

<pre><code>//return only the data for the photos as that's the only thing that we need
$photos = $data['photos']['photo'];
return $photos;
</code></pre>

<p>}else{</p>

<pre><code>return false;
</code></pre>

<p>}
?>
```</p>

<p>But wait, were not really done yet. If you might have noticed from the screenshot of the results returned from the API earlier you might have noticed that there were no links to the images matching the query. The common purpose of using the flickr API is to fetch the image source of the images on the flickr website. So why are there no image sources as we can see from the parsed version of the results returned from the API below:</p>

<p><img src="/images/posts/getting_started_with_flickr_api/jsonview.png" alt="json parse" /></p>

<p>That&rsquo;s because we need to construct the url&rsquo;s ourselves using the data that has been returned from the API.
All you have to do is to extract the <code>farm</code>, <code>server</code>, <code>id</code> and the <code>secret</code>. Here&rsquo;s how to construct the url:</p>

<p><code>
&lt;?php
$src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
?&gt;
</code></p>

<p>To call the method, you simply have to loop through the results returned from the <code>searchPhotos()</code> method and then construct the url from inside the loop:</p>

<p>```
&lt;?php
require_once(&lsquo;class.flickr.php&rsquo;);</p>

<p>$flickr = new Flickr($api_key, $api_secret);</p>

<p>$results = $flickr->searchPhotos($query, $tags);
if(!empty($results)){</p>

<pre><code>foreach($results as $photo){

    $src = "http://farm" . $photo['farm'] . ".static.flickr.com/" . $photo['server'] . '/' . $photo['id'] . '_' . $photo['secret'] . '_m.jpg';
</code></pre>

<p>?></p>

<pre><code>&lt;img src="&lt;?php echo $src; ?&gt;" alt="&lt;?php echo $photo['title']; ?&gt;"&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>}
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>The flickr API is a great way to fetch and modify user data from the flickr website.
We&rsquo;ve barely scratch the surface with this tutorial. If you want to learn more about the flickr API be sure to checko out the resources below.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://www.flickr.com/services/developer/">Flickr Developer Guide</a></li>
<li><a href="http://www.flickr.com/services/api/">Flickr API Methods</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ebay Finding API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api/"/>
    <updated>2013-04-03T08:09:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/04/03/getting-started-with-ebay-finding-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to show you how you can access the e-bay finding API to access products that are sold from e-bay.
Product data such as the list price, available quantities, images are available from the e-bay finding API.</p>

<!--More-->


<h3>Getting an API Key</h3>

<p>First thing that you have to do is to get an API Key from e-bay.
This will serve as a unique identification for your application
and a means for e-bay to limit access to their API to only those that have an API key.</p>

<p>To get an API key you must first register with e-bay: <a href="https://developer.ebay.com/join/">developer.ebay.com/join</a></p>

<p>After successfully registering you will receive an email from e-bay. Click on the link to verify your email and you will be redirected to a screen similar to the screenshot below:</p>

<p><img src="/images/posts/getting_started_with_ebay_finding_api/registration_success.jpg" alt="successful registration" /></p>

<p>You can then click on the get your application keys link, you will be redirected to the accounts page where you can click on the Generate production keys button to generate the API key.</p>

<h3>Building a Simple e-bay Class</h3>

<p>Next were going to build the class that were going to use later to access the API.
Create a new PHP file and name it <code>class.ebay.php</code>. Then put the following contents:</p>

<p>```
&lt;?php
class ebay{</p>

<p>}
?>
```</p>

<p>Inside the class declare the following private member variables:</p>

<p><code>php
&lt;?php
private $url = 'http://svcs.ebay.com/services/search/FindingService/v1';
private $app_id; //api key
private $global_id; //e-bay region (eg. EBAY-US)
private $version = '1.0.0'; //version of the API to use
private $format = 'json'; //format of the returned data
?&gt;
</code></p>

<p>The <code>$url</code> is the address in which the API can be accessed.</p>

<p>The <code>$app_id</code> is the API key that you got earlier from registering your application with e-bay.</p>

<p>The <code>$global_id</code> is the e-bay region in which you want to access product data. Think of it as the e-bay store which you access in your browser when you want to buy something online. The e-bay store that you&rsquo;re accessing when you type in <code>ebay.com</code> is the US store which has a global id of <code>EBAY-US</code>. There are also other global ids that you can use, you can access them here: <a href="http://developer.ebay.com/DevZone/finding/CallRef/Enums/GlobalIdList.html">Global ID List</a></p>

<p>The <code>$version</code> is the version of the API that you want to use. At the time of writing of this article the version that is available is <code>1.0.0</code> so were going to use that here.</p>

<p>The <code>$format</code> is the format in which you want the returned data to be encoded. The preffered format is <code>json</code> since we can easily manipulate it using PHP or JavaScript.</p>

<p>Next is the constructor which will take up 3 arguments. The <code>$app_id</code> and <code>$global_id</code>.
The constructor is called once you create an object of this class so you&rsquo;ll have to pass in the 2 arguments when you create an object.</p>

<p>```
&lt;?php
public function __construct($app_id, $global_id){</p>

<pre><code>$this-&gt;app_id = $app_id; 
$this-&gt;global_id = $global_id; 
</code></pre>

<p>}
?><br/>
```</p>

<p>Next, create a new method and call it <code>findItems</code> this will take 2 arguments: the <code>$keyword</code> and the <code>$limit</code>.
The <code>$keyword</code> is your query. For example <code>computer accessories</code>.
The <code>$limit</code> is the number of products which you want to return.</p>

<p>In this method were simply appending the different parameters to the <code>$url</code> that we declared earlier.</p>

<p>The parameters that we have used here are:</p>

<ul>
<li><p>operation-name &ndash; the operation that you want to perform. In the example below were using the <code>findItemsByKeywords</code> operation. The type of operation will determine the other parameters that you will be including in your request.
In the case of <code>findItemsByKeywords</code> the required parameter is the <code>keywords</code>. There are also other operations which you can use you can find them at the <a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">call reference page</a>.</p></li>
<li><p><strong>service-version</strong> &ndash; the version of the API that you would want to use. In our example were using version    <code>1.0.0</code></p></li>
<li><p><strong>keywords</strong> &ndash; the parameter required by the <code>findItemsByKeywords</code> operation in which you supply your url encoded query.</p></li>
<li><p><strong>paginationInput.entriesPerPage</strong> &ndash; the number of entries per page</p></li>
<li><p><strong>security-appname</strong> &ndash; the APP id that you got from registering your application with e-bay</p></li>
<li><p><strong>response-data-format</strong> &ndash; the format in which you want the returned data to be.
The preferred format is json although you can also have XML or SOAP as response data format.</p></li>
</ul>


<p>Once the parameters are all appended together with the request url we can then make a request to the API by using the <code>file_get_contents</code> method and supplying the request url as the argument. And since we specified <code>json</code> as the format earlier were going to use the <code>json_decode</code> method to convert the json string into an array.</p>

<p>`&ldquo;
&lt;?php
public function findItems($keyword = &rdquo;, $limit = 2){</p>

<pre><code>$url    = $this-&gt;url . '?';
$url .= 'operation-name=findItemsByKeywords';
$url .= '&amp;service-version=' . $this-&gt;version;
$url .= '&amp;keywords=' . urlencode($keyword);
$url .= '&amp;paginationInput.entriesPerPage=' . $limit;

$url .= '&amp;security-appname='. $this-&gt;app_id;
$url .= '&amp;response-data-format=' . $this-&gt;format;

return json_decode(file_get_contents($url), true);
</code></pre>

<p>}
?><br/>
```</p>

<p>We can also have a method where we can have more specificity with what we want to find.
We can also specify the sorting type, item type, minimum price and maximum price. Note that we are using a different operation name for this method and that is the <code>findItemsAdvanced</code> operation.</p>

<p>`&ldquo;
&lt;?php
public function findItemsAdvanced($keyword = &rdquo;, $item_sort = &lsquo;BestMatch&rsquo;, $item_type = &lsquo;FixedPricedItem&rsquo;, $min_price = &lsquo;0&rsquo;, $max_price = &lsquo;9999999&rsquo;, $limit = 2){</p>

<pre><code>    $url    = $this-&gt;url . '?';
    $url .= 'operation-name=findItemsAdvanced';
    $url .= '&amp;service-version=' . $this-&gt;version;
    $url .= '&amp;global-id=' . $this-&gt;global_id;
    $url .= '&amp;keywords=' . urlencode($keyword);

    $url .= '&amp;sortOrder=BestMatch';
    $url .= '&amp;itemFilter(0).name=ListingType';
    $url .= '&amp;itemFilter(0).value=FixedPrice';
    $url .= '&amp;itemFilter(1).name=MinPrice';
    $url .= '&amp;itemFilter(1).value=' . $min_price;
    $url .= '&amp;itemFilter(2).name=MaxPrice';
    $url .= '&amp;itemFilter(2).value=' . $max_price;
    $url .= '&amp;paginationInput.entriesPerPage=' . $limit;
    $url .= '&amp;descriptionSearch=false';

    $url .= '&amp;security-appname='. $this-&gt;app_id;
    $url .= '&amp;response-data-format=' . $this-&gt;format;

    return json_decode(file_get_contents($url), true);
}
</code></pre>

<p>?>
```</p>

<p>Lastly, we can also create a method which simply returns an array of the sort orders available via e-bay.
You can find the available values for sort orders in <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsAdvanced.html#Request.sortOrder">this page</a>.</p>

<p>```
&lt;?php
public function sortOrders(){</p>

<pre><code>$sort_orders = array(
    'BestMatch' =&gt; 'Best Match',
    'BidCountFewest' =&gt; 'Bid Count Fewest',
    'BidCountMost' =&gt; 'Bid Count Most',
    'CountryAscending' =&gt; 'Country Ascending',
    'CountryDescending' =&gt; 'Country Descending',
    'CurrentPriceHighest' =&gt; 'Current Highest Price',
    'DistanceNearest' =&gt; 'Nearest Distance',
    'EndTimeSoonest' =&gt; 'End Time Soonest',
    'PricePlusShippingHighest' =&gt; 'Price Plus Shipping Highest',
    'PricePlusShippingLowest' =&gt; 'Price Plus Shipping Lowest',
    'StartTimeNewest' =&gt; 'Start Time Newest'
);

return $sort_orders;
</code></pre>

<p>}
?>
```</p>

<h3>Building a Simple App</h3>

<p>Time to use the class that we just created in building a simple application.
Our simple application will have a search field for inputting products that the user wants to search
and a drop-down box to sort the results.</p>

<p>The only product details that were going to show to the user is the item title, price and the product image.
In the code below were declaring an object of the class that we created earlier specifying the API key
and the e-bay region as the first and second parameter.</p>

<p>Then we call the <code>sortOrders</code> method which simply returns an array of sort orders that are available from the e-bay finding API.</p>

<p>Next, we build the form for searching products.</p>

<p>Finally, we check if the <code>$_POST['search']</code> variable is not empty and use its value together with the sort selected by the user as the argument for the <code>findItemsAdvanced</code> method.
Going back to the class that we created earlier we used <code>findItemsAdvanced</code> as the operation.
The operation determines the first index when accessing the results.
So for the <code>findItemsAdvanced</code> it will have <code>findItemsAdvancedResponse</code> as the first index.</p>

<p>```
&lt;?php
require_once(&lsquo;class.ebay.php&rsquo;);</p>

<p>$ebay = new ebay(&lsquo;YOUR API KEY&rsquo;, &lsquo;EBAY-US&rsquo;);
$sort_orders = $ebay->sortOrders();
?></p>

<p><form action="ebay_finding_test.php" method="post"></p>

<pre><code>&lt;input type="text" name="search" id="search"&gt;
&lt;select name="sort" id="sort"&gt;
&lt;?php
foreach($sort_orders as $key =&gt; $sort_order){
?&gt;
    &lt;option value="&lt;?php echo $key; ?&gt;"&gt;&lt;?php echo $sort_order; ?&gt;&lt;/option&gt;
&lt;?php   
}
?&gt;
&lt;/select&gt;
&lt;input type="submit" value="Search"&gt;
</code></pre>

<p></form></p>

<p>&lt;?php
if(!empty($_POST[&lsquo;search&rsquo;])){</p>

<pre><code>$results = $ebay-&gt;findItemsAdvanced($_POST['search'], $_POST['sort']);
$item_count = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['@count'];

if($item_count &gt; 0){
    $items = $results['findItemsAdvancedResponse'][0]['searchResult'][0]['item'];

    foreach($items as $i){
</code></pre>

<p>?></p>

<pre><code>    &lt;li&gt;
        &lt;div class="item_title"&gt;
            &lt;a href="&lt;?php echo $i['viewItemURL'][0]; ?&gt;"&gt;&lt;?php echo $i['title'][0]; ?&gt;&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="item_img"&gt;
            &lt;img src="&lt;?php echo $i['galleryURL'][0]; ?&gt;" alt="&lt;?php echo $i['title']; ?&gt;"&gt;
        &lt;/div&gt;
        &lt;div class="item_price"&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['@currencyId']; ?&gt;
            &lt;?php echo $i['sellingStatus'][0]['currentPrice'][0]['__value__']; ?&gt;
        &lt;/div&gt;
    &lt;/li&gt;
</code></pre>

<p>&lt;?php</p>

<pre><code>    }
}       
</code></pre>

<p>}
?>
```</p>

<p>Here&rsquo;s the demo for this simple application implemented using JavaScript by using Handlebars for the template and jQuery&rsquo;s <code>$.ajax</code> method to request the data. Be sure to place your own app id that you got from e-bay in order to make this demo work.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/L6Nkj/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Conclusion</h3>

<p>That&rsquo;s it for this tutorial. Using the API is really easy since you don&rsquo;t need to construct signatures to be used in the request like other API&rsquo;s. Be sure to check out the resources below if you want to learn more about the e-bay finding API.</p>

<h3>Resources</h3>

<ul>
<li><a href="http://developer.ebay.com/DevZone/finding/HowTo/">Finding API How To</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/Concepts/MakingACall.html">Making an API Call</a></li>
<li><a href="http://developer.ebay.com/DevZone/finding/CallRef/index.html">Call Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/ebay_finding_api.7z">Sample Application Source Code</a></li>
<li><a href="http://tutorialdemos-wern.rhcloud.com/ebay_finding_api/ebay_finding_test.php">Sample Application Demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Freebase API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api/"/>
    <updated>2013-02-11T19:55:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/11/getting-started-with-freebase-api</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to show you the basics of using the Freebase API.</p>

<h3>What is Freebase?</h3>

<p>Freebase is a collection of data from different sources.
So its basically like an encyclopedia in which you can pull data from.</p>

<p>Here&rsquo;s a diagram that shows exactly what type of data you can fetch from Freebase:</p>

<p><img src="/images/posts/getting_started_with_freebase/Freebase-Domains.jpg" alt="freebase diagram" /></p>

<p>You can also watch this video Introducing the knowledge graph:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mmQl6VGvX-c "></iframe></div></p>

<!--More-->


<h3>Playing with the API</h3>

<p>Most API&rsquo;s requires an API Key so that you could access its data but Freebase is different.
You have the choice whether or not to register an API key. If you just want to try things out
you can simply access the data from Freebase like this:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=nirvana&amp;indent=true
</code></p>

<p>There are 2 parameters used in this url:</p>

<ul>
<li>query &ndash; what you want to search.</li>
<li>indent &ndash; can either be true or false, specify the value of true if you want to return a formatted json string so that you can easily read it.</li>
</ul>


<h4>Specifying Language</h4>

<p>You can also specify the language by using the <code>lang</code> parameter.
If you specified a non-supported language the API will also tell you:</p>

<p><img src="/images/posts/getting_started_with_freebase/unsupported_language.jpg" alt="unsupported language" /></p>

<h4>Filters</h4>

<p>But the true power of this API lies on the filters that you can use to specify what is exactly the type
of data that you&rsquo;re looking for. For example you want to be able to find music that has the name &ldquo;Robot&rdquo; on it:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=robot&amp;indent=true&amp;filter=(all%20type:music)
</code></p>

<p>The query above would return:</p>

<p><img src="/images/posts/getting_started_with_freebase/robot_music.jpg" alt="robot music" /></p>

<p>Another example would be if you&rsquo;re looking for &ldquo;One piece&rdquo; not the swimsuit but the <a href="http://en.wikipedia.org/wiki/One_Piece">manga/anime</a>:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)
</code></p>

<p>And as expected it returns only the data which refers to the &ldquo;One Piece&rdquo; anime/manga:</p>

<p><img src="/images/posts/getting_started_with_freebase/one_piece.jpg" alt="one piece anime" /></p>

<h3>Read Services</h3>

<p>The Freebase API is actually composed of several services which you can use separately or in tandem with other services. We will go over some of these services later on and implement it using PHP.</p>

<ul>
<li>Search Service</li>
<li>MQL Read Service</li>
<li>Topic API</li>
<li>RDF API</li>
<li>Text Service</li>
<li>Image Service</li>
<li>Freebase Suggest</li>
</ul>


<h3>Getting an API Key</h3>

<p>Once you&rsquo;ve played around the Freebase API a bit you might want to register an API key.
You can register from the <a href="https://code.google.com/apis/console/">Google API Console</a>.
It&rsquo;s free to register but when your application gets more and more users and it exceeds the limit for the free service Google will have you pay for the service.</p>

<p>If you haven&rsquo;t created a project with the Google console before you might need to create a new project.</p>

<p><img src="/images/posts/getting_started_with_freebase/new_project.jpg" alt="new project" /></p>

<p>Once that&rsquo;s done look for the Freebase API in the services tab and then enable it by turning it on:</p>

<p><img src="/images/posts/getting_started_with_freebase/freebase.jpg" alt="freebase" /></p>

<p>Accept the service agreement and then click on the API Access tab:</p>

<p><img src="/images/posts/getting_started_with_freebase/api_key.jpg" alt="api key" /></p>

<p>All you have to do now is copy the API key and use it on your requests by specifying a key parameter.
Using our previous query, your query will now look like this with the api key specified:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)&amp;key=xyz
</code></p>

<h3>Freebase with PHP</h3>

<p>Now that we&rsquo;ve played around with the Freebase API in the browser its time to access it using PHP.</p>

<p>First were going to build a simple class that will query the Freebase API for us.</p>

<p>```php
&lt;?php
class Freebase{</p>

<p>}
?><br/>
```</p>

<p>Create a new private variable that will store the API key that we got from the Google console earlier.</p>

<p><code>
private $api_key = 'xyz';
</code></p>

<h4>Search Service</h4>

<p>Like I mentioned earlier we will go through some of the read services that the Freebase API offers.
So were going to create a method which will utilize these services in our class.</p>

<p>The service that we have gone over earlier was the Search service which simply allows you to search based on keywords.</p>

<p>Create a new method and call it search this will utilize the search service.
Here we have 1 required parameter ($query) and 5 optional parameters.
You can see a full list of the parameters that you can specify in the wiki for the <a href="http://wiki.freebase.com/wiki/ApiSearch">Search API</a>.</p>

<p>As you can see from the code below
were just building the URL from the arguments that we will supply later on when we call the method.</p>

<p>`&ldquo;
&lt;?php
public function search($query, $filter = &rdquo;, $start = 0, $limit = 10, $exact = &lsquo;false&rsquo;){</p>

<pre><code>if(!empty($query)){
    $query = urlencode($query);
    $url    = 'https://www.googleapis.com/freebase/v1/search?query='. $query;
    $url .= '&amp;filter=(' . urlencode($filter) . ')';
    $url .= '&amp;start=' . $start;
    $url .= '&amp;limit=' . $limit;
    $url .= '&amp;exact=' . $exact;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return json_decode(file_get_contents($url), true)['result'];
}
</code></pre>

<p>}
?>
```</p>

<p>The important thing to note here is that the query should be <a href="http://php.net/manual/en/function.urlencode.php">url encoded</a> otherwise your query won&rsquo;t work properly if for example the query has spaces in it or some special characters.</p>

<p>You can see url encoding in action when you input your query manually in the address bar of the browser.
If you manually input our query earlier it will look like this before you type in enter:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one piece&amp;indent=true&amp;filter=(all type:animation)&amp;key=xyz
</code></p>

<p>But once you press on enter all those spaces will be replaced with <code>%20</code> or <code>+</code>:</p>

<p><code>
https://www.googleapis.com/freebase/v1/search?query=one%20piece&amp;indent=true&amp;filter=(all%20type:animation)&amp;key=xyz
</code></p>

<p>Here&rsquo;s a <a href="http://www.w3schools.com/tags/ref_urlencode.asp">url encoding reference</a> from W3Schools.</p>

<p>The main meat of all the methods that we will be creating
for this class is the actual fetching of the data from the Freebase API.
We do the fetching by using a method called <code>file_get_contents</code> which takes a <code>url</code> as an argument and returns the contents (both html, javascript and text) of the page referenced by the url that you supplied.</p>

<p>But do note that <code>file_get_contents</code> doesn&rsquo;t work with every site or every API out there.
So in the case it doesn&rsquo;t work then you can use CURL instead.
There&rsquo;s a very gentle introduction on <a href="http://codular.com/curl-with-php">how to perform cURL request using PHP</a> at codular.</p>

<p>Also note that <code>file_get_contents</code> returns a warning if the content that you&rsquo;re requesting doesn&rsquo;t exist because of an HTTP Error or the API simply didn&rsquo;t find the data that you&rsquo;re requesting for.
In those cases you might want to include an <code>@</code> sign before the actual method name like <code>@file_get_contents</code> that way it wouldn&rsquo;t return a warning even if nothing is returned.</p>

<p>Lastly we use the <code>json_decode</code> method to convert the json string to a PHP array which we can easily manipulate or loop through.</p>

<h4>Image Service</h4>

<p>There&rsquo;s also the Image Service which simply returns an image base on the entity ID.
The entity ID can be a string or a number representing the entity.
But in my experience I notice that this service doesn&rsquo;t generalize if you query for something like &lsquo;naruto&rsquo;, &lsquo;ichigo&rsquo; or &lsquo;gundam&rsquo;. It can only return an image for a certain entity that is globally known like the following people or works:</p>

<ul>
<li>vincent_van_gogh</li>
<li>pablo_picasso</li>
<li>mona_lisa</li>
<li>the_scream</li>
<li>jose_rizal</li>
<li>andres_bonifacio</li>
<li>leonardo_da_vinci</li>
</ul>


<p>For the others which aren&rsquo;t globally known or entities which didn&rsquo;t deserve to have an actual index for the image service you can use the search service to get the entity ID and then use that entity ID to query the image service.
We&rsquo;ll go through that in a minute.</p>

<p>For now let&rsquo;s look at the method for fetching image from the image service.
We have 3 parameters, 1 required and 2 optional.</p>

<p>There&rsquo;s not really much parameters that you can specify for the image service, be sure to check out the wiki for the <a href="http://wiki.freebase.com/wiki/ApiImage">image service</a> to learn more.</p>

<p>The first parameter is the <code>entity_id</code> which for globally known entities can be just words separated by underscores like we saw earlier.
As you can see were not actually using the <code>file_get_contents</code> method here since we only need the url for the image we only return the url itself.</p>

<p>```
&lt;?php
public function image($entity_id, $max_width = 150, $max_height = 150){</p>

<pre><code>if(!empty($entity_id)){
    $url = 'https://usercontent.googleapis.com/freebase/v1/image' . $entity_id;
    $url .= '?maxwidth=' . $max_width;
    $url .= '&amp;maxheight=' . $max_height;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return $url;        
}
</code></pre>

<p>}
?>
```</p>

<h4>Text Service</h4>

<p>The text service is different from the image service in that the
image service actually accepts the title or name of well-known entities as a value for the entity ID as well as the ID representing the entity itself.
But for the text service we can only utilize it once we&rsquo;ve
called the search service which returns the entity ID that we need.</p>

<p>The method has also a  <code>max_length</code> parameter which is simply used to specify the maximum length of the text that will be returned. <code>0</code> being no limit so it basically returns everything it can return.</p>

<p>```
&lt;?php
public function text($entity_id, $max_length = &lsquo;0&rsquo;){</p>

<pre><code>if(!empty($entity_id)){
    $url    = 'https://www.googleapis.com/freebase/v1/text/' . $entity_id;
    $url .= '?maxlength=' . $max_length;
    $url .= '&amp;key=' . $this-&gt;api_key;

    return json_decode(file_get_contents($url), true)['result'];        
}
</code></pre>

<p>}
?>
```</p>

<h4>Topic API</h4>

<p>Lastly there&rsquo;s the topic API. There&rsquo;s actually 3 more services in the Freebase API which we haven&rsquo;t gone over but I&rsquo;ll leave those for another day. The topic API just like the text service and image service requires an entity ID for the request.</p>

<p>```
&lt;?php
public function topic($entity_id){</p>

<pre><code>if(!empty($entity_id)){
    $url = 'https://www.googleapis.com/freebase/v1/topic' . $entity_id;
    return json_decode(file_get_contents($url), true);      
}
</code></pre>

<p>}
?>
```</p>

<h3>Calling the Methods</h3>

<p>Now that were done creating the class its now time to actually call the methods
to produce some output. Create a new file and then import the class that we created earlier.
Also create an object of that class so that we can use it to call the methods.</p>

<p>What the code below does is just using the search method as the base data source
and then the image and text methods to fetch the image and a description for each entity
returned from our main search.</p>

<p>```
&lt;?php
require_once(&lsquo;class.freebase.php&rsquo;);</p>

<p>$freebase = new Freebase();
$result = $freebase->search(&lsquo;Dragon ball z&rsquo;, &lsquo;all type:manga&rsquo;);</p>

<p>foreach($result as $entity){</p>

<pre><code>$id = $entity['mid'];
$name = $entity['name'];

$image = $freebase-&gt;image($id);
$text = $freebase-&gt;text($id);
</code></pre>

<p>?>
<li></p>

<pre><code>&lt;h3&gt;&lt;?php echo $name; ?&gt;&lt;/h3&gt;
&lt;img src="&lt;?php echo $image; ?&gt;" alt="&lt;?php echo $name; ?&gt;"&gt;
&lt;p&gt;
&lt;?php echo $text; ?&gt;    
&lt;/p&gt;    
</code></pre>

<p></li>
&lt;?php
}
?>
```</p>

<h2>Resources</h2>

<ul>
<li><a href="http://wiki.freebase.com/wiki/ApiSearch">Search Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiImage">Image Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/ApiText">Text Service</a></li>
<li><a href="http://wiki.freebase.com/wiki/Topic_API">Topic API</a></li>
<li><a href="http://wiki.freebase.com/wiki/Search_Cookbook">Search Cookbook</a></li>
<li><a href="http://www.w3schools.com/tags/ref_urlencode.asp">URL Encoding Reference</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/getting_started_with_freebase_api.7z">Sample Application Source Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Amazon Product Advertising API]]></title>
    <link href="http://anchetaWern.github.io/blog/2013/02/10/getting-started-with-amazon-product-advertising-api/"/>
    <updated>2013-02-10T19:31:00+08:00</updated>
    <id>http://anchetaWern.github.io/blog/2013/02/10/getting-started-with-amazon-product-advertising-api</id>
    <content type="html"><![CDATA[<p>In this blog post I&rsquo;m going to show you how you can get started using Amazon&rsquo;s product advertising API in PHP.
I&rsquo;m going to walk you through creating an access key, some of the basics of the API and lastly some examples on how to use the API.</p>

<!--More-->


<h3>What is the Product Advertising API</h3>

<p>Amazon Product Advertising API is basically an API offered by Amazon for accessing data on every product that are being displayed at any Amazon site.</p>

<h3>Create an Access Key</h3>

<p>Just like most of the API that are offered by sites like Facebook, Twitter, Tumblr we need to create an
access key to be used by our application. The access key that were going to create can be used to authenticate requests to any Amazon Web Service API and that includes the Product Advertising API.</p>

<p>In order to obtain an access key first you have to sign up for an amazon web service account at: <a href="http://aws.amazon.com/">aws.amazon.com</a>. Youre amazon web service account is different from your amazon account that you use for shopping so you have to create a new account if you don&rsquo;t already have one.
Along the sign up process you will be asked for your credit card number.
If you don&rsquo;t have a credit card fret not because you can just close the tab when you reach that point and then access the <a href="https://portal.aws.amazon.com/gp/aws/securityCredentials">security credentials page</a> where you can create a new access key. All you have to do once you reach that page is to scroll down a bit so you will see the Access Credentials section which basically shows you a table of the access keys that are associated with your account.
Just click on the &ldquo;Create new access key&rdquo; link to create a new access key. Once that&rsquo;s done you can just copy and paste the access key ID and the Secret Access key to the PHP file where you&rsquo;re going to include the class for accessing the api later on.</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/access_key.jpg" alt="amazon access key" /></p>

<p>You can also sign up for an amazon affiliate account: <a href="https://affiliate-program.amazon.com/">Amazon affiliate program</a> so that you will have your own affiliate ID which you can also use in the class for accessing the API.</p>

<h3>API Basics</h3>

<p>There are only 3 things that you have to keep in mind while working with the Amazon Product Advertising API:</p>

<ul>
<li>Operations</li>
<li>Response Groups</li>
<li>Browse Nodes</li>
</ul>


<h4>Operations</h4>

<p>Operations are like methods in a class. This tells the API what specific action to do.
Some of the most commonly used operations are:</p>

<ul>
<li>ItemSearch &ndash; commonly used for returning one or more items that satisfies the parameters specified</li>
<li>ItemLookup &ndash; commonly used for returning a single item but can also return more items if the ASIN&rsquo;s (Amazon Standard Identification Number) are separated by comma.</li>
<li>SimilarityLookup &ndash; used for returning items that are similar to the ASIN that is specified in the request.</li>
</ul>


<h4>Response Groups</h4>

<p>Response groups are pre-defined result sets in the API.
They are used for specifying the data that is to be returned by the API.
Some of the most commonly used response groups are:</p>

<ul>
<li>ItemAttributes</li>
<li>EditorialReview</li>
<li>Images</li>
<li>Medium</li>
<li>NewReleases</li>
<li>Reviews</li>
<li>ItemIds</li>
</ul>


<p>You can check out the full list of available response groups here: <a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ResponseGroupsList.html">Response Groups</a></p>

<p>Looking at the documentation provided by Amazon I don&rsquo;t think there&rsquo;s a way to specify the specific fields that you want to return so the best thing to do when working with the API is to select a response group that suits your needs.
Medium and Large response groups isn&rsquo;t really the best response group to use if you only want to get the items ASIN, title and selling price. So its wiser to check out what specific data are being returned by each response group before picking something like the Medium response group which returns a whole bunch of data that you might not need in the app that you&rsquo;re trying to build.
Choosing the right response group will have a considerable effect on performance as you&rsquo;re only getting what&rsquo;s actually needed.</p>

<h4>Browse Nodes</h4>

<p>Browse Nodes in simple terms are product categories in amazon.
If you have already tried shopping for a product at amazon you might have notice that there&rsquo;s a general category that you select when searching for a product like Electronics, Aparrel, Books, etc.
These are the major browse nodes. As you go inside that category you will then see some sub-categories. For example you&rsquo;re browsing through the Books category. In the right side you will see sub-categories like arts &amp; philosophy, business &amp; investing, children&rsquo;s books, etc.
All of these are represented by node Id&rsquo;s. You can find the full list of some of the major nodes in Amazon here: <a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/BrowseNodeIDs.html">Browse Node IDs</a></p>

<p>As you might have noticed in the table in the link above, every amazon site has different sets of major nodes since not every site has the same items available.</p>

<h3>Accessing the API</h3>

<p>A very nice guy has already written the class for us so we won&rsquo;t have to write the class for accessing the API.
Here&rsquo;s the link to his blog post on how to use the API: <a href="http://www.codediesel.com/php/accessing-amazon-product-advertising-api-in-php/">Accessing Amazon Product Advertising API</a> you might want to download the source code from that site and read the blog post. He has also written another class which can be used for fetching some of the product categories available in each amazon site: <a href="http://www.codediesel.com/libraries/amazon-advertising-api-browsenodes/">Amazon Advertising API Browse Nodes</a>.</p>

<p>Ok enough with the boring explanation let&rsquo;s start playing with the API.
Go ahead and download the source available at the site I&rsquo;ve linked earlier and setup a sandbox where you could play with the API to your heart&rsquo;s content if you haven&rsquo;t done so.</p>

<p>Open up the php file which contains the class for accessing the api and do some modifications.
The class doesn&rsquo;t have every single operation and response group that&rsquo;s available in the API but its fine since we rarely need to use all of those. But we have to do some modifications so the class will become more flexible.</p>

<p>First replace the constructor to accept the access key($public) , access key secret($private), amazon local site($local_site) and the associate id($associate_tag):</p>

<p>```php
&lt;?php
public function __construct($public, $private, $local_site, $associate_tag){</p>

<pre><code>$this-&gt;public_key = $public;
$this-&gt;private_key = $private;
$this-&gt;local_site = $local_site;
$this-&gt;associate_tag = $associate_tag;
</code></pre>

<p>}
?>
```</p>

<p>Of course you will need to declare some member variables where the values specified in the constructor will be assigned.</p>

<p>The <code>queryAmazon</code> method can also use a little modification:</p>

<p>```php
&lt;?php
public function queryAmazon($parameters){</p>

<pre><code>return amazon_product_api_signed_request($this-&gt;local_site, $parameters, $this-&gt;public_key, $this-&gt;private_key, $this-&gt;associate_tag);
</code></pre>

<p>}
?>
```</p>

<p>Little because we&rsquo;ve only changed the string &ldquo;com&rdquo; to be the member variable local site.
All the rest is left unchanged.</p>

<p>There are a number of methods already present in the class but the <code>queryAmazon()</code> method is all we really need.
All we have to do is to specify the parameters needed and were good to go.</p>

<p>There&rsquo;s also the php file which makes the actual request and creates the signatures for us.
Basically amazon needs some sort of a signature for you to be able to access the API aside from the access ID and secret that you already have.
But the access ID and secret are basically the ingredients on creating the signature.
We won&rsquo;t be diving into that because honestly I don&rsquo;t understand some of the black magic coding-fu that&rsquo;s done in that file.</p>

<p>But we need to make some modifications on it as well.
Open up the <code>aws_signed_request.php</code> and scroll to its <code>aws_signed_request</code> method.
I noticed that the default host that is used in there is somewhat obsolete.</p>

<p>So instead of this:</p>

<p>```
$method = &ldquo;GET&rdquo;;
$host = &ldquo;webservices.amazon.&rdquo;.$region;
$uri = &ldquo;/onca/xml&rdquo;;</p>

<p>$params[&ldquo;Service&rdquo;]          = &ldquo;AWSECommerceService&rdquo;;
$params[&ldquo;AWSAccessKeyId&rdquo;]   = $public_key;
$params[&ldquo;AssociateTag&rdquo;]     = $associate_tag;
$params[&ldquo;Timestamp&rdquo;]        = gmdate(&ldquo;Y-m-d\TH:i:s\Z&rdquo;);
$params[&ldquo;Version&rdquo;]          = &ldquo;2009-03-31&rdquo;;
```</p>

<p>It should be:</p>

<p>```
if($region == &lsquo;jp&rsquo;){</p>

<pre><code>$host = "ecs.amazonaws.".$region;
</code></pre>

<p>}else{</p>

<pre><code>$host = "webservices.amazon.".$region;
</code></pre>

<p>}</p>

<p>$method = &ldquo;GET&rdquo;;
$uri = &ldquo;/onca/xml&rdquo;;</p>

<p>$params[&ldquo;Service&rdquo;]          = &ldquo;AWSECommerceService&rdquo;;
$params[&ldquo;AWSAccessKeyId&rdquo;]   = $public_key;
$params[&ldquo;AssociateTag&rdquo;]     = $associate_tag;
$params[&ldquo;Timestamp&rdquo;]        = gmdate(&ldquo;Y-m-d\TH:i:s\Z&rdquo;);
$params[&ldquo;Version&rdquo;]          = &ldquo;2011-08-01&rdquo;;
```</p>

<p>Not really much change in here. All we did was to make the host a little bit flexible and level up the version a bit (from version 2009-03-31 to 2011-08-01). As of the writing of this article Amazon.co.jp is the only amazon site that doesn&rsquo;t work with <code>webservices.amazon.{region}</code> so we had to do that little <code>if</code> statement to check if the region that is specified is Japan.</p>

<p>Next create a new php file and include the class for accessing the api:</p>

<p><code>
require_once('amazon_api_class.php');
</code></p>

<p>Create an instance of the class and provide the necessary details:</p>

<p><code>
$amazon = new AmazonProductAPI($public, $private, $site, $affiliate_id);
</code></p>

<p>The <code>$site</code> is the amazon site where the items will be fetched. By default its value is &ldquo;com&rdquo;</p>

<h4>Getting a Specific Item</h4>

<p>First let&rsquo;s try getting a specific item by using an ASIN.
You can get the ASIN of an item in amazon by scrolling down to its product details:</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/item_asin.jpg" alt="amazon item ASIN" /></p>

<p>Here we are specifying the ASIN of a Gundam called Heavy Arms Custom.
One thing to remember when getting data for a specific product you must use the <code>ItemLookup</code> operation.
The ItemId is a required parameter when using the <code>ItemLookup</code> operation so it must always be present.
In the response group we specified two which is the reviews response group and the medium response group. Response group can either be one or more depending on what specific data you need.</p>

<p>```php
&lt;?php
$single = array(</p>

<pre><code>'Operation' =&gt; 'ItemLookup',
'ItemId' =&gt; 'B0006N149M',
'ResponseGroup' =&gt; 'Reviews,Medium'
);
</code></pre>

<p>?>
```</p>

<p>If you want to specify more than one response group then you can use comma to separate them. The  same is true with the other parameters that you specify. So for <code>ItemId</code> you can also specify one or more ASIN&rsquo;s also separated by commas. But for the operation you can only have one. In the screenshot below I&rsquo;ve specified two operations (ItemLookup and ItemSearch):</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/multi_operation.jpg" alt="multi operation" /></p>

<p>If you missed a parameter required by the specific operation that you have specified the API will also tell you. So for example we haven&rsquo;t specified the ItemId as a parameter:</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/required_params.jpg" alt="required parameters" /></p>

<p>It&rsquo;s always nice to play around with the parameters so you&rsquo;ll know which are possible and which are not. Different parameters renders different results.</p>

<p>Now if you execute the following code in the browser:</p>

<p><code>php
&lt;?php
$result = $amazon-&gt;queryAmazon($single);
echo "&lt;pre&gt;";
print_r($result);
echo "&lt;/pre&gt;";
?&gt;
</code></p>

<p>You will get the following results:</p>

<p>```
SimpleXMLElement Object
(</p>

<pre><code>[OperationRequest] =&gt; SimpleXMLElement Object
    (
        [RequestId] =&gt; 78a46e7d-73ca-43e9-802b-956bd94878ab
        [Arguments] =&gt; SimpleXMLElement Object
            (
                [Argument] =&gt; Array
                    (
                        [0] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; Operation
                                        [Value] =&gt; ItemLookup
                                    )

                            )

                        [1] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; Service
                                        [Value] =&gt; AWSECommerceService
                                    )

                            )

                        [2] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; Signature
                                        [Value] =&gt; oiTUfIDVjKQzYKj2CA8KXoGU/hkgu+WimXaPOt6Czo8=
                                    )

                            )

                        [3] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; AssociateTag
                                        [Value] =&gt; 
                                    )

                            )

                        [4] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; Version
                                        [Value] =&gt; 2009-03-31
                                    )

                            )

                        [5] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; ItemId
                                        [Value] =&gt; B002ODQJKQ
                                    )

                            )

                        [6] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; AWSAccessKeyId
                                        [Value] =&gt; 
                                    )

                            )

                        [7] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; Timestamp
                                        [Value] =&gt; 2013-02-11T10:37:21Z
                                    )

                            )

                        [8] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Name] =&gt; ResponseGroup
                                        [Value] =&gt; Reviews,Medium
                                    )

                            )

                    )

            )

        [RequestProcessingTime] =&gt; 0.0188220000000000
    )

[Items] =&gt; SimpleXMLElement Object
    (
        [Request] =&gt; SimpleXMLElement Object
            (
                [IsValid] =&gt; True
                [ItemLookupRequest] =&gt; SimpleXMLElement Object
                    (
                        [IdType] =&gt; ASIN
                        [ItemId] =&gt; B002ODQJKQ
                        [ResponseGroup] =&gt; Array
                            (
                                [0] =&gt; Reviews
                                [1] =&gt; Medium
                            )

                        [VariationPage] =&gt; All
                    )

            )

        [Item] =&gt; SimpleXMLElement Object
            (
                [ASIN] =&gt; B002ODQJKQ
                [DetailPageURL] =&gt; http://www.amazon.com/GTMax-Black-Travel-Charger-Sandisk/dp/B002ODQJKQ%3FSubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB002ODQJKQ
                [ItemLinks] =&gt; SimpleXMLElement Object
                    (
                        [ItemLink] =&gt; Array
                            (
                                [0] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; Technical Details
                                        [URL] =&gt; http://www.amazon.com/GTMax-Black-Travel-Charger-Sandisk/dp/tech-data/B002ODQJKQ%3FSubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [1] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; Add To Baby Registry
                                        [URL] =&gt; http://www.amazon.com/gp/registry/baby/add-item.html%3Fasin.0%3DB002ODQJKQ%26SubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [2] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; Add To Wedding Registry
                                        [URL] =&gt; http://www.amazon.com/gp/registry/wedding/add-item.html%3Fasin.0%3DB002ODQJKQ%26SubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [3] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; Add To Wishlist
                                        [URL] =&gt; http://www.amazon.com/gp/registry/wishlist/add-item.html%3Fasin.0%3DB002ODQJKQ%26SubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [4] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; Tell A Friend
                                        [URL] =&gt; http://www.amazon.com/gp/pdp/taf/B002ODQJKQ%3FSubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [5] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; All Customer Reviews
                                        [URL] =&gt; http://www.amazon.com/review/product/B002ODQJKQ%3FSubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                                [6] =&gt; SimpleXMLElement Object
                                    (
                                        [Description] =&gt; All Offers
                                        [URL] =&gt; http://www.amazon.com/gp/offer-listing/B002ODQJKQ%3FSubscriptionId%3DAKIAJBYTL3GMGIPXK6GQ%26tag%3Dhttpanchetawe-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3DB002ODQJKQ
                                    )

                            )

                    )

                [SalesRank] =&gt; 502
                [SmallImage] =&gt; SimpleXMLElement Object
                    (
                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL75_.jpg
                        [Height] =&gt; 75
                        [Width] =&gt; 75
                    )

                [MediumImage] =&gt; SimpleXMLElement Object
                    (
                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL160_.jpg
                        [Height] =&gt; 160
                        [Width] =&gt; 160
                    )

                [LargeImage] =&gt; SimpleXMLElement Object
                    (
                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL.jpg
                        [Height] =&gt; 500
                        [Width] =&gt; 500
                    )

                [ImageSets] =&gt; SimpleXMLElement Object
                    (
                        [ImageSet] =&gt; SimpleXMLElement Object
                            (
                                [@attributes] =&gt; Array
                                    (
                                        [Category] =&gt; primary
                                    )

                                [SwatchImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL30_.jpg
                                        [Height] =&gt; 30
                                        [Width] =&gt; 30
                                    )

                                [SmallImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL75_.jpg
                                        [Height] =&gt; 75
                                        [Width] =&gt; 75
                                    )

                                [ThumbnailImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL75_.jpg
                                        [Height] =&gt; 75
                                        [Width] =&gt; 75
                                    )

                                [TinyImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL110_.jpg
                                        [Height] =&gt; 110
                                        [Width] =&gt; 110
                                    )

                                [MediumImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL._SL160_.jpg
                                        [Height] =&gt; 160
                                        [Width] =&gt; 160
                                    )

                                [LargeImage] =&gt; SimpleXMLElement Object
                                    (
                                        [URL] =&gt; http://ecx.images-amazon.com/images/I/41betMKJ4%2BL.jpg
                                        [Height] =&gt; 500
                                        [Width] =&gt; 500
                                    )

                            )

                    )

                [ItemAttributes] =&gt; SimpleXMLElement Object
                    (
                        [Binding] =&gt; Electronics
                        [Brand] =&gt; TPA
                        [EAN] =&gt; 0084331456620
                        [EANList] =&gt; SimpleXMLElement Object
                            (
                                [EANListElement] =&gt; 0084331456620
                            )

                        [Feature] =&gt; Brand new generic charger.
                        [Label] =&gt; GTMax
                        [Manufacturer] =&gt; GTMax
                        [MPN] =&gt; VF-76-SAN-CLP-WALLC-A01
                        [PackageDimensions] =&gt; SimpleXMLElement Object
                            (
                                [Height] =&gt; 110
                                [Length] =&gt; 360
                                [Weight] =&gt; 5
                                [Width] =&gt; 350
                            )

                        [PackageQuantity] =&gt; 1
                        [PartNumber] =&gt; VF-76-SAN-CLP-WALLC-A01
                        [ProductGroup] =&gt; Network Media Player
                        [ProductTypeName] =&gt; ACCESSORY_OR_PART_OR_SUPPLY
                        [Publisher] =&gt; GTMax
                        [SKU] =&gt; NAS-B002ODQJKQ
                        [Studio] =&gt; GTMax
                        [Title] =&gt; GTMax Black Home Travel Charger for Sandisk Sansa Clip Plus 4GB 8GB
                        [UPC] =&gt; 084331456620
                        [UPCList] =&gt; SimpleXMLElement Object
                            (
                                [UPCListElement] =&gt; 084331456620
                            )

                    )

                [OfferSummary] =&gt; SimpleXMLElement Object
                    (
                        [LowestNewPrice] =&gt; SimpleXMLElement Object
                            (
                                [Amount] =&gt; 1
                                [CurrencyCode] =&gt; USD
                                [FormattedPrice] =&gt; $0.01
                            )

                        [TotalNew] =&gt; 10
                        [TotalUsed] =&gt; 0
                        [TotalCollectible] =&gt; 0
                        [TotalRefurbished] =&gt; 0
                    )

                [CustomerReviews] =&gt; SimpleXMLElement Object
                    (
                        [IFrameURL] =&gt; http://www.amazon.com/reviews/iframe?akid=AKIAJBYTL3GMGIPXK6GQ&amp;alinkCode=xm2&amp;asin=B002ODQJKQ&amp;atag=httpanchetawe-20&amp;exp=2013-02-12T10%3A37%3A25Z&amp;v=2&amp;sig=1hL8%2BYC95zSlZ9ngcaerOMj3TEoZhDARGrPlLN9GnfI%3D
                        [HasReviews] =&gt; true
                    )

                [EditorialReviews] =&gt; SimpleXMLElement Object
                    (
                        [EditorialReview] =&gt; SimpleXMLElement Object
                            (
                                [Source] =&gt; Product Description
                                [Content] =&gt; 
</code></pre>

<p>Brand new non-OEM</p>

<p>Input: 100V &ndash; 240V (U.S. &amp; World Standard)</p>

<p>LED light power indicator.</p>

<p>Best replacement for original Sansa travel charger.</p>

<p>Intelligent IC chip inside recognizes a fully charged battery and automatically switches to a saver mode to prevent overcharging and short circuit.</p>

<p>UPC Code:084331456620</p>

<pre><code>                                [IsLinkSuppressed] =&gt; 0
                            )

                    )

            )

    )
</code></pre>

<p>)
```</p>

<p>Wew! That was a lot for a single product. What more if you&rsquo;re fetching more than one.
Take the time to examine which specific data are returned so that you&rsquo;ll know how to access them later on.</p>

<p>As you have seen above the api returns a simple xml object so you can access the data from it just like a normal object in PHP. But here were going to convert the object into an array.</p>

<p>To convert a Simple Xml Object to an array you first have to convert it to a JSON string:</p>

<p><code>
$json = json_encode($result);
</code></p>

<p>And then use <code>json_decode()</code> to convert it to an array.
Be sure to specify to convert it to an associative array by setting the second argument to <code>true</code>:</p>

<p><code>
$array = json_decode($json, true);
</code></p>

<p>You can then access it like a regular array:</p>

<p><code>php
&lt;?php
echo $array['Items']['Item']['ASIN'];
?&gt;
</code></p>

<p>One thing to remember though. Not every product has the same sets of fields.
Just like in the real world, you can&rsquo;t expect a bag to have a model number since only electronic gadgets like cellphones have that.</p>

<h4>Getting Similar Items</h4>

<p>You can also get items which are similar to the item that you have specified in your parameters.
Here were using the <code>SimilarityLookup</code> operation to get the items which are similar to the Gundam Heavy Arms Custom. We also have a new parameter called <code>Condition</code> which is simply the status of the item whether its new, refurbished, used or collectible.</p>

<p>```php
&lt;?php
$similar = array(</p>

<pre><code>'Operation' =&gt; 'SimilarityLookup',
'ItemId' =&gt; 'B0006N149M',
'Condition' =&gt; 'All',
'ResponseGroup' =&gt; 'Medium'
);
</code></pre>

<p>?>
```</p>

<p>Here were simply looping through the results returned by the api and were outputting the image, price and the ASIN of the item:</p>

<p>```php
&lt;?php
$result =   $amazon->queryAmazon($similar);
$similar_products = $result->Items->Item;
foreach($similar_products as $si){</p>

<pre><code>$item_url = $si-&gt;DetailPageURL; //get its amazon url
$img = $si-&gt;MediumImage-&gt;URL; //get the image url

echo "&lt;li&gt;";
echo "&lt;img src='$img'/&gt;";
echo "&lt;a href='$item_url'&gt;". $si-&gt;ASIN . "&lt;/a&gt;";
echo $si-&gt;ItemAttributes-&gt;ListPrice-&gt;FormattedPrice; //item price
echo "&lt;/li&gt;";       
</code></pre>

<p>}
?>
```</p>

<p>Here&rsquo;s what it will look like:</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/similar_items.jpg" alt="required parameters" /></p>

<h4>Item Lookup</h4>

<p>Finally let&rsquo;s look at the <code>ItemSearch</code> operation.
As I have mentioned earlier the <code>ItemSearch</code> operation simply returns all the items which matches the criteria that you have specified.</p>

<p>So here were trying to get some computer software which are associated with the keyword &ldquo;Disney&rdquo;.
We also have some new paramters which we haven&rsquo;t used earlier. The <code>SearchIndex</code> is the category where we want to search, in this case the category is software so its expected that we only get software for the results. The <code>Keywords</code> is like the query for our search. In other words what specific software do we want to search. In this case its &ldquo;disney&rdquo; software. Remember that games are also software so its natural that we get some computer games back.</p>

<p>```php
&lt;?php
$category = &lsquo;Software&rsquo;;</p>

<p>$params = array(</p>

<pre><code>"Operation"     =&gt; "ItemSearch",
"SearchIndex"   =&gt; $category,
"Keywords" =&gt; "disney",
"ResponseGroup" =&gt; "Medium,Reviews"     
);
</code></pre>

<p>?>
```</p>

<p>And indeed we get some computer games based on some disney films:</p>

<p><img src="/images/posts/getting_started_with_amazon_product_advertising_api/disney_games.jpg" alt="disney games" /></p>

<h2>Conclusion</h2>

<p>We&rsquo;ve barely scratched the surface with this tutorial but I hope I&rsquo;ve been able to give you some useful information on how to get started using the Amazon Product Advertising API.</p>

<h2>Resources</h2>

<ul>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_Intro_AAWS.html">Introduction to the Product Advertising API</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ApiReference.html">API Reference</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/BrowseNodeIDs.html">Browse Node IDs</a></p></li>
<li><p><a href="http://www.codediesel.com/php/accessing-amazon-product-advertising-api-in-php/">Accessing Amazon Product Advertising API</a></p></li>
<li><p><a href="http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ResponseGroupsList.html">Response Groups</a>)</p></li>
<li><p><a href="https://dl.dropboxusercontent.com/u/126688107/tutorials/getting_started_with_amazon_product_api.7z">Sample Application Source Code</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
