<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chrome-extension | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/chrome-extension/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2015-11-22T07:44:12+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Chrome Extension]]></title>
    <link href="http://wern-ancheta.com/blog/2015/05/16/creating-a-chrome-extension/"/>
    <updated>2015-05-16T15:54:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/05/16/creating-a-chrome-extension</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll be showing you how to create a very basic chrome extension. One that would allow us to schedule posts with the <a href="/projects/ahead/">Ahead project</a> that I created. Here&rsquo;s how it will work:</p>

<ol>
<li>User clicks on the extension on a page that he wants to share on a future time.</li>
<li>The extension makes a request to the server where Ahead is currently hosted.</li>
<li>The server returns a response and it is then outputted by the extension.</li>
</ol>


<h3>Creating the Extension</h3>

<p>Before anything else we need to create the <code>manifest.json</code> file. This is the most important file since chrome won&rsquo;t be able to recognize our extension if we do not have this file.</p>

<p>```
{
  &ldquo;manifest_version&rdquo;: 2,
  &ldquo;name&rdquo;: &ldquo;Ahead&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Easily schedule posts&rdquo;,</p>

<p>  &ldquo;browser_action&rdquo;: {</p>

<pre><code>"default_icon": "icon.png"
</code></pre>

<p>  },</p>

<p>  &ldquo;background&rdquo;: {</p>

<pre><code>"scripts": ["background.js"]
</code></pre>

<p>  },</p>

<p>  &ldquo;content_scripts&rdquo;:</p>

<pre><code>[
    {
        "matches":["&lt;all_urls&gt;"],
        "js":["content.js"],
        "run_at": "document_end"
    }
],
</code></pre>

<p>  &ldquo;permissions&rdquo;: [&ldquo;&lt;all_urls>&rdquo;, &ldquo;storage&rdquo;],
  &ldquo;options_page&rdquo;: &ldquo;options.html&rdquo;
}
```</p>

<p>Breaking it down:</p>

<ul>
<li><p><code>manifest_version</code> &ndash; this is the version of the manifest file. The Chrome browser has been around for quite a while now. So are the extensions that have been written when it first came out. Currently the latest version that we can assign to a manifest file is <code>2</code>.</p></li>
<li><p><code>name</code> &ndash; the name you want to give to the extension.</p></li>
<li><code>version</code> &ndash; the version of the extension.</li>
<li><code>description</code> &ndash; a descriptive text you want to show your users. This is the text that will show right under the name of the extension when the user accesses the <code>chrome://extensions</code> page.</li>
<li><code>browser_action</code> &ndash; used to specify the element which will trigger the extension. In this case we want an icon to be the trigger so we set the <code>default_icon</code>. The value would be the filename of the icon.</li>
<li><code>content_scripts</code> &ndash; these are the scripts that run in the context of the current web page. The <code>matches</code> property is where you specify an array of URL&rsquo;s where the content scripts can run. In this case we just set a special value called <code>"&lt;all urls&gt;"</code>. This way the script can run from any webpage. Next is the <code>js</code> property where we specify an array of items containing the path to the content scripts. Last is the <code>run_at</code> property where we specify when to run the content scripts. We just set it to <code>document_end</code> so we can make sure that the whole page is loaded before we execute our script.</li>
<li><code>background</code> &ndash; used to specify the background scripts. Content scripts only has access to the elements in the current page but not the Chrome API methods. So we need a background script in order to access those methods. This property simply takes up a single property called <code>scripts</code> where you specify an array of the background scripts you wish to use. In thise case were just going to use a single <code>background.js</code> file.</li>
<li><code>permissions</code> &ndash; this is where we can specify an array containing the list of items that the extension needs to use or has access in. In this case were just going to use <code>"&lt;all_urls&gt;"</code> and <code>storage</code>. We use <code>storage</code> to have access to the methods used for saving custom settings for the extension. In our case the setting would be the api key required by Ahead.</li>
<li><code>options_page</code> &ndash; used for specifying which HTML file will be used for the options page.</li>
</ul>


<p>Next let&rsquo;s proceed with the options page:</p>

<p>```html
&lt;!DOCTYPE html>
<html>
<head><title>Ahead</title></head>
<body></p>

<pre><code>API Key:
&lt;input type="text" id="api_key"&gt;

&lt;button id="save"&gt;Save&lt;/button&gt;

&lt;script src="options.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>You can use css just like you would in a normal HTML page if you want. But for this tutorial we won&rsquo;t. The options page is pretty minimal. All we need is the actual field, a button to save the settings and then a link to the options page JavaScript file.</p>

<p>Here&rsquo;s the <code>options.js</code> file:</p>

<p>```javascript
function save_options(){
  var api_key = document.getElementById(&lsquo;api_key&rsquo;).value;</p>

<p>  chrome.storage.sync.set({</p>

<pre><code>'api_key': api_key
</code></pre>

<p>  },
  function(){</p>

<pre><code>alert('API Key Saved!');
</code></pre>

<p>  });
}</p>

<p>function restore_options(){</p>

<p>  chrome.storage.sync.get({</p>

<pre><code>'api_key': ''
</code></pre>

<p>  },
  function(items){</p>

<pre><code>document.getElementById('api_key').value = items.api_key;
</code></pre>

<p>  });
}
document.addEventListener(&lsquo;DOMContentLoaded&rsquo;, restore_options);
document.getElementById(&lsquo;save&rsquo;).addEventListener(&lsquo;click&rsquo;,</p>

<pre><code>save_options);
</code></pre>

<p>```</p>

<p>In the above file we declared 2 methods. <code>save_options</code> and <code>restore_options</code>. <code>save_options</code> is used for saving the settings to chrome storage. And <code>restore_options</code> is for retrieving the settings from the storage and populating the value for each of the fields. In the <code>options.js</code> file we got access to the chrome storage API. The main methods that were using are the <code>sync.set</code> and <code>sync.get</code>. We use <code>sync.set</code> to save the settings in the chrome storage and then output an alert box saying the settings are saved when its successful. <code>sync.get</code> on the other hand is used for retrieving the existing setting from chrome storage and then we use the retrieved value to populate the text field. The <code>save_options</code> method is called when the save button is clicked. And the <code>restore_options</code> method is called when the DOM of the options page has been fully loaded.</p>

<p>Next is the <code>background.js</code> file. We primarily use this file to listen for the click event on the <code>browser_action</code> which is basically the icon of extension that is located on the upper right corner of Chrome:</p>

<p>```javascript
chrome.browserAction.onClicked.addListener(function(tab){</p>

<p>  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {</p>

<pre><code>var activeTab = tabs[0];
chrome.tabs.sendMessage(activeTab.id, {"message": "clicked_browser_action"});
</code></pre>

<p>  });
});
```</p>

<p>You don&rsquo;t need to worry about the code above too much. All it does is listen for the click event on the icon of the extension. It then uses the <code>tabs.sendMessage</code> method to send a message to the current tab that hey the icon extension has been clicked. This then brings us to the <code>content.js</code> file which basically just waits for this message to be sent. Once it receives the message we then retrieve the api key using the <code>sync.get</code> method. Once we retrieved the api key we make a POST request to the Ahead URL which is responsible for accepting POST requests for posts to be published. The content would be the title of the current page and then its URL. We then construct a new form data and supply the <code>queue</code>, <code>api_key</code> and <code>content</code> as the fields. We set the <code>queue</code> to <code>true</code> because we want to schedule the post to be published later. If you set it to <code>false</code> then it will be published immediately. Next is the <code>api_key</code>. We simply supply what we got from chrome storage as the value. And last is the <code>content</code>. We then send this form data to the Ahead URL. Finally we listen for the <code>onload</code> event on the request. This event is fired up whenever the request is successful. All we have to do is parse the response since its a JSON string. We then alert the value for the <code>text</code> property. Which is basically just a message saying that the post was scheduled and when it will be published. If we do get an error, the <code>onerror</code> event is fired and we simply tell the user to try again by using an alert.</p>

<p>```javascript
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse){</p>

<pre><code>chrome.storage.sync.get({
    'api_key': ''
}, 
function(items){
    var api_key = items.api_key;

    var http_request = new XMLHttpRequest();
    http_request.open('POST', 'http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/api/post', true);
    var content = document.title + ' ' + window.location.href;
    var form_data = new FormData();
    form_data.append('queue', true);
    form_data.append('api_key', api_key);
    form_data.append('content', content);
    http_request.send(form_data);

    http_request.onload = function(){
        if(http_request.status &gt;= 200 &amp;&amp; http_request.status &lt; 400){
          var response_data = JSON.parse(http_request.responseText);
          alert(response_data.text);
        }
    };


    http_request.onerror = function() {
        alert('Something went wrong while trying to post. Please try again');
    };
});
</code></pre>

<p>  }
);
```</p>

<h3>Installing the Extension</h3>

<p>Now were ready to actually install the extension. You can do that by enabling developer mode on the chrome extensions page:</p>

<p><code>
chrome://extensions/
</code></p>

<p>This will show you 3 new buttons: load unpacked extension, pack extension and update extensions now. All we need is the first one. Click on it then select the folder that contains the <code>manifest.json</code> file on its root directory. Chrome will then list it as one of the available extensions:</p>

<p><img src="/images/posts/creating_chrome_extension/ahead.png" alt="extensions" /></p>

<p>Once its loaded, click on the &lsquo;options&rsquo; link to access the options page. From there add the api key which you can get from the <a href="http://ec2-54-68-251-216.us-west-2.compute.amazonaws.com/">Ahead website</a>.</p>

<p>At this point all of the new tabs that you open or the existing tabs which you reload would be useable with the extension. Just click on the extension icon and it will schedule a post using the title of the page and its URL as the content.</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! In this tutorial you&rsquo;ve learned the basics of how to create a chrome extension. You&rsquo;ve learned how to listen for the click event on the extension icon, how to add an options page and how to get the details from the current page.</p>
]]></content>
  </entry>
  
</feed>
