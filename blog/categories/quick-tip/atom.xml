<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quick-tip | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/quick-tip/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-07-12T16:01:58+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing the Forbidden Error in Apache]]></title>
    <link href="http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache/"/>
    <updated>2014-02-05T11:33:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/02/05/fixing-the-forbidden-error-in-apache</id>
    <content type="html"><![CDATA[<p>Every time I reformat my machine I always seem to be stuck with the forbidden error in Apache when changing the default web directory. But that ends today since I&rsquo;m going to share the solution that works for me.</p>

<!-- more -->


<p>First you have to edit the <code>apache2.conf</code> file which is stored in the following directory:</p>

<p><code>
/etc/apache2
</code></p>

<p>Open up the file with elevated privileges by executing the following command:</p>

<p><code>
sudo gedit apache2.conf
</code></p>

<p>Then look for the default web directory which is in most cases is <code>/var/www</code>. When you look at the file it looks something like this:</p>

<p>```
<Directory /var/www></p>

<pre><code>...
...
...
</code></pre>

<p></Directory>
```</p>

<p>Now change it to your preferred location. For me its in the <code>web_files</code> directory inside <code>/home/wern</code>. Also change the directives to follow symbolic links and use multiviews, also set the <code>AllowOverride</code> option to <code>All</code> so <code>.htaccess</code> files can override the default options. Then set the <code>Order</code> option to <code>allow,deny</code> so that the allow directives would be evaluated first before the deny directives. Lastly, set to <code>allow from all</code> option to allow access from all hosts:</p>

<p>```
<Directory /home/wern/web_files></p>

<pre><code>Options FollowSymLinks MultiViews
AllowOverride All
Order allow,deny
allow from all
</code></pre>

<p></Directory>
```</p>

<p>Next edit the the <code>000-default.conf</code> file inside the <code>etc/apache2/sites-available</code> directory and add the same directives that we added on the <code>apache2.conf</code> file:</p>

<p>```
DocumentRoot /home/wern/web_files
<Directory /></p>

<pre><code>Options FollowSymLinks
AllowOverride None
</code></pre>

<p></Directory>
<Directory /home/wern/web_files></p>

<pre><code>Options FollowSymLinks
AllowOverride All
order allow,deny
allow from all
</code></pre>

<p></Directory>
```</p>

<p>Next enable the Apache <code>userdir</code> module by executing the following command in the terminal:</p>

<p><code>
sudo  a2enmod userdir
</code></p>

<p>Make the necessary changes on the <code>/etc/apache2/mods-enabled/userdir.conf</code> file by changing the directory path to your desired web directory:</p>

<p>```
<IfModule mod_userdir.c></p>

<pre><code>UserDir web_files
UserDir disabled root

&lt;Directory /home/wern/web_files&gt;
    AllowOverride FileInfo AuthConfig Limit Indexes
    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
    &lt;Limit GET POST OPTIONS&gt;
        Require all granted
    &lt;/Limit&gt;
    &lt;LimitExcept GET POST OPTIONS&gt;
        Require all denied
    &lt;/LimitExcept&gt;
&lt;/Directory&gt;
</code></pre>

<p></IfModule></p>

<h1>vim: syntax=apache ts=4 sw=4 sts=4 sr noet</h1>

<p>```</p>

<p>Finally, open up the <code>/etc/apache2/mods-enabled/php5.conf</code> file and comment out the following lines by adding the pound sign (#) right before each line:</p>

<p>```</p>

<h1><IfModule mod_userdir.c></h1>

<h1><Directory /home/*/public_html></h1>

<h1>php_admin_value engine Off</h1>

<h1></Directory></h1>

<h1></IfModule></h1>

<p>```</p>

<p>To apply your changes to the current Apache instance simply restart the service:</p>

<p><code>
sudo service apache2 restart
</code></p>

<p>If this doesn&rsquo;t work make sure that your file permissions are ok, then restart Apache:</p>

<p><code>
sudo chmod -R 755 /home/wern/web_files
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to perform cross-domain AJAX requests]]></title>
    <link href="http://anchetawern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests/"/>
    <updated>2013-10-24T18:30:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/10/24/how-to-perform-cross-domain-ajax-requests</id>
    <content type="html"><![CDATA[<p>In this article I&rsquo;m going to show you how you can perform cross-domain AJAX requests.
There&rsquo;s really no bullet-proof method of doing this. It might work, it might not since AJAX requests should only be performed within the same domain due to security concerns.</p>

<!-- more -->


<p>Note that I&rsquo;m not going to show how to perform an AJAX request to any domain from any domain. What I&rsquo;m going to show you is how to perform an AJAX request to a different domain which you have control over the code.</p>

<p>For example you want to get some data via AJAX from <code>xyz.com</code>. You are making the request from <code>abc.com</code> so it wouldn&rsquo;t work if you do something like:</p>

<p>```javascript
$.get(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;}, function(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>});
```</p>

<p>If you have control over the code that returns the response that you need, all you need to do is to convert the data that you&rsquo;re returning to JSON string and then wrap it up with a function call. Here&rsquo;s an example:</p>

<p><code>php
&lt;?php
$data = array('fname' =&gt; 'haru', 'lname' =&gt; 'tora');
echo "parse_results(" . json_encode($data) . ")";
?&gt;
</code> entry_title</p>

<p>When calling the method from <code>abc.com</code> all you have to do is to use the <code>$.getJSON()</code> method and declare the same function that you used on <code>xyz.com</code>. In this case the name of the function is <code>parse_results()</code>:</p>

<p>```javascript
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.getJSON(&lsquo;<a href="http://xyz.com/get_data">http://xyz.com/get_data</a>&rsquo;, {&lsquo;data&rsquo; : &lsquo;abc&rsquo;});
```</p>

<p>You can also use the more robust <code>$.ajax()</code> method if you want:</p>

<p>```
function parse_results(response){</p>

<pre><code>//do something with the response
</code></pre>

<p>}</p>

<p>$.ajax({</p>

<pre><code>url : 'http://xyz.com/get_data',
type : 'GET',
dataType: 'jsonp',
data : {
    'data' : 'abc'
}
</code></pre>

<p>});
```</p>

<p>If this doesn&rsquo;t work you can also use the <a href="https://github.com/nbio/csshttprequest">csshttprequest</a> library:</p>

<p>```
CSSHttpRequest.get(</p>

<pre><code>"http://somewhere/in/the/interwebs",
function(response){ 
    //do something with the response
}
</code></pre>

<p>);
```</p>

<p>Note that you can only use this library to pass in arguments using GET:</p>

<p>```
var title = $(&lsquo;#title&rsquo;).val();</p>

<p>CSSHttpRequest.get(</p>

<pre><code>"http://somewhere/in/the/interwebs?title=" + title,
function(response){ 
    //do something with the response
}
</code></pre>

<p>);
```</p>
]]></content>
  </entry>
  
</feed>
