<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughts | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/thoughts/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2015-01-04T20:53:21+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Code]]></title>
    <link href="http://anchetawern.github.io/blog/2015/01/04/why-i-code/"/>
    <updated>2015-01-04T08:50:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2015/01/04/why-i-code</id>
    <content type="html"><![CDATA[<p>Why I code? I&rsquo;ve been thinking about this lately. Why is it that I love coding? What is it about coding that keeps me from doing it? What makes it so special? How do I maintain my love for coding even if its so frustrating most of the time. When I was younger I was into drawing. Cartoon characters, robots, sceneries, abstract art, and anything else that picked my interest. Not a week would past that I haven&rsquo;t added a new drawing in my collection. What kept me drawing back then was the sheer joy of adding a new drawing in my collection. It was sort of addictive. I couldn&rsquo;t wait to fill that old magazine with my drawings. In the end I ended up filling up about 8 old magazines with about 50 drawings each. Why did I stopped? It was around college days that I stopped drawing entirely. Mainly because of how busy it was and I really wanted to concentrate on my studies. College was my very first introduction to coding. The first programming language that I&rsquo;ve learned was c++. I easily picked up coding at first because we were just assigning variables and outputting strings. But as we dive deeper into adding actual logic in the programs that we wrote in our class, that&rsquo;s when my head started to hurt. I remember spending about 3 hours on our first project without making any progress. That was the dark ages when I didn&rsquo;t know how to ask Google for answers. Back then I never thought I&rsquo;d be doing coding as a primary source of work. I thought it was too difficult. Maybe I&rsquo;ll just do animation and stuff. But hey, Computer Programming was a major subject that I needed to pass. So it just came naturally that I needed to do something about it. That was when I started to take some of my free time and use it to practice writing some code. I took some of the exercises that we were having and tried to write it from scratch without looking at any of the notes. Once I&rsquo;ve successfully implemented it, I added some features. That was also when my Googling skills started to improve, as I needed some useful answers to the problems that I was having. Then I also discovered something that will change my life forever. Stackoverflow. I joined Stackoverflow in hopes that it will provide me some answers to the problems that I was having. Before I knew it, I have already asked about a hundred questions. Most of them with some useful answers from the community. Some were marked as a duplicate question, some were marked as non-useful or out of scope. Either way the comments and answers were really useful. Sometimes even the comments are enough.</p>

<p>Over time I got better at coding. I started to feel confident about my coding skills. I started believing that I could actually do this for a job. As I started to know more about programming and gain more experience. I realized just how much I still don&rsquo;t know. That&rsquo;s the time when I started my very first blog which I would write about some of the things that I&rsquo;ve learned in my coding adventures. At first I was writing about some VB.Net CRUD things. Because that was what they were teaching at school. I also wrote about some Java stuff when it was taught. Then came Web Development. HTML, CSS, JavaScript, PHP and MySQL. And I taught to myself. Dude! this is pretty sweet! I could write a program and have it used by many people as long as they&rsquo;re connected to the internet. That&rsquo;s when we were introduced to w3schools and htmlgoodies. These websites quickly became my best friend. They were my number one source of web stuff for a long time. But then came w3fools. Which made me realize that w3schools actually sucks. I started using MDN as my primary reference for web stuff as w3fools recommended.</p>

<p>Fast-forward to the present. I am now calling myself a web developer. Specifically a full-stack developer. Responsible for almost everything that&rsquo;s needed to release a whole website out in the open. I&rsquo;m a web developer for about 2 years now. Mainly doing some remote work. And sometimes freelancing on the side. And that leads us to the original question. Why I code? That&rsquo;s mainly because it gives you the ability to reach thousands of people and make their lives easier through the use of the app that you&rsquo;ve written. Its the joy of creating something out of nothing. The challenges that you encounter as you try to build your app. That rewarding feeling that you get when you finally implemented that feature which made your brain explode. Or that feeling that you got when you finally solved that bug that&rsquo;s been haunting you for 10 hours. Its also about the excitement that you feel whenever there&rsquo;s a shiny new toy that comes out. The shiny new toy can be any library, framework or programming language that was released recently. Finally, I code because I want to leave something to the world that will prove my existence. That I have onced lived and created this useful website or app that has been useful to many people. I&rsquo;m still far from that realization though. Like I said earlier, my side projects mainly solve a specific problem that I&rsquo;m having. And the projects that I&rsquo;m getting from the company I&rsquo;m currently working for are targeted only for a specific group of people and country. At most there will only be hundreds of people who will be able to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always scratch your developer itch]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch/"/>
    <updated>2014-10-25T07:31:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/25/always-scratch-your-developer-itch</id>
    <content type="html"><![CDATA[<p>As developers, no matter how busy we are with our lives, its important for us to always scratch our developer itches every now and then. What I mean by itches are the things that you want to do as a developer. Be it working on a side-project that you&rsquo;ve been wanting to do for months, playing with a new technology, library or a programming language. Or reading an in-depth article about a new programming technique. Or watching a video tutorial about a framework that you&rsquo;ve been wanting to learn. Or watching recorded talks from developer conferences all over the world. Or writing an article about a cool technique you&rsquo;ve discovered recently. And other things that you always have at the back of your mind but never really got to do because of lack of time.</p>

<p>Lack of time is always the reason we give to ourselves. But time is not really the problem. We can always make time for something if we really love to do it. Yes we also have lives to live. But we also need to give priority to the things that matter to us as a developer. As a developers, we have the responsibility for continuous learning. To improve our craft for the better. And this is what it means to scratch your developer itch. If you have it, you&rsquo;ll always find time to scratch it no matter how busy you may be.</p>

<p>On the contrary, we also have lives to live. Nothing is more important than our families and our lives as actual people. So giving time to that is our priority as a human being. After all life is not all about work. Life is about living it in the best way possible. And that is through spending quality time with our loved one&rsquo;s.</p>

<p>In conclusion, its really all about balance. If you can&rsquo;t find time every weekend to scratch your own developer itch, then maybe do it once or twice a month. Maybe 4-8 hours twice a month doing a side project is a good start. You can also go to work early and read up on blogs before and after the alloted time for work. Listen to podcasts while commuting. Most podcasts provide download links to each episode which you can save into your mp3 player of smartphone. Watching a 5-minute video tutorial just before going to bed. Every bit of time counts. It doesn&rsquo;t matter how little or how much, what&rsquo;s important is to give time to scratch our developer itches whenever we can. If you do, you&rsquo;ll be a happier developer. Its like the feeling you get when you were finally able to get what you&rsquo;ve been wanting to buy for a long time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Driving]]></title>
    <link href="http://anchetawern.github.io/blog/2014/10/12/on-driving/"/>
    <updated>2014-10-12T18:24:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/10/12/on-driving</id>
    <content type="html"><![CDATA[<p>Its been a month since I started to learn how to drive. In this blog post I want to touch a bit on what I learned about driving so far.</p>

<h3>Before Starting</h3>

<ul>
<li>Check the wheels if they are on good condition.</li>
<li>Make sure that both side mirrors are set.</li>
<li>Make sure that the hand brake isn&rsquo;t currently active. In most cars all you have to do is hold the brake, press the button with your thumb and then push the lever down.</li>
<li>Just before you use the ignition key to turn on the engine, fully hold down the foot brake, set the car from park (P) to drive (D), then slowly release the foot brake.</li>
<li>Always remember to start slow. Apply as little pressure to the gas pedal as possible.</li>
</ul>


<h3>Overtaking</h3>

<ul>
<li>Don&rsquo;t try to overtake if you&rsquo;re not sure if there&rsquo;s an approaching vehicle on the other lane.</li>
<li>Do not try to overtake on curves.</li>
<li>Do not try to overtake inside a town or a city.</li>
<li>Before trying to overtake a vehicle, check both side mirrors if there&rsquo;s any other vehicle also trying to overtake.</li>
<li>Use the left signal light before trying to overtake to let others know that you&rsquo;re trying to overtake. Once you&rsquo;ve succeeded, use the right signal light and then go back to your lane.</li>
<li>When another vehicle tries to overtake yours, slow down a bit.</li>
</ul>


<h3>Emergencies</h3>

<ul>
<li>When an ambulance or police car is approaching or coming from your back, keep up with your normal speed and move the car to the side of the road to let them pass.</li>
</ul>


<h3>Curves</h3>

<ul>
<li>Slow down before approaching curves to avoid possible collision.</li>
</ul>


<h3>Intersections</h3>

<ul>
<li>Always slow down before approaching intersections. Around 20-30 kph. This is to make sure you don&rsquo;t collide with other vehicles. You can never really know what approaches you in intersections so slow down.</li>
</ul>


<h3>U-turn</h3>

<ul>
<li>When going from one lane to the other make sure that u-turn is allowed.</li>
<li>If you want to give yourself more space, park your car on the side of the road first then when the road is clear, maneuver the wheel to the left. Most of the time you&rsquo;ll have to turn the wheel to the left until its limit. If it isn&rsquo;t enough, stop the car with the foot brake and then use reverse mode to move the car backwards a bit. Use the foot brake again and then turn the car to drive mode and turn the wheel to the left as much as its needed. Just before the car is completely facing in the right direction, turn the wheel to the right until its in its neutral position. Most wheels in modern cars actually go back to neutral position automatically but its safer if you don&rsquo;t rely on that. Because most of the time you&rsquo;ll want to move it to neutral position as fast as you can.</li>
</ul>


<h3>Speed</h3>

<ul>
<li>Don&rsquo;t try to go faster than what you can handle. My personal limit is 60 kph, I don&rsquo;t try to go faster than that.</li>
</ul>


<h3>Rough Road</h3>

<ul>
<li>If you actually care for your car, slow down when approaching rough roads.</li>
</ul>


<h3>Horn</h3>

<ul>
<li>Only use the horn when its absolutely necessary. Sometimes its prohibited to use it on some areas.</li>
<li>Do not use the horn to vent out your frustration. An example of this is when bicycle riders or sidewalk vendors use the road as if they were riding a car. Just give the horn a light tap, and if the bicycle rider still doesn&rsquo;t move to the side simply go pass them if the situation allows.</li>
</ul>


<h3>Stay Cool</h3>

<ul>
<li>Be sure to keep your head cool at all times. You don&rsquo;t want your driving to be affected because of your frustration.</li>
</ul>


<h3>Parking</h3>

<ul>
<li>Be sure that you are only parking your car where it is allowed.</li>
<li>Completely stop the car with the foot brake before putting the car into park mode and pulling the hand brake.</li>
<li>Be sure to leave enough space to maneuver your car later on. You don&rsquo;t want to get to close to another car to avoid scratching it.</li>
<li>If the situation allows, use reverse mode when parking your car, this means that the tail of your car goes inside and the head is outside. This makes it easier for you to go out later on.</li>
</ul>


<p>That&rsquo;s it! I&rsquo;m still a beginner at this so I&rsquo;ll be adding more things to this blog post in future as I learn more things about driving. For now I&rsquo;m going to leave you with this saying:</p>

<p><blockquote><p>Better late than dead.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a dark matter developer must be nice]]></title>
    <link href="http://anchetawern.github.io/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice/"/>
    <updated>2014-03-12T11:45:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2014/03/12/being-a-dark-matter-developer-must-be-nice</id>
    <content type="html"><![CDATA[<p>It must be nice to be a dark matter developer. But before I go ahead and start going through why its nice to be a dark matter developer let&rsquo;s make sure that were all on the same boat. First what are dark matter developers?</p>

<ul>
<li>they don&rsquo;t read blogs</li>
<li>they don&rsquo;t write blogs</li>
<li>they don&rsquo;t follow Paul Irish on Twitter</li>
<li>they don&rsquo;t release code on Github</li>
<li>they only learn what their boss told them to learn</li>
<li>they don&rsquo;t know what hacker news is</li>
<li>they don&rsquo;t discuss tech outside of work</li>
<li>they don&rsquo;t go to conferences</li>
<li>they only use stackoverflow to seek answers</li>
<li>they don&rsquo;t listen to podcasts</li>
<li>they don&rsquo;t need to update themselves of the cutting edge</li>
<li>they don&rsquo;t experiment on different technologies</li>
<li>they don&rsquo;t learn on their free time</li>
<li>they don&rsquo;t subscribe to newsletters</li>
</ul>


<p>I&rsquo;m not saying that this is true for all dark matter developers. But most of the items above are definitely true for some developers even if they don&rsquo;t necessarily consider themselves DMD&rsquo;s.</p>

<!-- more -->


<h4>Ok so why?</h4>

<ul>
<li>they have lots of time in their hands for the really important things in life (family, friends, hobbies, etc.)</li>
<li>they don&rsquo;t need to filter through all the noise in tech (twitter news feed, newsletters, podcasts etc)</li>
<li>they get their job done</li>
</ul>


<p>Let me dive into it a little bit.</p>

<h4>They have lots of time in their hands</h4>

<p>DMD&rsquo;s are free to use all of their free time with the things they want to do. They can just indulge in their hobbies, spend some quality time with their families or just watch season 1-9 of Supernatural or God of Thrones with no care in the world. DMD&rsquo;s also don&rsquo;t need to care about the time they spend doing these activities so they can totally immerse themselves and enjoy their time. They don&rsquo;t need to worry whether they are already outdated. To them programming is just a job. And surely they don&rsquo;t want to code outside their job. I believe its a good thing. Because they can spend all their free time without ever worrying if they will get left behind.</p>

<h4>They don&rsquo;t need to filter through all the noise in tech</h4>

<p>DMD&rsquo;s don&rsquo;t care about all the crap that&rsquo;s happening in the tech scene. They don&rsquo;t know what Shoptalk Show, Ruby Rogues or JavaScript Jabber is. They don&rsquo;t know Paul Irish, Ilya Grigorik, Addy Osmani, Steve Souders, Nicole Sullivan, Peter Cooper, or Jeffrey Way is. They haven&rsquo;t subscribed to JavaScript Weekly, HTML5 Weekly, Web Design Weekly or StatusCode. They only know what they need to know or what they need to know in order to get their job done. They&rsquo;re only consuming the minimal information needed to survive as a developer. Again I believe its a good thing. Sometimes most of the information from these sources are really unimportant.</p>

<h4>They get their job done</h4>

<p>Lastly they get their job done and they do it well. Sure they might still be using Dreamweaver (or maybe notepad) in building websites but they get the job done. They might be cranking out procedural code here and there but they&rsquo;re getting the job done. They might not know what TDD or BDD is. They might not know what linting or static code analysis is but they get the job done. They might not be using the tools (Sublime Test, Chrome Dev Tools, Grunt, SASS, CoffeeScript, Backbone, Angular, Node) that all the cool kids in town are using but they get the job done. They might not be using Frameworks but their code is fast as hell. They might not be writing tests for their code but their program works. They get their job done without ever worrying if their practices are already outdated. Or the tools that they are using can still be improved in order for them to be more productive. I believe there&rsquo;s a beauty in this because they can just focus on the task at hand like painters or artists.</p>

<h4>Closing Thoughts</h4>

<p>Of course with anything there are downsides but I just wanted to focus on the positive side of being a Dark Matter Developer in this post. Cheers to all the Dark Matter Developer&rsquo;s out there! Even if you might not read this because you&rsquo;re always busy getting things done.</p>

<h3>More on DMD&rsquo;s</h3>

<p>If you want to read more about Dark Matter Developers, Scott Hanselman wrote a pretty good post about it: <a href="http://www.hanselman.com/blog/DarkMatterDevelopersTheUnseen99.aspx">Dark Matter Developers: The Unseen 99%</a>.
Another good one is Mat McLoughlin&rsquo;s: <a href="http://mat-mcloughlin.net/2013/11/26/dark-matter-developers-do-not-equal-bad-developers/#.VEGf_h_vYes">Dark Matter Developer != Bad Developers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stay healthy as a developer]]></title>
    <link href="http://anchetawern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer/"/>
    <updated>2013-05-11T19:14:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/05/11/how-to-stay-healthy-as-a-developer</id>
    <content type="html"><![CDATA[<p>Developers are not really the healthiest group of people in the planet simply because our faces are just buried in front of the computer 8 hours a day (or even more) 7 days a week. Were just sitting all day thinking of how to solve a problem, which technique to implement, and writing code.</p>

<!--More-->


<p>Here are the things that I personally observe in order to stay healthy:</p>

<ul>
<li>Exercise</li>
<li>Eat healthy foods</li>
<li>Stand while working</li>
<li>Sleep well</li>
<li>Take breaks</li>
</ul>


<h3>Exercise</h3>

<p>Always try to get atleast an hour of exercise everyday. Doesn&rsquo;t matter which time you exercise(either morning or afternoon) or what type of exercise you do. What&rsquo;s important is that you enjoy exercising and don&rsquo;t think of anything else while doing it.
I personally like brisk walking, jogging and running. I live close to a spacious school ground and that&rsquo;s where I usually exercise so there&rsquo;s really no excuse in not exercising.</p>

<h3>Eat healthy foods</h3>

<p>Always try to eat fruits, vegetables and have soup for every meal.
Soup helps in making the food easier to digest.
You can also try to eat less meat since meat is harder to digest than vegetable.
If you&rsquo;re the carnivorous type then there&rsquo;s no excuse in drinking 8 &ndash; 10 glasses of water everyday. Actually you can drink more if you&rsquo;re sweating a lot when exercising. Water helps in digestion, combine it with fiber which you can get from <a href="http://www.doctoroz.com/videos/50-fiber-rich-foods">a whole bunch of fruits and vegetables</a> leads to a healthier stomach.</p>

<p>Also try chew the food well, eating a meal in 20 to 30 minutes is a good indication that you&rsquo;re chewing your food well. The stomach digests the food that we eat but digestion actually starts in the mouth when we chew our food.
This will lead to better digestion which leads to better stomach and colon health.</p>

<h3>Stand while working</h3>

<p>Try to get a standing desk. Sitting is not good especially if you don&rsquo;t take frequent breaks.
If you don&rsquo;t have the budget or you&rsquo;re earning for something else you can always try to look for an alternative standing desk. I personally use our chest and drawer as my standing desk simply because it matches my elbow height and I feel comfortable using it.</p>

<h3>Sleep well</h3>

<p>Always try to get atleast 7 &ndash; 8 hours of sleep each night.
This ensures that our mind is in its optimum state when we wake up.
Fresh, happy and ready to solve some problems.</p>

<h3>Take breaks</h3>

<p>Take breaks every 50 &ndash; 60 minutes. Stretch up and do a micro-exercise, its a good way to make sure that your blood is flowing properly. Venous diseases like hemorrhoids, deep vein thrombosis, and varicose veins are born from not moving too much and staying in just one position all day.</p>
]]></content>
  </entry>
  
</feed>
