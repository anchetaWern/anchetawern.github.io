<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Wern Ancheta]]></title>
  <link href="http://anchetawern.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://anchetawern.github.io/"/>
  <updated>2014-09-07T14:26:27+08:00</updated>
  <id>http://anchetawern.github.io/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to get a job in the Web Development Industry]]></title>
    <link href="http://anchetawern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry/"/>
    <updated>2013-05-13T13:19:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/05/13/how-to-get-a-job-in-the-web-development-industry</id>
    <content type="html"><![CDATA[<p>Want to get a job in the Web Development Industry? That&rsquo;s easy! You must know HTML, CSS, JavaScript and PHP.
Nah! Sometimes that is all you really need but most of the time you need to know more than that in order to get the job you want. In this article I&rsquo;m going to share to you some of the tips that has worked for me in finding a job in Web Development.</p>

<!--More-->


<p>First of all just to make sure that we are on the same boat. What is a web developer?
According to <a href="http://en.wikipedia.org/wiki/Web_developer">Wikipedia</a>:</p>

<p><blockquote><p>A web developer is a programmer who specializes in, or is specifically engaged in, the development of World Wide Web applications, or distributed network applications that are run over HTTP from a web server to a web browser.</p></blockquote></p>

<p>Ok so a web developer is actually a programmer who works on the web.
Web developers can be classified into 4 groups:</p>

<ul>
<li>front-end developer</li>
<li>back-end developer</li>
<li>middle-tier developer</li>
<li>full-stack developer</li>
</ul>


<p>The <strong>front-end developer</strong> mainly works on the public facing part of a web application.
Front-end developers are mainly concerned with UI components, browser support, front-end performance, and everything else that the user can perceive. Common technologies involved are HTML, CSS, JavaScript.</p>

<p>The <strong>back-end developer</strong> mainly works on the back-end of the website or the things that happens in the background while the user is interacting with the web application. This is the core of the web application. Common technologies involved are server-side technologies like PHP, Python, and Ruby. Back-end developers also works with databases such as MySQL, PostgreSQL Oracle, and MariaDB.</p>

<p>The <strong>middle-tier developer</strong> mainly works with services that sit between the front-end and the back-end. The middle tier developer is mainly concerned with how the front-end and back-end of the web application is going to communicate.</p>

<p>Lastly there&rsquo;s the <strong>full-stack developer</strong> which knows how to do a bit of the front-end, back-end and middle stack.</p>

<p>So which do you want to be? Personally for me I&rsquo;m currently working as a full-stack developer. I work a bit on the front-end, back-end and the middle stack. The advantage of the first 3 types of developers is that they&rsquo;re specialists. They have a very deep understanding of the technologies that they are working on, specialists are often rare so their salary is very high. The advantage of being a full stack developer is that its easy to become one and you will be more marketable since you know a lot of different skills and technologies. The only downside is that they don&rsquo;t make as much salary as the front-end, back-end and middle-tier guys make.</p>

<p>Back to the main topic of this article. Here are some tips to get a job in web development:</p>

<ul>
<li>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</li>
<li>Learn things on your free time</li>
<li>Network</li>
<li>Apply for that job</li>
</ul>


<h3>Have a Portfolio / Github / Stackoverflow / LinkedIn / Blog</h3>

<p>You must have your own portfolio, <a href="https://github.com">github</a>, <a href="http://stackoverflow.com">stackoverflow</a> and <a href="http://www.linkedin.com/">linked In</a>. You can also create a blog if you like writing and sharing your ideas.</p>

<p>If you&rsquo;re a new graduate you might not have anything to put in your portfolio and that&rsquo;s just normal.
What you can do is to work on personal projects or create a blog. A personal project can be anything that you really want to create. For developers its common to work on projects that can help them in their daily tasks like generators, code linters, or libraries. You can also have a personal project that involves technologies that you want to learn. For example, if you want to learn how to use the Facebook Graph API you can go ahead and plan out the application that you want to build. It doesn&rsquo;t matter if you don&rsquo;t know anything about the technology or if the features that the application that you have in mind are already present in Facebook. Just dive in to the <a href="https://developers.facebook.com/docs/reference/api/">Facebook Graph API Documentation</a> and figure out how to do stuff using the API by Googling stuff. You can also ask questions at Stackoverflow if you get stuck.</p>

<p>The fastest way to learn things is to dive right in to doing it, but be sure to google best practices and look at code that other people have written so that you&rsquo;ll have an idea on how to do things the right way.</p>

<p>Once you have setup your personal project you can just go ahead and push it up on Github so that the rest of the world can see it. It doesn&rsquo;t matter if other people thinks your code sucks. What matters is that you know you&rsquo;ve done a good job and is constantly working on improving it.</p>

<p>You can also create your stackoverflow profile and answer some of the questions that you can already answer. It doesn&rsquo;t matter if the question that you&rsquo;re trying to answer has already an accepted answer or that the question is already 3 years old. Just answer the question as best as you could and people will surely notice. They will give comments on how to improve your answer and you will even get an upvote if they think your answer is awesome.</p>

<p>Lastly you can also create your LinkedIn profile and start putting some of your achievements in school and the personal projects that you have worked on in your free time. Link to your portfolio, twitter, Google plus, stackoverflow, github or even your facebook if you want.
Its okay to put in a lot of information about your past achievements and projects but be sure to only include the things that actually matter to the career that you are trying to pursue. In this case being a web developer. So there&rsquo;s no need to put in your linkedIn profile that you are actually a chess champion or a basketball super star.</p>

<h3>Learn things on your free time</h3>

<p>The best way to make yourself more marketable is to learn things on your free time. Its a good time to learn something new. Especially now that there&rsquo;s so much good learning resources out there which are free to use. Here are some of the resources that I have personally used:</p>

<p><a href="https://www.udacity.com/">Udacity</a>
<a href="http://www.codeschool.com/">Codeschool</a>
<a href="http://learn.shayhowe.com/html-css/">A Beginners Guide to HTML and CSS</a>
<a href="https://developer.mozilla.org/en-US/">Mozilla Developer Network</a>
<a href="http://google.com">Google</a></p>

<p>The sheer amount of stuff that you need to learn in order to become a proficient web developer is staggering. But the key is don&rsquo;t be overwhelmed because its <a href="http://anchetawern.github.io/blog/2013/04/13/this-crazy-world-of-web-development/">just how things are in this field</a>. Just take it easy and learn things one at a time.
My advice is that you should learn first the fundamentals before diving in to the shiny and new stuff. An example would be to learn first how to do things in JavaScript before you learn jQuery. Write plain CSS first before using CSS Preprocessors like LESS and SASS.</p>

<h3>Network</h3>

<p>Its always a good idea to have a network of people who can recommend you for a job. If you have taken up college, it can be your classmates, teachers, friends. It can also be like-minded people that you have met online. A good place to find those connections is linkedIn, a social network for professionals. But be sure to keep your linkedIn profile updated so that people will actually notice your profile. Its also a good idea to add recruiters who are recruiting professionals in the field of web development. You can also join groups in LinkedIn and start contributing to the community. There will be a bigger chance that someone will notice you and can recommend you to a client.</p>

<p><img src="/images/posts/how_to_find_a_job_in_the_webdev_industry/groups.png" alt="linkedIn Groups" /></p>

<h3>Apply for that job</h3>

<p>We are never really 100% ready to apply for a job that we want. Sometimes were not confident that we enough of that specific technology in order to apply. But that&rsquo;s actually a good sign that you&rsquo;re ready. If you&rsquo;re familiar with the Dunning-Kruger effect which according to Wikipedia is:</p>

<p><blockquote><p>a cognitive bias in which unskilled individuals suffer from illusory superiority, mistakenly rating their ability much higher than average. This bias is attributed to a metacognitive inability of the unskilled to recognize their mistakes.</p></blockquote></p>

<p>Not having the confidence that you already know enough to start appliying for a job means that you&rsquo;re already in the second stage of competence which is the conscious incompetence which means that you already recognize your lack of knowledge or skill on a specific field. This is enough to drive you into learning more.</p>

<p>At some point in time when you feel like you already have the minimum requirements to get started with applying for a job then you can go ahead and start applying. Here are some good places to start looking for jobs:</p>

<ul>
<li><p><a href="http://www.craigslist.org/about/sites">Craigslist</a> &ndash; you can look at web/HTML/info design jobs, internet engineering jobs, and software/QA/DBA/etc jobs. Sometimes there are bad eggs that you have to filter through. Some signs that a job posting is a bad egg if there are lots of mispelled words and there&rsquo;s really no sane job description which gives you a bit of idea what you will be working on once you get accepted for the job.</p></li>
<li><p><a href="http://jobmote.com/">Jobmote</a> &ndash; by far has the most quality job listings I&rsquo;ve ever found. These are human curated job listings so the bad eggs are already filtered out. These are mostly telecommuting jobs.</p></li>
<li><p><a href="https://www.staff.com/">Staff</a> &ndash; mostly telecommute jobs. You will get emailed when there&rsquo;s a job opportunity.</p></li>
</ul>


<p>All you really need to get to that interview is to have an awesome Résumé and cover letter. I won&rsquo;t be delving into those in this article since they have already been written a dozen times before. Just Google those and you will surely find an answer.</p>

<h2>Closing Thoughts</h2>

<p>I cannot assure that this will work for you as well as it worked for me but just give it a try if you really want to get that job. All I can say is that you&rsquo;re already half-way to getting that job if you have the genuine passion and you really love web development and building things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I wish I was told when I first started Web Development]]></title>
    <link href="http://anchetawern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development/"/>
    <updated>2013-02-09T14:48:00+08:00</updated>
    <id>http://anchetawern.github.io/blog/2013/02/09/things-i-wish-i-was-told-when-i-first-started-web-development</id>
    <content type="html"><![CDATA[<p>In this post I want to share some of the things I wish someone told me when I first started Web Development.
Things that could have made me a better developer.
Things that could have gotten me into the right path when I first started.</p>

<!--More-->


<h3>The learning doesn&rsquo;t stop</h3>

<p>There&rsquo;s always a new technology, tools, and methodology
that you will need to learn in order to become a better developer.
This is a truth not just for web developers but for any profession as well.
The only thing is the learning in the web development industry have to go in a faster pace if you want to stay in the game.</p>

<h3>There are many ways to accomplish one thing</h3>

<p>There are many ways to accomplish one thing but there are only
a few best practices that you need to follow.
Best practices are industry standard way of doing things.
Always Google the best practices for every programming language, technology, tool or methodology that you&rsquo;re trying to learn.
So that you will be doing things the right way right from the very start.
For PHP there&rsquo;s <a href="http://www.phptherightway.com/">PHP the right way</a>, <a href="http://phpbestpractices.org/">PHP Best Practices</a> and the <a href="http://php.net/">official PHP site</a>. And for JavaScript there&rsquo;s <a href="http://jstherightway.com/">JS the right way</a>.</p>

<h3>Not everything in the web is right</h3>

<p>When I was in College we started learning HTML and CSS using <a href="http://www.w3schools.com/">W3Schools</a> and <a href="http://www.htmlgoodies.com/">HTMLGoodies</a>. And we used the following to build an HTML page:</p>

<ul>
<li>TD colspan and TD rowspan</li>
<li>Frames</li>
<li><blink> tags</li>
</ul>


<p>Yuck right? But now there&rsquo;s <a href="https://developer.mozilla.org/en-US/">MDN</a> and <a href="http://www.webplatform.org/">Web Platform</a> that teaches us the right way of doing things.</p>

<p>Going back to the main topic. Not everything in the web is right so don&rsquo;t believe everything people say.
Most of the tutorials in the web shows you how to do things but often times its not a best practice.
So don&rsquo;t just blindly copy and paste codes that you find in the web.
Always see to it that you perform a Google search on the specific method that the author have used in the blog
post and check what other people are saying and decide for yourself which method you would follow.</p>

<h3>There are lots of learning resources that you could use</h3>

<p>There are lots of learning resources that you could use.
But always try to check the authority of where you&rsquo;re learning from.
Check what other people says about that particular resource.
Lastly see for yourself if they can give you the education that you need (teaches the standard way of doing things not the hacky way).
Here are some of the learning resources that I would personally recommend:</p>

<ul>
<li><a href="http://www.codecademy.com">Code Academy</a></li>
<li><a href="https://www.udacity.com/">Udacity</a></li>
<li><a href="http://www.codeschool.com/">Code School</a></li>
<li><a href="https://www.khanacademy.org/">Khan Academy</a></li>
</ul>


<h3>There&rsquo;s always something to improve</h3>

<p>The code that you write today won&rsquo;t be perfect. 3 or 4 days later you will see something that
needs improvement. Sometimes you will even ask yourself: why did I even write this crappy code?
Or maybe: Who wrote this? It sucks!</p>

<h3>There are lots of tools that you could use</h3>

<p>And by tools I mean the tools that you can use for developing applications.
Sublime Text is really hot these days but it doesn&rsquo;t mean that you should use it.
The tools that you will use always depends on which feels right for you.
If dreamweaver feels right for you and you think you&rsquo;re productive when using it then don&rsquo;t give it up.
Although its always recommended that you try out different tools so that you&rsquo;ll have
an idea of how it can help you achieve your daily development tasks.</p>

<h3>There will never be enough time learn everything you want to learn</h3>

<p>No matter how much time you have there will never be enough time to learn everything
you want to learn so take it easy. Learn one technology at a time.
Everything that is rushed ends up like crap. You just have to enjoy while learning.
Make sure you understand everything that you&rsquo;re learning and don&rsquo;t take shortcuts.</p>

<h3>Expose Your Skills</h3>

<p>If you plan on Freelancing then this is the way to go.
Share your thoughts in the technologies, tools, coding practices, and methodologies that you&rsquo;re using.
Answer some questions on <a href="http://stackoverflow.com/">Stackoverflow</a>, join discussions at <a href="http://news.ycombinator.com/">Hacker News</a>, create a youtube channel and upload some video tutorials that you have created.
Create side projects and upload your code to <a href="https://github.com/">Github</a>.
Create a portfolio and LinkedIn or Twitter account to show your skills to the world.
I won&rsquo;t be able to assure you that this will get you a job but its a good start to give you the exposure that you need. Just make sure that all of the content that you&rsquo;re producing is good. Don&rsquo;t publish anything that hasn&rsquo;t been proof-read. When writing a tutorial don&rsquo;t assume too much but don&rsquo;t give out too much information either.</p>

<h3>Salary doesn&rsquo;t really matter when first starting out</h3>

<p>The salary that you make doesn&rsquo;t really matter when first starting out.
There are even people who do a project for free just to have something to put
on their portfolio. What is important is that you&rsquo;re given the time to learn the technologies
required to do the job and you&rsquo;re not being pressured into producing an application in a week.
Because if that&rsquo;s the job that you&rsquo;re going to do when first starting out then you&rsquo;ll only end up
with writing crappy code. Nothing good actually comes out from being pressured and being forced to finish things fast.</p>

<h3>Love what you do</h3>

<p>Lastly, you must love what you do.</p>
]]></content>
  </entry>
  
</feed>
