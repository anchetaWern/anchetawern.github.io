<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stripe | Wern Ancheta]]></title>
  <link href="http://wern-ancheta.com/blog/categories/stripe/atom.xml" rel="self"/>
  <link href="http://wern-ancheta.com/"/>
  <updated>2016-01-15T07:41:43+08:00</updated>
  <id>http://wern-ancheta.com/</id>
  <author>
    <name><![CDATA[Wern Ancheta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Stripe API]]></title>
    <link href="http://wern-ancheta.com/blog/2015/03/22/getting-started-with-stripe-api/"/>
    <updated>2015-03-22T11:08:00+08:00</updated>
    <id>http://wern-ancheta.com/blog/2015/03/22/getting-started-with-stripe-api</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;ll walk you through the Stripe&rsquo;s API. Let&rsquo;s start by defining what Stripe is. From the Stripe website itself:</p>

<p><blockquote><p>Stripe is a developer-friendly way to accept payments online and in mobile apps.<br/>We process billions of dollars a year for thousands of companies of all sizes.</p></blockquote></p>

<p>Now we know that Stripe is a payment processor, similar to Paypal.</p>

<p>With Stripe, you can accept payments in three ways:</p>

<ul>
<li>Embedded Form</li>
<li>Custom Form</li>
<li>Mobile App Integration</li>
</ul>


<p>In this tutorial I&rsquo;ll only be walking you through the first two: embedded form and custom form.</p>

<h3>Embedded Form</h3>

<p>If you do not want to bother with creating your own checkout forms, an embedded form is the way to go. An embedded form is basically Stripe&rsquo;s checkout widget. All you have to do is include their script on your website, specifically inside a form element. And the front-end side is already handled for you.</p>

<p>```html
<form action="/checkout.php" method="POST">
  &lt;script</p>

<pre><code>src="https://checkout.stripe.com/checkout.js" class="stripe-button"
data-key="pk_test_xxxxxxxxxxxxxxxxxxx"
data-amount="1000"
data-name="Web Development"
data-description="Develop a website"
data-image="http://mywebsite.com/img/logo.png"&gt;
</code></pre>

<p>  </script>
</form>
```</p>

<p>Breaking it down. For the script to work, you need to supply a value to the following attributes:</p>

<ul>
<li><code>src</code> &ndash; Stripe&rsquo;s checkout script. This should be <code>https://checkout.stripe.com/checkout.js</code></li>
<li><code>data-key</code> &ndash; your stripe publishable key. You can find it by clicking on your username, then select &lsquo;account settings&rsquo;, then click on the &lsquo;api keys&rsquo; tab. From there you can use either your test publishable key or your live publishable key. The test key is used for testing. This allows you to supply a fake credit card number and pay for a fake product or service. After successful payment, you can see your fake client from the <a href="https://dashboard.stripe.com/customers">customers</a> page on your Stripe dashboard. Don&rsquo;t forget to switch to <a href="https://dashboard.stripe.com/test/customers">test</a>.</li>
<li><code>data-amount</code> &ndash; the amount you want to charge in cents. Just multiply what you want to charge by 100. So for example you want to charge $10, you need to supply 1000 instead.</li>
<li><code>data-name</code> &ndash; the name of your product or service.</li>
<li><code>data-description</code> &ndash; the description of your product or service.</li>
<li><code>data-image</code> &ndash; your logo. This should be an absolute url.</li>
</ul>


<p>Next we need to install Stripe&rsquo;s library via <a href="https://getcomposer.org/">composer</a>. Add the following code on your <code>composer.json</code> file:</p>

<p>```
{
  &ldquo;require&rdquo;: {</p>

<pre><code>"stripe/stripe-php": "2.*"
</code></pre>

<p>  }
}
```</p>

<p>Once that&rsquo;s done, execute <code>composer install</code> from your terminal. This will fetch the library from the repository.</p>

<p>Next create the <code>checkout.php</code> file and add the following code:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $<em>POST[&lsquo;stripeToken&rsquo;];
$email = $</em>POST[&lsquo;stripeEmail&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<p>Breaking it down, first we included the <code>vendor/autoload.php</code> file so that we can use the Stripe library on our script. Next we initialize the library by setting the Stripe secret key. Next we get the data supplied by Stripe for us from the front-end. The <code>stripeToken</code> is the unique token generated by Stripe, this represents the transaction that the client made on the front-end. That is, paying $10 for our service. Next is the <code>stripeEmail</code>, this is basically just the email supplied by the client. Next we wrap the stripe charge call in a try catch statement. This allows us to capture any error returned by the API and show it to the client. Calling the stripe charge method requires 4 arguments:</p>

<ul>
<li><code>amount</code> &ndash; the amount that you want to charge in cents.</li>
<li><code>currency</code> &ndash; the currency code representing the currency that we want to use.</li>
<li><code>source</code> &ndash; the token that stripe generated on the front-end.</li>
<li><code>description</code> &ndash; a text that we want to assign to the charge. This is usually the clients email. But you can add more details such as the name of the service if you&rsquo;re offering more than one product or service.</li>
</ul>


<p>If the API call is successful, this method returns a whole bunch of data. Such as the amount paid, and the description. In most cases you&rsquo;ll basically only want the id of the transaction. You can get this by accessing the <code>id</code> property:</p>

<p><code>
$charge_id = $charge-&gt;id;
</code></p>

<p>You can then save this on your database as a reference. But of course you can always see this on <a href="https://dashboard.stripe.com/test/payments">your payments page</a>.</p>

<h3>Custom Forms</h3>

<p>If you need to ask additional information from your clients. Or you just want to use your own form. You can use custom forms. This allows you to write your own markup, supply your own fields and style them the way you want it with css. Here&rsquo;s an example of how a custom checkout form might look like:</p>

<p>```html
<form action="checkout.php" method="POST" id="payment-form">
  <div class="errors"></div></p>

<p>  <div></p>

<pre><code>&lt;label for="email"&gt;Email&lt;/label&gt;
&lt;input type="email" id="email" name="email"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="name"&gt;Name&lt;/label&gt;
&lt;input type="text" id="name" name="name"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="card-number"&gt;Card Number&lt;/label&gt;
&lt;input type="text" size="20" data-stripe="number" id="card-number" name="card-number"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label for="cvc"&gt;Security Code&lt;/label&gt;
&lt;input type="text" size="4" data-stripe="cvc" id="cvc" name="cvc"&gt;
</code></pre>

<p>  </div></p>

<p>  <div></p>

<pre><code>&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
&lt;input type="text" data-stripe="exp-month" name="exp-month"&gt;
&lt;span&gt; / &lt;/span&gt;
&lt;input type="text" data-stripe="exp-year" name="exp-year"/&gt;
</code></pre>

<p>  </div></p>

<p>  <button type="submit">Pay</button>
</form>
```</p>

<p>This form works with the Stripe checkout script by adding the <code>data-stripe</code> attribute to the following fields. Just supply the value on the right-hand side as the value for the <code>data-stripe</code> attribute depending on the field:</p>

<ul>
<li>card number &ndash; <code>card-number</code></li>
<li>security code or cvc &ndash; <code>cvc</code></li>
<li>card expiration month &ndash; <code>exp-month</code></li>
<li>card expiration year &ndash; <code>exp-year</code></li>
</ul>


<p>Next we need to include the stripe checkout script:</p>

<p>```html</p>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>


<p>```</p>

<p>And then set the publishable key. This allows stripe to identify which stripe account the request came from:</p>

<p>```html</p>

<script>
Stripe.setPublishableKey('pk_test_xxxxxxxxxxxxxxxxxxx');
</script>


<p>```</p>

<p>Next we need to define the method that will process the response that we get from Stripe when the client submits the payment form. This takes up 2 parameters: status and response. The status is the <a href="https://stripe.com/docs/api#errors">status code</a>. The response contains the actual Stripe response. This is an object containing information about the transaction. One of those is the <code>id</code> which is basically the token that we need to pass in to the back-end. All we have to do is to append it to the payment form so it gets submitted with the rest of the fields. If there is an error with the request, an error property becomes available in the response object. This contains the error message, we just show it to the user by supplying it as a value to the <code>errors</code> div. After that, we enable the submit button so the client can fix the errors and submit the form again:</p>

<p>```javascript
function processStripeResponse(status, response){
  var form = $(&lsquo;#payment-form&rsquo;);</p>

<p>  if(response.error){</p>

<pre><code>form.find('.errors').text(response.error.message);
form.find('button').prop('disabled', false);
</code></pre>

<p>  }else{</p>

<pre><code>var token = response.id;
form.append($('&lt;input type="hidden" name="stripeToken" /&gt;').val(token));
form.get(0).submit();
</code></pre>

<p>  }
};
```</p>

<p>Next we define the event handler for when the payment form is submitted. This calls the <code>createToken</code> method which requires the payment form and the response handler as its arguments. Don&rsquo;t forget to return <code>false</code> so the form doesn&rsquo;t get submitted. The response handler will be the one which will trigger the submit if the response doesn&rsquo;t have any errors:</p>

<p>```javascript
$(function(){
  $(&lsquo;#payment-form&rsquo;).submit(function(event) {</p>

<pre><code>var form = $(this);
form.find('button').prop('disabled', true);

Stripe.card.createToken(form, processStripeResponse);

return false;
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>On the back-end we can just use the previous code and use the custom fields that we added. Note that the <code>stripeToken</code> field stays the same. We don&rsquo;t need to pass the card number, security code and expiration date:</p>

<p>```php
&lt;?php
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>\Stripe\Stripe::setApiKey(&lsquo;sk_test_xxxxxxxxxxxxxx&rsquo;);</p>

<p>$token = $_POST[&lsquo;stripeToken&rsquo;];</p>

<p>$email = $<em>POST[&lsquo;email&rsquo;];
$name = $</em>POST[&lsquo;name&rsquo;];</p>

<p>try {</p>

<pre><code>$charge = \Stripe\Charge::create(array(
  "amount" =&gt; 1000, 
  "currency" =&gt; "usd",
  "source" =&gt; $token,
  "description" =&gt; $email)
);

print_r($charge);
</code></pre>

<p>}catch(\Stripe\Error\Card $e){</p>

<pre><code>echo $e-&gt;getMessage();
</code></pre>

<p>}
?>
```</p>

<h3>Conclusion</h3>

<p>That&rsquo;s it! You&rsquo;ve learned how to interact with the Stripe API in order to easily process payments.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://stripe.com/docs">Stripe Docs</a></li>
<li><a href="https://stripe.com/docs/api?lang=php">Stripe API</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
